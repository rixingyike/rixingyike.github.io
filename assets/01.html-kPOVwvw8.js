import{_ as i,c as a,b as n,o as l}from"./app-L8hHt5zi.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>命名空间对于程序员来讲，应当不会陌生，几乎每写一行代码，就要用到一止一个命名空间。AS3默认大约打开了6个命名空间。</p><h2 id="_1-as3提供的常用的7个命名空间" tabindex="-1"><a class="header-anchor" href="#_1-as3提供的常用的7个命名空间"><span>1，AS3提供的常用的7个命名空间</span></a></h2><p>internal,private,protected,public,static,as3，前5个命名空间作为类属性访问控制说明，在AS3中 是默认打开的。最后一个命名空间as3，默认也是被打开的，一般很少显式用到它。flash_proxy命名空间在控制动态方法调用时很有用，默认它是关 闭的。</p><p>internal作为默认的命名空间，当程序员未显式使用访问控制说明时，它即被默认。</p><h2 id="_2-如何继承proxy实现匿名方法调用的控制" tabindex="-1"><a class="header-anchor" href="#_2-如何继承proxy实现匿名方法调用的控制"><span>2，如何继承Proxy实现匿名方法调用的控制</span></a></h2><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flash</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">display</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Sprite</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   * </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">author</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> LIYI </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">https://yishulun.com/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   * Email: 9830131@qq.com</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   */</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  public</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ProxyTest</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> extends</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Sprite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    public</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> function</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ProxyTest</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">() {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      super</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MyClass</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> = </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">new</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MyClass</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      trace</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">( </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hello</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&#39;sban&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) );</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // output: hello,sban</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flash</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">utils</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Proxy</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flash</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">utils</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">flash_proxy</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MyClass</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> extends</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Proxy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  use</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namespace</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flash_proxy</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	override</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> flash_proxy</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> function</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> callProperty</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parameters</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">):</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> QName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">).</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">localName</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> == </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&#39;hello&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        return</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;hello,&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> + </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">parameters</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">[0];</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> null</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例代码演示了如何标题问题。需要指出，如果使用FB编译，需要反选&quot;启用严格类型检查&quot;，否则编译不过。</p><h2 id="_3-如何自定义与使用命名空间" tabindex="-1"><a class="header-anchor" href="#_3-如何自定义与使用命名空间"><span>3，如何自定义与使用命名空间</span></a></h2><p>在单独一个文件中定义，一般位于*.core子包中：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sban</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">as3Expert</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> namespace</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> as3internal</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://yishulun.com/as3internal/2008</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>namespace是FP内部一个特殊的基元类型，它有一个URI值，如果程序员在定义时不指定，编译器将随意分配一个，尽管如此，你也不要让编译器帮你指定，因为在多数情况下你需要明确知道你定义的命名空间是什么。</p><p>namespace可以理解为值类型，只要URI值相同，便是相同的namespace。</p><p>使用自定义的namespace之前，先引入，然后使用use namespace关键字：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sban</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">as3Expert</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">core</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">as3internal</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">use</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> namespace</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> as3internal</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-包是什么" tabindex="-1"><a class="header-anchor" href="#_4-包是什么"><span>4，包是什么？</span></a></h2><p>在AS2中，包路径并不是以package单独定义的，它位于Class Name之前，可以理解为类名称的一部分，如下：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> flash</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">display</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">.</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">BitmapData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在AS3中，包路径虽然以package关键字单独定义，但也可以把它理解为类名称的一部分，package与命名空间没有任何关系。AS3使用package定义包路径，与在AS2中使用class定义prototype继承机制的类对象一样，仅是语法甜头。</p><h2 id="_5-命名空间的无处不在" tabindex="-1"><a class="header-anchor" href="#_5-命名空间的无处不在"><span>5，命名空间的无处不在</span></a></h2><p>在AS3中，名字并不是唯一的标识符。在AS3中，name的含义往往包括两个部分：命名空间与名称标识。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> : </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于上面这例简短的代码，它已经包括两个命名空间，这两个命名空间含于两个QName中。QName是FP中内部名称的一种，在小标题2中，我们可以看到它。一个QName包括两个值，一个localName，是代码字面值，另一个是命名空间的uri值。</p><p>在上例代码中，包括一个命名空间为public、localName为s的QName，及一个命名空间为public、localName为String的QName。</p><p>2010年5月</p>`,24)]))}const k=i(e,[["render",h],["__file","01.html.vue"]]),r=JSON.parse('{"path":"/posts/2010/01.html","title":"命名空间：如何控制未知方法的调用","lang":"zh-CN","frontmatter":{"sidebar":false,"createTime":"2010-05-01T00:00:00.000Z","tags":["AS3 Expert"],"title":"命名空间：如何控制未知方法的调用"},"headers":[],"readingTime":{"minutes":2.68,"words":803},"git":{"updatedTime":1740126700000,"contributors":[{"name":"LIYI","username":"LIYI","email":"9830131@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/LIYI?v=4","url":"https://github.com/LIYI"},{"name":"李艺","username":"李艺","email":"9830131@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/李艺?v=4","url":"https://github.com/李艺"}]},"filePathRelative":"posts/2010/01.md","categoryList":[{"id":"18958e","sort":10001,"name":"posts"},{"id":"45d8df","sort":10008,"name":"2010"}]}');export{k as comp,r as data};
