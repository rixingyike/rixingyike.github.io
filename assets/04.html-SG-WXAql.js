import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as n,o as g}from"./app-DS9_dmLP.js";const a="/assets/202120210327210608-CeZFxHBp.jpeg",r="/assets/202120210327210607-DeSOIUrP.png",o="/assets/21928-DeD0Df3B.jpeg",s="/assets/21931-CDft_qgM.png",p="/assets/21934-DOjwbyii.jpeg",c="/assets/21938-Bv3v1sXo.png",l="/assets/21945-6i2E14Lc.png",d="/assets/21943-DbJsN5-X.png",h="/assets/21958-jyf4F2t2.png",m="/assets/21962-Wj8SdOh8.png",f="/assets/21965-DHp0HNzY.png",u={};function b(w,e){return g(),t("div",null,e[0]||(e[0]=[n('<h1 id="小程序从0到1-第一次在windows机器上使用sim-go需要注意的问题总结" tabindex="-1"><a class="header-anchor" href="#小程序从0到1-第一次在windows机器上使用sim-go需要注意的问题总结"><span>小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结</span></a></h1><p>在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。</p><p>作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。</p><p>因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc编译器，因此有了这篇教程。</p><h2 id="_1-使用git-bash代替cmd" tabindex="-1"><a class="header-anchor" href="#_1-使用git-bash代替cmd"><span><strong>1，使用git bash代替cmd</strong></span></a></h2><p>windows读者按照书上第96页，第7.1.2小节“安装仓库管理工具git”的说明，完成了git的安装之后，就不要再使用系统自带的终端工具cmd了，要使用git bash。在任何目录空白处，右键单击，就可以看到“Git Bash Here”的菜单。</p><p>使用git bash代替cmd有哪些好处呢？</p><p>1）首先，cd更加方面</p><p>如果在当前的项目目录打开git bash，会直接定位到当前目录，免去了cd的麻烦。在git bash中，/c/代表c:/，/d/代替d:/，使用习惯是类linux的。</p><p>2）其次，避免将sim.go误判为文件</p><h2 id="_2-golang-org-x类库无法下载的问题" tabindex="-1"><a class="header-anchor" href="#_2-golang-org-x类库无法下载的问题"><span><strong>2，<a href="http://golang.org/x%E7%B1%BB%E5%BA%93%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">golang.org/x类库无法下载的问题</a></strong></span></a></h2><p>这是一个读者遇到的问题：</p><blockquote><p>C:\\Users\\Administrator&gt;go get <a href="http://github.com/rixingyike/sim.go" target="_blank" rel="noopener noreferrer">github.com/rixingyike/sim.go</a> package <a href="http://golang.org/x/net/context:" target="_blank" rel="noopener noreferrer">golang.org/x/net/context:</a> unrecognized import path &quot;<a href="http://golang.org/x/net/context" target="_blank" rel="noopener noreferrer">golang.org/x/net/context</a>&quot; (https fetch: Get <a href="https://golang.org/x/net/context?go-get=1:" target="_blank" rel="noopener noreferrer">https://golang.org/x/net/context?go-get=1:</a> dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.)</p></blockquote><p>因为被墙，国内没有办法直接下载这个Google官方的类库。解决方法：</p><p>1）手动下载x类库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git clone https://github.com/rixingyike/golang.org-x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）将clone下来的x目录放至$GOPATH/src/golang.org目录下</p><p>解决了上述问题之后，别忘记再次运行“go get <a href="http://github.com/rixingyike/sim.go%E2%80%9D" target="_blank" rel="noopener noreferrer">github.com/rixingyike/sim.go”</a></p><h2 id="_3-如何找到-gopath-src-golang-org目录" tabindex="-1"><a class="header-anchor" href="#_3-如何找到-gopath-src-golang-org目录"><span><strong>3，如何找到$GOPATH/src/golang.org目录？</strong></span></a></h2><p>在终端中执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go env</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看GOPATH所在的目录</p><figure><img src="'+a+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>在windows上cmd中执行go env，可能输出是这样的：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png" alt="image-20210327210802847" tabindex="0" loading="lazy"><figcaption>image-20210327210802847</figcaption></figure><p>如果没有在src目录下找到golang.org目录，新建一个。</p><h2 id="_4-安装gin工具" tabindex="-1"><a class="header-anchor" href="#_4-安装gin工具"><span><strong>4，安装gin工具</strong></span></a></h2><p>正常情况下，启动服务端后，在浏览器访问localhost:4000/hi，会看到文本的输出。</p><p>这是一位读者看到的：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215316.png" alt="image-20210327215315987" tabindex="0" loading="lazy"><figcaption>image-20210327215315987</figcaption></figure><p>服务尚未启动。需要检查是否在当前项目的后端目录下，执行了debug.sh脚本。</p><p>如果执行debug.sh脚本，终端未被阻塞，可能脚本未执行成功。此时在终端里输入：</p><p>gin</p><p>查看有没有输出。如果输出：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215449.png" alt="image-20210327215449058" tabindex="0" loading="lazy"><figcaption>image-20210327215449058</figcaption></figure><p>则说明gin尚未安装成功。如果已经按书上第96页的步骤，安装了gin工具。出现这种问题，是因为没有把GOPATH/bin目录添加进windows系统变量PATH中。在windows机器上，右键单击“计算机”，选择“属性”-&gt;“高级系统设置”-&gt;“系统变量”，在当前用户下找到PATH变量，在尾部添加目录。</p><p>安装并设置环境后，再次执行gin指令，如果输出：</p><figure><img src="'+r+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>说明安装成功了。</p><h2 id="_5-如何更新sim-go" tabindex="-1"><a class="header-anchor" href="#_5-如何更新sim-go"><span><strong>5，如何更新sim.go</strong></span></a></h2><p>go get -u <a href="http://github.com/rixingyike/sim.go" target="_blank" rel="noopener noreferrer">github.com/rixingyike/sim.go</a></p><p>使用以上脚本更新sim.go类库，如果出现了以下输出：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215527.png" alt="image-20210327215527375" tabindex="0" loading="lazy"><figcaption>image-20210327215527375</figcaption></figure><p>不用管它，不影响继续征程。</p><h2 id="_6-在windows10上安装gcc" tabindex="-1"><a class="header-anchor" href="#_6-在windows10上安装gcc"><span><strong>6，在windows10上安装gcc</strong></span></a></h2><p>启动服务后，访问<a href="http://localhost:4000/hi%EF%BC%8C%E6%9C%89%E8%AF%BB%E8%80%85%E9%81%87%E5%88%B0%E8%BF%99%E6%A0%B7%E7%9A%84%E9%94%99%E8%AF%AF%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:4000/hi，有读者遇到这样的错误：</a></p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215605004" tabindex="0" loading="lazy"><figcaption>image-20210327215605004</figcaption></figure><p>这是因为没有安装gcc编译器。win10解决方法：</p><p>1）去<a href="https://cygwin.com/install.html%EF%BC%8C%E4%B8%8B%E8%BD%BDsetup-x86_64.exe" target="_blank" rel="noopener noreferrer">https://cygwin.com/install.html，下载setup-x86_64.exe</a></p><p>2，下载后，选择网络安装。等列表加载后，在顶部的搜索框里输入gcc。</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215618869" tabindex="0" loading="lazy"><figcaption>image-20210327215618869</figcaption></figure><p>在Devel这一组下选择gcc-g++:</p><figure><img src="'+o+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>往后就一路默认安装。</p><p>完成安装后，在终端内输入gcc，会看到有内容输出。</p><p>至于下载时选择哪个镜像地址：</p><figure><img src="'+s+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>一般选择前面的，下载会比较快。</p><p>gcc安装后，在git <a href="http://xn--bashdebug-on3o469l64vrv0gy11a.sh" target="_blank" rel="noopener noreferrer">bash里再次执行debug.sh</a>（sh文件在windows系统的git bash里也是认的）。输出像这个样子：</p><figure><img src="'+p+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>浏览器访问<a href="http://localhost:4000/hi%EF%BC%8C%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:4000/hi，是这样的：</a></p><figure><img src="'+c+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>作者用win10作了测试，以上安装gcc的流程可以跑通。</p><h2 id="_7-在win7系统上安装gcc" tabindex="-1"><a class="header-anchor" href="#_7-在win7系统上安装gcc"><span><strong>7，在win7系统上安装gcc</strong></span></a></h2><figure><img src="'+l+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>如果是win7 32位系统，按照上面的方法安装，可能会出现以下问题：</p><figure><img src="'+d+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>这是一位读者遇到的问题，作者也是第一次遇到。为了解决该问题，作者请读者在电脑上安装了远程工具teamviewer：<a href="https://www.teamviewer.com/zhCN/" target="_blank" rel="noopener noreferrer">https://www.teamviewer.com/zhCN/</a></p><p>作者在这位读者的电脑上进行远程操作。解决方法是：</p><p>1）首先，将系统变量里的cygwin去掉</p><p>2）然后，如果是win7 32位系统，去这里<a href="https://sourceforge.net/projects/mingw/%EF%BC%8C%E4%B8%8B%E8%BD%BDMinimalist" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/mingw/，下载Minimalist</a> GNU for Windows，并安装之；如果是win7 64系统，去这里<a href="https://sourceforge.net/projects/mingw-w64%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%B9%B6%E5%AE%89%E8%A3%85%E3%80%82" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/mingw-w64，下载最新版本并安装。</a></p><p>3）安装以后，仍然是类似的方法，选择gcc-g++package安装</p><figure><img src="'+h+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>安装方法是选择后，再选择菜单里的apply change。选择后如下所示：</p><figure><img src="'+m+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>在终端里输入gcc --version，正常的输出：</p><figure><img src="'+f+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure>',77)]))}const k=i(u,[["render",b],["__file","04.html.vue"]]),y=JSON.parse('{"path":"/posts/2018/04.html","title":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结","lang":"zh-CN","frontmatter":{"tags":["小程序从0到1"],"sidebar":false,"date":"2018-01-25T00:00:00.000Z","description":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结 在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。 作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。 因为windows系统默认不安装gcc，而在sim....","head":[["meta",{"property":"og:url","content":"https://yishulun.com/posts/2018/04.html"}],["meta",{"property":"og:site_name","content":"艺述论"}],["meta",{"property":"og:title","content":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结"}],["meta",{"property":"og:description","content":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结 在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。 作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。 因为windows系统默认不安装gcc，而在sim...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T15:36:59.000Z"}],["meta",{"property":"article:tag","content":"小程序从0到1"}],["meta",{"property":"article:published_time","content":"2018-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-21T15:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215316.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215449.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215527.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png\\"],\\"datePublished\\":\\"2018-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-21T15:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李艺\\",\\"url\\":\\"https://yishulun.com\\"}]}"]]},"headers":[{"level":2,"title":"1，使用git bash代替cmd","slug":"_1-使用git-bash代替cmd","link":"#_1-使用git-bash代替cmd","children":[]},{"level":2,"title":"2，golang.org/x类库无法下载的问题","slug":"_2-golang-org-x类库无法下载的问题","link":"#_2-golang-org-x类库无法下载的问题","children":[]},{"level":2,"title":"3，如何找到$GOPATH/src/golang.org目录？","slug":"_3-如何找到-gopath-src-golang-org目录","link":"#_3-如何找到-gopath-src-golang-org目录","children":[]},{"level":2,"title":"4，安装gin工具","slug":"_4-安装gin工具","link":"#_4-安装gin工具","children":[]},{"level":2,"title":"5，如何更新sim.go","slug":"_5-如何更新sim-go","link":"#_5-如何更新sim-go","children":[]},{"level":2,"title":"6，在windows10上安装gcc","slug":"_6-在windows10上安装gcc","link":"#_6-在windows10上安装gcc","children":[]},{"level":2,"title":"7，在win7系统上安装gcc","slug":"_7-在win7系统上安装gcc","link":"#_7-在win7系统上安装gcc","children":[]}],"git":{"createdTime":1671674770000,"updatedTime":1695310619000,"contributors":[{"name":"LIYI","username":"LIYI","email":"9830131@qq.com","commits":5,"url":"https://github.com/LIYI"}]},"readingTime":{"minutes":4.38,"words":1313},"filePathRelative":"posts/2018/04.md","localizedDate":"2018年1月25日","excerpt":"\\n<p>在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。</p>\\n<p>作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。</p>\\n<p>因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc编译器，因此有了这篇教程。</p>\\n<h2><strong>1，使用git bash代替cmd</strong></h2>\\n<p>windows读者按照书上第96页，第7.1.2小节“安装仓库管理工具git”的说明，完成了git的安装之后，就不要再使用系统自带的终端工具cmd了，要使用git bash。在任何目录空白处，右键单击，就可以看到“Git Bash Here”的菜单。</p>","autoDesc":true}');export{k as comp,y as data};
