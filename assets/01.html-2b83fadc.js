const n=JSON.parse('{"key":"v-3fdaaab8","path":"/posts/2008/01.html","title":"动态语言的基石之函数闭包","lang":"zh-CN","frontmatter":{"sidebar":false,"date":"2008-05-01T00:00:00.000Z","tag":["AS3 Expert"],"description":"动态语言的基石之函数闭包 闭包(Closure)是函数(或方法)及其执行环境的组合体，它不仅包括函数(或方法)本身，也包括函数(或方法)运行时的上下文词汇环境。闭包是所有动态语言的基石，闭包实现了函数(或方法)可以作为参数传递给函数(或方法)。 1，用一个代码实验例示闭包概念 在AS3中，共种三种闭包： 1）函数闭包(Function Closure) 2）方法闭包(Method Closure) 3）类闭包(Class Closure) public class Closure extends Sprite { public function Closure() { super(); init(); } \\tprivate var author :String = \\"sban\\"; \\tprivate var onMouseClick2 :Function = function(e :MouseEvent) : void { \\t\\ttrace(\\"author:\\" + author, \\"this:\\" + this);//author:undefined this:[object global] \\t}; \\tprivate function init() :void { \\t\\tvar onMouseClick1 : Function = function(e :MouseEvent) : void { \\t\\t\\ttrace(\\"author:\\" + author, \\"this:\\" + this);//author:sban this:[object global] \\t\\t}; \\t\\tthis.stage.addEventListener(MouseEvent.CLICK, onMouseClick2); \\t} \\tprivate function onMouseClick(e :MouseEvent) :void { \\t\\ttrace(\\"author:\\" + author, \\"this:\\" + this);//author:sban this:[object Closure] \\t} }","head":[["meta",{"property":"og:url","content":"https://yishulun.com/posts/2008/01.html"}],["meta",{"property":"og:site_name","content":"艺述论博客"}],["meta",{"property":"og:title","content":"动态语言的基石之函数闭包"}],["meta",{"property":"og:description","content":"动态语言的基石之函数闭包 闭包(Closure)是函数(或方法)及其执行环境的组合体，它不仅包括函数(或方法)本身，也包括函数(或方法)运行时的上下文词汇环境。闭包是所有动态语言的基石，闭包实现了函数(或方法)可以作为参数传递给函数(或方法)。 1，用一个代码实验例示闭包概念 在AS3中，共种三种闭包： 1）函数闭包(Function Closure) 2）方法闭包(Method Closure) 3）类闭包(Class Closure) public class Closure extends Sprite { public function Closure() { super(); init(); } \\tprivate var author :String = \\"sban\\"; \\tprivate var onMouseClick2 :Function = function(e :MouseEvent) : void { \\t\\ttrace(\\"author:\\" + author, \\"this:\\" + this);//author:undefined this:[object global] \\t}; \\tprivate function init() :void { \\t\\tvar onMouseClick1 : Function = function(e :MouseEvent) : void { \\t\\t\\ttrace(\\"author:\\" + author, \\"this:\\" + this);//author:sban this:[object global] \\t\\t}; \\t\\tthis.stage.addEventListener(MouseEvent.CLICK, onMouseClick2); \\t} \\tprivate function onMouseClick(e :MouseEvent) :void { \\t\\ttrace(\\"author:\\" + author, \\"this:\\" + this);//author:sban this:[object Closure] \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-06T13:48:40.000Z"}],["meta",{"property":"article:author","content":"LIYI"}],["meta",{"property":"article:tag","content":"AS3 Expert"}],["meta",{"property":"article:published_time","content":"2008-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-06T13:48:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态语言的基石之函数闭包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2008-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-06T13:48:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LIYI\\",\\"url\\":\\"https://yishulun.com/\\"}]}"]]},"headers":[{"level":2,"title":"1，用一个代码实验例示闭包概念","slug":"_1-用一个代码实验例示闭包概念","link":"#_1-用一个代码实验例示闭包概念","children":[{"level":3,"title":"2，三类闭包的区分","slug":"_2-三类闭包的区分","link":"#_2-三类闭包的区分","children":[]},{"level":3,"title":"3，改变函数闭包的this参数的一种情况","slug":"_3-改变函数闭包的this参数的一种情况","link":"#_3-改变函数闭包的this参数的一种情况","children":[]},{"level":3,"title":"4，为什么在onMouseClick2中author的输出是undefined？","slug":"_4-为什么在onmouseclick2中author的输出是undefined","link":"#_4-为什么在onmouseclick2中author的输出是undefined","children":[]}]}],"git":{"createdTime":1671674770000,"updatedTime":1691329720000,"contributors":[{"name":"LIYI","email":"9830131@qq.com","commits":5}]},"readingTime":{"minutes":4.38,"words":1314},"filePathRelative":"posts/2008/01.md","localizedDate":"2008年5月1日","excerpt":"<h1> 动态语言的基石之函数闭包</h1>\\n<p>闭包(Closure)是函数(或方法)及其执行环境的组合体，它不仅包括函数(或方法)本身，也包括函数(或方法)运行时的上下文词汇环境。闭包是所有动态语言的基石，闭包实现了函数(或方法)可以作为参数传递给函数(或方法)。</p>\\n<h2> 1，用一个代码实验例示闭包概念</h2>\\n<p>在AS3中，共种三种闭包：</p>\\n<p>1）函数闭包(Function Closure)</p>\\n<p>2）方法闭包(Method Closure)</p>\\n<p>3）类闭包(Class Closure)</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Closure</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Sprite</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Closure</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">var</span> <span class=\\"token literal-property property\\">author</span> <span class=\\"token operator\\">:</span>String <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"sban\\"</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">var</span> <span class=\\"token literal-property property\\">onMouseClick2</span> <span class=\\"token operator\\">:</span><span class=\\"token function-variable function\\">Function</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">e</span> <span class=\\"token operator\\">:</span>MouseEvent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">trace</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"author:\\"</span> <span class=\\"token operator\\">+</span> author<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"this:\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//author:undefined this:[object global]</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span><span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">var</span> <span class=\\"token literal-property property\\">onMouseClick1</span> <span class=\\"token operator\\">:</span> <span class=\\"token function-variable function\\">Function</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">e</span> <span class=\\"token operator\\">:</span>MouseEvent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token function\\">trace</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"author:\\"</span> <span class=\\"token operator\\">+</span> author<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"this:\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//author:sban this:[object global]</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>stage<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span>MouseEvent<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CLICK</span><span class=\\"token punctuation\\">,</span> onMouseClick2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">onMouseClick</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">e</span> <span class=\\"token operator\\">:</span>MouseEvent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span><span class=\\"token keyword\\">void</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token function\\">trace</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"author:\\"</span> <span class=\\"token operator\\">+</span> author<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"this:\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//author:sban this:[object Closure]</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"LIYI","license":"CC BY-NC-ND 4.0"},"autoDesc":true}');export{n as data};
