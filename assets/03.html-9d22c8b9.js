import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as s,d as n,a as t,f as a}from"./app-2d091527.js";const i={},u=a('<h1 id="as3中的八种基元类型" tabindex="-1"><a class="header-anchor" href="#as3中的八种基元类型" aria-hidden="true">#</a> AS3中的八种基元类型</h1><h2 id="一-八种基元类型" tabindex="-1"><a class="header-anchor" href="#一-八种基元类型" aria-hidden="true">#</a> 一，八种基元类型</h2><p>何谓基元类型？即是一门语言中最基本基本的数据类型，其它数据类型均是以此为基础定义的，并且可以作为变量注释类型或函数返回类型。在AS3中，共有八种基元类型：</p><p>[此有图，但已被岁月冲走]</p><p>1）Boolean</p><p>布尔类型，仅有true与false两个值。默认值为false。特殊值NaN,undefined,null,字符串空值(”),0转换为Boolean后均为false。</p><p>2）Number</p><p>默认值为NaN。Number为64位的浮点数值类型，按IEEE-754标准设计。在IEEE-754标准中，一个符号位，11个指数位，52位有效数字位。Number仅有52位有效数位，为什么可以表示最大为253的精度呢？</p><p>3）uint</p><p>默认值为0。unit表示32位的无符号整数。uint的正数范围比int大，但它在多数场合并不适合代替int。</p><p>4）int</p><p>默认值也是0。int应该是AS3中使用最广泛的数值类型。</p><p>5）String</p><p>默认值为null。C#中有一个isNullOrEmpty方法，在AS3中，字符串null与空值，转换为Boolean，均是false。</p><p>6）*(任意类型)</p><p>它有一个特殊的值，undefined。在变量类型注释或函数返回注释中，使用*表示，它可以是任意子实际类型。</p><p>7）Object</p><p>在AS3中，一切皆是Object，所有Flash Player定义的，AS3中定义的对象均继承于它。默认值为null。</p><p>8）void(无类型)</p><p>Adobe官方在《flash as3 programming》中对此类型有如下描述：</p><blockquote><p>void 数据类型仅包含一个值：undefined。</p></blockquote><p>这个描述是不恰切的，undefined作为AS3语言中一个特殊的值，是所有原本要定义却未定义的变量的默认值，而不是void类型的默认值。void作为唯一一个仅能作为函数返回类型注释的基元类型，既然表示‘无’，便应该没有任何值。</p><p>void仅能作为函数返回类型注释，这使它位列八种基元类型的理由不是那么充分，但除此之外，我们不知道还能把它归到哪一类别里。</p><h2 id="二-number与int-uint的性能对比" tabindex="-1"><a class="header-anchor" href="#二-number与int-uint的性能对比" aria-hidden="true">#</a> 二，Number与int, uint的性能对比</h2>',24),r={href:"https://yishulun.com/",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">IntegerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">var</span> <span class="token literal-property property">t1</span><span class="token operator">:</span>Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">j</span><span class="token operator">:</span>int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> <span class="token literal-property property">t2</span><span class="token operator">:</span>Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Number:&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1373</span>

	t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">k</span><span class="token operator">:</span>int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//</span>
	<span class="token punctuation">}</span>
	t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;int:&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1297</span>

	t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">n</span><span class="token operator">:</span>uint<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//</span>
	<span class="token punctuation">}</span>
	t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;uint:&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2624</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码实验，分别使用Number，int，uint进行一亿次的递增与大小判断，实验结果表明，int的效率最高，Number与之相差无几，uint的效率最低，几乎比int、Number慢两倍左右。</p><p>但是这个实验的结果是值得怀疑的，因为AS3的编译器有可能对三个作用类似的for作了优化。使用SWFScan扫描swf文件，反编译出来的源码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">IntegerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> <span class="token literal-property property">loc0</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> <span class="token literal-property property">loc1</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>loc1 <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    loc1 <span class="token operator">=</span> loc1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> <span class="token literal-property property">loc2</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	loc0 <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> <span class="token literal-property property">loc3</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>loc3 <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    loc3 <span class="token operator">=</span> loc3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	loc2 <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	loc0 <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> <span class="token literal-property property">loc4</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>loc4 <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	    loc4 <span class="token operator">=</span> loc4 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	loc2 <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从反编译出来的源码看，三个for循环的代码是一样的。当然这时候，我们假定反编译工具没有问题。</p><p>可能我们需要改进一下这个实验：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token literal-property property">n1</span> <span class="token operator">:</span>Number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">t1</span><span class="token operator">:</span>Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">j</span><span class="token operator">:</span>int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	n1 <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1.0</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token literal-property property">t2</span><span class="token operator">:</span>Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trace</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> <span class="token string">&quot;Number:&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//99999999 Number: 17889</span>

<span class="token keyword">var</span> <span class="token literal-property property">n2</span> <span class="token operator">:</span>int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">k</span><span class="token operator">:</span>int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	n2 <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trace</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> <span class="token string">&quot;int:&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//99999999 int: 19729</span>

<span class="token keyword">var</span> <span class="token literal-property property">n3</span> <span class="token operator">:</span>uint <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">n</span><span class="token operator">:</span>uint<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	n3 <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trace</span><span class="token punctuation">(</span>n3<span class="token punctuation">,</span> <span class="token string">&quot;uint:&quot;</span><span class="token punctuation">,</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//99999999 uint: 21455</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我修改的依据是：</p><p>1）针对同一个问题，用不同方法或原则，实现3个并行方案</p><p>2）3个方案的输出结果相同</p><p>从实验结果来看，Number的效率最高，int随之，uint最慢。这个结果虽然基于实验，却不能令人信服。</p><p>推测：在AS3中，所有内部运算均是以Number进行的，这种推测可以解释上述反编译代码相同的现象。如果推测正确的话，使用不同数值类型的效率差异是由于类型转换造成的，而不是由于本身运算造成的，因运算过程中的类型转换而耗费的CPU应该远高于运算本身，如果Adobe为了避免在运算过程中的频繁类型转换而在运算式内部默认使用Number进行运算也是完全符合逻辑的。</p>`,12),d={href:"https://yishulun.com/",target:"_blank",rel:"noopener noreferrer"},m=a('<h2 id="三-数值类型运用最佳实践" tabindex="-1"><a class="header-anchor" href="#三-数值类型运用最佳实践" aria-hidden="true">#</a> 三，数值类型运用最佳实践</h2><p>1）在for循环中使用int类型</p><p>2）定义颜色变量时，使用uint</p><p>3）定义枚举变量时，使用uint</p><p>4）动态改变显示对象的x,y属性时，使用int</p><p>5）在进行复杂的算术运算时，各算术因子均使用Number</p><p>6）尽要不用使用Number用在if中作大小，等于判断</p><h2 id="四-哪些是值类型-哪些是引用类型" tabindex="-1"><a class="header-anchor" href="#四-哪些是值类型-哪些是引用类型" aria-hidden="true">#</a> 四，哪些是值类型，哪些是引用类型？</h2><p>在AS3中，虽然所有数据类型均继承于Object，也就是说它们均具有Object拥有的属性和方法，Boolean也不例外，但是除Object以外的所有基元类型均是值类型，当软件工作者创建一个值类型变量时，并未创建一个对象，AS3在内部把它们作为值来对待，这减少了创建对象的开销，这使基元类型的使用效率更高。</p><p>即使显式调用值基元类型的构造函数，如new String(&quot;liyi&quot;)、new Number(123)，也并未实际创建对象。</p><p>所有基元类型均是值类型。Object并不一定是引用类型，近一步判定取决于它的实际数据。Array，XML，XMLList，Function，Event，Error，Class，DisplayObject等均是引用对象。</p><p>在AS3中，明确哪些对象是引用类型，具有十分重要的意义，当你开发十万行代码以上的项目时，便会认同我的说法。</p><h2 id="五-变量的类型并不取决于变量类型注释" tabindex="-1"><a class="header-anchor" href="#五-变量的类型并不取决于变量类型注释" aria-hidden="true">#</a> 五，变量的类型并不取决于变量类型注释</h2>',13),v={href:"http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&file=00000092.html",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">I</span><span class="token string">&#39;ve been trying to make an example that displays the difference between a shallow and deep copy. So far I haven&#39;</span>t been able to find any difference between using the slice<span class="token operator">/</span>concat methods and the clone <span class="token keyword">function</span> provided <span class="token keyword">in</span> <span class="token keyword">this</span> section<span class="token punctuation">.</span> Can someone take a look at my code and tell me what <span class="token constant">I</span>&#39;m doing wrong<span class="token operator">?</span>

<span class="token comment">//-- CLONING ARRAYS --\\\\ </span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;**Cloning Arrays **&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">proto</span><span class="token operator">:</span>Object <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">original</span><span class="token operator">:</span>Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

original <span class="token operator">=</span> <span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">shallow</span><span class="token operator">:</span>Array <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">deep</span><span class="token operator">:</span>Array <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tDeep copy = &quot;</span> <span class="token operator">+</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true </span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tShallow copy = &quot;</span> <span class="token operator">+</span> shallow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true </span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n***VALUE CHANGED***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

proto <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// object value is changed </span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tDeep copy = &quot;</span> <span class="token operator">+</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true </span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tShallow copy = &quot;</span> <span class="token operator">+</span> shallow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true &lt;-- should be false ?? </span>

<span class="token comment">// Clone function </span>
<span class="token keyword">import</span> flash<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ByteArray<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">source</span><span class="token operator">:</span>Object</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token comment">// function for deep copy {</span>
  <span class="token keyword">var</span> <span class="token literal-property property">myBA</span><span class="token operator">:</span>ByteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  myBA<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  myBA<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>myBA<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
maybe <span class="token constant">I</span>&#39;m just confused <span class="token keyword">as</span> to what deep and shallow copies are any explanations would be great thanks<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>他使用Adobe提供的ByteArray clone方法对数组进行深拷贝，当他改变proto的值为false时，却发现shallow[0]并没有改变。在这里，proto的变量注释虽为Object，但它其实并不是Object，而是Boolean，proto的真实类型取决于它真实的值，由于他以布尔值true实例化proto，所以proto论为了Boolean类型。在AS3中，Boolean并非引用类型。</p><p>把这位英雄的代码稍作两处改动，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//-- CLONING ARRAYS --\\\\</span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;**Cloning Arrays **&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">proto</span><span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">original</span><span class="token operator">:</span>Array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
original <span class="token operator">=</span> <span class="token punctuation">[</span>proto<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">shallow</span><span class="token operator">:</span>Array <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">deep</span><span class="token operator">:</span>Array <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tDeep copy = &quot;</span> <span class="token operator">+</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true</span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tShallow copy = &quot;</span> <span class="token operator">+</span> shallow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true</span>

<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n***VALUE CHANGED***&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
proto<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// object value is changed</span>

<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tDeep copy = &quot;</span> <span class="token operator">+</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: true</span>
<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;\\tShallow copy = &quot;</span> <span class="token operator">+</span> shallow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样由于Array是引用类型，所以输出便如期许了。</p><h2 id="六-问题" tabindex="-1"><a class="header-anchor" href="#六-问题" aria-hidden="true">#</a> 六，问题</h2><p>1）Number仅有52位有效数位，为什么可以表示最大为253的精度呢？</p><p>2）值基元类型如Number，String等，既然是值，为什么又有Object的方法呢？在AVM内部是如何实现的？</p><p>3）为什么定义颜色值使用uint，而不使用int或Number？</p><p>4）为什么不能使用Number动态改变显示对象的坐标？</p><p>2008年5月</p>`,11);function y(w,f){const p=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("我辈非Adobe官方，仅能使用实验的方法。为了测试三个数值类型的运算性能，"),s("a",r,[n("作者"),t(p)]),n(" 设计了这样一个代码实验：")]),k,s("p",null,[n("在"),s("a",d,[n("作者"),t(p)]),n("之前，已经有不少前辈做过类似的数组类型效率代码实验，有兴趣的朋友可以Google一下，但他们的实验结果却不尽相同。所以，拿Number，int与uint进行效率实验是没有意义的，因为实验本身可能存在问题，或许三条起跑线并不一致，所以也无法评定最终结果。")]),m,s("p",null,[n("在AS3中，变量类型注释是给编译器用的，它并不能决定变量的真实类型。在"),s("a",v,[n("这里"),t(p)]),n("有位英雄写了这样一则评论：")]),b])}const A=e(i,[["render",y],["__file","03.html.vue"]]);export{A as default};
