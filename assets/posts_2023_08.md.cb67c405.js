import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.25d5caa7.js";const d=JSON.parse('{"title":"如何一键登陆或开机自动登录公共区域的 WIFI？","description":"","frontmatter":{"date":"2023-09-27T11:02:33.000Z","tags":["python"]},"headers":[],"relativePath":"posts/2023/08.md","filePath":"posts/2023/08.md"}'),l={name:"posts/2023/08.md"},o=p(`<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271143100.png" alt="auto wifi script"></p><p>一对情侣第一次来某酒店入住，男生给女友开了门，女友进来后，男生看到女友的电脑自动连接上了酒店的 wifi，男生脸上露出了不悦。</p><p>男生：你怎么知道这个 wifi 密码？</p><p>女友：我不知道，我的设备自动连接上了。</p><p>男生：那你之前来过这家酒店吗？</p><p>女友：没有啊，我第一次来。</p><p>男生：那你怎么知道密码？</p><p>女友：不知道，我手机自动连接上了。</p><p>男生：那你的电脑是不是被别人破解了？</p><p>女友：没有啊，我一向很小心的。</p><p>男生：那你怎么知道密码？</p><p>女友：我不知道，我就这样自动连接上了。</p><p>男生：那你是不是……</p><p>女友：对了，我以前在“艺述论”公号回复过 10005，下载过一个自动登录 wifi 的小脚本。</p><h1 id="如何一键登陆或开机自动登录公共区域的-wifi" tabindex="-1">如何一键登陆或开机自动登录公共区域的 WIFI？ <a class="header-anchor" href="#如何一键登陆或开机自动登录公共区域的-wifi" aria-label="Permalink to &quot;如何一键登陆或开机自动登录公共区域的 WIFI？&quot;">​</a></h1><p>我们都知道，wifi 有自动连接的功能，只要设备出现在 wifi 覆盖的区域之内，wifi 即会自动连接。这个自动登陆的机制在人数少的情况下完全没有问题，但在人多的公共场合，可能便会导致路由器因为连接负荷过大而产生信号资源浪费（每个路由器可供连接的设备都是有限的）。为此，在大型公共场合，例如校园、图书馆等，一般用户在自动无密码连接上 wifi 以后，还会被要求输入用户名密码之类，登录之后才可以开启真正的网络连接。同时呢，使用实名帐号登录，也是信息监控的必要。</p><p>对于个人来讲，例如学生，每次都输入帐号密码是十分麻烦的。有些手机在连接后可以记住帐号，单击一下就可以；有一些却不可以，每次都需要浪费几十秒钟手动输入。在电脑上，wifi 连接后，弹出的窗口往往还是一个没有地址栏，且不能使用开发者工具查看网络链接的祼窗口，想破解地址都不太容易。</p><p>那么，怎么实现一键登陆呢？</p><h2 id="_1-拿登录网关地址" tabindex="-1">1，拿登录网关地址 <a class="header-anchor" href="#_1-拿登录网关地址" aria-label="Permalink to &quot;1，拿登录网关地址&quot;">​</a></h2><p>第一步，我们需要先找到要登录的本地服务器地址。可以使用如下 bash 脚本，在登陆 wifi 前监听本机网络活动：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tcpdump</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;port 80 or port 443&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tcpdump</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;port 80 or port 443&#39;</span></span></code></pre></div><p>简单解释下这条指令：</p><ul><li><code>sudo</code>：以超级用户身份运行命令。</li><li><code>tcpdump</code>：网络流量捕获工具。</li><li><code>-A</code>：捕获所有数据包，包括数据包头和数据包内容。</li><li><code>-s 0</code>：捕获所有数据包，包括 IP 头和 TCP 头。</li><li><code>&#39;port 80 or port 443&#39;</code>：捕获 TCP 端口为 80 或 443 的数据包。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271110465.png" alt="tcpdump outputs"></p><p>这个指令输出的信息量很大，但通过先拷贝出来再搜索的方式，很容易可以拿到一个类似于“<a href="http://192.168.2.253:8080/api/TZTSG/wifi-auth%E2%80%9D%E8%BF%99%E6%A0%B7%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82%E6%88%91%E4%BB%AC%E7%8C%9C%E6%B5%8B%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%BE%BF%E6%98%AF%E5%85%AC%E5%85%B1WIFI%E7%9A%84%E7%99%BB%E9%99%86%E5%9C%B0%E5%9D%80%E3%80%82%E5%9C%A8%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91%E4%B9%8B%E5%89%8D%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E4%B8%80%E5%AE%9A%E6%98%AF%E4%B8%80%E4%B8%AA%E5%86%85%E7%BD%91%E5%9C%B0%E5%9D%80%EF%BC%8C%E8%BF%99%E6%A0%B7%E7%9A%84%E5%9C%B0%E5%9D%80%E4%B8%80%E8%88%AC%E9%83%BD%E6%98%AF%E4%BB%A5192.168%E6%88%9610.3%E8%BF%99%E6%A0%B7%E7%9A%84IP%E7%AB%AF%E5%BC%80%E5%A4%B4%E7%9A%84%E3%80%82" target="_blank" rel="noreferrer">http://192.168.2.253:8080/api/TZTSG/wifi-auth”这样的地址。我们猜测这个地址，便是公共WIFI的登陆地址。在连接外网之前可以访问的网络地址一定是一个内网地址，这样的地址一般都是以192.168或10.3这样的IP端开头的。</a></p><p>拿到这个地址以后，按说便可以将它保存到浏览器的收藏夹里，下次连接 wifi 的时候，单击一下就可以登录了。收藏的链接在浏览器内会自动记住用户名与密码，不会要求重复输入，这样已经很方便了。</p><p>但，我们是不是还可以更方便一些？</p><h2 id="_2-自动发送登录请求" tabindex="-1">2，自动发送登录请求 <a class="header-anchor" href="#_2-自动发送登录请求" aria-label="Permalink to &quot;2，自动发送登录请求&quot;">​</a></h2><p>第二步，我们谋划在本地发出一个网络请求。经过在开发者工具中查看网络请求的请求头，我们发现此类请求真是太简单了，是一个 GET 请求，用户名与密码直接拼接在了 URL 中，连加密都没有加密。</p><p>我们在本地创建一个脚本文件 login_wifi.py，主要代码如下所示：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义常量</span></span>
<span class="line"><span style="color:#79B8FF;">BASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://192.168.2.253:8080&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">CODE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;001300095176&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">PWD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;830918&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connect_wifi</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 设置请求参数</span></span>
<span class="line"><span style="color:#E1E4E8;">  url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/api/tztsg/wifi-auth&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  params </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">CODE</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;pwd&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">PWD</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 设置防真请求信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;User-Agent&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Referer&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">BASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/wifiauth&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Dnt&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Accept&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json, text/plain, */*&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Accept-Encoding&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;gzip, deflate&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Accept-Language&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Connection&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;keep-alive&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;Cookie&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;_ga=GA1.1.1192614528.1695689014; username=&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">CODE</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;; password=&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">PWD</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;; rememberMe=true; _ga_GDWQY4XZV0=GS1.1.1695689014.1.1.1695689447.0.0.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.get(url, </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">params, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(response)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 处理响应</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> response.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;登录成功&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;登录失败&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义常量</span></span>
<span class="line"><span style="color:#005CC5;">BASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://192.168.2.253:8080&quot;</span></span>
<span class="line"><span style="color:#005CC5;">CODE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;001300095176&quot;</span></span>
<span class="line"><span style="color:#005CC5;">PWD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;830918&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect_wifi</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 设置请求参数</span></span>
<span class="line"><span style="color:#24292E;">  url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/api/tztsg/wifi-auth&quot;</span></span>
<span class="line"><span style="color:#24292E;">  params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;code&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">CODE</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;pwd&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">PWD</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 设置防真请求信息</span></span>
<span class="line"><span style="color:#24292E;">  headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;User-Agent&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Referer&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">BASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/wifiauth&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Dnt&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Accept&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json, text/plain, */*&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Accept-Encoding&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;gzip, deflate&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Accept-Language&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Connection&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;keep-alive&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;Cookie&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;_ga=GA1.1.1192614528.1695689014; username=&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">CODE</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;; password=&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">PWD</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;; rememberMe=true; _ga_GDWQY4XZV0=GS1.1.1695689014.1.1.1695689447.0.0.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 发送请求</span></span>
<span class="line"><span style="color:#24292E;">  response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.get(url, </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">params, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(response)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 处理响应</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> response.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;登录成功&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;登录失败&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>这个代码很简单，不再介绍了。</p><p>为了防止服务器识破我们是代码自动提交的，我们在请求时还在 headers 里面添加了许多防真调用的信息。我估计这些信息大多数情况下都是不需要的，从前面的把帐号信息明文接写在 url 中便可以看出来，这样的登录系统毫无技术架构上的安全考虑，其开发者是不可能想起来要检验网络请求的来源信息的。</p><h2 id="_3-生成-exe-二进制程序" tabindex="-1">3，生成 exe 二进制程序 <a class="header-anchor" href="#_3-生成-exe-二进制程序" aria-label="Permalink to &quot;3，生成 exe 二进制程序&quot;">​</a></h2><p>以非手动输入的方式一键发送登录请求，这个需求现在已经实现了。但有一个问题，py 脚本是明文的，帐号信息很容易暴露。</p><p>在第三步，我们准备将 py 脚本封装成一个 exe 二进制可执行程序文件，指令为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pyinstaller</span></span>
<span class="line"><span style="color:#B392F0;">pyinstaller</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-F</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">login_wifi.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pyinstaller</span></span>
<span class="line"><span style="color:#6F42C1;">pyinstaller</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-F</span><span style="color:#24292E;"> </span><span style="color:#032F62;">login_wifi.py</span></span></code></pre></div><p>第一行安装 pyinstaller，第二行使用它将 py 脚本包装成独立的二进制程序。</p><p>在 macOS 系统上，这个指令会生成一个拥有黑色图标的二进制文件，以后登录网络直接单击这个文件就可以了，运行后效果如下所示。帐号密码及地址都封装在了 exe 文件里，这样也便于信息保密。</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271127745.jpeg" alt="登录成功"></p><p>小工具写到这里，基本上已经可以使用了。但是，还能不能进一优化呢？我们能不能自动监测电脑是否连接上了目标网络，并且自动给它发送登录请求呢？</p><p>整个登录环节信息都是足备的，并不需要人类参与，在理论上这完全是可行的。</p><h2 id="_4-实现自动登录" tabindex="-1">4，实现自动登录 <a class="header-anchor" href="#_4-实现自动登录" aria-label="Permalink to &quot;4，实现自动登录&quot;">​</a></h2><p>在第四步，我们开始实现自动登录。</p><p>先介绍一下类库 pywifi，这是一个可以监听网络变化的工具类库，我们可以用它监听风络变化，例如连接上了某个网络等。我们使用以下指令安装它：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pywifi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pywifi</span></span></code></pre></div><p>从终端的返回结果告诉我们安装成功了。但如果我们在 macOS 系统下使用它，可能会遇到问题，当我们在 py 代码中使用它时，可能遇到一个 NotImplementedError 这样的错误。</p><p>这个错误是不正常的，但出现这个错误却是正常的。pywifi 库的功能可能未在我们的操作系统上完全实现，它只能只是在特定的操作系统或环境中完全实现了。</p><p>pywifi 如果不可用，我们还有其它选择，我们可以尝试使用 networksetup 命令来获取当前的 WiFi 连接状态，如下所示是一个示例脚本。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> subprocess</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">target_ssid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;TZTSG&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check_wifi_connection</span><span style="color:#E1E4E8;">(target_ssid):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> subprocess.run([</span><span style="color:#9ECBFF;">&#39;networksetup&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-getairportnetwork&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;en0&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">text</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">capture_output</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> target_ssid </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> result.stdout:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;Connected to </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">target_ssid</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Not connected&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># adjust polling interval as necessary</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> subprocess</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">target_ssid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;TZTSG&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check_wifi_connection</span><span style="color:#24292E;">(target_ssid):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> subprocess.run([</span><span style="color:#032F62;">&#39;networksetup&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-getairportnetwork&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;en0&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">text</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">capture_output</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> target_ssid </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> result.stdout:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;Connected to </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">target_ssid</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Not connected&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># adjust polling interval as necessary</span></span></code></pre></div><p>类库 subprocess 在你的电脑上如果没有，可能需要提前安装。这段代码很简单，没有必要做进一步的介绍了，它的主要功能就是在一个 while 循环里，不断调用系统指令 networksetup，检查当前的网络状态，如果发现连接上了目标 wifi，则退出循环。</p><p>下面我们稍微修改一下前面的 login_wifi 脚本，将其与新的 check_wifi_connection 函数结合在一起。然后再次导出 exe 文件，并将其添加进系统的启动列表里，当系统启动时（或者我们手动执行时），自动检查网络连接，一旦发现是目标网络需要登录，则自动登录之。</p><p>成功运行之后，截图如下所示。自此，整个开机自动登录公共 wifi 的小程序就写好了。</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271151852.jpeg" alt="自动监测并登录了"></p><p>在公众号“艺述论”回复 10005，可以下载完整的 py 脚本，对帐号信息稍作修改即可为你所用。</p>`,55),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
