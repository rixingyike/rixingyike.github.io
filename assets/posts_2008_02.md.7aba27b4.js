import{_ as s,o as a,c as l,V as n}from"./chunks/framework.b2940161.js";const i=JSON.parse('{"title":"像Ruby一样简易行码：使用Prototype扩展原生对象","description":"","frontmatter":{"sidebar":false,"date":"2008-05-01T00:00:00.000Z","tag":["AS3 Expert"]},"headers":[],"relativePath":"posts/2008/02.md","filePath":"posts/2008/02.md","lastUpdated":1691329720000}'),o={name:"posts/2008/02.md"},p=n(`<h1 id="像ruby一样简易行码-使用prototype扩展原生对象" tabindex="-1">像Ruby一样简易行码：使用Prototype扩展原生对象 <a class="header-anchor" href="#像ruby一样简易行码-使用prototype扩展原生对象" aria-label="Permalink to &quot;像Ruby一样简易行码：使用Prototype扩展原生对象&quot;">​</a></h1><p>AS3是基于ECMAScript标准的语言，Adobe团队在遵从此标准的同时，使其向Java靠拢具有Class-Base的特征，因此，AS3是一门很奇特的语言，它既像Javascript，又像Java（Java与Javascript是两门完全不同的语言）。</p><h2 id="_1-ruby的collect方法" tabindex="-1">1，Ruby的collect方法 <a class="header-anchor" href="#_1-ruby的collect方法" aria-label="Permalink to &quot;1，Ruby的collect方法&quot;">​</a></h2><p>Ruiby的行码简易，让很多程序员爱不释手。</p><div class="language-ruby"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/ruby</span></span>
<span class="line"><span style="color:#82AAFF;">puts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">].</span><span style="color:#A6ACCD;">collect</span><span style="color:#89DDFF;">{|</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上例Ruby代码把数组中的每一个元素的值乘以10，然后打印结果。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#F78C6C;">30</span></span>
<span class="line"><span style="color:#F78C6C;">40</span></span>
<span class="line"><span style="color:#F78C6C;">50</span></span></code></pre></div><h2 id="_2-在as3中实现collect方法" tabindex="-1">2，在AS3中实现collect方法 <a class="header-anchor" href="#_2-在as3中实现collect方法" aria-label="Permalink to &quot;2，在AS3中实现collect方法&quot;">​</a></h2><p>那么在AS3中，我们能否以类似的方法（collect）操作数组？答案是可以的。Array本身是动态、可继承对象，我们可以继承它，自己实现collect方法；除此之外，我们还可以使用Prototype扩展Array的API。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">collect</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Array</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">for</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">each</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">f</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPropertyIsEnumerable</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">collect</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">trace</span><span style="color:#A6ACCD;">( [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">collect</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">) )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// output: 10,20,30,40,50</span></span></code></pre></div><p>扩展Prototype实现collect方法，这种手段更加巧妙，但它从效率上讲，它逊于以继承的方式扩展Array。</p><h2 id="_3-其它对象如何扩展" tabindex="-1">3，其它对象如何扩展 <a class="header-anchor" href="#_3-其它对象如何扩展" aria-label="Permalink to &quot;3，其它对象如何扩展&quot;">​</a></h2><p>因为Array是非final对象，所以除了使用扩展原型(prototype)的方法之外，我们还可以使用继承的方法扩展其本身并不支持的API。但是，在AS3中的其它基本对象，例如基元类型String、Number、int等，它们是final对象，是不可被继承的，仅能使用prototype扩展。 因为Array是动态对象，所以直接在Array对象上调用collect方法，并不会引发编译报警，但对于非动态对象，如String、Number等，在调用时需转化为Object对象，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">minutes</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ago</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>或：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">* </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">minutes</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ago</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在AS3中，所有对象均基于Object，任何对象都具有prototype，即任何对象均可以使用原型扩展并不存在的API。</p><h2 id="_4-prototype扩展的弊端" tabindex="-1">4，Prototype扩展的弊端 <a class="header-anchor" href="#_4-prototype扩展的弊端" aria-label="Permalink to &quot;4，Prototype扩展的弊端&quot;">​</a></h2><p>方便在企业项目开发中并不是唯一考虑的因素，效率在多数情况下比之占有更大的比重。使用Prototype扩展至少有以下三个方面的弊端：</p><ul><li>1）屏蔽了编译时强类型检查，代码错误的机率升高，项目风险增大。</li><li>2）某些对象不得不作额外的类型转换，虽然这种转换并无性能的损耗，但却让你多敲了几个键盘，偏离了简易行码的本宗。</li><li>3）基于Prototype的继承与Class-Base的继承，在AVM中是两种完全不同的实现，Adobe团队在AVM2中正是为了解决Prototype的低效，才引入了Class-Base的机制，显然这种不被官方、社区推崇的方法并不适当在企业项目中应用。</li></ul><p>扩展阅读：Modifying Core Types in ActionScript 3 Using the Prototype Object</p><p>2008年5月</p>`,22),t=[p];function e(c,r,y,F,D,C){return a(),l("div",null,t)}const u=s(o,[["render",e]]);export{i as __pageData,u as default};
