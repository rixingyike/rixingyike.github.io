import{_ as i,c as e,b as a,o as t}from"./app-ChBADtzN.js";const n={};function p(h,s){return t(),e("div",null,s[0]||(s[0]=[a(`<p>目录 [TOC]</p><p>事件机制是AS3的核心功能之一，没有充分掌握事件机制的方方面面，就不能算是精通AS3语言。</p><h2 id="_1-as3事件机制的主要成员" tabindex="-1"><a class="header-anchor" href="#_1-as3事件机制的主要成员"><span>1，AS3事件机制的主要成员</span></a></h2><ul><li>IEventDispatcher：事件派发对象接口，定义了添加、派发、移除、是否监听指定事件、是否触发指定事件接口</li><li>EventDispatcher：事件派发对象接口的实现者，用户无法撇开EventDispatcher而自行实现IEventDispatcher接口，无法直接继承</li><li>EventDispatcher时，必须把EventDispatcher作为实例变量。</li><li>Event：事件基类，所有事件类均基于此类实现</li></ul><h2 id="_2-观察者模式" tabindex="-1"><a class="header-anchor" href="#_2-观察者模式"><span>2，观察者模式</span></a></h2><p>AS3事件机制实现的是观察者模式。</p><p>IEventDispatcher充当了Subject角色，EventDispatcher相当于ConcreteSubject对象，Event相当于Observer，ConcreteSbserver相当于Event的子类。Attach相当于addEventListener，Detach相当于removeEventListener，Notify相当于dispatchEvent。Event没有Update。</p><h2 id="_3-显示列表中事件流的三个阶段" tabindex="-1"><a class="header-anchor" href="#_3-显示列表中事件流的三个阶段"><span>3，显示列表中事件流的三个阶段</span></a></h2><p>在一个事件的整个生命周期内，共分为三个阶段：</p><p>在捕获阶段与冒泡阶段均可能经过N个节点，在目标阶段仅可能有一个节点。</p><p>使用stopPropagation可阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。使用stopImmediatePropagation可阻止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。</p><p>显示列表中事件流三阶段与事件机制本身没有直接关系。在AS3显示列表中，为什么要有事件流，为什么不是直接到达目标对象？</p><h2 id="_4-ieventdispatcher接口讲解" tabindex="-1"><a class="header-anchor" href="#_4-ieventdispatcher接口讲解"><span>4，IEventDispatcher接口讲解</span></a></h2><p>AS3事件机制的精髓基本全在这个接口中。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> listener</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useCapture</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> priority</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useWeakReference</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</p><p>最常用的是前面二个参数。第三个参数标识该监听器是否会在捕获阶段被触发。第四个参数priority标识该同类事情监听器被调用的优化级。第五个参数标识该监听器是否易于被回收，默认为false，并且永远应该默认为false，如果监听器可以被回收，应该手动处理，而不是交给Flash Player。</p><p>对于监听同一类事件的监听器，priority高者优化被调用。在FP及Flex SDK中，priority最大不会超过200，因此，如果要设置top level的事件监听，此值应该设置在200以上。</p><p>在大型应用中，最好把各个层所要用到的priority分一下组，例如200-220分派给Core Level。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void</span></span>
<span class="line"><span>// 从 EventDispatcher 对象中删除侦听器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在addEventListener时，useCapture为true，此时在removeEventListener时，useCapture参数应与之相同。EventDispatcher内部维护了两个listener集合，一个盛装useCapture为false的listener，另一个盛装为true的。</p><h2 id="_5-event类实例化讲解" tabindex="-1"><a class="header-anchor" href="#_5-event类实例化讲解"><span>5，Event类实例化讲解</span></a></h2><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> bubbles</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> cancelable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Boolean</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建一个作为参数传递给事件侦听器的 Event 对象。</p><p>Event 类的方法可以在事件侦听器函数中使用以影响事件对象的行为。某些事件有关联的默认行为。例如，doubleClick 事件有关联的默认行为，此行为突出显示事件发生时鼠标指针下的词。通过调用 preventDefault() 方法，您的事件侦听器可以取消此行为。通过调用 stopPropogation() 或 stopImmediatePropogation() 方法，还可以使当前事件侦听器成为要处理事件的最后一个事件侦听器。</p><p>cancelable标识该事件是否可阻止与取消。一般FP定义的内部事件类型均不可以取消，如CANCEL，CLOSE，OPEN，ADDED等，一般IMG事件均可以取消，如CLOSING，EXITING等，凡是可以取消的事件，均有一个关联的可以取消的行为。开发者在自定义事件也应遵守这一规则。</p><p>开发者应当保证type在应用程序中是唯一的，bubbles用于标识事件在到达目标对象后是否仍向下传递。</p><p>Event对象在事情流结束之后，如果没有其它引用，即可被GC回收。当前Event需要二次派发时，使用clone方法复制事件。</p><h2 id="_6-mouseevent事件" tabindex="-1"><a class="header-anchor" href="#_6-mouseevent事件"><span>6，MouseEvent事件</span></a></h2><p>鼠标事件是FP内InactiveObject对象内在支持的事件，这个事情由InactiveObject实例化、派发，并且总是bubble等于true的。对于不需要鼠标事件的对象，应当把mouseChildren与mouseEnabled设为flase，以优化程序性能。</p><h2 id="_7-flash-player内部对事件的强力支持" tabindex="-1"><a class="header-anchor" href="#_7-flash-player内部对事件的强力支持"><span>7，Flash Player内部对事件的强力支持</span></a></h2><p>FP本身是多线程的，只不过目前未对开发者开放API。在FP内部，有一个线程专门用于处理事件，事件的处理总是在桢周期的前期进行，并且不会受到其它线程的影响。</p><p>FP是异步的，Event的派发与listener的执行并不是紧密衔接的，当你派发一个事件之后，不能指望监听这个Event的Listener马上执行。 PureMVC放弃AS3内部支持的事情机制不用，自己用观察者模式实现了一套Command体系，是对FP中独立事件线程的非合理浪费。</p><h2 id="_8-事件与代的概念" tabindex="-1"><a class="header-anchor" href="#_8-事件与代的概念"><span>8，事件与代的概念</span></a></h2><p>在FP内部，从宏观上讲，总是派发一拔事件，处理一拔代码，然后再派发一拔事件，再处理一拔代码，如此反复，看起来事件具有代(generation)的概念。代与事件流有关，也与桢周期内的执行模式有关。</p><h2 id="_9-为什么要有事件流三阶段" tabindex="-1"><a class="header-anchor" href="#_9-为什么要有事件流三阶段"><span>9，为什么要有事件流三阶段？</span></a></h2><p>当用户在FP中单击时，宿主环境仅能告诉FP用户进行了单击行为以及单击的坐标，却并不能告诉FP到底单击了哪一个对象，哪一个MC，这是不可能的，因为是什么对象、有什么对象，只有FP自已知道。</p><p>在FP中，共有两种渲染模式，一种为保留模式，另一种为立即模式，无论是哪一种渲染模式，FP交给浏览器或操作系统的最终渲染内容总是一张张图片，FP像幻灯片放映一样向用户展示互动与动画。所以，当用户单击时，永远只是单击点，看得见的点，FP拿到这些点之后，在内部的显示列表结构上遍历，首先从上向下走，只要当前显示对象囊括了单击点，并且是透明的（下面还有显示对象），便一直往下走，直到目标对象，然后再原路一路向上走，这便是事件机制的三阶段。</p><p>由于显示对象可以是透明的，FP并不知道开发者设想的用户真正想单击的是不是目标对象，有可能是捕获阶段的对象，同样的对象也有可能想在冒泡阶段处理，为了提供更大的灵活性，FP在显示列表中实现了事件流的三步机制，数以千万开发者的实践证明它是非常有阶值的。</p><p>单击之外的其它鼠标事情与之类似。</p><h2 id="_10-优化程序性能的第一准则" tabindex="-1"><a class="header-anchor" href="#_10-优化程序性能的第一准则"><span>10，优化程序性能的第一准则</span></a></h2><p>及时移除不再需要的事情监听，是保证垃圾回收、优化程序性能的最浅显、最容易、最为开发者所忽视的行码准则之一。以下代码是通用的，在函数内部移除事件监听的方法：</p><p>e.currentTarget.removeEventListener(e.type, arguments.callee);</p><h2 id="_11-停止冒泡事情的派发" tabindex="-1"><a class="header-anchor" href="#_11-停止冒泡事情的派发"><span>11，停止冒泡事情的派发</span></a></h2><p>除了移除不必要的事情监听，停止冒泡事情的继续派发也是提高程序运行效率的常用方法之一。该方法多用于MouseEvent事情，代码为：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stopPropagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">or</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stopImmediatePropagation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是事情冒泡有时却是十分有用的，在某处阻止了事件冒泡，有可能因此另一处的监听无法触发，这种bug十分隐蔽。</p><p>2009年5月27日</p>`,48)]))}const r=i(n,[["render",p],["__file","01.html.vue"]]),d=JSON.parse('{"path":"/posts/2009/01.html","title":"AS3事件机制概述","lang":"zh-CN","frontmatter":{"sidebar":false,"createTime":"2008-05-01T00:00:00.000Z","tags":["AS3 Expert"],"title":"AS3事件机制概述"},"headers":[],"readingTime":{"minutes":6.8,"words":2041},"git":{"updatedTime":1740126700000,"contributors":[{"name":"LIYI","username":"LIYI","email":"9830131@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/LIYI?v=4","url":"https://github.com/LIYI"},{"name":"李艺","username":"李艺","email":"9830131@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/李艺?v=4","url":"https://github.com/李艺"}]},"filePathRelative":"posts/2009/01.md","categoryList":[{"id":"18958e","sort":10001,"name":"posts"},{"id":"f81457","sort":10010,"name":"2009"}]}');export{r as comp,d as data};
