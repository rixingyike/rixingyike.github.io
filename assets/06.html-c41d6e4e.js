import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as i,b as s,d as n,a as t,f as p}from"./app-2d091527.js";const l={},u=p('<h1 id="flash-player的垃圾内存回收机制-能否强制回收" tabindex="-1"><a class="header-anchor" href="#flash-player的垃圾内存回收机制-能否强制回收" aria-hidden="true">#</a> Flash Player的垃圾内存回收机制：能否强制回收？</h1><p>在Adobe Flash Player 10中，AS3的内部垃圾回收机制是怎样的？程序员可以强制FP回收内存吗？答案是否定的，但有方法。</p><h3 id="_1-毛主席请猫吃辣椒的故事" tabindex="-1"><a class="header-anchor" href="#_1-毛主席请猫吃辣椒的故事" aria-hidden="true">#</a> 1. 毛主席请猫吃辣椒的故事</h3><p>建国初期，国家正在对资本主义工商业进行社会主义改造，毛泽东问周恩来、刘少奇等，如何才能让猫吃辣椒？刘少奇说，把猫逮住，用筷子捅下去。周总理说，先把猫饿上三天，然后把辣椒裹在肉里给它吃。毛主席都不赞成这两种做法，毛主席说，把辣椒抹在猫屁股上，猫觉得辣自然就去会舔，而且还会因为这样做而兴奋不已。</p><h3 id="_2-强制垃圾内存回收的代码" tabindex="-1"><a class="header-anchor" href="#_2-强制垃圾内存回收的代码" aria-hidden="true">#</a> 2. 强制垃圾内存回收的代码</h3><p>AS3程序员没有办法强制Flash Player进行垃圾回收，但有一种类似于毛主席请猫吃辣椒的方法可以使用。</p>',6),r={href:"http://flash.9ria.com/viewthread.php?tid=234",target:"_blank",rel:"noopener noreferrer"},k={href:"https://yishulun.com/",target:"_blank",rel:"noopener noreferrer"},d=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">package</span> <span class="token punctuation">{</span>
	<span class="token keyword">import</span> flash<span class="token punctuation">.</span>display<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span>
	<span class="token keyword">import</span> flash<span class="token punctuation">.</span>display<span class="token punctuation">.</span>BitmapData<span class="token punctuation">;</span>
	<span class="token keyword">import</span> flash<span class="token punctuation">.</span>display<span class="token punctuation">.</span>Sprite<span class="token punctuation">;</span>
	<span class="token keyword">import</span> flash<span class="token punctuation">.</span>net<span class="token punctuation">.</span>LocalConnection<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * <span class="token keyword">@author</span> LIYI https://yishulun.com/
	 * 修改自MoonSpirit的强制垃圾回收测试代码
	 */</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GarbageCollectionTest</span> <span class="token keyword">extends</span> <span class="token class-name">Sprite</span> <span class="token punctuation">{</span>
		<span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token constant">SQR_AMOUNT</span> <span class="token operator">:</span> int <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment">// 方块数量        </span>
		<span class="token keyword">private</span> <span class="token keyword">var</span> <span class="token literal-property property">_container_sp</span> <span class="token operator">:</span> Sprite<span class="token punctuation">;</span><span class="token comment">// 容器sprite</span>
		<span class="token keyword">private</span> <span class="token keyword">var</span> <span class="token literal-property property">_sqrList</span><span class="token operator">:</span> Array<span class="token punctuation">;</span><span class="token comment">// 所有方块的引用</span>

		<span class="token comment">// 强制垃圾回收使用的对象</span>
		<span class="token keyword">private</span> <span class="token keyword">var</span> <span class="token literal-property property">conn1</span> <span class="token operator">:</span>LocalConnection<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token keyword">var</span> <span class="token literal-property property">conn2</span> <span class="token operator">:</span>LocalConnection<span class="token punctuation">;</span>

		<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">GarbageCollectionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">init</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">{</span>
			_container_sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">addChild</span><span class="token punctuation">(</span>_container_sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//initNoBitmapDataView( );// 峰值4111K，手动回收两次变为9K</span>
			<span class="token function">initBitmapDataView</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 峰值14K，最小为14K，手动回收基本无变化</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 初始化 通过通常手段 显示</span>
		<span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">initNoBitmapDataView</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
			<span class="token function">layoutTenThousandSqr</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token function">unLayoutTenThousandSqr</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			_sqrList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token function">removeChild</span><span class="token punctuation">(</span>_container_sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			_container_sp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 初始化 通过BitmapData快照 显示</span>
		<span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">initBitmapDataView</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
			<span class="token function">layoutTenThousandSqr</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token function">unLayoutTenThousandSqr</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			_sqrList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token function">removeChild</span><span class="token punctuation">(</span>_container_sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
			_container_sp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

			<span class="token function">doClearance</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">layoutTenThousandSqr</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
			_sqrList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">i</span> <span class="token operator">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">SQR_AMOUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				_sqrList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				_sqrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">beginFill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				_sqrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				_sqrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">endFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				_container_sp<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>_sqrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 不显示</span>
		<span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">unLayoutTenThousandSqr</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">i</span> <span class="token operator">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">SQR_AMOUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				_container_sp<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>_sqrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">delete</span> _sqrList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 精髓，垃圾回收机强制调用</span>
		<span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">doClearance</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
			<span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;clear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">try</span><span class="token punctuation">{</span>
				conn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				conn1<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;liyi garbage collection 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				conn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				conn2<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;liyi garbage collection 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token keyword">finally</span><span class="token punctuation">{</span>
				conn1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
				conn2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后呢，作者调用doClearance方法，这次无论是否手动回收，内存占用无变化，如下图所示，这说明doClearance方法已经强制了垃圾内存回收，它作用了！</p><p>[此处有图，但被岁月冲走了]</p><p>那么，为什么创建两次没用的LocalConnection可以强制回收内存呢？</p><h3 id="_3-as3垃圾内存回收机制" tabindex="-1"><a class="header-anchor" href="#_3-as3垃圾内存回收机制" aria-hidden="true">#</a> 3. AS3垃圾内存回收机制</h3><p>在Flash Player初始化运行时，会向操作系统申请一大块内存，如果程序很小，有可能根本用不了这么多内存，但FP在开始时不考虑这些，大多数情况下，第一次申请的内存总是不够用的。第一次申请的内存大小，与操作系统、浏览器环境有关。</p><p>当Flash Player发现已经申请的内存不够用时，它会再向操作系统申请一大块内存。但在申请之前，请注意，FP会尝试进行垃圾内存回收。那么它是如何回收的呢？</p><p>Flash Player在内部使用<strong>懒惰式引用计数回收方案</strong>进行垃圾内存回收，<strong>懒惰式</strong>指：FP并不会一次把所有可以回收的对象全部回收，它一次仅会回收一部分，如果内存不够用，它会向操作系统申请，如果系统无内存了，它会再次回收，如果全部回收了仍不够用，Game Over!<strong>引用计数</strong>指：FP在内部给每个对象标记一个记号，当没有任何对象引用此对象时，它即是可以被回收的；如果一个容器内有许多相互关联的对象，当把这个容器从显示列表中移除，并且置为null后，它也是可以被回收的。</p>`,8),v={href:"https://yishulun.com/",target:"_blank",rel:"noopener noreferrer"},m=s("strong",null,"懒惰",-1),b=s("p",null,"在清楚了FP的内部垃圾回收机制之后，我们便可以回答，为什么创建两次没用的LocalConnection，并且连接并不存在的地址，故意抛出异常然后捕获，可以强制垃圾回收呢？因为，在AS3中LocalConnection是比较占用内存的对象，两次创建该类对象并尝试进行连接的内存开销大小足以请Flash Player重新向操作系统申请内存，而在申请之前，FP会尝试回收。原理即是这么简单，非独使用LocalConnection可以，其它较耗内存的对象也可以。",-1),y=s("p",null,"2008年5月",-1);function h(_,w){const a=e("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("MoonSpirit在天地会撰写过一篇关于强制垃圾回收的文章：["),s("a",r,[n("as hack技术]垃圾回收机强制执行"),t(a)]),n("。文中例证，使用LocalConnection连接非法地址，并捕获导常，可以强制进行垃圾回收。"),s("a",k,[n("作者"),t(a)]),n("在MoonSpirit的基础上，简单修改了一下代码，如下：")]),d,s("p",null,[n("在小节2中，"),s("a",v,[n("作者"),t(a)]),n("问到为什么要手动单击两次“运行垃圾回收器”按钮，这是由于FP垃圾回收机制的"),m,n("性造成的。")]),b,y])}const L=o(l,[["render",h],["__file","06.html.vue"]]);export{L as default};
