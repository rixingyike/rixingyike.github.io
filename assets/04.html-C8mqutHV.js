import{_ as t,c as i,b as s,o as a}from"./app-CYejo3SH.js";const n="/assets/202120210327210608-CeZFxHBp.jpeg",p="/assets/202120210327210607-DeSOIUrP.png",g="/assets/21928-DeD0Df3B.jpeg",o="/assets/21931-CDft_qgM.png",c="/assets/21934-DOjwbyii.jpeg",r="/assets/21938-Bv3v1sXo.png",d="/assets/21945-6i2E14Lc.png",h="/assets/21943-DbJsN5-X.png",m="/assets/21958-jyf4F2t2.png",l="/assets/21962-Wj8SdOh8.png",b="/assets/21965-DHp0HNzY.png",u={};function f(w,e){return a(),i("div",null,e[0]||(e[0]=[s('<p>在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。</p><p>作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。</p><p>因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc编译器，因此有了这篇教程。</p><h2 id="_1-使用git-bash代替cmd" tabindex="-1"><a class="header-anchor" href="#_1-使用git-bash代替cmd"><span><strong>1，使用git bash代替cmd</strong></span></a></h2><p>windows读者按照书上第96页，第7.1.2小节“安装仓库管理工具git”的说明，完成了git的安装之后，就不要再使用系统自带的终端工具cmd了，要使用git bash。在任何目录空白处，右键单击，就可以看到“Git Bash Here”的菜单。</p><p>使用git bash代替cmd有哪些好处呢？</p><p>1）首先，cd更加方面</p><p>如果在当前的项目目录打开git bash，会直接定位到当前目录，免去了cd的麻烦。在git bash中，/c/代表c:/，/d/代替d:/，使用习惯是类linux的。</p><p>2）其次，避免将sim.go误判为文件</p><h2 id="_2-golang-org-x类库无法下载的问题" tabindex="-1"><a class="header-anchor" href="#_2-golang-org-x类库无法下载的问题"><span><strong>2，golang.org/x类库无法下载的问题</strong></span></a></h2><p>这是一个读者遇到的问题：</p><blockquote><p>C:\\Users\\Administrator&gt;go get github.com/rixingyike/sim.go package golang.org/x/net/context: unrecognized import path &quot;golang.org/x/net/context&quot; (https fetch: Get https://golang.org/x/net/context?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.)</p></blockquote><p>因为被墙，国内没有办法直接下载这个Google官方的类库。解决方法：</p><p>1）手动下载x类库</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>git</span><span class="space"> </span><span>clone</span><span class="space"> </span><span>https://github.com/rixingyike/golang.org-x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2）将clone下来的x目录放至$GOPATH/src/golang.org目录下</p><p>解决了上述问题之后，别忘记再次运行“go get github.com/rixingyike/sim.go”</p><h2 id="_3-如何找到-gopath-src-golang-org目录" tabindex="-1"><a class="header-anchor" href="#_3-如何找到-gopath-src-golang-org目录"><span><strong>3，如何找到$GOPATH/src/golang.org目录？</strong></span></a></h2><p>在终端中执行：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>go</span><span class="space"> </span><span>env</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看GOPATH所在的目录</p><p><img src="'+n+'" alt="0" width="554" height="336"></p><p>在windows上cmd中执行go env，可能输出是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png" alt="image-20210327210802847"></p><p>如果没有在src目录下找到golang.org目录，新建一个。</p><h2 id="_4-安装gin工具" tabindex="-1"><a class="header-anchor" href="#_4-安装gin工具"><span><strong>4，安装gin工具</strong></span></a></h2><p>正常情况下，启动服务端后，在浏览器访问localhost:4000/hi，会看到文本的输出。</p><p>这是一位读者看到的：</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215316.png" alt="image-20210327215315987"></p><p>服务尚未启动。需要检查是否在当前项目的后端目录下，执行了debug.sh脚本。</p><p>如果执行debug.sh脚本，终端未被阻塞，可能脚本未执行成功。此时在终端里输入：</p><p>gin</p><p>查看有没有输出。如果输出：</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215449.png" alt="image-20210327215449058"></p><p>则说明gin尚未安装成功。如果已经按书上第96页的步骤，安装了gin工具。出现这种问题，是因为没有把GOPATH/bin目录添加进windows系统变量PATH中。在windows机器上，右键单击“计算机”，选择“属性”-&gt;“高级系统设置”-&gt;“系统变量”，在当前用户下找到PATH变量，在尾部添加目录。</p><p>安装并设置环境后，再次执行gin指令，如果输出：</p><p><img src="'+p+'" alt="0" width="301" height="54"></p><p>说明安装成功了。</p><h2 id="_5-如何更新sim-go" tabindex="-1"><a class="header-anchor" href="#_5-如何更新sim-go"><span><strong>5，如何更新sim.go</strong></span></a></h2><p>go get -u github.com/rixingyike/sim.go</p><p>使用以上脚本更新sim.go类库，如果出现了以下输出：</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215527.png" alt="image-20210327215527375"></p><p>不用管它，不影响继续征程。</p><h2 id="_6-在windows10上安装gcc" tabindex="-1"><a class="header-anchor" href="#_6-在windows10上安装gcc"><span><strong>6，在windows10上安装gcc</strong></span></a></h2><p>启动服务后，访问http://localhost:4000/hi，有读者遇到这样的错误：</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215605004"></p><p>这是因为没有安装gcc编译器。win10解决方法：</p><p>1）去https://cygwin.com/install.html，下载setup-x86_64.exe</p><p>2，下载后，选择网络安装。等列表加载后，在顶部的搜索框里输入gcc。</p><p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215618869"></p><p>在Devel这一组下选择gcc-g++:</p><p><img src="'+g+'" alt="0" width="598" height="406"></p><p>往后就一路默认安装。</p><p>完成安装后，在终端内输入gcc，会看到有内容输出。</p><p>至于下载时选择哪个镜像地址：</p><p><img src="'+o+'" alt="0" width="546" height="393"></p><p>一般选择前面的，下载会比较快。</p><p>gcc安装后，在git bash里再次执行debug.sh（sh文件在windows系统的git bash里也是认的）。输出像这个样子：</p><p><img src="'+c+'" alt="0" width="416" height="237"></p><p>浏览器访问http://localhost:4000/hi，是这样的：</p><p><img src="'+r+'" alt="0" width="616" height="129"></p><p>作者用win10作了测试，以上安装gcc的流程可以跑通。</p><h2 id="_7-在win7系统上安装gcc" tabindex="-1"><a class="header-anchor" href="#_7-在win7系统上安装gcc"><span><strong>7，在win7系统上安装gcc</strong></span></a></h2><p><img src="'+d+'" alt="0" width="654" height="429"></p><p>如果是win7 32位系统，按照上面的方法安装，可能会出现以下问题：</p><p><img src="'+h+'" alt="0" width="524" height="127"></p><p>这是一位读者遇到的问题，作者也是第一次遇到。为了解决该问题，作者请读者在电脑上安装了远程工具teamviewer：https://www.teamviewer.com/zhCN/</p><p>作者在这位读者的电脑上进行远程操作。解决方法是：</p><p>1）首先，将系统变量里的cygwin去掉</p><p>2）然后，如果是win7 32位系统，去这里https://sourceforge.net/projects/mingw/，下载Minimalist GNU for Windows，并安装之；如果是win7 64系统，去这里https://sourceforge.net/projects/mingw-w64，下载最新版本并安装。</p><p>3）安装以后，仍然是类似的方法，选择gcc-g++package安装</p><p><img src="'+m+'" alt="0" width="1354" height="712"></p><p>安装方法是选择后，再选择菜单里的apply change。选择后如下所示：</p><p><img src="'+l+'" alt="0" width="1357" height="716"></p><p>在终端里输入gcc --version，正常的输出：</p><p><img src="'+b+'" alt="0" width="512" height="81"></p>',76)]))}const y=t(u,[["render",f],["__file","04.html.vue"]]),x=JSON.parse('{"path":"/posts/2018/04.html","title":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结","lang":"zh-CN","frontmatter":{"tags":["小程序从0到1"],"sidebar":false,"createTime":"2018-01-25T00:00:00.000Z","title":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结","description":"在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。 作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。 因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc...","head":[["meta",{"property":"og:url","content":"https://yishulu.com/posts/2018/04.html"}],["meta",{"property":"og:site_name","content":"艺述论"}],["meta",{"property":"og:title","content":"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结"}],["meta",{"property":"og:description","content":"在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。 作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。 因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T08:31:40.000Z"}],["meta",{"property":"article:tag","content":"小程序从0到1"}],["meta",{"property":"article:modified_time","content":"2025-02-21T08:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215316.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215449.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215527.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png\\",\\"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png\\"],\\"dateModified\\":\\"2025-02-21T08:31:40.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.38,"words":1313},"git":{"updatedTime":1740126700000,"changelog":[{"hash":"c178bdf56fc2561b8edb869f99e09ad4eea026b8","date":1740126700000,"email":"9830131@qq.com","author":"李艺","message":"2025-02-21: Automatic commit","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/c178bdf56fc2561b8edb869f99e09ad4eea026b8"},{"hash":"ef6dbbb9cda92e4f3b9325d375be8f1241de68a5","date":1695310619000,"email":"9830131@qq.com","author":"LIYI","message":"2023-09-21_23:36","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/ef6dbbb9cda92e4f3b9325d375be8f1241de68a5"},{"hash":"5c96954e9f9d9165fd6ad76e18c35f6aff5fef39","date":1691329720000,"email":"9830131@qq.com","author":"LIYI","message":"2023-08-06:","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/5c96954e9f9d9165fd6ad76e18c35f6aff5fef39"},{"hash":"3fa1017ba851b35e62b2d2b5c3da2e041ee7396b","date":1691327718000,"email":"9830131@qq.com","author":"LIYI","message":"2023-08-06:","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/3fa1017ba851b35e62b2d2b5c3da2e041ee7396b"},{"hash":"f9bb994058fb50295f03ac7d56e62d0472d2333e","date":1684472073000,"email":"9830131@qq.com","author":"LIYI","message":"2023-05-19_12:54","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/f9bb994058fb50295f03ac7d56e62d0472d2333e"},{"hash":"515c1f5f0cd26583d56a16ee5afb1e840e1c8132","date":1671674770000,"email":"9830131@qq.com","author":"LIYI","message":"2022-12-22_10:06","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/515c1f5f0cd26583d56a16ee5afb1e840e1c8132"}]},"autoDesc":true,"filePathRelative":"posts/2018/04.md","categoryList":[{"id":"18958e","sort":10001,"name":"posts"},{"id":"0adf91","sort":10005,"name":"2018"}],"bulletin":true}');export{y as comp,x as data};
