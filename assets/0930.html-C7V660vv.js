import{_ as t,c as a,b as o,o as i}from"./app-CX2TW43A.js";const r={};function c(m,e){return i(),a("div",null,e[0]||(e[0]=[o("<p>i 可能是 integer 的简写，或者是 int 的简写。有人说是 iterator 的简写，这个有点牵强。早期教材中的示例都是以 i、k、j 作为循环变量，后来这样使用成为了一种习惯。</p><p>但这种习惯是如何形成的呢？</p><p>在 1957 年诞生的 Fortran 编程语言中，有一个「I—N 规则」，规定以字母 I，J，K，L，M，N 六个字母开头的变量，如无另外说明均为整型变量，以其它字母开头的变量则为实型变量。实型变量在这里狭隘理解就是小数，包括指数形式的小数。</p><p>Fortran 更多是一种教学语言，后来诞生的 B 语言、C 语言都借鉴了 i、k、j 的命名规则，久而久之成为了习惯。</p><blockquote><p>关于 I-N 规则，可以查看这里：https://micro.ustc.edu.cn/Fortran/ZJDing/Sec1-4.htm</p></blockquote><p>Fortran 支持整型、字符型等类型。Fortran 诞生于 1957 年，比 C 语言早了 10 年，很难想象在远古编程语言中，竟然就有了对变量类型的支持。虽然对类型的支持并不是一开始就有的，但也基本发生在 Fortran 诞生之后的几年里。</p><p>JS、Python 这样的脚本语言没有变量类型，并不是它们低级，而是在它们的语言哲学里，没有类型更加简洁方便。</p><p>编程语言一向有两个发展方向，两种哲学：</p><ul><li>一，力求简洁，代码编写效率高，脚本语言基本都是这样，例如 Python、JS；</li><li>二，力求高性能、安全与稳定，后端编译型语言基本都是如此、例如 Java、C++。</li></ul><p>一般情况下，我们都会保持这种语言中哲学的纯粹，但有时候我发现我们开发者又很矛盾，例如 JS，它本来是弱类型的脚本语言，当我们在享受它简洁方便的语言特性时，又搞了一个 TypeScript 出来，希望它也像 Java 那样具有强类型的严谨。</p><p>就像一个姑娘，有时候希望她泼辣，有时候又希望她文静。</p><p>有一个语言，因为诞生的晚，吸收了众多现代语言的优点，既有强类型语言的优点，又有弱类型语言的优点，它就是 Go 语言。</p>",12)]))}const d=t(r,[["render",c],["__file","0930.html.vue"]]),p=JSON.parse('{"path":"/posts/2022/0930.html","title":"为什么编程里习惯使用 i、j、k 等作为循环变量?","lang":"zh-CN","frontmatter":{"sidebar":false,"createTime":"2022-09-30T00:00:00.000Z","category":["编程"],"title":"为什么编程里习惯使用 i、j、k 等作为循环变量?","description":"i 可能是 integer 的简写，或者是 int 的简写。有人说是 iterator 的简写，这个有点牵强。早期教材中的示例都是以 i、k、j 作为循环变量，后来这样使用成为了一种习惯。 但这种习惯是如何形成的呢？ 在 1957 年诞生的 Fortran 编程语言中，有一个「I—N 规则」，规定以字母 I，J，K，L，M，N 六个字母开头的变量，如无...","head":[["meta",{"property":"og:url","content":"https://yishulu.com/posts/2022/0930.html"}],["meta",{"property":"og:site_name","content":"艺述论"}],["meta",{"property":"og:title","content":"为什么编程里习惯使用 i、j、k 等作为循环变量?"}],["meta",{"property":"og:description","content":"i 可能是 integer 的简写，或者是 int 的简写。有人说是 iterator 的简写，这个有点牵强。早期教材中的示例都是以 i、k、j 作为循环变量，后来这样使用成为了一种习惯。 但这种习惯是如何形成的呢？ 在 1957 年诞生的 Fortran 编程语言中，有一个「I—N 规则」，规定以字母 I，J，K，L，M，N 六个字母开头的变量，如无..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T08:31:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-21T08:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么编程里习惯使用 i、j、k 等作为循环变量?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T08:31:40.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.05,"words":614},"git":{"updatedTime":1740126700000,"changelog":[{"hash":"c178bdf56fc2561b8edb869f99e09ad4eea026b8","date":1740126700000,"email":"9830131@qq.com","author":"李艺","message":"2025-02-21: Automatic commit","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/c178bdf56fc2561b8edb869f99e09ad4eea026b8"},{"hash":"5c96954e9f9d9165fd6ad76e18c35f6aff5fef39","date":1691329720000,"email":"9830131@qq.com","author":"LIYI","message":"2023-08-06:","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/5c96954e9f9d9165fd6ad76e18c35f6aff5fef39"},{"hash":"3fa1017ba851b35e62b2d2b5c3da2e041ee7396b","date":1691327718000,"email":"9830131@qq.com","author":"LIYI","message":"2023-08-06:","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/3fa1017ba851b35e62b2d2b5c3da2e041ee7396b"},{"hash":"f9bb994058fb50295f03ac7d56e62d0472d2333e","date":1684472073000,"email":"9830131@qq.com","author":"LIYI","message":"2023-05-19_12:54","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/f9bb994058fb50295f03ac7d56e62d0472d2333e"},{"hash":"515c1f5f0cd26583d56a16ee5afb1e840e1c8132","date":1671674770000,"email":"9830131@qq.com","author":"LIYI","message":"2022-12-22_10:06","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/515c1f5f0cd26583d56a16ee5afb1e840e1c8132"}]},"autoDesc":true,"filePathRelative":"posts/2022/0930.md","categoryList":[{"id":"18958e","sort":10001,"name":"posts"},{"id":"91e2a1","sort":10003,"name":"2022"}],"bulletin":true}');export{d as comp,p as data};
