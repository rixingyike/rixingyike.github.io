import{_ as i,c as a,b as n,o as l}from"./app-HKHjuDIY.js";const h={};function t(k,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="在rust中-与-有什么异同" tabindex="-1"><a class="header-anchor" href="#在rust中-与-有什么异同"><span>在Rust中{:?}与{:#?}有什么异同？</span></a></h1><p>Rust 的格式化系统（<code>std::fmt</code>）是一个非常强大且灵活的工具，主要用于生成格式化的输出。在 Rust 的格式化输出中，<code>{:?}</code> 和 <code>{:#?}</code> 是两种常见的占位符，分别用于调试输出和美化调试输出。它们的设计和命名是基于 Rust 的格式化系统（<code>std::fmt</code>）的灵活性和扩展性考虑的。</p><h3 id="_1-为什么有-和-这样的定义" tabindex="-1"><a class="header-anchor" href="#_1-为什么有-和-这样的定义"><span><strong>1. 为什么有 <code>{:?}</code> 和 <code>{:#?}</code> 这样的定义？</strong></span></a></h3><h4 id="_1-简洁的调试输出" tabindex="-1"><a class="header-anchor" href="#_1-简洁的调试输出"><span><strong>(1) <code>{:?}</code>：简洁的调试输出</strong></span></a></h4><ul><li><code>{:?}</code> 是为实现 <code>std::fmt::Debug</code> trait 的类型设计的。</li><li>它的目标是提供一种简单、紧凑的方式来输出数据结构的内部状态，方便开发者快速查看变量的内容。</li><li>命名中的 <code>?</code> 表示“问号”，暗示这是用于调试的占位符。</li><li>冒号表示后面是格式化符号。</li></ul><p><strong>设计考虑：</strong></p><ul><li>调试输出需要尽可能详细地展示数据结构，但又不能过于冗长。</li><li>紧凑的格式适合简单的调试场景，例如打印单个变量或小型数据结构。</li></ul><h4 id="_2-美化调试输出" tabindex="-1"><a class="header-anchor" href="#_2-美化调试输出"><span><strong>(2) <code>{:#?}</code>：美化调试输出</strong></span></a></h4><ul><li><code>{:#?}</code> 是 <code>{:?}</code> 的扩展版本，用于生成更易读的输出。</li><li>它通过添加缩进和换行，使复杂的数据结构——如嵌套的结构体或集合，更具可读性。</li><li>命名中的 <code>#</code> 表示“美化”或“格式化”。</li></ul><p><strong>设计考虑：</strong></p><ul><li>对于复杂的嵌套数据结构，紧凑的输出可能难以阅读。</li><li>美化输出可以帮助开发者更容易理解数据的层次结构。</li></ul><h3 id="_2-开发者基于什么考虑设计这些占位符" tabindex="-1"><a class="header-anchor" href="#_2-开发者基于什么考虑设计这些占位符"><span><strong>2. 开发者基于什么考虑设计这些占位符？</strong></span></a></h3><h4 id="_1-灵活性" tabindex="-1"><a class="header-anchor" href="#_1-灵活性"><span><strong>(1) 灵活性</strong></span></a></h4><p>Rust 的格式化系统允许开发者根据需求选择不同的输出风格：</p><ul><li><code>{}</code> 提供用户友好的输出。</li><li><code>{:?}</code> 提供技术性的调试输出。</li><li><code>{:#?}</code> 提供更美观的调试输出。</li></ul><p>这种灵活性使得开发者可以根据场景选择合适的占位符，而无需手动调整输出格式。冒号后面还可以有其他的格式化符号，例如：</p><ul><li><p><strong>左对齐：</strong></p><div class="language-rust line-numbers-mode" data-ext="rust" data-title="rust"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:&lt;10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">left</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 左对齐，宽度为 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>右对齐：</strong></p><div class="language-rust line-numbers-mode" data-ext="rust" data-title="rust"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:&gt;10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">right</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 右对齐，宽度为 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_2-一致性" tabindex="-1"><a class="header-anchor" href="#_2-一致性"><span><strong>(2) 一致性</strong></span></a></h4><ul><li><code>:?</code> 和 <code>#?</code> 的命名遵循了 Rust 格式化系统的统一规则： <ul><li><code>:</code> 表示这是一个特殊的格式化选项。</li><li><code>?</code> 表示调试模式。</li><li><code>#</code> 表示美化模式。</li></ul></li><li>这种一致的命名方式让开发者可以轻松记住和使用这些占位符。</li></ul><h4 id="_3-扩展性" tabindex="-1"><a class="header-anchor" href="#_3-扩展性"><span><strong>(3) 扩展性</strong></span></a></h4><p>Rust 的格式化系统支持自定义格式化符号，因此未来可以轻松添加新的占位符或格式化选项。例如：</p><ul><li>自定义的格式化符号可以通过实现 <code>std::fmt::Formatter</code> 来支持。</li><li>新的占位符可以基于现有的规则进行扩展。</li></ul><h3 id="_3-中是否可以放置其他允许自定义的字符或格式符号" tabindex="-1"><a class="header-anchor" href="#_3-中是否可以放置其他允许自定义的字符或格式符号"><span><strong>3. <code>{}</code> 中是否可以放置其他允许自定义的字符或格式符号？</strong></span></a></h3><p>是的，Rust 的格式化系统非常灵活，支持多种自定义格式化选项。以下是一些常见的用法和扩展可能性：</p><h4 id="_1-内置格式化选项" tabindex="-1"><a class="header-anchor" href="#_1-内置格式化选项"><span><strong>(1) 内置格式化选项</strong></span></a></h4><p>Rust 提供了许多内置的格式化选项，可以直接在 <code>{}</code> 中使用。例如：</p><ul><li><strong>对齐和填充：</strong><div class="language-rust line-numbers-mode" data-ext="rust" data-title="rust"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:&lt;10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">left</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 左对齐，宽度为 10</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:&gt;10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">right</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 右对齐，宽度为 10</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:^10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">center</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 居中对齐，宽度为 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>数字格式化：</strong><div class="language-rust line-numbers-mode" data-ext="rust" data-title="rust"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出二进制：101010</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 255</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出十六进制：ff</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出科学计数法：1e3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-自定义格式化" tabindex="-1"><a class="header-anchor" href="#_2-自定义格式化"><span><strong>(2) 自定义格式化</strong></span></a></h4><p>Rust 允许开发者为自定义类型实现 <code>std::fmt::Display</code> 或 <code>std::fmt::Debug</code>，并支持自定义格式化逻辑。例如：</p><div class="language-rust line-numbers-mode" data-ext="rust" data-title="rust"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">use</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    x</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> i32</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> i32</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">impl</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fmt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Display</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> for</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fmt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;mut</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fmt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Formatter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&#39;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fmt</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">alternate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            write!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Point(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">            write!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">, </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 输出：(10, 20)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    println!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:#</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出：Point(10,20)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><code>f.alternate()</code> 检查是否使用了 <code>#</code> 修饰符。</li><li>开发者可以根据修饰符动态调整输出格式。</li></ul><h4 id="_3-扩展可能性" tabindex="-1"><a class="header-anchor" href="#_3-扩展可能性"><span><strong>(3) 扩展可能性</strong></span></a></h4><p>Rust 的格式化系统是开放的，未来可能会引入更多内置的格式化符号，或者允许开发者注册自定义的格式化规则。例如：</p><ul><li>支持时间格式化（类似 Python 的 <code>strftime</code>）。</li><li>支持更复杂的布局控制。</li></ul><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结"><span><strong>4. 小结</strong></span></a></h3><ol><li><p><strong><code>{:?}</code> 和 <code>{:#?}</code> 的设计考虑：</strong></p><ul><li><code>{:?}</code> 提供紧凑的调试输出，适合简单场景。</li><li><code>{:#?}</code> 提供美化输出，适合复杂场景。</li><li>命名规则（<code>?</code> 和 <code>#</code>）保持了一致性和易记性。</li></ul></li><li><p><strong>灵活性和扩展性：</strong></p><ul><li>Rust 的格式化系统支持多种内置选项（如对齐、数字格式化等）。</li><li>开发者可以为自定义类型实现 <code>Display</code> 或 <code>Debug</code>，并支持自定义格式化逻辑。</li></ul></li><li><p><strong>未来扩展：</strong></p><ul><li>Rust 的格式化系统是开放的，未来可能会引入更多内置符号或支持更复杂的自定义规则。</li></ul></li></ol><p>Rust 在格式化输出方面既提供了强大的功能，又保持了简洁和一致性。</p>`,38)]))}const p=i(h,[["render",t],["__file","2.html.vue"]]),d=JSON.parse('{"path":"/blog/2025/2.html","title":"在Rust中{:?}与{:#?}有什么异同？","lang":"zh-CN","frontmatter":{"createTime":"2025/02/23 20:25:00","tags":["Rust"],"cover":"https://yishulun.com/cover3.jpg"},"headers":[],"readingTime":{"minutes":4.27,"words":1281},"git":{"updatedTime":1740370713000,"contributors":[{"name":"李艺","username":"李艺","email":"9830131@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/李艺?v=4","url":"https://github.com/李艺"}]},"filePathRelative":"blog/2025/2.md","categoryList":[{"id":"126ac9","sort":10004,"name":"blog"},{"id":"a264e0","sort":10005,"name":"2025"}]}');export{p as comp,d as data};
