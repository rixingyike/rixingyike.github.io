import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-2d091527.js";const t={},e=p(`<h1 id="像ruby一样简易行码-使用prototype扩展原生对象" tabindex="-1"><a class="header-anchor" href="#像ruby一样简易行码-使用prototype扩展原生对象" aria-hidden="true">#</a> 像Ruby一样简易行码：使用Prototype扩展原生对象</h1><p>AS3是基于ECMAScript标准的语言，Adobe团队在遵从此标准的同时，使其向Java靠拢具有Class-Base的特征，因此，AS3是一门很奇特的语言，它既像Javascript，又像Java（Java与Javascript是两门完全不同的语言）。</p><h2 id="_1-ruby的collect方法" tabindex="-1"><a class="header-anchor" href="#_1-ruby的collect方法" aria-hidden="true">#</a> 1，Ruby的collect方法</h2><p>Ruiby的行码简易，让很多程序员爱不释手。</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code><span class="token comment">#!/usr/bin/ruby</span>
puts <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>collect<span class="token punctuation">{</span><span class="token operator">|</span>x<span class="token operator">|</span> <span class="token number">10</span><span class="token operator">*</span>x<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上例Ruby代码把数组中的每一个元素的值乘以10，然后打印结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">10</span>
<span class="token number">20</span>
<span class="token number">30</span>
<span class="token number">40</span>
<span class="token number">50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-在as3中实现collect方法" tabindex="-1"><a class="header-anchor" href="#_2-在as3中实现collect方法" aria-hidden="true">#</a> 2，在AS3中实现collect方法</h2><p>那么在AS3中，我们能否以类似的方法（collect）操作数组？答案是可以的。Array本身是动态、可继承对象，我们可以继承它，自己实现collect方法；除此之外，我们还可以使用Prototype扩展Array的API。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">collect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">f</span><span class="token operator">:</span>Function</span><span class="token punctuation">)</span> <span class="token operator">:</span> Array <span class="token punctuation">{</span>
	<span class="token keyword">var</span> <span class="token literal-property property">r</span><span class="token operator">:</span>Array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token literal-property property">i</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">setPropertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;collect&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trace</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">i</span><span class="token operator">:</span>int</span><span class="token punctuation">)</span><span class="token operator">:</span>int <span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output: 10,20,30,40,50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展Prototype实现collect方法，这种手段更加巧妙，但它从效率上讲，它逊于以继承的方式扩展Array。</p><h2 id="_3-其它对象如何扩展" tabindex="-1"><a class="header-anchor" href="#_3-其它对象如何扩展" aria-hidden="true">#</a> 3，其它对象如何扩展</h2><p>因为Array是非final对象，所以除了使用扩展原型(prototype)的方法之外，我们还可以使用继承的方法扩展其本身并不支持的API。但是，在AS3中的其它基本对象，例如基元类型String、Number、int等，它们是final对象，是不可被继承的，仅能使用prototype扩展。<br> 因为Array是动态对象，所以直接在Array对象上调用collect方法，并不会引发编译报警，但对于非动态对象，如String、Number等，在调用时需转化为Object对象，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Object</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ago</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ago</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在AS3中，所有对象均基于Object，任何对象都具有prototype，即任何对象均可以使用原型扩展并不存在的API。</p><h2 id="_4-prototype扩展的弊端" tabindex="-1"><a class="header-anchor" href="#_4-prototype扩展的弊端" aria-hidden="true">#</a> 4，Prototype扩展的弊端</h2><p>方便在企业项目开发中并不是唯一考虑的因素，效率在多数情况下比之占有更大的比重。使用Prototype扩展至少有以下三个方面的弊端：</p><ul><li>1）屏蔽了编译时强类型检查，代码错误的机率升高，项目风险增大。</li><li>2）某些对象不得不作额外的类型转换，虽然这种转换并无性能的损耗，但却让你多敲了几个键盘，偏离了简易行码的本宗。</li><li>3）基于Prototype的继承与Class-Base的继承，在AVM中是两种完全不同的实现，Adobe团队在AVM2中正是为了解决Prototype的低效，才引入了Class-Base的机制，显然这种不被官方、社区推崇的方法并不适当在企业项目中应用。</li></ul><p>扩展阅读：Modifying Core Types in ActionScript 3 Using the Prototype Object</p><p>2008年5月</p>`,22),o=[e];function c(l,r){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","02.html.vue"]]);export{k as default};
