import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as e}from"./app-4e8d5300.js";const p={},t=e(`<h1 id="命名空间-如何控制未知方法的调用" tabindex="-1"><a class="header-anchor" href="#命名空间-如何控制未知方法的调用" aria-hidden="true">#</a> 命名空间：如何控制未知方法的调用</h1><p>命名空间对于程序员来讲，应当不会陌生，几乎每写一行代码，就要用到一止一个命名空间。AS3默认大约打开了6个命名空间。</p><h2 id="_1-as3提供的常用的7个命名空间" tabindex="-1"><a class="header-anchor" href="#_1-as3提供的常用的7个命名空间" aria-hidden="true">#</a> 1，AS3提供的常用的7个命名空间</h2><p>internal,private,protected,public,static,as3，前5个命名空间作为类属性访问控制说明，在AS3中 是默认打开的。最后一个命名空间as3，默认也是被打开的，一般很少显式用到它。flash_proxy命名空间在控制动态方法调用时很有用，默认它是关 闭的。</p><p>internal作为默认的命名空间，当程序员未显式使用访问控制说明时，它即被默认。</p><h2 id="_2-如何继承proxy实现匿名方法调用的控制" tabindex="-1"><a class="header-anchor" href="#_2-如何继承proxy实现匿名方法调用的控制" aria-hidden="true">#</a> 2，如何继承Proxy实现匿名方法调用的控制</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">package</span>
<span class="token punctuation">{</span>
  <span class="token keyword">import</span> flash<span class="token punctuation">.</span>display<span class="token punctuation">.</span>Sprite<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@author</span> LIYI &lt;http://yishulun.com/&gt;
   * Email: 9830131@qq.com
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token keyword">extends</span> <span class="token class-name">Sprite</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ProxyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> <span class="token literal-property property">obj</span> <span class="token operator">:</span>MyClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">trace</span><span class="token punctuation">(</span> obj<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&#39;sban&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// output: hello,sban</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">import</span> flash<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span>
<span class="token keyword">import</span> flash<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>flash_proxy<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token punctuation">{</span>
  use namespace flash_proxy<span class="token punctuation">;</span>
	override flash_proxy <span class="token keyword">function</span> <span class="token function">callProperty</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">...</span>parameters</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">*</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>name <span class="token keyword">as</span> QName<span class="token punctuation">)</span><span class="token punctuation">.</span>localName <span class="token operator">==</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello,&quot;</span> <span class="token operator">+</span> parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例代码演示了如何标题问题。需要指出，如果使用FB编译，需要反选&quot;启用严格类型检查&quot;，否则编译不过。</p><h2 id="_3-如何自定义与使用命名空间" tabindex="-1"><a class="header-anchor" href="#_3-如何自定义与使用命名空间" aria-hidden="true">#</a> 3，如何自定义与使用命名空间</h2><p>在单独一个文件中定义，一般位于*.core子包中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">package</span> sban<span class="token punctuation">.</span>as3Expert<span class="token punctuation">.</span>core <span class="token punctuation">{</span>
    <span class="token keyword">public</span> namespace as3internal <span class="token operator">=</span> <span class="token string">&quot;https://yishulun.com/as3internal/2008&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>namespace是FP内部一个特殊的基元类型，它有一个URI值，如果程序员在定义时不指定，编译器将随意分配一个，尽管如此，你也不要让编译器帮你指定，因为在多数情况下你需要明确知道你定义的命名空间是什么。</p><p>namespace可以理解为值类型，只要URI值相同，便是相同的namespace。</p><p>使用自定义的namespace之前，先引入，然后使用use namespace关键字：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> sban<span class="token punctuation">.</span>as3Expert<span class="token punctuation">.</span>core<span class="token punctuation">.</span>as3internal<span class="token punctuation">;</span>
use namespace as3internal<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-包是什么" tabindex="-1"><a class="header-anchor" href="#_4-包是什么" aria-hidden="true">#</a> 4，包是什么？</h2><p>在AS2中，包路径并不是以package单独定义的，它位于Class Name之前，可以理解为类名称的一部分，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">flash<span class="token punctuation">.</span>display<span class="token punctuation">.</span>BitmapData</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在AS3中，包路径虽然以package关键字单独定义，但也可以把它理解为类名称的一部分，package与命名空间没有任何关系。AS3使用package定义包路径，与在AS2中使用class定义prototype继承机制的类对象一样，仅是语法甜头。</p><h2 id="_5-命名空间的无处不在" tabindex="-1"><a class="header-anchor" href="#_5-命名空间的无处不在" aria-hidden="true">#</a> 5，命名空间的无处不在</h2><p>在AS3中，名字并不是唯一的标识符。在AS3中，name的含义往往包括两个部分：命名空间与名称标识。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">public</span> <span class="token keyword">var</span> <span class="token literal-property property">s</span> <span class="token operator">:</span> String<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于上面这例简短的代码，它已经包括两个命名空间，这两个命名空间含于两个QName中。QName是FP中内部名称的一种，在小标题2中，我们可以看到它。一个QName包括两个值，一个localName，是代码字面值，另一个是命名空间的uri值。</p><p>在上例代码中，包括一个命名空间为public、localName为s的QName，及一个命名空间为public、localName为String的QName。</p><p>2010年5月</p>`,25),c=[t];function o(l,i){return n(),s("div",null,c)}const d=a(p,[["render",o],["__file","01.html.vue"]]);export{d as default};
