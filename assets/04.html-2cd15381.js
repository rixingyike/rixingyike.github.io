import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as g,b as e,d as t,a as i,f as o}from"./app-4e8d5300.js";const c="/assets/202120210327210608-d8027921.jpeg",l="/assets/202120210327210607-fc703c39.png",p="/assets/21928-1a179839.jpeg",d="/assets/21931-99b40d6b.png",h="/assets/21934-73c448e5.jpeg",_="/assets/21938-d3e541ad.png",f="/assets/21945-ea530071.png",m="/assets/21943-860463c4.png",u="/assets/21958-d6227990.png",x="/assets/21962-c5515d7d.png",b="/assets/21965-69937f3a.png",w={},E=o('<h1 id="小程序从0到1-第一次在windows机器上使用sim-go需要注意的问题总结" tabindex="-1"><a class="header-anchor" href="#小程序从0到1-第一次在windows机器上使用sim-go需要注意的问题总结" aria-hidden="true">#</a> 小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结</h1><p>在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。</p><p>作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。</p><p>因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc编译器，因此有了这篇教程。</p><h2 id="_1-使用git-bash代替cmd" tabindex="-1"><a class="header-anchor" href="#_1-使用git-bash代替cmd" aria-hidden="true">#</a> <strong>1，使用git bash代替cmd</strong></h2><p>windows读者按照书上第96页，第7.1.2小节“安装仓库管理工具git”的说明，完成了git的安装之后，就不要再使用系统自带的终端工具cmd了，要使用git bash。在任何目录空白处，右键单击，就可以看到“Git Bash Here”的菜单。</p><p>使用git bash代替cmd有哪些好处呢？</p><p>1）首先，cd更加方面</p><p>如果在当前的项目目录打开git bash，会直接定位到当前目录，免去了cd的麻烦。在git bash中，/c/代表c:/，/d/代替d:/，使用习惯是类linux的。</p><p>2）其次，避免将sim.go误判为文件</p>',10),B={id:"_2-golang-org-x类库无法下载的问题",tabindex:"-1"},y=e("a",{class:"header-anchor",href:"#_2-golang-org-x类库无法下载的问题","aria-hidden":"true"},"#",-1),k={href:"http://golang.org/x%E7%B1%BB%E5%BA%93%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"这是一个读者遇到的问题：",-1),A={href:"http://github.com/rixingyike/sim.go",target:"_blank",rel:"noopener noreferrer"},z={href:"http://golang.org/x/net/context:",target:"_blank",rel:"noopener noreferrer"},C={href:"http://golang.org/x/net/context",target:"_blank",rel:"noopener noreferrer"},j={href:"https://golang.org/x/net/context?go-get=1:",target:"_blank",rel:"noopener noreferrer"},F=e("p",null,"因为被墙，国内没有办法直接下载这个Google官方的类库。解决方法：",-1),D=e("p",null,"1）手动下载x类库",-1),G=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`git clone https://github.com/rixingyike/golang.org-x
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),H=e("p",null,"2）将clone下来的x目录放至$GOPATH/src/golang.org目录下",-1),N={href:"http://github.com/rixingyike/sim.go%E2%80%9D",target:"_blank",rel:"noopener noreferrer"},T=o(`<h2 id="_3-如何找到-gopath-src-golang-org目录" tabindex="-1"><a class="header-anchor" href="#_3-如何找到-gopath-src-golang-org目录" aria-hidden="true">#</a> <strong>3，如何找到$GOPATH/src/golang.org目录？</strong></h2><p>在终端中执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看GOPATH所在的目录</p><figure><img src="`+c+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>在windows上cmd中执行go env，可能输出是这样的：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png" alt="image-20210327210802847" tabindex="0" loading="lazy"><figcaption>image-20210327210802847</figcaption></figure><p>如果没有在src目录下找到golang.org目录，新建一个。</p><h2 id="_4-安装gin工具" tabindex="-1"><a class="header-anchor" href="#_4-安装gin工具" aria-hidden="true">#</a> <strong>4，安装gin工具</strong></h2><p>正常情况下，启动服务端后，在浏览器访问localhost:4000/hi，会看到文本的输出。</p><p>这是一位读者看到的：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215316.png" alt="image-20210327215315987" tabindex="0" loading="lazy"><figcaption>image-20210327215315987</figcaption></figure><p>服务尚未启动。需要检查是否在当前项目的后端目录下，执行了debug.sh脚本。</p><p>如果执行debug.sh脚本，终端未被阻塞，可能脚本未执行成功。此时在终端里输入：</p><p>gin</p><p>查看有没有输出。如果输出：</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215449.png" alt="image-20210327215449058" tabindex="0" loading="lazy"><figcaption>image-20210327215449058</figcaption></figure><p>则说明gin尚未安装成功。如果已经按书上第96页的步骤，安装了gin工具。出现这种问题，是因为没有把GOPATH/bin目录添加进windows系统变量PATH中。在windows机器上，右键单击“计算机”，选择“属性”-&gt;“高级系统设置”-&gt;“系统变量”，在当前用户下找到PATH变量，在尾部添加目录。</p><p>安装并设置环境后，再次执行gin指令，如果输出：</p><figure><img src="'+l+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>说明安装成功了。</p><h2 id="_5-如何更新sim-go" tabindex="-1"><a class="header-anchor" href="#_5-如何更新sim-go" aria-hidden="true">#</a> <strong>5，如何更新sim.go</strong></h2>',22),P={href:"http://github.com/rixingyike/sim.go",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"使用以上脚本更新sim.go类库，如果出现了以下输出：",-1),V=e("figure",null,[e("img",{src:"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215527.png",alt:"image-20210327215527375",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20210327215527375")],-1),q=e("p",null,"不用管它，不影响继续征程。",-1),I=e("h2",{id:"_6-在windows10上安装gcc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-在windows10上安装gcc","aria-hidden":"true"},"#"),t(),e("strong",null,"6，在windows10上安装gcc")],-1),L={href:"http://localhost:4000/hi%EF%BC%8C%E6%9C%89%E8%AF%BB%E8%80%85%E9%81%87%E5%88%B0%E8%BF%99%E6%A0%B7%E7%9A%84%E9%94%99%E8%AF%AF%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},M=e("figure",null,[e("img",{src:"https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png",alt:"image-20210327215605004",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20210327215605004")],-1),U=e("p",null,"这是因为没有安装gcc编译器。win10解决方法：",-1),$={href:"https://cygwin.com/install.html%EF%BC%8C%E4%B8%8B%E8%BD%BDsetup-x86_64.exe",target:"_blank",rel:"noopener noreferrer"},S=o('<p>2，下载后，选择网络安装。等列表加载后，在顶部的搜索框里输入gcc。</p><figure><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215618869" tabindex="0" loading="lazy"><figcaption>image-20210327215618869</figcaption></figure><p>在Devel这一组下选择gcc-g++:</p><figure><img src="'+p+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>往后就一路默认安装。</p><p>完成安装后，在终端内输入gcc，会看到有内容输出。</p><p>至于下载时选择哪个镜像地址：</p><figure><img src="'+d+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>一般选择前面的，下载会比较快。</p>',9),W={href:"http://xn--bashdebug-on3o469l64vrv0gy11a.sh",target:"_blank",rel:"noopener noreferrer"},J=e("figure",null,[e("img",{src:h,alt:"0",tabindex:"0",loading:"lazy"}),e("figcaption",null,"0")],-1),K={href:"http://localhost:4000/hi%EF%BC%8C%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},Q=o('<figure><img src="'+_+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>作者用win10作了测试，以上安装gcc的流程可以跑通。</p><h2 id="_7-在win7系统上安装gcc" tabindex="-1"><a class="header-anchor" href="#_7-在win7系统上安装gcc" aria-hidden="true">#</a> <strong>7，在win7系统上安装gcc</strong></h2><figure><img src="'+f+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p>如果是win7 32位系统，按照上面的方法安装，可能会出现以下问题：</p><figure><img src="'+m+'" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure>',6),R={href:"https://www.teamviewer.com/zhCN/",target:"_blank",rel:"noopener noreferrer"},X=e("p",null,"作者在这位读者的电脑上进行远程操作。解决方法是：",-1),Y=e("p",null,"1）首先，将系统变量里的cygwin去掉",-1),Z={href:"https://sourceforge.net/projects/mingw/%EF%BC%8C%E4%B8%8B%E8%BD%BDMinimalist",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://sourceforge.net/projects/mingw-w64%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%B9%B6%E5%AE%89%E8%A3%85%E3%80%82",target:"_blank",rel:"noopener noreferrer"},te=e("p",null,"3）安装以后，仍然是类似的方法，选择gcc-g++package安装",-1),ne=e("figure",null,[e("img",{src:u,alt:"0",tabindex:"0",loading:"lazy"}),e("figcaption",null,"0")],-1),ie=e("p",null,"安装方法是选择后，再选择菜单里的apply change。选择后如下所示：",-1),oe=e("figure",null,[e("img",{src:x,alt:"0",tabindex:"0",loading:"lazy"}),e("figcaption",null,"0")],-1),ae=e("p",null,"在终端里输入gcc --version，正常的输出：",-1),se=e("figure",null,[e("img",{src:b,alt:"0",tabindex:"0",loading:"lazy"}),e("figcaption",null,"0")],-1);function re(ge,ce){const n=s("ExternalLinkIcon");return r(),g("div",null,[E,e("h2",B,[y,t(),e("strong",null,[t("2，"),e("a",k,[t("golang.org/x类库无法下载的问题"),i(n)])])]),v,e("blockquote",null,[e("p",null,[t("C:\\Users\\Administrator>go get "),e("a",A,[t("github.com/rixingyike/sim.go"),i(n)]),t(" package "),e("a",z,[t("golang.org/x/net/context:"),i(n)]),t(' unrecognized import path "'),e("a",C,[t("golang.org/x/net/context"),i(n)]),t('" (https fetch: Get '),e("a",j,[t("https://golang.org/x/net/context?go-get=1:"),i(n)]),t(" dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.)")])]),F,D,G,H,e("p",null,[t("解决了上述问题之后，别忘记再次运行“go get "),e("a",N,[t("github.com/rixingyike/sim.go”"),i(n)])]),T,e("p",null,[t("go get -u "),e("a",P,[t("github.com/rixingyike/sim.go"),i(n)])]),O,V,q,I,e("p",null,[t("启动服务后，访问"),e("a",L,[t("http://localhost:4000/hi，有读者遇到这样的错误："),i(n)])]),M,U,e("p",null,[t("1）去"),e("a",$,[t("https://cygwin.com/install.html，下载setup-x86_64.exe"),i(n)])]),S,e("p",null,[t("gcc安装后，在git "),e("a",W,[t("bash里再次执行debug.sh"),i(n)]),t("（sh文件在windows系统的git bash里也是认的）。输出像这个样子：")]),J,e("p",null,[t("浏览器访问"),e("a",K,[t("http://localhost:4000/hi，是这样的："),i(n)])]),Q,e("p",null,[t("这是一位读者遇到的问题，作者也是第一次遇到。为了解决该问题，作者请读者在电脑上安装了远程工具teamviewer："),e("a",R,[t("https://www.teamviewer.com/zhCN/"),i(n)])]),X,Y,e("p",null,[t("2）然后，如果是win7 32位系统，去这里"),e("a",Z,[t("https://sourceforge.net/projects/mingw/，下载Minimalist"),i(n)]),t(" GNU for Windows，并安装之；如果是win7 64系统，去这里"),e("a",ee,[t("https://sourceforge.net/projects/mingw-w64，下载最新版本并安装。"),i(n)])]),te,ne,ie,oe,ae,se])}const de=a(w,[["render",re],["__file","04.html.vue"]]);export{de as default};
