import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.25d5caa7.js";const u=JSON.parse('{"title":"命名空间：如何控制未知方法的调用","description":"","frontmatter":{"sidebar":false,"date":"2010-05-01T00:00:00.000Z","tags":["AS3 Expert"]},"headers":[],"relativePath":"posts/2010/01.md","filePath":"posts/2010/01.md"}'),p={name:"posts/2010/01.md"},e=l(`<h1 id="命名空间-如何控制未知方法的调用" tabindex="-1">命名空间：如何控制未知方法的调用 <a class="header-anchor" href="#命名空间-如何控制未知方法的调用" aria-label="Permalink to &quot;命名空间：如何控制未知方法的调用&quot;">​</a></h1><p>命名空间对于程序员来讲，应当不会陌生，几乎每写一行代码，就要用到一止一个命名空间。AS3默认大约打开了6个命名空间。</p><h2 id="_1-as3提供的常用的7个命名空间" tabindex="-1">1，AS3提供的常用的7个命名空间 <a class="header-anchor" href="#_1-as3提供的常用的7个命名空间" aria-label="Permalink to &quot;1，AS3提供的常用的7个命名空间&quot;">​</a></h2><p>internal,private,protected,public,static,as3，前5个命名空间作为类属性访问控制说明，在AS3中 是默认打开的。最后一个命名空间as3，默认也是被打开的，一般很少显式用到它。flash_proxy命名空间在控制动态方法调用时很有用，默认它是关 闭的。</p><p>internal作为默认的命名空间，当程序员未显式使用访问控制说明时，它即被默认。</p><h2 id="_2-如何继承proxy实现匿名方法调用的控制" tabindex="-1">2，如何继承Proxy实现匿名方法调用的控制 <a class="header-anchor" href="#_2-如何继承proxy实现匿名方法调用的控制" aria-label="Permalink to &quot;2，如何继承Proxy实现匿名方法调用的控制&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> flash.display.Sprite;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@author</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">LIYI </span><span style="color:#6A737D;">&lt;</span><span style="color:#79B8FF;">https://yishulun.com/</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">   * Email: 9830131@qq.com</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  public class ProxyTest extends Sprite {</span></span>
<span class="line"><span style="color:#E1E4E8;">    public function ProxyTest() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      super();</span></span>
<span class="line"><span style="color:#E1E4E8;">      var obj :MyClass = new MyClass();</span></span>
<span class="line"><span style="color:#E1E4E8;">      trace( obj.hello(&#39;sban&#39;) );</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// output: hello,sban</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">import flash.utils.Proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">import flash.utils.flash_proxy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">class MyClass extends Proxy {</span></span>
<span class="line"><span style="color:#E1E4E8;">  use namespace flash_proxy;</span></span>
<span class="line"><span style="color:#E1E4E8;">	override flash_proxy function callProperty(name:</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">, ...parameters):</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    if ((name </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> QName).localName == &#39;hello&#39;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        return &quot;hello,&quot; + parameters[0];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    return null;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> flash.display.Sprite;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">LIYI </span><span style="color:#6A737D;">&lt;</span><span style="color:#005CC5;">https://yishulun.com/</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">   * Email: 9830131@qq.com</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  public class ProxyTest extends Sprite {</span></span>
<span class="line"><span style="color:#24292E;">    public function ProxyTest() {</span></span>
<span class="line"><span style="color:#24292E;">      super();</span></span>
<span class="line"><span style="color:#24292E;">      var obj :MyClass = new MyClass();</span></span>
<span class="line"><span style="color:#24292E;">      trace( obj.hello(&#39;sban&#39;) );</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// output: hello,sban</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">import flash.utils.Proxy;</span></span>
<span class="line"><span style="color:#24292E;">import flash.utils.flash_proxy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">class MyClass extends Proxy {</span></span>
<span class="line"><span style="color:#24292E;">  use namespace flash_proxy;</span></span>
<span class="line"><span style="color:#24292E;">	override flash_proxy function callProperty(name:</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">, ...parameters):</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    if ((name </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> QName).localName == &#39;hello&#39;) {</span></span>
<span class="line"><span style="color:#24292E;">        return &quot;hello,&quot; + parameters[0];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    return null;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上例代码演示了如何标题问题。需要指出，如果使用FB编译，需要反选&quot;启用严格类型检查&quot;，否则编译不过。</p><h2 id="_3-如何自定义与使用命名空间" tabindex="-1">3，如何自定义与使用命名空间 <a class="header-anchor" href="#_3-如何自定义与使用命名空间" aria-label="Permalink to &quot;3，如何自定义与使用命名空间&quot;">​</a></h2><p>在单独一个文件中定义，一般位于*.core子包中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> sban.as3Expert.core {</span></span>
<span class="line"><span style="color:#E1E4E8;">    public </span><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">as3internal</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;https://yishulun.com/as3internal/2008&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> sban.as3Expert.core {</span></span>
<span class="line"><span style="color:#24292E;">    public </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">as3internal</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;https://yishulun.com/as3internal/2008&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>namespace是FP内部一个特殊的基元类型，它有一个URI值，如果程序员在定义时不指定，编译器将随意分配一个，尽管如此，你也不要让编译器帮你指定，因为在多数情况下你需要明确知道你定义的命名空间是什么。</p><p>namespace可以理解为值类型，只要URI值相同，便是相同的namespace。</p><p>使用自定义的namespace之前，先引入，然后使用use namespace关键字：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sban.as3Expert.core.as3internal;</span></span>
<span class="line"><span style="color:#E1E4E8;">use namespace as3internal;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sban.as3Expert.core.as3internal;</span></span>
<span class="line"><span style="color:#24292E;">use namespace as3internal;</span></span></code></pre></div><h2 id="_4-包是什么" tabindex="-1">4，包是什么？ <a class="header-anchor" href="#_4-包是什么" aria-label="Permalink to &quot;4，包是什么？&quot;">​</a></h2><p>在AS2中，包路径并不是以package单独定义的，它位于Class Name之前，可以理解为类名称的一部分，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flash</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">display</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">BitmapData</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flash</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BitmapData</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>在AS3中，包路径虽然以package关键字单独定义，但也可以把它理解为类名称的一部分，package与命名空间没有任何关系。AS3使用package定义包路径，与在AS2中使用class定义prototype继承机制的类对象一样，仅是语法甜头。</p><h2 id="_5-命名空间的无处不在" tabindex="-1">5，命名空间的无处不在 <a class="header-anchor" href="#_5-命名空间的无处不在" aria-label="Permalink to &quot;5，命名空间的无处不在&quot;">​</a></h2><p>在AS3中，名字并不是唯一的标识符。在AS3中，name的含义往往包括两个部分：命名空间与名称标识。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">;</span></span></code></pre></div><p>对于上面这例简短的代码，它已经包括两个命名空间，这两个命名空间含于两个QName中。QName是FP中内部名称的一种，在小标题2中，我们可以看到它。一个QName包括两个值，一个localName，是代码字面值，另一个是命名空间的uri值。</p><p>在上例代码中，包括一个命名空间为public、localName为s的QName，及一个命名空间为public、localName为String的QName。</p><p>2010年5月</p>`,25),o=[e];function c(t,r,i,y,E,d){return a(),n("div",null,o)}const m=s(p,[["render",c]]);export{u as __pageData,m as default};
