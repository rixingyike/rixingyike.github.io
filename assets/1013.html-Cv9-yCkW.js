import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as a,o as r}from"./app-B4u5Po8L.js";const o={};function i(n,t){return r(),p("div",null,t[0]||(t[0]=[a('<h1 id="javascript到底是不是面向对象语言" tabindex="-1"><a class="header-anchor" href="#javascript到底是不是面向对象语言"><span>JavaScript到底是不是面向对象语言？</span></a></h1><p>当然是。</p><p>为了讲清楚这个问题，我们需要先看一看「什么是面向对象编程」和「什么是面向对象语言」。</p><p>什么是面向对象编程？使用面向对象语言进行的编程就是面向对象编程。</p><p>什么是面向对象语言？在面向对象编程中使用的编程语言就是编程语言。</p><p>好吧，是不是感觉我说了两句废话，确实，编程语言可以自举，但是概念不可以。在讨论面向对象语言的时候，一般要界定这门语言的三个面向对象特征：封装、继承和多态。凡具有这三个特征，就是面向对象语言；不具有，就不是。</p><p>也有人讲过，面向对象特征有四个：封装、抽象、继承和多态，比一般的说法多了一个抽象。其实抽象不能算是面向对象的基本特征，因为在面向过程编程中，也有抽象；本质上编程就是抽象，就是将现实世界中一个或几个层面的东西剥离出来，用编程语言表达出来及进行交互控制。</p><p>进一步考察面向对象语言的三个基本特征，我们可以从语言的具体功能上重新阐述它们，这实际上还有助于我们记忆，否则，这三个特征名字你未必记得牢固。</p><p>先看封装。什么是封装功能？就是把属性、方法封装在一个类（class）中。你想一想，在你接触的编程语言中，C#、C++、Java 等，它们是不是允许我们这么干？</p><p>再看继承。什么继承功能？先定义（封装）了一个类 A，接着又定义了一个类 B，让 B 继承于 A，这样 A 的属性和方法（公开的）B 也有了（继承了）。</p><p>最后看一下多态。什么是多态？这是使用时的一个特征，与接口或虚类有关。先声明一个接口 I，然后让类 A 实现它，让类 B 也实现它。一个类型为 I 的变量，当它是类 A 的实例时，它具有类 A 的特性和行为特征，当它是类 B 的实例时，它又开始具有类 B 的特性和行为特征，这就是多态，仿佛有多个状态。</p><p>所以说，封装、继承和多态，这三个特征它们分别对应于语言中类的定义、类的继承和接口的定义和使用——这三个方面的能力，都有具体的功能含义。反观抽象，它明确对应于语言中的那个能力呢？没有，所以抽象并不能算是面向对象语言的一个基本特征。</p><p>最后，回头来看问题，JavaScript 是不是面向对象语言？那就看它具不具备三个面向对象的基本特征吧。</p><p>首先封装，JS 有 class，还有美元符号（$）开头的私有属性，可以。然后是继承，ES6 有 extends，没问题。即使在 ES6 之前，也可以在一个对象上定义属性和方法，可以使用原型（prototype）实现对象之间的继承，对封装和继承的支持也没有问题。最后多态，也没有问题。虽然 JS 没有接口（它目前仅是保留了 interface 作为语言关键字），但是它的 Object 类型几乎是万能的，相当于是任何一个对象的接口，实现多态也完全不是问题。</p><p>使用 extends 关键字可以实现继承，使用原型也可以实现继承，它们只是实现方法不同，对应的面向对象的内在继承思想却是一致的。</p><p>最后，留给你两个思考题：</p><ul><li>Go 语言算是面向对象语言吗？</li><li>面向对象语言为什么会出现？</li></ul>',17)]))}const l=e(o,[["render",i],["__file","1013.html.vue"]]),m=JSON.parse('{"path":"/posts/2022/1013.html","title":"JavaScript到底是不是面向对象语言？","lang":"zh-CN","frontmatter":{"sidebar":false,"date":"2022-10-13T00:00:00.000Z","category":["编程"],"tags":["语言"],"description":"JavaScript到底是不是面向对象语言？ 当然是。 为了讲清楚这个问题，我们需要先看一看「什么是面向对象编程」和「什么是面向对象语言」。 什么是面向对象编程？使用面向对象语言进行的编程就是面向对象编程。 什么是面向对象语言？在面向对象编程中使用的编程语言就是编程语言。 好吧，是不是感觉我说了两句废话，确实，编程语言可以自举，但是概念不可以。在讨论面...","head":[["meta",{"property":"og:url","content":"https://yishulun.com/posts/2022/1013.html"}],["meta",{"property":"og:site_name","content":"艺述论"}],["meta",{"property":"og:title","content":"JavaScript到底是不是面向对象语言？"}],["meta",{"property":"og:description","content":"JavaScript到底是不是面向对象语言？ 当然是。 为了讲清楚这个问题，我们需要先看一看「什么是面向对象编程」和「什么是面向对象语言」。 什么是面向对象编程？使用面向对象语言进行的编程就是面向对象编程。 什么是面向对象语言？在面向对象编程中使用的编程语言就是编程语言。 好吧，是不是感觉我说了两句废话，确实，编程语言可以自举，但是概念不可以。在讨论面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-21T15:36:59.000Z"}],["meta",{"property":"article:tag","content":"语言"}],["meta",{"property":"article:published_time","content":"2022-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-21T15:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript到底是不是面向对象语言？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-21T15:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李艺\\",\\"url\\":\\"https://yishulun.com\\"}]}"]]},"headers":[],"git":{"createdTime":1671674770000,"updatedTime":1695310619000,"contributors":[{"name":"LIYI","username":"LIYI","email":"9830131@qq.com","commits":5,"url":"https://github.com/LIYI"}]},"readingTime":{"minutes":3.34,"words":1003},"filePathRelative":"posts/2022/1013.md","localizedDate":"2022年10月13日","excerpt":"\\n<p>当然是。</p>\\n<p>为了讲清楚这个问题，我们需要先看一看「什么是面向对象编程」和「什么是面向对象语言」。</p>\\n<p>什么是面向对象编程？使用面向对象语言进行的编程就是面向对象编程。</p>\\n<p>什么是面向对象语言？在面向对象编程中使用的编程语言就是编程语言。</p>\\n<p>好吧，是不是感觉我说了两句废话，确实，编程语言可以自举，但是概念不可以。在讨论面向对象语言的时候，一般要界定这门语言的三个面向对象特征：封装、继承和多态。凡具有这三个特征，就是面向对象语言；不具有，就不是。</p>\\n<p>也有人讲过，面向对象特征有四个：封装、抽象、继承和多态，比一般的说法多了一个抽象。其实抽象不能算是面向对象的基本特征，因为在面向过程编程中，也有抽象；本质上编程就是抽象，就是将现实世界中一个或几个层面的东西剥离出来，用编程语言表达出来及进行交互控制。</p>","autoDesc":true}');export{l as comp,m as data};
