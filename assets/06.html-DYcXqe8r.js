import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,a as s,b as h,f as a,r,o as p}from"./app-DS9_dmLP.js";const k="/assets/image-20230923200916559-CN3KOvRg.png",d="/assets/image-20230923192404581-C9wmi2cj.png",g="/assets/image-20230923193325205-By_PSLOm.png",o="/assets/image-20230923193548972-BJJa7fax.png",c="/assets/image-20230923194108099-DoDm1t4K.png",u={};function b(m,i){const e=r("Message");return p(),n("div",null,[i[0]||(i[0]=l('<h1 id="bun-介绍-bun-到底会吃掉多少内存-为何一个不大的博客程序就能吃掉700-mb内存-二" tabindex="-1"><a class="header-anchor" href="#bun-介绍-bun-到底会吃掉多少内存-为何一个不大的博客程序就能吃掉700-mb内存-二"><span>Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二）</span></a></h1><p>接着<a href="https://yishulun.com/posts/2023/05.html" target="_blank" rel="noopener noreferrer">上一篇</a>关于包管理工具演进的介绍，下面开始介绍 Bun 相比于传统技术栈框架及工具，具体有哪些优势。</p><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>bun 的初始化简单直接，使用下列指令会直接将当前目录初始化为一个 bun 项目工程：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数-y 代表静默，不需要提问，所有初始化产生的副任用产品都在当前目录下，所有配置在完成后都可以在文件中修改。init 指令会产生 lock 文件、package.json 文件、tsconfig.json 配置文件等。bun 默认使用 TS 作为开发语言。</p><figure><img src="'+k+`" alt="image-20230923200916559" tabindex="0" loading="lazy"><figcaption>image-20230923200916559</figcaption></figure><h2 id="运行指令-空间换时间" tabindex="-1"><a class="header-anchor" href="#运行指令-空间换时间"><span>运行指令，空间换时间</span></a></h2><p>目录初始化以后会产生一个 index.ts 文件，内容极其简单：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello via Bun!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以监听方式运行它：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --watch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.ts</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>监听方式大家都懂，当我们修改源码后，bun 会监测到文件的改动并自动运行代码。这是运行单个文件，也可以在 package.json 中添加小脚本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;scripts&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   &quot;dev&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;bun --watch run index.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加后，通过 bun dev 运行，运行指令的效果是等同的。</p><p>bun 有一个参数--smol，官方文档说如果加上这个参数，可以少占用内存。这让我怀疑 bun 在各方面之所以速度表现优秀，在于它大量采用了“空间换时间”的优化策略，它在运行之后，内存占用必定很多。</p><p>于是，我通过活动监测器查看 bun 的内存占用：</p><figure><img src="`+d+'" alt="image-20230923192404581" tabindex="0" loading="lazy"><figcaption>image-20230923192404581</figcaption></figure><p>注意，这里有两个 bun，这是使用 watch 启动的特征，一个是守护进程，一个是真正的应用进程。上面那个 PID 为 98344 的应该是守护进程，而下面那个 PID 为 98345 的进程应该是应用进程。</p><p>我分别添加--smol 参数与不添加参数，做两次测试，发现内存变化寥寥无几。看来使用 smol 参数与否，并没有明显影响内存占用啊。</p><p>也可能是当前这个只打印一行“hello world”的程序太简单了，下面我换一个稍微复杂的博客程序进行测试，首次是一般模式：</p><figure><img src="'+g+'" alt="image-20230923193325205" tabindex="0" loading="lazy"><figcaption>image-20230923193325205</figcaption></figure><p>占用了约 730MB 内存了，好家伙，快到一个 G 的内存了。</p><p>然后看启用了 smol 模式的内存占用：</p><figure><img src="'+o+`" alt="image-20230923193548972" tabindex="0" loading="lazy"><figcaption>image-20230923193548972</figcaption></figure><p>占用了约 722MB 内存！我不能说 smol 这个参数没有作用，毕竟同样的项目是少了几 MB 的。但减少的实在太少了。</p><p>注意，在测试的时候，前后两次使用的指令是这样的：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --watch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vitepress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --smol</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --watch</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vitepress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两次的指令都加上了--bun 参数，这个参数代表使用 bun 作为 JS 语言的运行时，而非环境中默认的 Node.js。</p><p>下面，我们回到 vitepress 的普通运行模式，不再使用 bun 这个运行时，使用 Node.js，指令是这样的：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --watch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vitepress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者直接使用旧脚本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vitepress</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这是在使用 Node.js 作为 JS 的运行时，它的内存占用一下就降下来了：</p><figure><img src="`+c+`" alt="image-20230923194108099" tabindex="0" loading="lazy"><figcaption>image-20230923194108099</figcaption></figure><p>只有 182MB！</p><p>从 730MB 降到了 182MB，<strong>说明 bun 为了提高运行效率，确实很有可能狠狠地采用了“空间换时间”的策略</strong>。这个世界能量是守恒的，在一个地方占优了，必然在另一个地方会有所损耗，这是肯定的。为什么别的运行时都没有 smol 参数，bun 为什么专门搞一个 smol 参数？它大概也预感到了它需要这个东西。</p><h2 id="使用-jsx-语法" tabindex="-1"><a class="header-anchor" href="#使用-jsx-语法"><span>使用 JSX 语法</span></a></h2><p>下面试用 jsx 功能，首先安装类库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-dom</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后分别创建两个文件：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// message.tsx</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> style</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">={{color: &#39;red&#39;}}&gt;{props.text}&lt;/h1&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    &lt;/body&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  );</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// index.tsx</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> Message</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./message&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">console.log(&lt;Message</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> text</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着运行测试指令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bun</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> index.tsx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回：</p>`,45)),s("blockquote",null,[h(e,{text:"Hello world!"})]),i[1]||(i[1]=s("p",null,"没有问题。",-1)),i[2]||(i[2]=s("p",null,[a("在同一个项目中，可以写 ts 代码，也可以写 jsx 代码，并且不需要额外的配置。bun 靠文件的后缀名决定要启用什么样的加载器，"),s("strong",null,"当我们在文件内使用 jsx 语法时，文件后缀就必须写成 tsx 或 jsx"),a("。")],-1)),i[3]||(i[3]=s("p",null,"除此之外，react 与 react-dom 还是要安装的，bun 只是替代了网络基础软件层次的 Node.js，它并没有替代业务软件层次的框架，诸如 Vue、React、Vite 等类库，如果在项目中用到它们了，首先还是需要使用 bun install 指令安装的。",-1)),i[4]||(i[4]=s("p",null,"这一篇就说到这里，主要介绍了 bun 在运行时会占用大量内存，以及如何使用 jsx 语法，下一篇继续介绍 bun。",-1))])}const A=t(u,[["render",b],["__file","06.html.vue"]]),v=JSON.parse('{"path":"/posts/2023/06.html","title":"Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二）","lang":"zh-CN","frontmatter":{"date":"2023-09-24T16:27:50.000Z","tags":["bun"],"description":"Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二） 接着上一篇关于包管理工具演进的介绍，下面开始介绍 Bun 相比于传统技术栈框架及工具，具体有哪些优势。 初始化 bun 的初始化简单直接，使用下列指令会直接将当前目录初始化为一个 bun 项目工程： 参数-y 代表静默，不需要提问，所有初始化产生的副任用产...","head":[["meta",{"property":"og:url","content":"https://yishulun.com/posts/2023/06.html"}],["meta",{"property":"og:site_name","content":"艺述论"}],["meta",{"property":"og:title","content":"Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二）"}],["meta",{"property":"og:description","content":"Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二） 接着上一篇关于包管理工具演进的介绍，下面开始介绍 Bun 相比于传统技术栈框架及工具，具体有哪些优势。 初始化 bun 的初始化简单直接，使用下列指令会直接将当前目录初始化为一个 bun 项目工程： 参数-y 代表静默，不需要提问，所有初始化产生的副任用产..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-28T04:00:22.000Z"}],["meta",{"property":"article:tag","content":"bun"}],["meta",{"property":"article:published_time","content":"2023-09-24T16:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-28T04:00:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-24T16:27:50.000Z\\",\\"dateModified\\":\\"2023-09-28T04:00:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李艺\\",\\"url\\":\\"https://yishulun.com\\"}]}"]]},"headers":[{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"运行指令，空间换时间","slug":"运行指令-空间换时间","link":"#运行指令-空间换时间","children":[]},{"level":2,"title":"使用 JSX 语法","slug":"使用-jsx-语法","link":"#使用-jsx-语法","children":[]}],"git":{"createdTime":1695469628000,"updatedTime":1695873622000,"contributors":[{"name":"LIYI","username":"LIYI","email":"9830131@qq.com","commits":3,"url":"https://github.com/LIYI"}]},"readingTime":{"minutes":4.16,"words":1249},"filePathRelative":"posts/2023/06.md","localizedDate":"2023年9月24日","excerpt":"\\n<p>接着<a href=\\"https://yishulun.com/posts/2023/05.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">上一篇</a>关于包管理工具演进的介绍，下面开始介绍 Bun 相比于传统技术栈框架及工具，具体有哪些优势。</p>\\n<h2>初始化</h2>\\n<p>bun 的初始化简单直接，使用下列指令会直接将当前目录初始化为一个 bun 项目工程：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">bun</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> init</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> -y</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{A as comp,v as data};
