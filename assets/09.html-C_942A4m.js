import{_ as a,c as i,b as n,o as e}from"./app-BKBtgOoW.js";const t={};function p(l,s){return e(),i("div",null,s[0]||(s[0]=[n(`<p>在 webpack 工程中，无论是使用 pnpm，还是 yarn，在运行项目之前都需要执行 pnpm i 或 yarn，这是在安装依赖项，将项目代码中引用的类库放在当前项目的 node_modules 目录下。</p><p>一般情况下，对于复杂的项目这个过程耗时会比较久，这是 Node.js 作为基础构架的痛点，也是 bun 着力解决与优化的亮点。在<a href="https://yishulun.com/posts/2023/05.html" target="_blank" rel="noopener noreferrer">第一篇</a>中，我们就已经详细介绍过了，bun 在这方面将其它包管理工具甩开了一个数量级。</p><p>但这远远还不够，bun 做的还更多。</p><p>bun 在安装速度优化之外，还提供了一个<strong>自动安装</strong>的功能。这个特征，目的在于实现<strong>零配置运行代码</strong>。对于一个 bun 项目，没有什么是不可缺失的，什么 package.json 等文件，统统都可以没有。<strong>代码即是项目本身，有代码就可以运行</strong>。</p><p>下面我们深入了解一下这个自动安装的机制。</p><p>先看实现了什么效果。所谓的自动安装，就是不需要执行 bun i，直接通过 bun run 运行代码，遇到本地没有的依赖项，bun 先自己下载安装然后再运行代码。对于下面的代码：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">src/index.ts</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">lodash</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">array</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fill</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">array</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[&#39;a&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;a&#39;,</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&#39;a&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目中还没有添加过 lodash 这个类库，没关系，当我们执行 bun run 指令时：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bun</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">run</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">src/index.ts</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">//</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">...</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">installing</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dependency</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bun 会自动下载、安装好 lodash，然后再运行 ts 代码。这时候如果你扫一眼 index.ts 文件所在的目录，发现什么变化都没有，那下载的 lodash 放到哪里去了？（这一点后面会说。）</p><p>要实现自动安装，有几个问题需要解决：</p><p>1）什么情况下启用自动安装？</p><p>2）安装类库的哪个版本？</p><p>3）要不要下载选定的版本，从哪里下载，放在哪里？</p><h2 id="_1、什么情况下启动自动安装" tabindex="-1"><a class="header-anchor" href="#_1、什么情况下启动自动安装"><span>1、什么情况下启动自动安装</span></a></h2><p>先看第一个问题，bun 通过查看源码目录下是否存在 node_modules 目录，以此决定要不要启动自动安装。没有 node_modules 就启用，有则不启用。此处，官方文档说，这个开关还受到<code>$HOME/.bunfig.toml</code> 配置文件或项目目录下的 <code>bunfig.toml</code> 配置文件的制约，如果配置文件里面有一个 install.auto 等于 force 的配置节点，则会强制启用自动安装。</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">install</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">auto</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">force</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>经实践，这个配置字段不好使。</p><p>无论将配置文件放在哪里，放在项目的目录下，还是放在$HOME 下，都不起作用。想查看自动安装的效果，目前最好使的方式是在一个空目录下放置上面 index.ts 代码，然后执行 bun run 指令，这是可以 100% 复现效果的。</p><p>如果你的项目是新项目，没有被 pnpm、yarn 等包管理工具蹂躏过，本身就没有 node_modules 目录，那么自动安装后仍然没有，也就是说，下次你仍然可以继续享用自动安装的便利。对于开发者来说，你只需要写代码就可以，想用哪个类库，直接使用 import 引入，根本不必考虑安装的问题。整个 github 上的开源类库，都在你的操控范围之内。（当然了，前提是你的网卡得能顺利访问到 github。）</p><h2 id="_2、如何确定类库版本" tabindex="-1"><a class="header-anchor" href="#_2、如何确定类库版本"><span>2、如何确定类库版本</span></a></h2><p>在代码中使用 import 语句时，我们是不能直接指定其版本的，像下面这种写法就不合法：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">_</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">lodash@4.0.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">不合法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以后 bun 风行起来以后，或许能够推动修改 JS 标准，使上述这行代码成立。目前，当 bun 发现正常运行代码需要 lodash 类库时，它会依次从三个地方询问版本：</p><p>1）先看项目中的 bun.lockb 文件。如果本项目安装过 lodash 这个类库，则 bun.lockb 文件一定会有记录，里面有明确的版本。为了保证一个项目中引用同一个类库的版本保持一致，此处直接使用缓存过的版本。bun.lockb 文件并不一定是自己执行 bun add 指令产生的，如果我们的项目代码是从团队仓库中拉出来的，这个 bun.lockb 文件可能是同事产出的。<strong>使用同事已经验证过的类库版本</strong>，是保证团队协作顺利进行的基本准则，同时也是不需要言明就存在的准则。</p><p>2）如果没有 bun.lockb 文件，那就看看 package.json 文件。如果这是一个使用过 pnpm 或 yarn 的旧项目，它可能有一个 package.json 文件，里面的 devDependencies 节点或 dependencies 节点记录了本地项目的依赖项，找到 lodash，取其版本即可。</p><p>3）如果 package.json 中也没有记录 lodash 的版本，最后一招，就只有默认使用 latest 版本了。</p><h2 id="_3、如何下载与缓存" tabindex="-1"><a class="header-anchor" href="#_3、如何下载与缓存"><span>3、如何下载与缓存</span></a></h2><p>确定了版本，就是下载了。</p><p>1）从本地全局缓存目录下查找 lodash 的指定版本，这个全局缓存目录默认位于~/.bun/install/cache，在这个目录下查找<code>&lt;pkg&gt;@&lt;version&gt;</code>，如果找到了就直接使用。这里还有一个特殊情况，如果在上一步指定的版本是 latest，在这一步则要求上一次下载的时间不能超过 24 小时，如果超过了则不能使用，要视为未找到版本对待。</p><p>这里可能会产生未知 Bug，当团队中的两个人使用同一个类库并且均是以 latest 确定版本的情况下，有可能两个人实际使用的版本不一致。同一个项目在不同的协作者手里使用不一致的版本，这本身就是风险，尽管这种风险概率很小，但它确实有可能存在。为此，在团队开发中，<strong>使用版本明确的类库版本</strong>是一项基本准则，第一个建立项目的人，一定要将版本写明在 package.json 里面，或者保留在 bun.lockb 文件里。一些开发者可能看 bun.lockb 这个文件名字奇怪，而将它打入.gitignore 冷宫中，这是错误的行为。</p><p>在明确版本的时候，要使用 4.0.0 这样明确的版本号，而不要使用<code>^4.0.0</code>这样的版本号。后者版本号中的尖括号在正则表达式中是“开始”的意思，在这里也可以理解为“开始”，意思是大于等于某个版本，这样的版本号一般称为 semver range version，它是一个范围，范围版本是不适宜在项目中直接使用的。</p><p>2）如果从本地全局缓存中没有取到想要的类库版本，就必须从外网下载了。bun 从 npm 的软件源下载类库的指定版本。<strong>bun 立志要做零配置运行的快速框架</strong>，在开始的时候它可以没有任何配置，它直接使用了 npm 中配置的软件源，这是它作为后起之秀的优势。如果要配置 bun 自己的软件源，或实现软件源地址国产化，可以在<code>$HOME/.bunfig.toml</code> 文件中修改 install.registry 配置节点：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">install</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">registry</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">=</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http://registry.npm.taobao.org</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3）如果从外网下载不了，那项目就运行不下去了，本地研发中止。不过看过前面的介绍，你也发现了，对于团队协作，直接将同事的全局仓库缓存拷贝过来也是可以的，这还可以大大节省下载的时间。</p><p>有人甚至提议将本地全局缓存设置成某个局域网的共享目录，大家维护同一个缓存，不要这样做。这个目录不仅有读取，还有写入，两个人同时写入可能会发现意想不到的错乱。<strong>宁肯在一个地方缓存，然后分发给所有人，也好过所有人都有权限维护它，这是 CDN 分发的思维。</strong></p><h2 id="_4、最佳实践" tabindex="-1"><a class="header-anchor" href="#_4、最佳实践"><span>4、最佳实践</span></a></h2><p>最后说一下最佳实践。</p><p>既然 bun 有自动安装的功能，就要用起来，不要再让项目目录动辄就有几百上千 MB 的大小，团队里第一个创建项目的人，使用 bun add 指令创建好 bun.lockb 文件并随项目源码分享给他人。同事只需拿到 bun.lockb 文件就可以了，本地的 package.json 与 node_modules 都不需要有。但是这里有一个问题需要注意，这个 bun.lockb 是二进制格式的，这意味着如果团队中有两个以上的人同时维护了该文件，那么文件冲突便没有办法解决了，所以最好这个 bun.lockb 文件由项目的 owner 负责维护，其它人仅负责拉取就可以了。</p>`,39)]))}const k=a(t,[["render",p],["__file","09.html.vue"]]),d=JSON.parse('{"path":"/posts/2023/09.html","title":"bun 介绍四：自动安装依赖项，bun 立志要做一个零配置的快速框架","lang":"zh-CN","frontmatter":{"createTime":"2023-09-28T08:53:46.000Z","tags":["bun"],"title":"bun 介绍四：自动安装依赖项，bun 立志要做一个零配置的快速框架","description":"在 webpack 工程中，无论是使用 pnpm，还是 yarn，在运行项目之前都需要执行 pnpm i 或 yarn，这是在安装依赖项，将项目代码中引用的类库放在当前项目的 node_modules 目录下。 一般情况下，对于复杂的项目这个过程耗时会比较久，这是 Node.js 作为基础构架的痛点，也是 bun 着力解决与优化的亮点。在第一篇中，我们...","head":[["meta",{"property":"og:url","content":"https://yishulu.com/posts/2023/09.html"}],["meta",{"property":"og:site_name","content":"艺述论"}],["meta",{"property":"og:title","content":"bun 介绍四：自动安装依赖项，bun 立志要做一个零配置的快速框架"}],["meta",{"property":"og:description","content":"在 webpack 工程中，无论是使用 pnpm，还是 yarn，在运行项目之前都需要执行 pnpm i 或 yarn，这是在安装依赖项，将项目代码中引用的类库放在当前项目的 node_modules 目录下。 一般情况下，对于复杂的项目这个过程耗时会比较久，这是 Node.js 作为基础构架的痛点，也是 bun 着力解决与优化的亮点。在第一篇中，我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T08:31:40.000Z"}],["meta",{"property":"article:tag","content":"bun"}],["meta",{"property":"article:modified_time","content":"2025-02-21T08:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"bun 介绍四：自动安装依赖项，bun 立志要做一个零配置的快速框架\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T08:31:40.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":7.56,"words":2269},"git":{"updatedTime":1740126700000,"changelog":[{"hash":"c178bdf56fc2561b8edb869f99e09ad4eea026b8","date":1740126700000,"email":"9830131@qq.com","author":"李艺","message":"2025-02-21: Automatic commit","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/c178bdf56fc2561b8edb869f99e09ad4eea026b8"},{"hash":"59640e28c6b63e0f54e23f0a85af6996d2b42013","date":1696647144000,"email":"9830131@qq.com","author":"LIYI","message":"2023-10-07_10:52","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/59640e28c6b63e0f54e23f0a85af6996d2b42013"},{"hash":"847d85fea2b1e95be37e4a228a52ec57865f530b","date":1695873622000,"email":"9830131@qq.com","author":"LIYI","message":"2023-09-28_12:00","commitUrl":"https://github.com/rixingyike/yishulun_blog_mdandcode/commit/847d85fea2b1e95be37e4a228a52ec57865f530b"}]},"autoDesc":true,"filePathRelative":"posts/2023/09.md","categoryList":[{"id":"18958e","sort":10001,"name":"posts"},{"id":"ac244c","sort":10002,"name":"2023"}]}');export{k as comp,d as data};
