<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>LIYI</title>
        <link>https://yishulun.com/</link>
        <description>LIYI' Blog</description>
        <lastBuildDate>Wed, 15 Nov 2023 07:05:54 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>LIYI</title>
            <url>https://yishulun.com/logo.svg</url>
            <link>https://yishulun.com/</link>
        </image>
        <copyright>MIT License</copyright>
        <atom:link href="https://yishulun.com/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[50 行 Python 代码调用自己在 ChatGPT 创建的私有 GPTs]]></title>
            <link>https://yishulun.com/./src/posts/2023/41.html</link>
            <guid>https://yishulun.com/./src/posts/2023/41.html</guid>
            <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>50 行 Python 代码调用自己在 ChatGPT 创建的私有 GPTs</h1>
<p>你好，今天聊一下 ChatGPT 的 GPTs。</p>
<p>11 月 6 日，OpenAI 举办了自己的第一次开发者春晚，并现场推出了新模型 GPT-4 Turebo，及 Plus 会员用户可以基于新模型进行功能自定义的 GPTs。</p>
<p>GPTs 是什么？</p>
<p>简单理解，它就是一个充许用户不使用任何编程技术、不需要调用 ChatGPT API 即可完成训练的一个 AI。有人说，我不需要 GPTs，我用 LangChain+Agent+ChatGPT API 或其它大语言模型的 API，也能实现一个自定义的 GPT。</p>
<p>没错，这么理解是对的！但不是所有人都会编程，也不是所有人都知道 LangChain 如何调用以及 AI Agent 如何开发。ChatGPT 适时推出的 GPTs，它的目标用户群体是广大的不会编程的用户。据 OpenAI 宣称，ChatGPT 周活已经达到了 1 亿，预测不久，几百万个甚至几千万个 GPTs 将出现在 GPT Store上。</p>
<p>笔者在这篇文章“<a href="https://mp.weixin.qq.com/s/VlNvziKjGsIWYxef9w3Xig">不用编码，也不用会写严格的提示，创建自己的第一个 GPT</a>”中已经详细介绍过徒手创建 GPTs 的方法，很简单，整个过程只需要七步，简单设置一下，再上传一些文件，大功即可告成。在发布的时候，还可以选择私有、分享可用及完全公开。</p>
<p>如下所示，这是笔者创建的 GPTs————Story Weaver，它是一个私有的GPTs。</p>
<p><img src="./assets/image-20231115141948319.png" alt="Story Weaver"></p>
<p>对于我们不想让别人看到的，只想让我们自己或团队成员使用的模型，我们肯定要发布为私有。对于私有的 GPTs，如果我们还想实现在本地自如地调用、并且是程序自动化调用，我们应该怎么做呢？</p>
<p>有人可能会想：“我们可以使用 OpenAI 官方提供的 API。”</p>
<p>很抱歉，目前 OpenAI 还没有公布这样的接口；即使以后有，它极有可能也是需要付费的。我们购买 Plus 会员已经花了钱，在调用自己创建的 GPTs 的时候，为什么还要花钱？</p>
<p>本篇笔者就用银河系最通俗易用的编程语言————Python，用不到 50 行的总代码，带你打开新世界大门。不需要额外付费，也不需要调用任何 API，更不需要设置什么 API Token，就可以自动化调用我们自己创建的 GPTs。</p>
<p>在创建 GPTs 的时候，数据文件是我们提供的，消费代码也是在我们本地运行的，这就相当于我们在本地借用了 ChatGPT 强大的大语言模型能力，且成本低廉、方法又简单。</p>
<h2>准备工作</h2>
<p>如果你想顺利运行稍后笔者提供的 Python 示例，你需要准备以下这些条件：</p>
<ul>
<li>一个附带 Plus 会员的 ChatGPT 帐号</li>
<li>本地电脑已经安装了 Python 3.7 或以上的版本</li>
</ul>
<p>有人可能说：“访问 ChatGPT 需要翻墙，我不想翻墙！”</p>
<p>没问题，购买一台腾讯云美区云主机，选择 Windows 系统，在上面进行项目操作就可以了。不需要翻墙，速度还是杠杠的。</p>
<h2>安装类库</h2>
<p>稍后我们需要用到两个类库：pyperclip 与 playwright，我们需要在终端环境里依次安装它们：</p>
<blockquote>
<p>pip install pyperclip</p>
<p>pip install playwright &amp;&amp; playwright install</p>
</blockquote>
<p>注意：在安装完 playwright 以后，别忘记运行 playwright install，这一步是安装 playwright 运行时需要的浏览器组件。即使是我们本地已经安装了相关的浏览器，这一步也必不可少。</p>
<p>简单介绍一下这两个类库。pyperclip 是处理剪切板数据的，允许我们访问本地剪切板并将数据导出，这个类库没什么好说的，许多开发网页智能机器人的工程师们都使用过。</p>
<p>playwright 是大大鼎鼎的自动化测试框架，它由 Microsoft 开发，提供了一套简单而强大的 API，可以自动化运行基于 Chromium、Firefox 和 WebKit 浏览器的测试程序。与 playwright 齐名的另一个类似框架是 selenium，前者与后者相比，前者拥有更加现代化的 API、更快的响应速度和更强大的功能，所以笔者选择了前者。</p>
<p>一个自动化测试框架跟我们要做的事情有什么关系呢？我们为什么要安装它？</p>
<p>当然有关系！很多基于浏览器的自动化智能机器人，例如智能网页爬虫，都是 playwright 实现的。你明白了吗，playwright 不仅可以用于测试、代替测试工程师做一些重复性高的测试工作，还可以代替人做一些相对复杂的普通网页操作。</p>
<p>稍后我们在浏览器上打开自定义 GPTs 的网址、输入 Prompt、获取查询结果，这些操作都可以由 playwright 代替我们实现。本地程序的自动化是借由 playwright 实现的。</p>
<h2>持久化登录</h2>
<p>使用 playwright 开发智能网页机器人应用，有一个问题是无法避免的，这个问题就是用户验证。一般有以下两个解决思路：</p>
<p>1）第一个思路，自动监测网页状态并登录。</p>
<p>当未登录时，使用本地预先记录的帐号跳转到登录页面实现自动登录，并在本地缓存登录后的 cookies。</p>
<p>本地写入 cookies 的代码大概是这样的：</p>
<pre><code class="language-python">cookies = context.cookies()
print(page.title())
f = open('geektime.json', 'w')
json.dump(cookies, f)
</code></pre>
<p>读取 cookies 以避免重复登录的代码是这样的：</p>
<pre><code class="language-python">def loadCookies(cookief):
    cookiefile = open(cookief, 'r')
    cookie_list = json.load(cookiefile)  # json读取cookies
    cookiefile.close()
    return cookie_list

...
context = browser.new_context()
cookiefiles = ['geektime.json']
for cookiefile in cookiefiles:
  context.add_cookies(loadCookies(cookiefile))
</code></pre>
<p>这两段代码今天我们并不打算使用，你了解一下就好。这种方式还需要处理网页验证码，以及在 cookies 过期后还需要重新登录，比较复杂，除非迫不得已，我们不采用这种思路。</p>
<p>2）第二个思路是持久化登录。</p>
<p>简单讲，就是专门在硬盘上辟出一个空间给当前的网页机器人程序使用，运行期间产生的 cookies、图片等数据全部缓存在该目录下，由于 cookies 是缓存的，便不需要频繁登录。我们采用这种方法。</p>
<p>首先创建一个项目目录，例如 browser_ai，在该目录下再创建一个 gpts_firefox_dir 目录，用作浏览器的持久化缓存目录。</p>
<p>现在祭出我们的第一部分 Python 代码，query_gpts.py 文件第一部分：</p>
<pre><code class="language-python">import time
import pyperclip
from playwright.sync_api import sync_playwright

def login():
    with sync_playwright() as p:
        context = p.firefox.launch_persistent_context(
              './gpts_firefox_dir',
              headless=False,
              slow_mo=500
            )
        page = context.pages[0]
        page.goto('https://chat.openai.com/')

login()
</code></pre>
<p>简单解释一下这段 Python 代码：</p>
<ul>
<li>前 3 行是类库引用。time 是内置的，不需要安装，可以直接引用。pyperclip 与 playwright 我们已经安装过了，可以直接引用，playwright.sync_api 是 playwright 的同步模块，使用同步模式，在编写网页机器人时可以让我们轻松许多。</li>
<li>第 5 行～第 13 行定义了函数 login，这个函数我们主要是为了在本地持久化目录下缓存 cookies 信息的。第 7 行，firefox 代表使用 Firefox 浏览器组件，这个地方还可以选择 chromium 或 webkit，相信我，不要选择 chromium，虽然它是大名鼎鼎的谷歌开源的浏览器项目，但它早被黑客们玩坏了，开发网页机器人就使用 firefox 吧，这个选项能让你节省许多时间。不要谢我，我是活雷锋。</li>
<li>还是第 7 行，launch_persistent_context 代表从本地持久化目录启动浏览器。第 8 行，第一个参数 gpts_firefox_dir 便是我们先前创建的目录，在这里用上了。</li>
<li>第 9 行，headless 等于 False，我们才可以在运行时看到浏览器的 UI。如果想让浏览器组件在后台静默运行，将此处设置为 True 即可。测试阶段，最好设置为 True。不要问我为什么，如果你调试过网页智能机器人程序中的元素选择，就明白我在说什么了。</li>
<li>第 12 行，是取到浏览器的第一个打开的标签页。第 13 行，是打开一个网址。</li>
</ul>
<p>其它代码没有什么好讲的，使用<code>python query_gpts.py</code>指令启动，在打开的浏览器中登录自己的 ChatGPT 会员帐号，然后关闭程序。login 函数的使命就已经完成了。</p>
<h2>调用 GPTs</h2>
<p>下面真正的代码来了，query_gpts.py 文件第二部分：</p>
<pre><code class="language-python">...
def query():
    with sync_playwright() as p:
        browser = p.firefox.launch_persistent_context(
              './gpts_firefox_dir',
              headless=False,
              slow_mo=500
            )
        page = browser.pages[0]
        # 这是私有的，要替换成你自己的GPTs URL
        page.goto('https://chat.openai.com/g/g-OitD1zCwT-story-weaver')
        time.sleep(2)
        page.query_selector(&quot;#prompt-textarea&quot;).fill(&quot;告诉我，你的知识库截止日期是？&quot;)
        page.wait_for_selector('button[data-testid=&quot;send-button&quot;]').click()
        time.sleep(10)

        copy_button_selector = 'button.text-xs.dark\\:hover\\:text-gray-200'
        copy_buttons = page.query_selector_all(copy_button_selector)
        (copy_buttons[len(copy_buttons)-1]).click()
        time.sleep(1)
        clipboard_content = pyperclip.paste()
        # 打印剪贴板内容
        print(clipboard_content)

        str = 'y'
        while str == 'y':
            str = input('等待中，是否继续等待？y/n。\n\n请输入：')  # 控制休眠时间
        page.close()
        browser.close()

query()
</code></pre>
<p>这部分代码都干了啥？稍微解释一下吧：</p>
<ul>
<li>第 4 行～第 8 行，前面介绍过了。</li>
<li>第 11 行，打开自定义 GPTs 的网址，注意，示例里是我自己的网址，并且是私有的，你是访问不到的。你需要在 ChatGPT 上先创建自己的 GPTs，然后将此处换成自己的地址。关于如何创建自己的 GPTs，看这里：<a href="https://mp.weixin.qq.com/s/VlNvziKjGsIWYxef9w3Xig">不用编码，也不用会写严格的提示，创建自己的第一个 GPT</a>。</li>
<li>第 12 行，这里有一个 sleep 操作，为什么要 sleep？我们引用的是 playwright 同步模块，第 11 行代码执行完，代表网址已经打开了，为什么还要 sleep？是报复老板让我 996 故意消耗老板的电费吗？当然不是！网址成功打开并不代表页面元素全部加载完成，在开发网页智能机器人时尤其要注意这一点，否则，你可能找不到你要查询的页面元素，因为你要的元素还在内存里，还没有渲染出来呢。打个比方，好比今天你去教官结婚，但是你的新娘还在她妈妈的肚子里。</li>
<li>第 13 行，query_selector 用于选择页面上的一个元素，它的参数是 CSS 选择器，参数要求与 document.querySelector 相似。fill 是填写文本，写的是我们想问的问题，这里为了使程序简单，我将问题写死了，事实上这个问题可以来自于数据库，也可以来自于用户输入，它的来源是灵活可控的。</li>
<li>第 14 行，wait_for_selector 也是选择元素，它与 query_selector 不同的是，它会等待网页出现这个元素————如果这个元素暂时没有的话。wait_for_selector 相比 query_selector 是有优势的，使用它不用显式等待，你看我在这行代码前面就没有使用 sleep。那么为什么在第 12 行使用呢，为什么第 13 行不使用 wait_for_selector 呢？不为什么，为了演示，为了告诉你这两个方法之间的区别。</li>
<li>第 14 行，是单击了页面中的“发送”按钮，ChatGPT 背后的大语言模型开始工作了。第 15 行，这里要 sleep 一下，ChatGPT 的反应需要时间。</li>
<li>第 17 行～第 19 行，这里是为了查询页面上出现的“拷贝”按钮，并单击它。由于多次互动后，这类按钮会出现多个，所以取了最后一个。</li>
<li>第 21 行，这是从剪切板获取数据，我们提前安装的 pyperclip 终于发挥使用了。</li>
</ul>
<p>程序完成后，使用<code>python query_gpts.py</code>指令运行，效果如下：</p>
<p><img src="./assets/image-20231115142807051.png" alt="运行效果"></p>
<p>最后一步，程序中关于y的那部分while循环，是为了控制程序不退出。因为程序退出后，浏览器就关闭了，我们也没有办法进一步查看和操作界面了。</p>
<p>如果参数 headless 等于 Flase，能看到浏览器界面，运行效果是这样的：</p>
<p><img src="./assets/image-20231115142916204.png" alt="story Weaver的互动效果"></p>
<p>GPT-4 Turbo 发布后，很多通过第三方壳子应用使用 ChatGPT 服务的用户，怀疑自己用的是假 GPT-4，这时候可以使用上面这条提示问知识库截止日期，正准答案是 2023 年 4 月。</p>
<h2>由 codegen 反向生成代码</h2>
<p>示例里面有一个地方的代码，在网页机器人开发中是公认的麻烦。例如，在 query 函数中，第 13 行、第 14 行、第 17 行，这三处的选择器代码并不容易写，尤其是最后一个。</p>
<p>为了解决这类问题，提升生产效率，playwright 提供了一个“由操作生成代码”的功能。以我们访问的 GPTs 网址为例，指令如下：</p>
<pre><code class="language-bash">playwright codegen --browser firefox https://chat.openai.com/g/g-OitD1zCwT-story-weaver
</code></pre>
<p>codegen 这个子程序可以帮助我们生成带有大量选择器的代码。参数 browser 是指定浏览器组件类型，这个参数其实无所谓，指不指定并不会影响目标页面上的元素。</p>
<p>codegen 指令会打开一个浏览器，我们在上面操作一番，在小窗口中便能看到生成的代码，如下所示：</p>
<p><img src="./assets/image-20231115141033734.png" alt="codegen生成的代码"></p>
<p>生成的代码很粗犷，一般情况下并不能直接使用，但它可以帮助我们定位元素，获取元素的选择器写法。这是 codegen 指令存在的作用。</p>
<h2>回顾</h2>
<p>最后总结一下。</p>
<p>这个示例很简单，没有输入，也没有输出————输出就是简单的打印，将 ChatGPT 返回的内容直接在终端中打印了一下。对于登录，我们也采用了最简单的方法————手动登录。在实际项目中，这些问题都需要细化。</p>
<p>通过 playwright，我们实现了在本地调用远程私有 GPTs 的目的，数据是我们的，程序也是我们的，我们只是借用了 ChatGPT 的大语言模型能力。并且也不需要额外花费 API 调用费用，这是很划算的。基于本文示例，你还有哪些想法，想开发什么样的智能应用呢？欢迎留言讨论。</p>
<p>最后说一下示例代码，完整的示例可以在公众号“艺述论”回复 10008 下载。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[3月游客在九寨沟误饮假酒集体中毒1死1失明，谈日常如何选择安全又便宜的粮食酒？]]></title>
            <link>https://yishulun.com/./src/posts/2023/40.html</link>
            <guid>https://yishulun.com/./src/posts/2023/40.html</guid>
            <pubDate>Sun, 12 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/image-20231112153711902.png" alt="游客在九寨沟误饮假酒集体中毒1死1失明"></p>
<h1>3月游客在九寨沟误饮假酒集体中毒1死1失明，谈日常如何选择安全又便宜的粮食酒？</h1>
<p>[TOC]</p>
<p>你好，今天聊一下酒。</p>
<p>二三十年前，你在报纸上经常能看到这样的消息，某某地方某某某举办婚宴或寿宴，客人喝了假酒，导致数人不幸身亡、多人双目失明之类的新闻。原因在于宴请所用的酒不是纯粮食酿造的，是工业酒精勾兑的，含有甲醇、吡啶等违害人类健身的物质。最近这方面的新闻少了，但随着直播卖酒的兴起，这类事情又能所抬头，我们必须谨慎对待。</p>
<p>酒的文化在中国由来已久，在《水浒传》中，武松景阳岗打虎前喝了 18 碗壮阳酒；在金庸小说《笑傲江湖》中，祖千秋与令狐冲斗酒，从诗、行酒令，到酒杯与酒，每方面都有很多讲究；在《天龙八部》中，乔峰聚贤庄大杀四方前先与昔日老友喝了一碗断交酒。在中国，酒不仅是酒，还附带了其它许多东西。</p>
<p>现代社会逢年过节也会喝酒。一般南方人比较随性，会让酒但不会死命劝酒，或干脆以茶代酒；北方人不一样，尤其是山东人河南人，客人喝酒不尽兴，主人以为是自己招待不周。在以前缺吃少穿的年代，家中有酒，一定拿出来先让客人喝足，这种传统现在继承下来，变成了北方豪迈的劝酒风格。</p>
<p>都知道酒大伤身，但一醉也能解千愁，人生在世谁没有忧愁呢？如果你放不开、喝不醉，那就是与兄弟我不亲近，北方喝酒大概就是这个逻辑。</p>
<p>酒的主要成分是乙醇。古代没有批量生产乙醇的工艺，所有的酒都是手工酿造的。现代则不一样了，知道了酒的主要成分，现代工艺用饱含纤维的树木和草都可以分解出大量的糖和乙醇，再用乙醇加水勾兑，成本可比粮食酿造便宜多了。这种工业酒精勾兑酒，只有现代有，古代人是无福消受的。</p>
<p>同样是乙醇，按理说，勾兑酒应该也不会差。但是勾兑酒喝多了，人会头晕、头疼；饮同样的量，粮食酒则不会。实际上，粮食酒中除了主要的成分乙醇，还有许多微量的其他物质，正是这些物质决定了酒的口感与风味。在工业酒精勾兑的酒中，除了乙醇，也可能存在因为机器生产而产生的其它微量有害物质，这些物质会加重人的不适反应。一正一反，粮食酒自然比勾兑酒好。</p>
<h2>酒按工艺划分</h2>
<p>市场上能够买到的酒，按照制作工艺划分，可以分为以下三种。</p>
<h3>液态法白酒</h3>
<p>液态法白酒的执行标准是 GB/T20821-2007。这里的 GB/T 是国家制定的白酒标准。</p>
<p>液态法白酒是以粮谷、薯类、糖蜜等原料，经现代液态发酵工艺、蒸馏成食用酒精的工艺路线、再经串香、勾兑、调配而成的白酒，俗称酒精勾兑酒。</p>
<p>这种酒一般人是不能买的，只有身体机能特别强大之人喝了之后才不会上头，第二天才不会头疼欲裂。</p>
<h3>固液法白酒</h3>
<p>固液法白酒的执行标准是 GB/T20822-2007。</p>
<p>它是用酒精酒和粮食酒共同勾兑而成的，是一种折中的产品，价格没有那么高，副作用没有那么大。</p>
<p>这种酒一般人也不能喝，只有身体机能相对强大的人才能喝。虽然它的成本里含有粮食酒，也也有勾兑酒，但喝这种酒，相当于一会喝粮食酒，一会喝勾兑酒，两种酒在胃里混合了，酒后感觉同样难受。</p>
<h3>固态法白酒</h3>
<p>固态法白酒的标准最多，顾名思义就是使用粮食酿制出来的。</p>
<p>同样是固态纯粮酒，根据接酒时间不同而产生的区别，也就是发酵、储存时间长短，又分为特曲酒、头曲酒、二曲酒、三曲酒等。</p>
<ul>
<li>
<p>特曲：酒在蒸馏后出的第一段酒为特曲，民间也称酒头，一般最少要储存三年以上。</p>
</li>
<li>
<p>头曲、二曲：特曲随后蒸馏的第二、三段则是头曲、二曲，储存时间为一年、半年，有时间也会窖藏六年，例如泸州老窖六年窖头曲。</p>
</li>
<li>
<p>尾曲：最后蒸馏出的白酒为三曲或尾曲，基本上是不进行储存的，马上罐装出厂销售。所以说价格便宜的符合国家标准的白酒，有可能属于尾曲级别的，也不一定是工业酒精勾兑的。</p>
</li>
</ul>
<p>这三种工艺在酒瓶上都有公示，并不是说勾兑的酒都羞于公示，不是的。公示工艺是国家规定，很多时候是老百姓自己不知道才买了勾兑的“假洒”，并不属于酒厂欺骗。</p>
<h2>粮食洒生产标准</h2>
<p>不适合购买的勾兑酒，它们的产品标准分别是 GB/T20821、GB/T20822，适合购买的粮食酒的标准却有很多。一些有地域特色的酒，还有自己独特的标准，而不是采用国家统一的标准，例如茅台与北大仓使用的 GB/T26760，衡水老白干是 GB/T20825，西凤绿脖是 GB/T19508 等。</p>
<p>常见的固态纯粮标准有以下这些：</p>
<ul>
<li>GB/T 10781.1-2006 浓香型白酒 例如泸州老窖六年窖头曲</li>
<li>GB/T 10781.2-2006 清香型白酒 例如太仆寺旗草原白、牛栏山二锅头绿牛二、红星二锅头 56 度</li>
<li>GB/T 10781.3-2006 米香型白洒</li>
<li>GB/T 26760-2011 酱香型白酒 例如北大仓部优经曲、飞天茅台、迎宾茅台</li>
<li>GB/T 19508-2007 凤香型白酒 例如西凤绿脖、西凤 375（45 度）</li>
<li>GB/T 14867-2007 凤香型白酒</li>
<li>GB/T 16289-2007 豉香型白酒</li>
<li>GB/T 20823-2007 特香型白酒</li>
<li>GB/T 20824-2007 芝麻香型白酒</li>
<li>GB/T 20825-2007 老白干香型白酒 例如衡水老白十绿标、衡水老白干青花手酿</li>
<li>QB/T 2524-2001 浓酱兼香型白酒</li>
</ul>
<p>其中，以下这三种生产标准最为常见：</p>
<ul>
<li>浓香型白酒：GB/T10871.1-2006</li>
<li>清香型白酒：GB/T10781.2-2006</li>
<li>米香型白酒：GB/T1078.1.3-2006</li>
</ul>
<p>在低价酒市场 GB/T10781.2 最为常见，例如太仆寺旗草原白、红星二锅头蓝瓶 56 度、牛栏山二锅头绿牛二等。</p>
<h2>20 元以下的口粮酒</h2>
<p>同样是粮食酒，价格差别很大。有哪些酒，既是粮食酒，价格也不高呢？以下是探长总结的 20 元以下的清香型口粮酒。</p>
<ul>
<li>
<p>衡水老白干 62 度绿标 老白干香型白酒<br>
500ml ￥ 16<br>
配料：水、高梁、小麦<br>
执行标准：GB/T 20825 (优级）</p>
<p><img src="assets/a819fb45fea579ba9d7de02355693577.jpg" alt="老白干"></p>
<p>注意，这款酒的原料没有玉米，只有高粱和小麦。稍后便会为这点感动。</p>
</li>
<li>
<p>牛栏山二锅头绿牛二 56 度<br>
500ml ￥ 19<br>
配料：水、高梁、大麦、小麦、豌豆<br>
执行标准：GB/T10781.2</p>
<p><img src="assets/f529b8ac6c817623d846455683e43b84.jpg" alt="绿牛二"></p>
<p>二锅头这个名字因为“只取第二次蒸馏得到的酒”而得名，从名称上看，二锅头算是头曲或二曲。但这个绿牛二，以及下面的红星蓝瓶 56 度，价格在 20 元以内的，不太可能是二曲，是尾曲或三曲比较合理。</p>
</li>
<li>
<p>红星二锅头蓝瓶 56 度<br>
500ml ￥ 20<br>
原料：水、高梁、玉米、大麦、豌豆<br>
执行标准：GB/T GBT/10781.2</p>
<p><img src="assets/4804f8470d264017cea8fc1d146f77c9.jpg" alt="红星二锅头"></p>
<p>这款酒的原料含有玉米，酒味会有稍许甘甜，但影响口感的醇厚。使用玉米是为了降低成本，因为玉米相比其它原料便宜。</p>
</li>
<li>
<p>太仆寺旗草原白酒 闷倒驴 60 度<br>
494ml ￥ 17<br>
配料：水、高梁、王米<br>
执行标准：GB/T10781.2-2006</p>
<p><img src="assets/294776aafd6679fad6c3fed89c5ccab0.jpg" alt="草原白"></p>
<p>60 度的草原白又名闷倒驴，有的酒叫“闷倒驴”，那是冒充的，一般说内蒙草愿上的闷倒驴指的就是60度的草原白。这款酒的原料也有玉米，低价粮食酒很少不用玉米的。</p>
</li>
</ul>
<p>20 元以下的粮食酒，都是清香型，不要妄想浓香型，更不要想酱香型了。这些清香型酒，只能保证是传统纯粮酿造工艺生产的，物美价廉，可以理解为尾曲或三曲，是酿造完以后马上罐装销售的粮食酒。</p>
<p>上面这些这些口粮酒，探长最喜欢的是衡水老白干绿标 62 度，日常拿它自酌或做菜，都可以。</p>
<h2>百元以下优质口粮酒</h2>
<p>以下是百元以内的口粮酒。</p>
<ul>
<li>
<p>衡水老白干 青花手酿 62 度 浓香型<br>
500ml ￥ 72<br>
原料：水、高粱、小麦<br>
生产标准：GB/T 20825 (优级）</p>
<p><img src="assets/8e532f6fba4a6f0407aa1becc4b6a2f4.jpg" alt="老白干"></p>
<p>这款酒与绿标 62 度相比，好在哪里？它们的生产标准都是 GB/T 20825，度数也是一样的，为什么这个贵？瓶子贵吗？当然不是，青花手酿香气浓郁，相当于浓香型，是头曲或二曲酒浆。</p>
</li>
<li>
<p>西凤绿脖 55 度 凤香型白酒<br>
500ml ￥ 55<br>
原料：水、高粱、大麦、小麦、豌豆<br>
产品标准：GB/T19508-2007</p>
<p><img src="assets/32d1bdaea83011e656490db535f58f64.jpg" alt="西凤绿脖"></p>
</li>
<li>
<p>山西汾洒之黄盖玻汾 53 度 清香型<br>
475ml ￥ 50<br>
原料：水、高梁、大麦、豌豆<br>
产品标准：GB/TI0781.2</p>
<p><img src="assets/8ef52a3049c5e8af4ae9f57036d19cdf-1699770146883-10.jpg" alt="山西汾洒黄盖玻汾"></p>
<p>花 50 块喝一款清香型感觉不太值，但很多朋友说这款好喝，探长不觉明厉。</p>
</li>
<li>
<p>泸州老窖六年窖头曲 52 度 浓香型<br>
500ml ￥ 75<br>
配料：水、高梁、小麦<br>
产品标准：GB/T 10781.1</p>
<p><img src="assets/6cafe20cbc359f690f0dfc5ca9e1d66c-1699770209672-13.jpg" alt="泸州老窖六年窖"></p>
<p>好酒的原料只用高粱与小麦，连豌豆都不用，更不要说玉米。</p>
</li>
<li>
<p>北大仓部优经典 1984 50 度 酱香型<br>
630ml ￥ 55<br>
原料：水、高粱、小麦<br>
产品标准：GBT/26760（一级）</p>
<p><img src="assets/9db346207b4147510fe6028b3e7c8c15.jpg" alt="北大仓部优经典1984"></p>
<p>GB/T26760 是由贵州茅台酒、四川古蔺郎酒和贵州习酒主导制定的，主要目的是规范酱香型白酒的生产，该标准规定酱香型白酒只能由水、高粱和小麦作为原料，经过传统固态发酵制成，不能添加其他任何添加物，包括食用酒精、食用色素、食用香精等。</p>
<p>作为按照这个生产标准生产的酒，北大仓可以说是非常良心的一款，它可能是老百姓唯一能够消费的最便宜的酱香粮食酒了。</p>
</li>
</ul>
<h2>小酒坊的私房酒值不值得买？</h2>
<p>有人喜欢购买小酒坊的酒，认为那是纯手工酿造的，价格又低，值得信赖。</p>
<p>小酒坊因为缺乏相关的安全设施和经验，产品可能引起饮酒人的不适甚至中毒，报低上已有多起这样的报道。再者，在利益面前，谁也不能保证小酒坊不使用酒精+香精勾兑，毕竟这样操作既容易又安全。理论上讲，那些出过事故的小酒坊反而最可能是纯粮食酿造的，而勾兑的小酒坊反而安全不容易出事故。</p>
<p>事实上，上面 20 元以下的口粮酒便值得选择，它们都是大厂生产的，历史悠久，品牌硬。理论上讲，越是大厂批量生产，越能降低生产成本，如果不考虑品牌溢价，大厂生产的粮食酒性价比才是最高的。</p>
<h2>回顾</h2>
<p>最后总结一下。</p>
<p>平常自用或自酌，可以选择固态法酿造的、生产标准是 GB/T10781.2 的清香型白酒，例如牛栏山二锅头绿牛二。注意选择牛栏山绿牛二时，认准印有天坛图案的绿瓶，不是印有牛头图案的白瓶，后者是液态法工业洒精+香料勾兑的白酒（如下所示），不能买。</p>
<p><img src="assets/image-20231112155519281.png" alt="不要买印牛头的白牛二"></p>
<p>如果是送人，老百姓也没有必要买特别贵的酒，生产标准是 GB/T10781.1 的浓香型白酒便可以，例如泸州老窖六年窖头曲 52 度。</p>
<p><img src="assets/image-20231112144622796.png" alt="泸州老窖六年窖头曲52度"></p>
<p>一些地方特色酒也值得考虑，例如“能喝出男人味”的衡水老白干绿标 62 度，以及价格仅 50 元左右的酱香白酒北大仓部优经典 1984（50 度）。</p>
<p>过量饮洒伤身，饮用工业酒精勾兑酒伤害更大，国家并没有禁止勾兑酒的生产和销售，我们老百姓在选购的时候一定要自己甄别好！</p>
<p>尤其是北方的朋友，有朋自远方来，咱很好客，拿出珍藏多年的好酒招待客人，结果酒是“假酒”，是勾兑酒，热情劝酒把人劝医院去了，这样是不是很尴尬？</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[一个成人网文语言风格：隐晦春光笔触]]></title>
            <link>https://yishulun.com/./src/posts/2023/38.html</link>
            <guid>https://yishulun.com/./src/posts/2023/38.html</guid>
            <pubDate>Sat, 11 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>一个成人网文语言风格：隐晦春光笔触</h1>
<p>你好，今天聊一下卖报的网文语言风格。</p>
<p>先看一个《妖二代》中的网文情节内容：</p>
<blockquote>
<p>“战姬没事吧？”他皱着眉头，声音关切。</p>
<p>雷霆战姬摇摇头。</p>
<p>“伤口太深了，不处理的话，会留下疤的。”李羡鱼咬破指尖，把手指递到战姬的小嘴边：“给你吮一口。”</p>
<p>雷霆战姬：“.....”</p>
<p>长腿美人看着面前的手指，脑补了自己吮李羡鱼指头的画面....</p>
<p>臣妾做不到啊。</p>
<p>“矫情什么呢，我都不在意，你在意什么。等会儿咱们可能会遇到危险，你状态越好，越有利。”李羡鱼说：“哎呀，伤口又愈合了，别墨迹，快吸。”</p>
<p>他再次咬破指头，凑到战姬面前。</p>
<p>雷霆战姬抛了一个娇媚的小白眼，咬了咬唇，小嘴微张，把李羡鱼的指头含入，长腿美人脸蛋腾起两团红晕。</p>
<p>温热的口腔包裹指头，柔软的小舌头卷过他的指肚，意外的舒服。</p>
<p>可惜只是指头....他遗憾的想。</p>
</blockquote>
<p>这里隐含了一个黄段子，你看出来没有？在最后一句“可惜只是指头...他遗憾地想。”</p>
<p>我相信你已经看出来了，如果你是一名老网民或者老司机，可能会会心一笑。最后一句“可惜只是指头...他遗憾的想”表现了李羡鱼的内心想法，他的遗憾可能指向更亲密的肢体接触或者情感交流，而不仅仅是指头的接触。这种隐晦的表达方式在成人网文中很常见，尤其在卖报小郎君的小说中。隐晦地表达情感或欲望，既不违反平台规定，又能让读者感到轻松愉悦。</p>
<p>这种包含明显的成人暗示和黄色幽默元素的语言风格，在保持隐晦和文学性的同时，比一般文学还增加了成人网络文学的风采，这种语言风格称之为：隐晦春光笔触。</p>
<p>下面是运用“隐晦春光笔触”，仿写的一个网文情节内容：</p>
<blockquote>
<p>夜幕低垂，微风轻拂，江辰站在阳台上，眼神深邃地望着远方的星空。身后，苏婉轻手轻脚地走来，她的眼神中闪烁着一种特别的光芒。</p>
<p>“江辰，你一直站在这里，是在想什么？”苏婉的声音轻柔而带着一丝俏皮。</p>
<p>江辰转过身，微笑着看着她：“我在想，月亮上的兔子是不是也像你这么顽皮。”</p>
<p>苏婉轻笑，眼中闪烁着调皮的光芒。她走近江辰，轻轻地碰触他的手背，声音低沉而诱惑：“那你想不想尝试一下，月兔的滋味？”</p>
<p>江辰的心跳微微加速，他感到苏婉手指的触碰带来的微妙触感。他轻轻地抓住她的手，将其带到嘴边，轻轻地吻了一下：“月兔的滋味，应该是甜的吧。”</p>
<p>苏婉的脸上泛起了一抹红晕，她的眼神中闪烁着期待和挑逗。她的声音低沉而迷人：“那你不尝一尝，怎么知道呢？”</p>
<p>这一刻，两人的眼神中都充满了隐晦而强烈的情感。月光下，他们的影子交缠在一起，仿佛在这宁静的夜晚，编织着一场只属于他们的故事。</p>
</blockquote>
<p>当然，语言风格并不是孤立存在的，在网文创作中并不是只要风格好了，作品就一定好，还有其它方面决定着网文作品的成绩。例如，上面这个江辰与苏婉江边约会的情节，前面必须有充足的铺垫和恰到好处的人设建设才可以，两人一个是作品的男主角，另一个是作品的女主角，读者必须很期待他们结合，只有在这种情况下这个情节才能给读者带来愉悦和满足。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[我的 GPTs 训练提示]]></title>
            <link>https://yishulun.com/./src/posts/2023/39.html</link>
            <guid>https://yishulun.com/./src/posts/2023/39.html</guid>
            <pubDate>Sat, 11 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>我的 GPTs 训练提示</h1>
<blockquote>
<p>下面是我在创建GPTs过程中，使用或使用过的提示语。</p>
</blockquote>
<p><a href="http://38.md">38.md</a> 文件是我根据刚才我们关于成人网文风格的对话，总结的“隐晦春光笔触”风格，请你学习一下，以后在网文创作实践中，我们要尽量运用这种既写实又轻松、含有成人幽默元素的语言风格。如果你懂了，请说“懂了”，如果发现了问题请提出来，或为之补充使其更加完善。</p>
<p>请将 Instructions、Conversation starters 和 Description 都译为中文。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[网文幽默轻松的文笔]]></title>
            <link>https://yishulun.com/./src/posts/2023/31.html</link>
            <guid>https://yishulun.com/./src/posts/2023/31.html</guid>
            <pubDate>Fri, 10 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>网文幽默轻松的文笔</h1>
<p>你好，今天聊一下文笔。</p>
<p>撰写网文的文笔风格，有人喜欢严谨写实，有人喜欢轻松搞笑。我个人比较后者，这样的文笔虽然有时候容易让读者出戏，但貌似“立体形式、多层次”的表达也赋予了内容幽默的魅力。这种文笔有时候感觉像听郭德纲的相声一样，郭老师讲着一个古代的故事，突然拿现代的某样事物去类比古代事物，听众可能会感觉出戏，但没关系，听相声不就是图个乐呵嘛，有了现代事物的对比，听众还更容易理解和代入呢。</p>
<p>轻松搞笔的毛笔在具体的实践中，有一些基本的章法可循，最常用的就是通过反转、转拆，让人物的言行在前后形成鲜明的反差。</p>
<p>举一个反转的例子，以下内容摘自卖报小郎君《妖二代》第17、第18章：</p>
<blockquote>
<p>秦大爷点点头：“考虑好了么。”</p>
<p>李羡鱼心里一动：“加入宝泽集团，工资待遇怎么样？”</p>
<p>秦大爷说：“还算不错。”</p>
<p>李羡鱼一咬牙：“好，我同意了。”</p>
<p>宝泽集团位于陆家嘴最繁华地段，两座宛如孪生子的对立大楼，在高楼遍地的陆家嘴并不算鹤立鸡群，但占地面积极大。</p>
<p>李羡鱼记得这两栋楼几年前还不叫宝泽集团，该集团在短短数年间迅速崛起，并发展成不啻于国企的庞然大物。</p>
<p>在外人眼里，它只是一家实力雄厚的集团，现在李羡鱼知道了，它是血裔界执法者的总部。与政府有着千丝万缕的联系。</p>
<p>而今天，他将成为这里的一员。</p>
<p>现在正是饭点，秦大爷打了个电话，然后带着李羡鱼直奔顶楼的旋转餐厅。</p>
<p>秦大爷用员工卡刷了门禁，推开两扇棕漆实木大门，门后的景象让李羡鱼怀疑自己走进了某个超高档的酒店。</p>
<p>一条猩红的地毯铺在门口，直通餐馆的尽头，两边是排列整齐的黑晶餐桌或者圆桌，头灯一盏盏绚丽的水晶吊灯，布局和装修参照着六星级酒店的标准。</p>
<p>旋转餐厅里吃饭的人不多，显得有点冷清，秦大爷目光在旋转餐厅扫视，祖奶奶的目光也在扫视着，一边吸气，一边咽口水，扯了扯李羡鱼的衣摆：“好香呀，我肚子饿了。”</p>
<p>李羡鱼：“不是刚吃过么，饿了就吃草莓。”</p>
<p>这种档次的餐厅，显然不是他这个穷逼能消费起的。</p>
<p>祖奶奶：“就是饿了嘛，而且草莓不顶饿。”</p>
<p>这时，秦大爷和角落里一个男人确认过眼神，道：“跟我来。”</p>
<p>那是一个体型魁梧的男人，寸发，国字脸，目测身高超过两米。坐在那里，就像一只熊罴坐在人类的餐桌上……准确的说，是一只穿了西装的熊罴混进了人群里，并且在朝你微笑。</p>
<p>秦大爷招呼着李羡鱼和祖奶奶入座，介绍道：“这位是我们执法部长，代号雷电法王！”</p>
<p>他说话的时候，雷电法王已经站起身，高大魁梧的身躯九十度弯腰，以谦恭姿态，双手握住祖奶奶的小手：“见过李前辈，一别二十几年，您还是风采依旧。”</p>
<p>那是一种下位者与上位者握手的姿势。</p>
<p>祖奶奶勉为其难的让他握着自己的小手，她的注意力却被餐桌上的鹅肝、鱼子酱和牛排深深吸引不能自拔。</p>
<p>雷电法王心满意足的收回手，挺直腰杆，勉为其难的把右手伸向李羡鱼：“你好。”</p>
<p>蒲扇般的大手突然就呼到眼前……</p>
<p>李羡鱼谦虚的双手握住，不计较对方反差明显的态度，道：“久仰久仰，杨部长好。”</p>
<p>雷电法王一愣：“我不信杨。”</p>
<p>李羡鱼：“.……”</p>
<p>“您和我祖奶奶认识？”李羡鱼尴尬的换了个话题，他说话有点拘谨，雷电法王给了他很大的压迫感，尽管熊罴穿了西装伪装成人类，但那夸张的肌肉线条撑得西服鼓胀胀，好像随时都会给你表演原地爆衫。</p>
<p>“我认识她，但李前辈想来是不认识我的。”雷电法王道。</p>
<p>当年李家战魂和李无相在血裔界搅风搅雨的时候，他还是个刚出师门的小萌新，只配在边上喊几声666，然后感慨“大丈夫当如是”。</p>
<p>最多再如当时大部分年轻人一样，憧憬一下国色天香的女子战魂。</p>
<p>如今他已人到中年，而当初那个神仙般的女子，容颜未改，令人唏嘘。</p>
<p>雷电法王感慨结束，看向李羡鱼，“说正事，欢迎加入宝泽集团，我们等你很多年了。你现在有两个选择，一：成为执法者。二：成为文职人员。”</p>
<p>李羡鱼立刻道：“我选择第二个，谢谢。”</p>
<p>雷电法王愣了愣，“不是，文职人员只是我随口一说，公司方面希望你加入执法部门。毕竟李前辈这样的存在放着发霉，太暴殄天物。”</p>
<p>李羡鱼道：“杨……法王部长，我只是个普通人，文职很好，足够了，打打杀杀不适合我。我非但没有特殊能力，我身体还虚的厉害，对不起，我给血裔丢脸了。”</p>
<p>秦大爷插嘴：“那就先从文职工作做起吧，先当实习生，多了解血裔的世界，能你有朝一日觉醒了，再考虑是否转职成执法者。”</p>
<p>李羡鱼迫不及待问道：“那我要怎么觉醒？”</p>
<p>秦大爷沉吟道：“每个血裔觉醒的情况都不一样，没有特定的条件和方法，比如小说里常常出现老爸老妈被干掉了，主角一怒之下觉醒，震惊所有人。这种情况是有的，但不是觉醒的必要条件，事实上，直到如今，我们也没研究出血裔觉醒基因能力的正确姿势。”</p>
<p>李羡鱼：“那秦大爷你是怎么觉醒的。”</p>
<p>不等秦大爷说话，雷电法王抢先道：“老仲马是在和女人造人的时候，毫无征兆就觉醒了。”</p>
<p>秦大爷罕见的露出尴尬和恼怒的神色，“小辈面前，给我留点面子。不要说“老仲马”这种话啊混蛋。”</p>
<p>雷电法王耸耸肩：“这是墨菲给你取的，一致得到大家的公认。至于我，我从小在道观长大，一直跟着师父学艺练气，我的觉醒完全顺其自然。”</p>
<p>李羡鱼忍不住看向祖奶奶，那么亲生父亲又是怎么觉醒的？</p>
<p>祖奶奶和他心有灵犀，脆声道：“你爸那瓜娃子，二十二岁还没觉醒，我一气之下，就把他从窗外顺出去，他就觉醒了。”</p>
<p>雷电法王：“.……”</p>
<p>秦大爷：“.……”</p>
<p>李羡鱼：“......你不是说我爸是最有出息的那一任么。”</p>
<p>祖奶奶：“他只是练气天赋和你一样糟糕，而血裔的能力看的是血脉的比例，不是觉醒先后，你爸血统还挺纯正的。”</p>
<p>李羡鱼咽了咽口水，“祖，祖奶奶……我明年二十二虚岁了。”</p>
<p>以前房子矮，窗外顺出去尚且有生还的希望，最多落得半身不遂。现在的话，祖奶奶要是把他从窗外顺出去，李羡鱼连抢救的机会都没有。</p>
<p>秦大爷和雷电法王怜悯的看着他。</p>
<p>事到如今，不得不考虑他和祖奶奶的正确关系了，经过这段时间的相处，他发现祖奶奶并不是随身老爷爷、家族守护灵这样的存在，她的正确身份是：老祖宗！</p>
<p>相比起来，自己这个n代后的孙贼，才是老祖宗随身携带的宝宝。</p>
<p>主次关系要分清楚了。</p>
<p>以后说不得要乖乖当一只祖奶奶坐下的逗比童子。</p>
<p>他得知血裔存在的秘辛刚好一个星期，连小萌新都不算，更不知道该怎么觉醒，而明年他虚岁22，万一祖奶奶不高兴了，在沙发翻滚撒泼：你这个曾孙一点都不孝顺，不乖，我还是等你下一代吧。</p>
<p>然后拎着他往窗外一顺……</p>
<p>李羡鱼，卒。</p>
<p>李家就此绝后。</p>
<p>李羡鱼正要问薪资待遇，祖奶奶又扯了扯他衣摆，蹙着小眉头：“李羡鱼我饿啦，都说好几遍了……”</p>
<p>李羡鱼压低声音：“别闹，这里的东西我们吃不起。刷盘子都还不起债那种。”</p>
<p>祖奶奶咽了咽口水：“可是好好吃的样子。”</p>
<p>李羡鱼：“好吃也不能吃，认命吧，谁叫我们李家这种落魄户，大写的穷逼。”</p>
<p>祖奶奶不服：“我李家当年也是名门望族。”</p>
<p>李羡鱼捂脸：“祖奶奶啊，我大清真的已经亡了一百多年啦。”</p>
<p>祖奶奶哼一声，鼓着腮，生闷气。</p>
<p>秦大爷和雷电法王对视一眼，后者咳嗽一声，道：“我们餐厅免费对员工开放的……”</p>
<p>这话说完，他发现对面两双眼睛“唰”的一声亮起来，两对大眼灯。</p>
<p>李羡鱼郑重其事道：“祖奶奶，其实，我也饿了。”</p>
<p>祖奶奶“嗯嗯”两声：“快去点餐，咱们吃个三天的量，往后三天的伙食费就省啦。”</p>
<p>李羡鱼：“好主意。”</p>
<p>丰富的餐点很快上桌，祖孙俩风卷云残的凶狠吃相，让雷电法王和秦大爷忍不住一阵心酸。</p>
<p>秦大爷道：“你爸不是给你留了二十万存款么，至于这副已经啃三个月窝窝头的吃相？”</p>
<p>一听这话，李羡鱼顿时悲从中来：“秦大爷，二十万存款没啦。我们已经吃了两天的炒河粉，不加炒蛋那种。”</p>
<p>秦大爷好奇道：“没了？你小子被碰瓷了么。”</p>
<p>比碰瓷还可怕的是祖奶奶啊。</p>
<p>李羡鱼喃喃道：“我真傻，真的，我单知道这是个祖奶奶，但我不知道这是个脑子有坑的败家祖奶奶。”</p>
<p>祖奶奶大怒，头也不抬，继续狼吞虎咽，腾出一只小手，赏了李羡鱼头皮二十连击。</p>
<p>“对了，”雷电法王道：“文职人员的工资一个月是八千，实习生减半，至于你的话，因为你还在上学，就当你是兼职了，每个月工资两千。”</p>
<p>两千？</p>
<p>李羡鱼抬头，用力咽下食物：“这么少？两千块还不够我祖奶奶吃顿煎饼果子。”</p>
<p>雷电法王耸耸肩。</p>
<p>秦大爷提议道：“那你可以考虑加入执法部……”</p>
<p>李羡鱼摆摆手：“什么都不用说了，两千就两千，我是个有原则的人。”</p>
<p>秦大爷失笑：“执法部的工资一个月十万，实习生一个月五万。”</p>
<p>“叮！”</p>
<p>叉子摔在餐盘上，发出清脆响声。</p>
<p>李羡鱼脸色呆滞：“多，多少？”</p>
<p>雷电法王：“执法部正式员工，一个月薪资十万，这还是普通员工的工资。实习生一个月五万。毕竟执法部有一定的危险，你既然选择了文职……”</p>
<p>李羡鱼大手一挥，脸色严肃：“什么都不用说了，我一直坚信能力越大，责任越大，既然上天让我继承了祖奶奶，为了维护秩序，为了世界的和平，我愿意加入执法部。”</p>
<p>雷电法王纳闷道：“原则呢？”</p>
<p>李羡鱼脸上散发出比劳动人民更凛然的正气：“为了世界和平，个人原则算什么？”</p>
<p>祖奶奶放下勺子，小手啪啪鼓掌。</p>
</blockquote>
<p>在上面这段剧情中，主角李羡鱼和他的祖奶奶本来已经很饿了，但他们不愿意进餐厅吃饭，因为他觉得餐厅太高档了，而他们又很穷，他们吃不起；但当听说餐厅对宝泽员工是免费开放的，他们就毫不犹豫地进去享用了。还有，在选择加入宝泽文职部分还是执行部门这个问题上，主角李羡鱼先是选择了文职部分，后来听说执行部门员工的正式月薪有10万，就连实习薪资都有5万，他马上改变主意，加入了执行部分。</p>
<p>这里面至少涉及两个反转：一，从开始的不进餐厅不吃饭，到后来的狼吞虎咽；二，从不愿意加入执行部门，到后来非常愿意加入执行部分。当然，这种前后反转的文笔描写，还要符合人物的基本性格设定、符合基本的常识推理。</p>
<p>在小说中，每个人物他的性格设定基本是稳定的，从上面的情节中，你觉得主角李羡鱼是什么样的人物性格呢？</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[网文创作中的逻辑]]></title>
            <link>https://yishulun.com/./src/posts/2023/32.html</link>
            <guid>https://yishulun.com/./src/posts/2023/32.html</guid>
            <pubDate>Fri, 10 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>网文创作中的逻辑</h1>
<p>你好，今天特意聊一下网文中的逻辑。逻辑在网文创作中有什么样的作用和地位？</p>
<h2>关键问题是爽点情节尴尬、生硬和无脑</h2>
<p>几乎每个网文作者都知道，装逼打脸非常重要，是核心技能。那么，我们对装逼打脸的领悟是什么？有多少人真正理解这四个字的真正含义呢？</p>
<p>先简单说一下什么是装逼打脸吧。举个简单的例子：</p>
<blockquote>
<p>同学聚会，同学嘲讽，主角打脸，同学都大跌眼镜，原来昔日的小屌丝同学如今已经是神豪了，一个个态度大变。</p>
</blockquote>
<p>这就是一个一句话描写的装逼打脸。</p>
<p>都市装逼文，无非就是把这句话扩写而已，扩写成一部几十万、甚至上百万的长篇小说。</p>
<p>关键点来了，这个装逼打脸的核心是什么，或者说关键点是什么？</p>
<p><strong>新手写装逼打脸，遇到最大的问题不是他写不了一个完整的装逼打脸情节，而是写的情节显得尴尬、生硬和无脑。</strong></p>
<p>飞卢网站的都市书，收藏低的书评区也经常有读者喷，大概有这样的问题；</p>
<blockquote>
<p>1）又见无脑装逼。</p>
<p>2）装逼真尴尬，我们鸡皮疙瘩都起来了。</p>
<p>3）这真是生般硬凑出来的打脸啊，干脆把配角的脸伸到主角面前算了。</p>
</blockquote>
<p>所以，你要写好装逼打脸，就要从这三个问题入手了。</p>
<h2>解决问题的关键是重视铺垫和人设</h2>
<p>先说第1个问题：无脑。这个无脑是作者需要有脑，读者无脑看，但是他无脑看如果你有个情节或者设定N，太出戏，他就得出来喷你了。</p>
<p>这个无脑并不是我们今天讲的重点，以后我们会专门说一下飞卢的脑子是什么，以及如何几句话让书变得有脑。</p>
<p>至于第2个和第3个问题，是相辅相成的，一起讲。</p>
<p>你想写的不生硬，不尴尬，首先排除你的文笔和其他创作条件，就说情节。</p>
<p>是情节哪里出问题了，导致这段情节读者看起来生硬和尴尬呢？</p>
<p><strong>我们一般的理解是，缺乏圆润的部分，润滑剂。这个润滑剂就是铺垫和人设。</strong></p>
<p>有了铺垫和人设，甚至你的情节都变得有脑了。</p>
<p>人设和铺垫，也是很多飞卢大佬讲解都市最核心的东西。</p>
<p>但是并没有谁真的再深入一步的讲解人设和铺垫，大部分的装逼打脸帖子都是教你装逼的分类，什么震惊法，KTV场景装逼套路，如何花式装逼等等。</p>
<h2>如何进行铺垫和打造角色人设</h2>
<p>我们继续，下面举例子讲解一下人设和铺垫，以及如何通过这两点让装逼打脸不那么尴尬，生硬。</p>
<p>常见的小说中食堂吃饭场景，直接提取装逼打脸情节。例子是这样的：</p>
<blockquote>
<p>视角给到主角和张三身上，张三挤了主角一下反倒把自己绊了个趔趄。</p>
<p>张三喷：主角你走路不长眼么，把老子的饭都差点弄撒了。</p>
<p>主角站在道德制高点，说：张三，明明是你走路撞到我们，只是你虚胖没我们站得稳。</p>
<p>张三恼怒了，上来干主角，主角反而一拳将他打倒在地上。</p>
</blockquote>
<p>这就是一次打脸，大家看着尴尬不尴尬，圆润不圆润？</p>
<p>相信读者一看就点关闭页面退出了，原因很简单：一，无逼格；二，看得没头没脑；三、反派张三是个智障么，明明是被人一巴掌干倒的战五渣实力，为什么还这么狂，他是怎么活到现在的？</p>
<p>你要想把这段在生活中无时无刻可能都重现的情节，写到圆润自然，装逼不尬，有脑，必须要加入刚才我们提到的人设和铺垫。</p>
<p><strong>人设和铺垫是相辅相成的，都是为了主角装逼打脸做贡献、添砖加瓦的。</strong></p>
<p>这两样东西同时又可以引出潜在的期待感。<strong>期待感这东西怎么来的，就是人设和铺垫衬托出来的。</strong></p>
<p>我们继续用刚才那个例子讲解，修改过前置增加的内容是这样的：</p>
<blockquote>
<p>主角开局获得了拳王系统，新手大礼包将主角身体和拳击术提高到职业一流水平。</p>
<p>张三人高马大是学校出名的混混，恶事做绝，在食堂打饭从来都是不排队，看谁不顺眼就拳打脚踢。</p>
<p>......</p>
</blockquote>
<p>这两句话就是简单的人设和铺垫。</p>
<p>主角有了一流职业拳手的实力，一拳几百斤的实力那种，打普通人还不是一拳秒杀。</p>
<p>然后反派又是个很可恶很嚣张的人渣。</p>
<p>反派与主角开始碰撞，两个角色开始交织起来。期待感也起来了。有了冲突矛盾，然后主角讲完道理，对方恼羞成怒先动手，结果主角一拳秒了对方。这样，情节看起来就顺畅许多，打脸也自然。</p>
<p>同样举一反三，再举个例子，你写美女，写多么美，多少人追，读者看了就会有期待感，有主角一定要收了这个美女的期待感。后面如果你不让主角收，反而被反派收了，读者能喷死你。</p>
<p>这是最基本的人设和铺垫，应用到具体的小说里，这个铺垫肯定要更完善的，字数不可能这么少，甚至可以铺垫好几章。</p>
<p>举个例子，比如我们再随便延伸一下，张三被秒，知道主角武力无双，于是动用权利，他叔叔是教导主任。这时候，你如何再装逼打脸呢？还是要铺垫，铺垫更多的内容。</p>
<p><strong>一本书，铺垫故事环节比打脸环节还重要。</strong></p>
<p>打脸情节的形式一般是这样的：</p>
<ul>
<li>打脸环节你可以选择写的平淡，对方尴尬抱拳，说我们输了就行。</li>
<li>也可以选择打的对方脸啪啪响，对方磕头认错，或者以前无线文那套“打了小的来老的，不死不休的套路”都行。</li>
<li>也可以无形装逼，主角不说我厉害，但是你知道我很厉害，各种恭维巴结跪舔。</li>
</ul>
<p>这里补充一下，如果你的人设和铺垫都没弄好，一个富二代对你跪舔，你觉得尴尬突兀不？脑子呢？如果人设是主角上来签到领了某房地产公司 80% 的股权，而这个富二代的老爹自己开了个小公司，靠那个房地产公司吃饭，富二代知道了主角的这层身份后，再跪舔是不是合理多了？甚至得把老爹拉过来一起跪舔。</p>
<p>根据人设和铺垫开发各种爽点，拉各种期待感。当然，你要拉对读者想看的期待感，拉偏了虽然是爽文，但是会掉订阅。飞卢一个毒点少说掉几百订，多了甚至会雪崩。比如武侠小说，看的就是靠武力碾压，结果主角跟人比谁文采好......这就是拉期待感拉错了，导致爽点也偏了。</p>
<h2>情节铺垫和打造人设的关键是逻辑</h2>
<p>最后，要强调一下，进行小高潮情节之前的铺垫，以及人设的打造，这里面最要的一点就是逻辑，人物性格一定要前后一致、统一，情节发展要符合常识推荐。做到了这一点有时候也称之为情节圆润。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[网文中如何刻画人物？]]></title>
            <link>https://yishulun.com/./src/posts/2023/33.html</link>
            <guid>https://yishulun.com/./src/posts/2023/33.html</guid>
            <pubDate>Fri, 10 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>网文中如何刻画人物？</h1>
<p>你好，今天聊一下人物的创造。</p>
<p>人物在小说中的作用至关重要，在起点平台，有的成绩还不错的万订作品，基本都是靠笔力和人物撑起来的。作者笔下的人物写得好，个个人物都是鲜活的、立体的，这叫做群像。群像有两个等级：</p>
<p>1）第一个等级是群像等级，可以写活小说中 4、5 个人物；<br>
2）第二个等级是群像高级，可以写活小说中每一个主要的人物，例如主角、反派、男配一二、女配一二等。</p>
<p>以下对话内容摘自龙空论坛对网文大神卖报小郎君的专访，对话内容中表现了刻画人物的精髓：</p>
<blockquote>
<p>龙空临江仙：您的书中每个角色都鲜活生动，有血有肉，让人印象深刻，能分享一下人物塑造方面的经验吗？</p>
<p>卖报小郎君：如果是看过妖二代的读者，应该能看出我人设方面的成长轨迹。</p>
<p>卖报小郎君：首先，人物方面，你得假装他是一个真实存在的人物。</p>
<p>卖报小郎君：真实存在的人物，必定有外貌、性格、家庭背景。</p>
<p>卖报小郎君：要把这三块提前做好。</p>
<p>卖报小郎君：举个例子，塑造秦宝宝的时候，先构思好她的外貌身材，再构思她的性格，最后是家庭背景：女主、姐姐。</p>
<p>卖报小郎君：然后，根据自己做好的设定来写这个角色，与角色性格违背的台词、行为，统统不要，这样子，人物的形象就立体起来了。</p>
<p>卖报小郎君：还有一点就是贴标签，这是快速塑造一个人物的方法。</p>
<p>卖报小郎君：比如打更人里逼王杨千幻。</p>
<p>卖报小郎君：不过，贴标签只能初步塑造人物，想让这个人物深入骨髓，除了外貌、性格和家庭背景，最好还是加入他的理念</p>
<p>卖报小郎君：有理念的角色，才是最生动鲜活的</p>
<p>临江仙：这就要深入人物内心，描写他内心的冲动和渴望，以及人生观，价值观等等。</p>
<p>卖报小郎君：对。</p>
<p>卖报小郎君：这种写法，适用于重要角色，比如大反派，比如女主、男二，不太重要的角色，其实没必要。</p>
<p>卖报小郎君：而且这种有理念的重要角色，刀起来很爽。</p>
</blockquote>
<p>写好人物有四立项一说。外貌、身材、职业、社会地位、家庭关系、江湖评价等是一个层次，技能欲求情感理念是更高的一次层次。在关键时刻还要写好反差，例如一个贪生怕死的人舍生取义，一个贪吃好玩的人一本正经干大事等等。写好人物需要多思考、多练习，每个人物在小说中都不是纸片人，都需要作者付出心血浇灌。</p>
<h2>8小项人物设计模板</h2>
<p>下面是一个含有8小项的模型，可用于设计小说中的主要人物。</p>
<p>角色：<br>
原型：<br>
一像（年龄、五官、外号、口头禅、形体、职业、习惯）：<br>
二活（性格一二三面）：<br>
三维（地位、缺陷、误解）：<br>
四立项（欲望、情感、理想、金手指）：<br>
人物关系（主要正反阵营关系）：<br>
人物小传：</p>
<p>下面的表格，是根据上面的8小项人物设计模板，对老电影《双旗镇刀客》主角孩哥进行解析，得到的内容。</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>李童侠</th>
</tr>
</thead>
<tbody>
<tr>
<td>原型</td>
<td>《双旗镇刀客》之主角孩哥</td>
</tr>
<tr>
<td>一像（年龄、五官、外号、口头禅、形体、职业、习惯）</td>
<td>十二三，娃娃脸，外号“小辫子”，口头禅“我不知道”，形体瘦小，职业游侠，晨起打坐练习父传《紫境神功》，每次发功前手上必发出滋滋的电流声。</td>
</tr>
<tr>
<td>二活（性格一二三面）</td>
<td>丈人爹：认为他没手艺、没本事；<br />媳妇好妹：偷看自己洗澡的好色之徒；<br />游侠沙里飞：单纯、仗义、好骗；<br />双旗镇乡亲们：刀法不错，但贪生怕死；<br />恶霸一刀仙：刀法不错。</td>
</tr>
<tr>
<td>三维（地位、缺陷、误解）</td>
<td>地位：孤儿，在丈人爹店里打杂当小二；<br />缺陷：他不知道自己刀法天下第一，有一个全镇最漂亮的媳妇；<br />误解：双旗镇上的人都和他一样以为他很弱、还认为他怕死。</td>
</tr>
<tr>
<td>四立项（欲望、情感、理想、金手指）</td>
<td>欲望：主角爹死了，来双旗镇领娃娃亲媳妇。后来一刀仙兄弟欺辱好妹，主角把其杀了，惹了一刀仙，主角必须将一刀仙杀了；<br />情感：赢取好妹的爱情。危难之时，丈人爹让主角和好妹跪在地上，对好妹说：“以后你就是他的媳妇，他生你生，他死你死。”这是泪点；<br />理想：和好妹过上幸福平安的小日子；<br />金手指：以气运刀，妙到巅毫，见过他出刀的人都死了。</td>
</tr>
<tr>
<td>人物关系（主要正反阵营关系）</td>
<td>「正派阵营」<br />双旗镇店主丈人爹：是主角父亲的昔日好兄弟，是未来媳妇的爹。在一刀仙来寻仇的时候，他先站了出来，死了；<br />沙里飞：一个贪小便宜说大话、油嘴滑舌的假侠客，骗了主角两次钱，答应帮主角打架没有帮；<br />好妹：爱憎分明，先讨厌主角，后深爱主角。<br />「反派阵营」<br />一刀仙：双旗镇的天，和主角是仇人，开局和兄弟二当家杀了镇上挑战他的两人，后来人主角杀了他的兄弟；<br />一刀寨二当家：恶人，在丈人爹店里欺辱好妹，被主角一刀反杀。</td>
</tr>
<tr>
<td>人物小传</td>
<td>主角父亲是西北刀法第一大侠，其父死后他来西北荒漠双旗镇找自己的媳妇。他的媳妇屁股上有一颗痣，为了验明正身，主角趴门缝看女主洗澡，因此被女主误会。女主生在底层，漂亮就是原罪，入了一刀寨二当家的眼，二当家想欺负她，被主角一刀反杀。大当家一刀仙来寻仇，亦被主角三刀反杀。</td>
</tr>
</tbody>
</table>
<p>在进行网文大纲设计时，对于主要人物，如何能够把这个8小项人物模板填满，基本上人物就达到基本的丰满了。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[网文中的剧情、结构、节奏和爽点]]></title>
            <link>https://yishulun.com/./src/posts/2023/34.html</link>
            <guid>https://yishulun.com/./src/posts/2023/34.html</guid>
            <pubDate>Fri, 10 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>网文中的剧情、结构、节奏和爽点</h1>
<p>你好，今天聊一下网文创作中的剧情、结构、节奏和爽点，这四点对网文创作都非常重要，因为它们都属于小说情节的范畴，所以放在一起讨论。</p>
<p>以下内容来源于龙空论坛对卖报小郎君的专访：</p>
<blockquote>
<p>卖报小郎君：人物，人设怎么做，上面我说过了。接下来是剧情，<strong>剧情一定要有起伏、有冲突，有反转</strong>。</p>
<p>卖报小郎君：日常文只是小众，平淡的剧情很难写出一本爆款。</p>
<p>卖报小郎君：结构方面，我强烈推荐《诡秘之主》。</p>
<p>龙空临江仙：抓住乌贼粉一只。</p>
<p>卖报小郎君：<strong>故事结构，一个装逼剧情，最好不要超过十五章，连载最好不要超过一个星期</strong>。</p>
<p>卖报小郎君：<strong>装逼剧情之后，写两到三章的日常，日常中做下一个剧情的铺垫</strong>。</p>
<p>卖报小郎君：<strong>爽点的话，核心就是装逼，装逼的核心，其实是凸显出主角的与众不同</strong>。</p>
<p>卖报小郎君：龙空有很多装逼套路总结，我看过，很有用。</p>
<p>临江仙提醒：大神都说龙空的精华帖子有用了，你们这批新手还不去看！</p>
<p>卖报小郎君：很多作者觉得那东西没用，其实是写作经验太少，无法套用。</p>
<p>卖报小郎君：如果能花时间和精力，苦练那些套路，经验足了，什么剧情该用什么套路，脑子里就自然而然地涌出来了。</p>
<p>卖报小郎君：这方面很吃写作经验，写作归根结底是积累和经验，秘籍摆在那里，如果没有足够的写作经验，是用不出来的。</p>
<p>卖报小郎君：换成写《妖二代》以前的我，我也领会不了那些套路，因为我不熟，没怎么写过。</p>
<p>卖报小郎君：《妖二代》结束后，我花了半年时间，专研究套路写作，半年写了几十万的装逼剧情（指《我的姐姐是大明星》，简称《姐姐》），虽然写得一般，但越来越得心应手，越来越熟练。</p>
<p>卖报小郎君：还是得多写，多练，不要怕累。</p>
<p>龙空临江仙：下一本就是化用套路，做到无招胜有招了。</p>
<p>卖报小郎君：是这样的，初学的时候，是死记硬背</p>
<p>卖报小郎君：越来越熟练了，就忘记那些套路了。</p>
<p>卖报小郎君：不是生搬硬套，而是这段剧情该用什么套路，自然而然地用出来了。</p>
<p>卖报小郎君：<strong>我以前是根据某个装逼套路，来构思剧情</strong>。</p>
<p>卖报小郎君：<strong>现在是根据剧情的走向，来使用哪个套路</strong>。</p>
</blockquote>
<p>通过这段访谈，我们能窥探到什么信息呢？</p>
<h2>1，剧情</h2>
<p>什么是好的剧情？</p>
<p>好的剧情一定要有起伏、有冲突，有反转。即使是日常文，作者写的也不是纯粹的日常，而是充满趣味、幽默的日常。</p>
<p>创作一部网文小说，第一步是构建大纲。一般大纲是如何构建的呢？以网文大神卖报小郎君的代表作《大奉打更人》为例，如果我们通读全篇之后反推全文剧情大纲的话，会发现它的大纲大致是这样的：以一个许父杀子案为主线，然后其它案件像挂件一样适时镶嵌上去。</p>
<p>打造大纲亦是如此，先设计一个故事主线，然后根据表现需要，再设计一些副线小故事“挂”在主线故事上。稍后结合第二部分我们会发现，每个小故事的篇幅大概在12～13章，每个小故事有一个带爽点的小高潮，小高潮过后会有1～2章的“日常”内容，用于铺垫下面的情节和进行人设建设。</p>
<p>所谓构建大纲，就是先设计一个主线故事作为小说梗概，然后开始构建章纲，以12章为一个单位设计一个小故事、以2章为单位设计一个日常铺垫，如此反复，真到主线故事最终完成。</p>
<h2>2，结构</h2>
<p>什么是结构？</p>
<p>一般网文小说以章作为基本单位，一章的字数大概是 2000+。一个好的、能够持续吸取读者追更的故事结构是这样的：</p>
<p>1）一个装逼剧情，最好不要超过 15 章，每天更新 2 章，连载时间最好不要超过 7 天；</p>
<p>2）一个装逼剧情结束之后，写两到三章的日常内容，在日常生活中做下一个小高潮剧情的铺垫，或对人物设定做进一步的增加和补充。</p>
<h2>3，节奏</h2>
<p>节奏在网文创作中指剧情推进的快慢，一般情况下与上面的结构指的是同一项内容。</p>
<h2>4，爽点</h2>
<p>爽点的核心就是主角装逼，装逼的核心，就是凸显出主角的与众不同。在网文创作中，准确地把控爽点，让读者在阅读过程中感觉到爽，是非常非常非常重要的，没有比它更重要的了。下面重点论述。</p>
<p>首先，网络小说的爽点是什么？有没有一个严格准确的定义？</p>
<p>这个问题没有标准答案。</p>
<p>有钱的人，赚一百万都不会爽，没钱的人，路上捡到一百块都会高兴好几天。</p>
<p>因此，同样的写作素材，在不同人不同情况的不同作品里面，它们所展示出来的爽，是不同的。</p>
<h3>1）情爱与异性爱慕</h3>
<p>首先，我们来说爽点中最常见的一种————情爱，主角得到异性爱慕。</p>
<p>那就是情爱，为什么艳照门一出现就整个网络火爆，为什么网络上点击最高的小说永远是情爱小说？因为，这些艳照及小说，都能够让观看者感觉到一种本能上的满足。包括一些火爆小说中的“开车”、“擦边球”黄段子很受读者欢迎，也是这个道理</p>
<p>很多作者，都会在文章里面或多或少地添加一些关于情爱的描写，以吸引读者。</p>
<p>但是，大部分新手在写这种情节的时候，总会超标，写得过分露骨，使得文章品位下降，甚至被平台删除。</p>
<p>其实，真正好的暧昧情节，是完全不需要性描写的，只需要做好铺垫，那么，哪怕是一个吻的描写，都能让读者疯狂甚至高潮。</p>
<p>这就涉及爽点创作的一个手法：<strong>先抑后扬</strong>。</p>
<p>先制造一个以主角的身份永远也无法触及的女性角色，例如冰山美女，小龙女之类的，前期铺垫做好，让主角基本上已经丧失了泡到这个女性角色的信心，读者甚至已经放弃了这个人的时候。突然间笔锋一转，美女轻轻地给主角一个吻。（这里也突出了前置铺垫和人设建设的重要性。）</p>
<p>这样一个吻，和大量的性描写来比，读者更愿意看到这么一个吻。</p>
<p>我们作者在应用这种先抑后扬创作手法的时候，一定要记住，不能压抑得太厉害，要注意情节的常识合理性，否则读者会完全失去兴趣。</p>
<p>这种手法其实归纳其重点，就是先把读者打一巴掌，再给块糖吃。</p>
<p>对于那些动辄要写情色描写吸引人的作者，我想介绍一本书给他们看骷髅龙的《极品处男》，这是一位主角周旋于数十个女人身边，到中后期才和女人上床圆周公之礼的小说。</p>
<p>这本书的爽点，就是标准的先抑后扬手法。</p>
<h3>2）得到难得之物品</h3>
<p>第二种爽点，是物品获得的满足感。</p>
<p>我记得网游那个课里面有说过，装备法宝之类的极品装备获得，这种满足感，是我们制造给读者的爽点之一。</p>
<p>这种爽点，重点在于满足读者的极品装备收集癖好。这个极品装备包括物品，也包括人，比如人才，比如美女。</p>
<p>这种爽点吸引读者的手法是，强化获得物的存在，如果是装备，就要不停地告诉读者，这种装备多好多好，能够怎么样怎么样，必须得到这个东西才能把剧情推下去，而且这个东西的获得，极其困难。</p>
<p>作者通过这些方面，在读者的脑海里面强化了这个东西的存在感，使得读者对这个东西产生了需求感和对主角获取它的期待感，那么，当主角得到这个东西之后，就完成了一次爽点情节的创作。</p>
<p>因此，第二种爽点————**得到物品奖励的创作方法就是：强化存在感，让读者觉得这东西必须得到。</p>
<p>这种写法，很多人都在用，比如《仙葫》《阳神》《永生》等。</p>
<p>梦入神机写的小说，很多都是这种强化存在感的爽点创作方式。</p>
<p>他会不停地告诉读者，主角获得了某某宝库的线索，主角又获得了某某宝库的另外一个线索，这个宝库里面有很多很好的东西，其中有一种宝物是主角必需的。这个宝物肯定有很多人争抢，特别是主角的竞争对手，一旦他们得到，就会全面压制主角。</p>
<p>试问，这样子的写法，作为读者的你，是不是很希望读者得到这个宝物，把竞争对手踩在脚下？</p>
<h3>3）养成类、升级文之升级爽点</h3>
<p>第三种爽点，是养成，也是网络小说里面比较重要的一点。</p>
<p>说白了就是主角在逆境中不断地成长，不断地依靠良好的升级体系，突破一个个瓶颈。</p>
<p>养成这种爽点，是贯穿文章始终的一种写法，千万不要一开始就写主角多么牛逼。因为你会陷入一个怪圈，不停地制造比主角牛逼的对手，来成为主角的踏脚石，这种高起点的写法，很容易让你的作品失去吸引力。</p>
<p>主角都天下无敌了，仇家一个指头就能捏死了，试问还有什么看头？</p>
<p>主角的升级路线，只能是在主角突破瓶颈的时候小爆发一下，千万不要每一次升级都写成高潮，那样的话，就没有爽点可言了。</p>
<p>我以修真系统的感叹号流创作手法给大家示范一下，就知道全高潮写法，反而是没有高潮的。如下所示：</p>
<blockquote>
<p>主角引气入体，进入练气期了！<br>
主角好不容易，终于筑基了！！<br>
主角历经万苦，终于炼成金丹了！！！<br>
主角修成了元婴！！！！！！</p>
</blockquote>
<p>从上面四行话，我们会发现，每一次都是高潮，但是看完会感觉枯燥无味。</p>
<p>我曾经对一个喜欢用三个感叹号当做句号用的作者说：你放个屁都用三个感叹号，那么，你的作品还有什么高潮可言吗？</p>
<h3>4）优越感</h3>
<p>第四种爽点，就是优越感</p>
<p>想象一下，你开着劳斯莱斯幻影，叼着几万块一根的雪茄，手里面拿着一叠美钞，狠狠地拍在曾经欺负过你的上司的脸上。</p>
<p>那是何等的优越感？</p>
<p>我们创作的时候，可以考虑，如何让主角的刻画，给读者一种优越感的感觉。</p>
<p>写法很多，比如穿着 200 块的衣服去买房子，被人鄙视后，掏出一布袋的现金，把店里面最贵的车买走（在这里说一声，这样的写法已经变成浅薄和无知的代名词了，原因是被众人写烂了，写家太多子。）</p>
<p>这种桥段很低俗，但是很有用，特别是主角被人鄙视后，先抑后扬的手法，读者看起来会感觉非常的爽。</p>
<p>我记得无限恐怖的作者曾经说过一句话：<strong>所谓充满爽点的剧情，换个方式来说，也可以理解为在追求爽的过程中，发生的不得不说的故事</strong>。</p>
<p>一本小说的主线，其实就可以概括为追求爽的过程。</p>
<h3>5）送菜流爽点</h3>
<p>第五种爽点，是送菜流。送菜流是网文大神梦入神机用得最好的一种爽点手法。</p>
<p>那就是制造出一个比主角更牛逼，运气更好，实力更强，老是有奇遇的高大全角色，主角和他一比，简直就是农夫和王子。结果呢，这个角色是来给主角送菜的。他所有的好运都将成为主角的好运，他所有的宝物都是主角的，甚至女人也是。</p>
<p>这种写法，会让读者有一种，你牛逼算什么，我是主角，什么都是我的，这样的感觉，爽不爽呢？看梦入神机小说的读者收藏数目，就可以知道爽不爽了。</p>
<p>在这里，我想说明的是，我们写的是网络小说，读者受众是现实中总有太多的顾忌和束缚，他们迫切需要在小说构建的虚拟世界中得到满足和发泄的那一群人。**主角在书里，必须说出读者平时想说却不敢说的话，做出读者想做又不敢做的事，获得读者根本无法企及的成就。**读者通过代入到主角的角色成长里面，来获得快感，最后爽到高潮。</p>
<p>这是网络小说的真谛，一切是为了让读者爽，只有让读者爽了，读者投票支持，花钱订阅，作者才会爽。</p>
<p>玩人性？玩哲学？玩悲剧？行啊，你可以这样玩，后果是，请不要跑来问我，为什么没人点击，没人收藏，没人订阅。。。</p>
<p>你都让读者不爽了，人家怎么可能会让你爽？</p>
<h2>5，爽点解析</h2>
<p>下面是从另一个角度，对爽点的解析。因为爽点及对爽点的把控在网文创作中太重要了，必须多讨论它一些。</p>
<p>看了 dyingsnow 同学的《网文阅读感》和《网文阅读感[补充]》颇有些收获。网文是种娱乐，目的是让人得到快感的收获。踩到雷点感到不爽而喷人毒草自然是情有可原，但避免雷点却没有多大意义。好的网文不是雷点少的网文，而是让人能够收获快感体验的网文。要写出让读者感到爽的网文，才是网络作家的使命，也是收入的依据。</p>
<h3>1）爽的源泉：收获和奖励</h3>
<p>正如 dyingsnow 同学所说，所有的网文都能简化成完成任务得到奖励得到升级的模式，爽的爆点就在于任务的收获和奖励，升级后的变化。网文就是要让人得到一种经历过程的期待收获奖励的快感的体验，才有人爱看。<br>
姑且不论过程，先论奖励。</p>
<p>奖励要让人爽，重要的不是收获的比例或收获的量，而是需要，需要是在铺垫中表达的。</p>
<p>对比以下两种情况：</p>
<p>（1）一个没啥钱的穷学生，零用钱总是当月用光，存款为 0，闲着没事天天买彩票，中了 1000 万，然后计划着怎么花，买车买房买电脑泡妞；<br>
（2）一个没钱上大学的穷学生，需要 10 万元学费，每天辛苦打工，顺便买彩票赌运气，好不容易存了 5 万块，开学在即，中彩票得到了 5 万块，刚好凑足 10 万，不用再打工了。</p>
<p>哪个更有满足感？</p>
<p>再对比以下两种情况：</p>
<p>（1）主角通过努力得到一份经验值，一下子从 1 级升到了 9 级，属性大幅提升；<br>
（2）主角通过努力得到一份经验值，从 9 级升到 10 级升了一级，达到了一直想去的洞穴的开启条件。</p>
<p>哪个更有满足感？</p>
<p>第（1）类是网游升级式的奖励，抽象的数据的，写起来模糊而重复；</p>
<p>第（2）类有明确的目标，得到想要的东西的奖励，具体而效果立显。</p>
<p>然而事实上很多人写的都是第（1）类，主角只是向着一个不明确的概念努力————变强，变有钱等等，得到的奖励也如同暴发户一般并没有针对性。</p>
<p>例如无限流，开头或者需要解决迫切的生存问题，到了后面，就是“努力-&gt;得到奖励-&gt;分配如何使用”这样的一种剧情重复，没有需要，只有单纯的奖励，看多了读者自然疲倦。</p>
<p>而重生穿越型的小说，开头则需要得到第一桶金，到了后面，则开始写中了重生/穿越这个大彩票之后，作者开始写“可以做的事”，而非“需要做的事”，这也是不好的。</p>
<p>前面因为“需要”而得到的奖励让人觉得爽，但到后面就只是重复而已。</p>
<p>得到了某种并不预期的奖励，主角拍脑门想要干这想要干那，称之为 YY 或自嗨还可以，但距离“爽”的境界还差许多。任务重复，奖励又不给力，大多数成绩不好的书都只能看看开头而已。</p>
<p>其实作者完全可以人为制造“需要”，来让奖励到来的时候变得更爽。怎么制造需要呢？有以下三种方法：</p>
<h4>（1）缺少的东西</h4>
<p>通过描写缺少某样东西制造需要。比方说主角必须打败某个大 boss 才能过关，但是因为欠缺条件 A，目前被大 boss 完虐，条件 A 就成了主角当下十分迫切的需求。</p>
<p>经过某个艰辛的任务 B，主角得到了奖励 A，具备了过关的条件。得到奖励 A 的前后，有着是否有希望打败大 boss 这个决定性的变化，能让人实质性地感到等级的提升。</p>
<p>当然还有其他的方式，比方说主角拥有令人十分期待的能力 C，但必须宝物 D 才能使用之类，宝物 D 就成了“需要”的奖励。因为缺少，所以才需要，缺少是需要的同义词。</p>
<p>对主角这个人物的设计，很多时候都是充满辩证的。比如我们给他一个金手指，但同时也让他有了某个方面的小缺陷，例如迷路、贪吃、喜欢和美女拍照等。</p>
<h4>（2）解除压力</h4>
<p>通过解除压力制造需要。比方说主角中了类似生死符的诅咒，不停地掉血掉属性，到了时间还会死掉，不得不暂时违心听从反派命令，处处束手束脚。下一步，主角完成某个任务，解除了诅咒。这样的奖励，自然让人一下子让人神清气爽。。</p>
<p>死亡的威胁、难缠的敌人都能造成类似的压力。压力越强，让主角越是不爽，解除时痛快的感觉也就越爽。</p>
<p>既然是奖励，解除压力并不是回归原状，变得和压力到来之前一样，而是因为压力的解除，主角得到了更好的发展。例如《幽冥仙途》中，强大的阴散人一直压制着主角，主角解除压力并不仅仅是干掉她，还把她做成了傀儡成为自己的助力，压力来源本身直接变成了主角的力量，这是一种超级体验，这样主角暂时受到的那点委屈也不算什么了。</p>
<p>再比如《死了都要记》中，腹黑正太解决了老对头黑眼圈男之后，也一并接手了对方的资源和名号，自导自演，一时间无人能敌，几乎已经到了成神的境界。</p>
<h4>（3）大家抢着要的东西</h4>
<p>通过描写某个大家都觊觎的东西制造需要。</p>
<p>压过别人就会有优越感，抢来的东西总比自己家的要好。一个价值 10 万的宝物，除了主角没人知道它的存在，被主角得到了，只是口头上描述着宝物价值有多高，但也无法让人明白这东西到底有多好。一个价值 1 万的宝物，很多人来抢，甚至有成名已久的高人，最后却被主角得到了，就算实用性有限，也让人觉得很爽。</p>
<h3>2）爽的本位：代入主角</h3>
<p>在同伴或配角之间，主角是最耀眼最独特的，面对敌人，主角最终总能够获胜，这样的主角才能给读者带来快感。一个能让读者代入的主角有哪些特征呢？</p>
<h4>（1）主角的特色</h4>
<p>如何让人记住主角,而非泯然于众角色之中看过就忘，关键就在于特色，能力的特色、战斗方式的特色或者其他方面的特色，这需要作者的想象力和创造力，但这一条只是在吸引了读者的基础上锦上添花的东西，和是否爽本身没啥关系。</p>
<h4>（2）主角的效用：一锤定音的决定性作用</h4>
<p>比较下面这两种角色：</p>
<p>第一种是实力坚挺的角色，或者学了补血技能在团队中始终保持重要地位，没了他团队就撑不下去，因此成为团队领袖；或者在个人战中总能和对手保持至少势均力敌，就算遇到比较强的反派也能坚持住。</p>
<p>第二种是能力偏激的角色，在团队中或者不受人待见，就算占了领导的地位也和手下保持距离，或者干脆一直是独行侠，平时并不怎么出力，但在大家都撑不下去的时候，总能突然发威，在众人没有办法的时候提出扭转乾坤的奇计；一个人时一直被敌人压着打，却总能在最后一刻反败为胜。</p>
<p>哪一种角色比较耀眼？显然是第二种，第一种是现实中可能存在较多，但在小说中第二种才受读者青睐。</p>
<h4>（3）可以有不擅长的，但不能有弱点</h4>
<p>不擅长是能力上的无可奈何，弱点就是心理上的漏洞，有心理漏洞被人利用的只能是配角和反派。因为主角的失误，被一个没有任何特长的小角色胜了一筹————这样的情节给人一种吃了只苍蝇的感觉。</p>
<p>人孰能无过，但主角不是人，主角在小说中就是世界的神，读者要喜欢他，就不能有瑕疵。读者就算是回想起自己错误的决定、不应有的失败时，也有种想要自杀的感觉，对于主角来说，如果出现这样的剧情，则立刻会有读者排斥反应、拒绝代入主角，然后读者八九不离十就弃文了。</p>
<p>主角只能暂时输给比自己强的人（至少某方面），而不能输给比自己弱的人。能以弱胜强的也只有主角。能够让主角被读者喜欢上，这样的作品自然能够长久。</p>
<h3>3）爽的材料——配角的衬托</h3>
<h4>（1）同伴</h4>
<p>主角不需要对等的同伴，如果结成完全契合的队伍，观点相同、意见相同，多出这么几个角色来干吗？这样只会分散读者的注意力，分散作者的注意力。当合理性、人物的互动取代了爽点的创造，作品将开始变得淡而无味。</p>
<p>主角的同伴可分为以下 4 类：</p>
<p>a）完全服从的傀儡，偶尔陪主角说说话：前一种功能决定了这种东西只是道具而非人物，后一种功能只是用来注水，但要注意不要注水过头给“道具”太多情节，影响读者对主角的关注；</p>
<p>b）花瓶，战利品：放着就好，太多事会让人觉得很麻烦；</p>
<p>c）特定情况下的救援对象：给主角耍帅用，颁布奖励什么的，有时候是炮灰、要为了主角做牺牲；</p>
<p>d）暂时的盟友，相互利用：一定条件下会转化为敌人，这一种同伴应该最多，也最容易写出彩。</p>
<h4>（2）对手</h4>
<p>主角和对手之间的较量，不应是弱点的较量，而是长处的较量。</p>
<p>传统上对手又被称为“反派”，因为历史上有抹黑主角对手的传统。三国演义里曹操的多疑，西游记天宫众神的荒唐，样板戏中反派的无能，现代网文里也往往喜欢刻画对手的丑态，性格暴躁偏激、毫无道理的敌意、看不起主角，以此彰显稍后主角打败他们的必然性和正义性。</p>
<p>反派是坏人，打败坏人，正义伸张，爽不爽？爽！</p>
<p>但现代的读者很多都开始不好这一口，为什么？因为这种爽是来自对手的坏，而非主角的强，如果只是描写他们的不堪，坏人总是会有人打败的，最终总会自取灭亡；对手不像主角，是消耗品，数量不少，毕竟对手各有各的个性，偶尔写几个这样的还可以，千篇一律读者会看得厌烦；事实上也没有必要强调他们的恶。</p>
<p>要用对手衬托主角，<strong>让主角打败他们时感到爽，就必须刻画对手的强</strong>、对手经验上的充沛和后盾的强大，还有冷静、机智、果断的品质，因为是对手，不用担心和主角属性上的重复，因为主角会比他们更冷静、更机智、更果断。</p>
<p>对手是压力的重要来源之一，对手应当有各种各样的品质，充分发挥创造力，给主角造成各种麻烦，这样解决掉时，才能真正的神清气爽。村夫打死一只兔子不值得夸耀，武松打死一只吊睛白额大虫，才有许多人夸耀和传诵。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[不用编码，也不用会写严格的提示，创建自己的第一个 GPT]]></title>
            <link>https://yishulun.com/./src/posts/2023/36.html</link>
            <guid>https://yishulun.com/./src/posts/2023/36.html</guid>
            <pubDate>Fri, 10 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>不用编码，也不用会写严格的提示，创建自己的第一个 GPT</h1>
<p>你好，今天聊一下 Self GPT。</p>
<p>前几天 OpenAI 举办了自己的第一场开发者大会，当时就宣布了 ChatGPT 有一项重大的更新：每个人都可以创建一个自己 GPT，并且稍后还有一个 GPT Store 上线它。</p>
<p>上一次乔帮主开放 App Store 的时候，开发者是使用 Objective-C 编程语言开发 iOS App，然后申请上架赚取佣金。这一次，OpenAI 把门槛降低了，不需要使用者会编程语言，甚至连清晰严格的提示（Prompt）也不需要编写了，操作很简单，用几句中文互动一下，就能开发自己的 GPT了。</p>
<p>并且，OpenAI 声称，用户创建的 GPT，以后还可能上架到 GPT Store，为自己赚取睡后收入。</p>
<p>我好奇它的表现，稍微试了一下，效果惊人。</p>
<p><img src="assets/F-jfFBJWAAAoHwP.jpeg" alt="MyGPT"></p>
<p>在创建过程中，我将一个 34 号 md 文件传给了它，然后，它在学习和吸收之后，给我返回了这样一段虎狼之词：</p>
<blockquote>
<p>文件 <a href="http://34.md">34.md</a> 的内容主要围绕网文创作的剧情、结构、节奏和爽点进行讨论，提供了深入的分析和具体的建议。它包含了如何构建引人入胜的故事剧情、有效的结构布局、合适的故事节奏以及如何创造吸引读者的“爽点”。这些内容对于塑造鲜活的网络文学作品非常关键。特别是关于如何在保持故事连贯性的同时，制造高潮和反转点，以及如何在故事中巧妙地设置和解决冲突，这些都是关键的创作技巧。通过这些方法，我们可以打造出既有深度又富有吸引力的故事，让读者深陷其中，乐在其中。</p>
</blockquote>
<p>特别是最后一句“让读者深陷其中，乐在其中”，这完全是它的创造，在我的原文件中根本没有。</p>
<p>如果真如它所说，它完全理解了我提交的内容，并能为接下来的网文创作实践提供辅助，那么，它是真的棒！</p>
<p>下面具体介绍一下如何创建自己的 GPT。</p>
<h2>ChatGPT 帐号注册</h2>
<p>首先，你需要一个 Plus 版本的 ChatGPT 帐号。</p>
<p>在注册的时候，有一项手机号验证，注意大陆及香港的手机号都不能使用，因为傲娇的 ChatGPT 未对我们开放。解决办法很简单，在网站（<a href="https://sms-activate.org">https://sms-activate.org</a>）上购买一个临时验证码即可。Google Voice 号码在这里都不好使，因为它是虚拟号码。好在这里只是使用临时号码做一下注册验证，帐号资料中可以写另一个号码（这个号码随意），并且此后登录也不需要验证，所以临时在 <a href="http://sms-activate.org">sms-activate.org</a> 网站上购买一次性的验证码服务就可以满足需求了。</p>
<h2>Plus 会员购买</h2>
<p>其次，是付费问题。大陆的信用卡不能用于会员升级付费，部分新加坡 OCBC 卡据说也被风控、不能再用了，有人说先将 OCBC Visa 卡绑在 Google Pay 上，再使用 Google Pay 付款可以，但这也仅限一小部分人可以使用。</p>
<p>稳妥的办法有两个：</p>
<p>1）在 formepay 付费开卡，使用支付宝充值美金，然后绑卡、缴费；</p>
<p>2）在某宝上购买美区苹果 App Store 帐号使用的礼品卡，然后给美区帐号充值，在苹果手机上下载 ChatGPT App，然后升级缴费。</p>
<p>第一个方法不需求有苹果手机，正好可以满足身边没有 iPhone 设置的购买需求。但要注意，无论是哪一种方式，在支付时填写付款地址，一定选择填写美国五个免税洲之一的地址，否则要多花 2 美金。</p>
<h2>七步创建自己的 GPT</h2>
<p>拿到 Plus 权限后，在哪里使用就无所谓了，在手机上、Web 上都可以使用。</p>
<p>以 Web 为例，选择左侧菜单栏中的 Explore，在右侧页面中即能看到“Create a GPT”选项。这个选项在OpenAI 第一届开发者大会之前是没有的。</p>
<p><img src="assets/efb466c410f6afb3cdbf37a90fbfc6c.png" alt="My GPTs"></p>
<p>第一步，选择创建按钮。</p>
<p>第二步，开始创建。</p>
<p>在 ChatGPT 的交流输入框里，直接提出你的想法，例如我的是：</p>
<p>“创建一个辅助我进行网络文学小说创作的小说作家。”</p>
<p>然后 ChatGPT 便会创建，接着它会主动生成一个头像，请你确认。</p>
<p>你可以回答“I like it”，接下来 ChatGPT 会问你：“如何与用户交互，在完成用户提出的请求时应注意什么？”</p>
<p>这里的“用户”，指的是使用你正在创建的这个 GPT 产品的用户。你可以直接在互动输入框内输入，说出你的要求，这部分是 GPT 的核心，可以多写一些，力求表达清晰。</p>
<p>第三步，单击 Create 标签旁边的 Configure 标签，检查 GPT 的名称、子标题、描述是否符合你的要求。</p>
<p><img src="assets/image-20231110223101946.png" alt="configure"></p>
<p>第四步，设置起始提示语。</p>
<p>在 Configure 页面还可以设置起始提示，例如下面截图中贴近下方输入框的那 4 句便是。</p>
<p><img src="assets/image-20231110223447314.png" alt="起始提示语"></p>
<p>在 Configure 页面，有一个 Actions 设置，这是对外部第三方服务的调用设置，可以调用自己的网站 API。它并不是预置的提示，如果设置预置提示，在前面的起始提示处设置。</p>
<p><img src="assets/image-20231110223617423.png" alt="Actions"></p>
<p>第五步，上传文件。</p>
<p>可以在 Configure 页面上传，也可以互动输入框上传。我是在输入框上传的，上传的同时又输入了一些提示，要求 ChatGPT 学习和理解这些十分重要的文件。</p>
<p><img src="assets/image-20231110223905299.png" alt="知识文件"></p>
<p>第六步，测试与预览。</p>
<p>整个创建 GPT 的页面分为左右两个区域，前面我们一直在左面这个区域操作，现在 GPT 的创建基本完成了，我们可以在右面这个区域测试和预览它的功能表现了。</p>
<p><img src="assets/image-20231110224231228.png" alt="Story Weaver"></p>
<p>第七步，保存。</p>
<p>更新按钮在右上角，在保存时，可以保存为私有、获得链接者可用或公开。这个范围选项，包含前面的 GPT 的 Configure 设置，都不是一次性的，过后都可以重新编辑。</p>
<p><img src="assets/image-20231110224506012.png" alt="保存"></p>
<h2>回顾</h2>
<p>操作很简单，上传知识文件后，ChatGPT 吸收的速度也很快。探长会进一步试用它的，重点关注它的表现。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Lex 对马斯克的全面采访，马斯克从历史角度讲中国强大了不会是世界的威胁]]></title>
            <link>https://yishulun.com/./src/posts/2023/37.html</link>
            <guid>https://yishulun.com/./src/posts/2023/37.html</guid>
            <pubDate>Fri, 10 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Lex 对马斯克的全面采访，马斯克从历史角度讲中国强大了不会是世界的威胁</h1>
<p><img src="assets/Lex%E5%AF%B9%E9%A9%AC%E6%96%AF%E5%85%8B%E7%9A%84%E5%85%A8%E9%9D%A2%E9%87%87%E8%AE%BF-%E5%B0%81%E9%9D%A2.jpg" alt="Lex对马斯克的全面采访-封面"></p>
<p><a href="https://youtu.be/l1Cf8iq6k1w">https://youtu.be/l1Cf8iq6k1w</a></p>
<p>这是 <a href="https://twitter.com/lexfridman/status/1722686021781835928">Lex Fridman</a> 对马斯克做的第 4 次采访，也是它博客上第 400 个采访，涉及内容十分广泛，时间目录如下所示。</p>
<ul>
<li>
<p>0:00 - 简介</p>
</li>
<li>
<p>0:07 - 战争与人性</p>
</li>
<li>
<p>4:33 - 以色列-哈马斯战争</p>
</li>
<li>
<p>10:41 - 军工综合体</p>
</li>
<li>
<p>14:58 - 乌克兰战争</p>
</li>
<li>
<p>19:41 - 中国</p>
</li>
<li>
<p>33:57 - xAI 格罗克（Grok）</p>
</li>
<li>
<p>44:55 - 外星人</p>
</li>
<li>
<p>52:55 - 神</p>
</li>
<li>
<p>55:22 - 暗黑破坏神 4 和视频游戏</p>
</li>
<li>
<p>1:04:29 - 反乌托邦世界：1984 年和美丽新世界</p>
</li>
<li>
<p>1:10:41 - 人工智能和每瓦有用的计算</p>
</li>
<li>
<p>1:16:22 - 人工智能监管</p>
</li>
<li>
<p>1:23:14 - 人工智能应该开源吗？</p>
</li>
<li>
<p>1:30:36 - X 算法</p>
</li>
<li>
<p>1:41:57 - 2024 年总统选举</p>
</li>
<li>
<p>1:54:55 - 政治</p>
</li>
<li>
<p>1:57:57 - 信任</p>
</li>
<li>
<p>2:03:29 - 特斯拉的自动驾驶仪和 Optimus 机器人</p>
</li>
<li>
<p>2:12:28 - 艰辛</p>
</li>
</ul>
<p>原视频是英文的，我使用工具加上中文字幕，方便国内读者观看。个别地方自动翻译不准确，需自行甄别纠正。</p>
<h2>中国威胁问题</h2>
<p>在论到中国在成为世界强国后会不会对世界产生威胁，马斯克表示，不会。中国是一个历史悠久的国家，在三国时期曾有过十分激烈的内战，人口几乎损失了七成，这是非常糟糕的。但中国在历史上没有侵略过其它国家，中国像一个集合体，有很强的包容性，但没有主动侵略过其他国家。所以，马斯克认为中国的强大对于世界而言，是安全的。</p>
<h2>外星人问题</h2>
<p>没有。马斯克表示，如果 SpaceX 发现外星人的踪迹，将在 X 上第一时间发布。</p>
<p>等等，还有其它很多问题。</p>
<h2>马斯克为什么会接受这样的采访？</h2>
<p>以我们的文化很难想象一位顶级大佬会接受一名播主的采访，没有观众，只有他们两个人面对面地聊天。我将这个问题问了我能问的人，得到的答复是这样的：</p>
<p>Lex Fridman 是一位知名的研究员、播客主持人和公众人物，他在人工智能、技术、哲学等领域有着深入的研究和广泛的影响力。他的播客以深入、有见地的对话和对未来技术的探索而闻名。马斯克选择接受 Fridman 的采访，因为他的平台允许他在一个认真且通常较为深入的环境中讨论他的项目和愿景，Fridman 为马斯克提供了一个展示他想法和技术创新的良好机会。</p>
<p>接受这样的采访无关乎影响力，论影响力，X 可是顶级的，马斯克随便发一张帖子就应者百万。只关乎深入地思考，思考当下普遍值得思考的问题，没有多余的东西，回到了人与人交谈的本身。</p>
<p>没有利益，更没有计谋，没有其它任何东西。</p>
<p>@左耳朵耗子 还在世的时候，知名博主 @tinyfool 对他进行过一次采访，也是两个人，面对面交流。交流的内容中，部分是敏感的，以至于 @左耳朵耗子 生前视频都没有发出。后来 @左耳朵耗子 去世后，老友将这段专访拿了出来，以此纪念他。</p>
<p>在视频中，@左耳朵耗子 问 @tinyfool：你为什么想做这样的采访？</p>
<p>我感觉 @tinyfool 想做的就是 Lex Fridman 式的采访，是深入的交流与思考，所谈论的问题都是当下人类非常值得关注和思考的问题。但中外文化有差异，这样的播客目前在大陆应该很难开展起来。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[读卖报小郎君的龙门专访，看大神如何写人物、如何谋结构、如何写爽点与期待感等]]></title>
            <link>https://yishulun.com/./src/posts/2023/29.html</link>
            <guid>https://yishulun.com/./src/posts/2023/29.html</guid>
            <pubDate>Thu, 09 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>读卖报小郎君的龙门专访，看大神如何写人物、如何谋结构、如何写爽点与期待感等</h1>
<blockquote>
<p>你好，今天聊一下龙空对卖报小郎君的专访内容。卖报很大方、诚恳地在专访中分享了自己许多实用的创作小技巧，非常值得一读。有时候读一次可能还不够，需要反复研读。这一篇内容与上一篇“<a href="https://yishulun.com/posts/2023/24.html">卖报小郎君的网文创作之路及他的主要作品介绍，一名扑街选手究竟是如何成为网文界第一大神的</a>”结合起来学习，相信对网文新手成神会有大裨益。</p>
<p>在下面内容中，主体是专访内容及龙空大佬分享贴，注释部分是探长添加的。</p>
</blockquote>
<p>“龙门访谈”是龙的天空论坛一档特别栏目，主要对业内知名作者进行访谈，旨在让更多读者和作者了解访谈作者的创作理念，以及对网络文学方面的理解。以下是《大奉打更人》火爆出圈后，网文创作者空间圣地龙空对卖报的人物专访。</p>
<p>临江仙：卖报巨佬您好，很感谢您能在百忙之中抽出时间，接受我们龙的天空论坛“龙门访谈”特别栏目的专访。</p>
<p>卖报小郎君：能够有这样一个机会，与龙空广大的作者朋友们交流创作心得，我个人也是非常荣幸的。</p>
<h2>1，写网文应该全职还是兼职</h2>
<p>临江仙：先来问一个大家都很感兴趣的问题。</p>
<p>临江仙：您现在是全职还是兼职，是否有考虑过全职写作这件事？</p>
<p>卖报小郎君：兼职。全职的话，等 30 岁以后吧，网文作者这个行业其实缺乏保障，没有五险一金，书的成绩有起有伏。因此，有一个职业比较好，至少心安。</p>
<p>临江仙：至少有社保，不交够社保，看样子卖报巨是不会考虑全职的事情了，哈哈。</p>
<p>临江仙：那么方便透露职业吗？</p>
<p>卖报小郎君：金融类行业。</p>
<p>临江仙：还不错，创作时间有保证了。</p>
<p>卖报小郎君：对，平时不会太忙，能抽出时间码字。</p>
<p>临江仙：看你创作速度就能看出来，工作压力应该是真不大，哈哈。</p>
<p>卖报小郎君：主要是今年的行情太糟糕了，大部分时间都闲。</p>
<p>临江仙：要是老板知道你每天还能抽出时间创作，不知道会是什么心情。</p>
<p>卖报小郎君：所以身边的同事没人知道我写小说，哈哈哈哈。</p>
<p>卖报小郎君：低调发育，猥琐别浪。</p>
<p>临江仙：这让我想起了脱口秀里有个叫赵小慧的，老板知道她说脱口秀，让她朋友圈卖车。</p>
<p>临江仙：你们老板知道你写书，会不会让你在朋友圈推金融理财？</p>
<p>临江仙：想想那一定是很好玩的事情，哈哈。</p>
<p>卖报小郎君：有这个可能，我可以薅一波老板的羊毛，哈哈哈。</p>
<p>卖报小郎君：还是低调些，不喜欢太高调。</p>
<blockquote>
<p>虽然网文作者平均月收入已经达到 5000，但大头都被头部作者拿走了，大部分————95%的网文作者其实是处在温饱线以下的。任何一位大佬都不会劝人一上来就搞全职创作，创作网文最好的方式是“猥琐发育”，有一个闲职干着，业余写作，且对同事及周围的朋友保密。</p>
</blockquote>
<p>临江仙：您是如何走上小说创作这条路的？</p>
<p>卖报小郎君：之前在十二天王的感言里说过，主要是从小热爱写作，中小学经常拿作文奖。后来接触了小说，当时还没有网文的概念，看的是萧鼎的诛仙，因此激发了创作欲望。</p>
<blockquote>
<p>几乎十年扑街的艰辛，在起点的访谈里有提到，网址见 <a href="https://yishulun.com/posts/2023/24.html">https://yishulun.com/posts/2023/24.html</a></p>
</blockquote>
<p>卖报小郎君：写书这么多年，最大的感受就是难！</p>
<p>卖报小郎君：真的太难了！</p>
<p>卖报小郎君：入行难，出成绩难，登上高峰更难，登上高峰更难能稳住成绩更更难。</p>
<p>卖报小郎君：没有人可以一直走上坡，成绩有起有伏，很正常。这方面我倒是有充足的心理准备。下本书哪怕成绩平平，我也不会在意，任何低谷，其实都是磨砺。</p>
<p>卖报小郎君：过去很多年里，我经常产生“我不适合写小说”的自我怀疑。</p>
<p>卖报小郎君：所以，直到现在，我也不认为我是天赋型选手。</p>
<p>卖报小郎君：最主要的还是积累，至于成绩，平常心对待就好。</p>
<p>卖报小郎君：像我写妖二代的时候，成绩只有姐姐的一半，但我一直耐心写下来了，并总结了自己的不足，这才有了打更人。</p>
<h2>2，网文创作的王道是什么</h2>
<p>卖报小郎君：写《姐姐大明星》的时候，其实是靠文风、人设撑起来的，属于剑走偏锋，和大部分只有一个卖点的脑洞文一样。</p>
<p>卖报小郎君：但剑走偏锋是不长久的，<strong>网文的王道，还是故事、人设和爽点、期待感</strong>。</p>
<blockquote>
<p>网文创作王道</p>
<p>故事：具有剧情张力，情节设计环环相扣。人设：人物群像，每个主角人物都鲜活。爽点与期待感：铺垫是核心关键。</p>
</blockquote>
<p>卖报小郎君：写《妖二代》的时候，我刻意练习故事结构，以及群像。</p>
<p>卖报小郎君：期待感是网文的核心了，不过“期待感”三个字太笼统。</p>
<p>卖报小郎君：故事写得好，读者会有期待感；套路用的好，读者会有期待感</p>
<p>卖报小郎君：<strong>妖二代的动漫版权卖了，说明故事结构还算可以</strong>，这是我最大的收获。</p>
<p>卖报小郎君：但妖二代的爽点不足，后期看起来会有些枯燥。于是写打更人的时候，我针对这个，做了很深的研究。</p>
<p>卖报小郎君：打更人的爽点方面，远胜妖二代。</p>
<p>卖报小郎君：另外，我其实没写过破案，但<strong>妖二代的写作核心是铺设悬念，解开悬念，这个和写破案文异曲同工</strong>。</p>
<p>卖报小郎君：所以，打更人有这个成绩，完全是妖二代时的积累。</p>
<p>卖报小郎君：因此我刚才说了，正视自己的低谷，这是一个积累的过程</p>
<p>卖报小郎君：平常心对待。</p>
<p>卖报小郎君：其实打更人也有许多缺点，只是我现在还没有很好的总结出来，因为这本书的缺陷在于很多细节，而不是爽点不够，人物不行这种大硬伤。</p>
<p>卖报小郎君：我打算完本之后，重新回顾一下每一卷的剧情，回顾一下追订出问题的剧情。</p>
<p>卖报小郎君：主要还是网文的更新频率，没时间去精雕细琢，这是网文的硬伤吧。</p>
<p>临江仙：比如许七安佛门斗法那段，多少有点露怯了。还有破案的细节也是，少了些峰回路转，跌宕起伏。</p>
<p>卖报小郎君：那段我写的特别痛苦，下本书绝对不写破案了。</p>
<p>卖报小郎君：写案子，得提前想好一个几万字，乃至十几万字的剧情。</p>
<p>卖报小郎君：有时候根本没时间去想，硬着头皮写。</p>
<p>卖报小郎君：原因嘛，主要是来自读者方面的吐槽。</p>
<p>卖报小郎君：有时候细节没处理好，读者会把你喷的一无是处，让你很尴尬。</p>
<p>卖报小郎君：于是写的时候，就很忌讳了。</p>
<p>卖报小郎君：这种情况我遇到过两次，一次是镇北王，一次是杀元景帝。</p>
<p>卖报小郎君：镇北王那次，其实是被读者裹挟了。</p>
<p>卖报小郎君：他本来到第二卷后期才死，至于杀元景帝的时候，我其实感觉出自己写的有点问题，但读者书评区催更太厉害，只能硬着头皮写。</p>
<p>临江仙：都怪催更的，你看人家香蕉，他就不怕</p>
<h2>3，更新速度快是另一个维度的王道法则</h2>
<p>卖报小郎君：其实吧，我觉得网文更新量是王道。</p>
<p>老鹰：我总感觉你是在说我！</p>
<p>卖报小郎君：老鹰的成绩，恰好反应出了市场的需求</p>
<p>临江仙：嗯，老鹰那种也是找到了自己的节奏。</p>
<p>卖报小郎君：更新永远是王道。</p>
<p>卖报小郎君：相对于特别精品化，但更新缓慢的书，读者更喜欢量大的，爽点足的，这才是网文的市场核心。</p>
<p>临江仙：您是如何想到《大奉打更人》这本书的创意？</p>
<p>卖报小郎君：这个说起来挺复杂的，打更人的内核，一定程度受到了妖二代的影响。以及绣春刀历史背景的影响，很多人其实能看出来，打更人是参照了明朝的背景。</p>
<p>卖报小郎君：然后，<strong>之所以选择破案题材（悬疑），主要是冲着版权去的，因为这种题材适合改编</strong>。</p>
<p>卖报小郎君：就像我写妖二代的时候，是冲着漫画 IP 去的。</p>
<p>卖报小郎君：事实证明，我的把控还不错。</p>
<p>卖报小郎君：写书的吗，总有两个梦想，一个是出版，一个是影视化改编。</p>
<p>卖报小郎君：我记得有次和荣小荣聊天，都渴望影视改编，于是讨论什么题材适合改编。</p>
<p>卖报小郎君：当时还比较迷茫，想不出来，后来思考了很久，其实影视化改编的核心是：精品化，专业化。</p>
<p>卖报小郎君：那种专业性很强的题材，比如官场、刑侦推理、教师等等。</p>
<p>卖报小郎君：一路打怪升级的传统玄幻，改编难度太大，IP 热的时候，很好卖，市场不景气了，立刻无人问津。</p>
<p>临江仙：这目标很明确啊，果然成功是给有准备的人提供的。</p>
<p>临江仙：其实不管题材，最终还是看成绩。</p>
<p>卖报小郎君：对，得有成绩才行，先有成绩，再看题材。</p>
<h2>4，如何成功刻画人物？</h2>
<p>临江仙：您的书中每个角色都鲜活生动，有血有肉，让人印象深刻，能分享一下人物塑造方面的经验吗？</p>
<p>卖报小郎君：如果是看过妖二代的读者，应该能看出我人设方面的成长轨迹。</p>
<p>卖报小郎君：首先，人物方面，你得假装他是一个真实存在的人物。</p>
<p>卖报小郎君：真实存在的人物，必定有外貌、性格、家庭背景。</p>
<p>卖报小郎君：要把这三块提前做好。</p>
<p>卖报小郎君：举个例子，塑造秦宝宝的时候，先构思好她的外貌身材，再构思她的性格，最后是家庭背景：女主、姐姐。</p>
<p>卖报小郎君：然后，根据自己做好的设定来写这个角色，与角色性格违背的台词、行为，统统不要，这样子，人物的形象就立体起来了。</p>
<p>卖报小郎君：还有一点就是贴标签，这是快速塑造一个人物的方法。</p>
<p>卖报小郎君：比如打更人里逼王杨千幻。</p>
<p>卖报小郎君：不过，贴标签只能初步塑造人物，想让这个人物深入骨髓，除了外貌、性格和家庭背景，最好还是加入他的理念</p>
<p>卖报小郎君：有理念的角色，才是最生动鲜活的</p>
<p>临江仙：这就要深入人物内心，描写他内心的冲动和渴望，以及人生观，价值观等等。</p>
<p>卖报小郎君：对。</p>
<p>卖报小郎君：这种写法，适用于重要角色，比如大反派，比如女主、男二，不太重要的角色，其实没必要。</p>
<p>卖报小郎君：而且这种有理念的重要角色，刀起来很爽。</p>
<blockquote>
<p>写好人物有四立项一说。外貌、身材、职业、社会地位、家庭关系、江湖评价等是一个层次，技能欲求情感理念是更高的一次层次。在关键时刻还要写好反差，例如一个贪生怕死的人舍生取义，一个贪吃好玩的人一本正经干大事等等。写好人物需要多思考、多练习，每个人物在小说中都不是纸片人，都需要作者付出心血浇灌。</p>
</blockquote>
<h2>5，卡文了怎么办？</h2>
<p>临江仙：很多作者在创作过程中会有卡文情况，您是否也有，如果遇到卡文状态，您是如何度过？</p>
<p>卖报小郎君：卡文是无解的，每次卡文我都会情绪暴躁，烦躁。</p>
<p>卖报小郎君：最好的办法就是去看看别的书，拼命的寻找有类似剧情的书。</p>
<p>卖报小郎君：有时候卡的痛不欲生，会产生罢工的想法。</p>
<p>卖报小郎君：如果自己想不到，就去问别的作者朋友。</p>
<p>临江仙：比如荣小荣</p>
<p>卖报小郎君：嗯，我经常和荣小荣聊剧情。有同行朋友聊天，其实比一个人苦思冥想更好。可能别人的一个点子，就让你豁然开朗。</p>
<p>临江仙：看来我距离成为大神，还差一个@荣小荣，哈哈。</p>
<p>临江仙：不行，一会就找他聊聊去，争取明天成神。</p>
<blockquote>
<p>卡文了可以找人聊天，或看别的作品寻找灵感。解决卡文问题，重点还在于积累，探长一直觉得人文方面学习与思考的积累，以及事先充足准备的大纲，可以减少卡文。</p>
</blockquote>
<p>临江仙：如何写出一本畅销书，您对于这方面有哪些经验分享？</p>
<p>卖报小郎君：其他网站我不知道，就起点来说，<strong>起点读者是很吃逻辑的。所以大纲要做好，写书的时候尽量让剧情符合逻辑</strong>。</p>
<blockquote>
<p>这大概是卖报在起点专访中透露的“写好剧情逻辑”的意思。</p>
</blockquote>
<p>卖报小郎君：做到这一点后，在去思考四个方面：<strong>人物、剧情、结构和爽点</strong>。</p>
<h2>6，如何创作剧情？</h2>
<p>卖报小郎君：人物，人设怎么做，上面我说过了。接下来是剧情，<strong>剧情一定要有起伏、有冲突，有反转</strong>。</p>
<p>卖报小郎君：日常文只是小众，平淡的剧情很难写出一本爆款。</p>
<p>卖报小郎君：结构方面，我强烈推荐《诡秘之主》。</p>
<blockquote>
<p>《诡秘之主》起点链接已备好：<a href="https://www.qidian.com/book/1010868264/%E3%80%82%E5%9C%A8%E8%B5%B7%E7%82%B9%E9%98%85%E8%AF%BB%E5%8F%AF%E4%BB%A5%E5%90%8C%E6%97%B6%E7%9C%8B%E4%B9%A6%E8%AF%84%E4%B8%8E%E7%AB%A0%E8%AF%84%EF%BC%8C%E8%AF%BB%E8%80%85%E8%AF%84%E8%AE%BA%E4%B9%9F%E5%BE%88%E9%87%8D%E8%A6%81%E3%80%82">https://www.qidian.com/book/1010868264/。在起点阅读可以同时看书评与章评，读者评论也很重要。</a></p>
</blockquote>
<p>临江仙：抓住乌贼粉一只。</p>
<p>卖报小郎君：<strong>故事结构，一个装逼剧情，最好不要超过十五章，连载最好不要超过一个星期</strong>。</p>
<p>卖报小郎君：<strong>装逼剧情之后，写两到三章的日常，日常中做下一个剧情的铺垫</strong>。</p>
<p>卖报小郎君：<strong>爽点的话，核心就是装逼，装逼的核心，其实是凸显出主角的与众不同</strong>。</p>
<p>卖报小郎君：龙空有很多装逼套路总结，我看过，很有用。</p>
<p>临江仙提醒：大神都说龙空的精华帖子有用了，你们这帮新手还不去看！</p>
<p>卖报小郎君：很多作者觉得那东西没用，其实是写作经验太少，无法套用。</p>
<p>卖报小郎君：如果能花时间和精力，苦练那些套路，经验足了，什么剧情该用什么套路，脑子里就自然而然的用出来了。</p>
<p>卖报小郎君：这方面很吃写作经验，写作归根结底是积累和经验，秘籍摆在那里，如果没有足够的写作经验，是用不出来的。</p>
<p>卖报小郎君：换成写《妖二代》以前的我，我也领会不了那些套路，因为我不熟，没怎么写过。</p>
<p>卖报小郎君：《妖二代》结束后，我花了半年时间，专研究套路写作，半年写了几十万的装逼剧情（指《我的姐姐是大明星》，简称《姐姐》），虽然写的一般，但越来越得心应手，越来越熟练。</p>
<blockquote>
<p>这里“装逼剧情练习”可能指的是在公众号续写《姐姐》番外。《姐姐》开书在《妖二代》之前，番外续写在《妖二代》之后。附《姐姐》链接：<a href="https://www.xbiquge.bz/book/17145/">https://www.xbiquge.bz/book/17145/</a></p>
</blockquote>
<p>卖报小郎君：还是得多写，多练，不要怕累。</p>
<p>临江仙：下一本就是化用套路，做到无招胜有招了。</p>
<p>卖报小郎君：是这样的，初学的时候，是死记硬背</p>
<p>卖报小郎君：越来越熟练了，就忘记那些套路了。</p>
<p>卖报小郎君：不是生搬硬套，而是这段剧情该用什么套路，自然而然的用出来了。</p>
<p>卖报小郎君：<strong>我以前是根据某个装逼套路，来构思剧情</strong>。</p>
<p>卖报小郎君：<strong>现在是根据剧情的走向，来使用哪个套路</strong>。</p>
<p>临江仙：作为新晋天王，您如何看待网络上对此次天王评定的质疑声？</p>
<p>卖报小郎君：十二天王，各有各的特色吧。</p>
<p>临江仙：作为起点知名网络作家，您对于其他想入行的新作者有哪些建议？</p>
<p>卖报小郎君：写网文很难的，首先，先让自己有一份收入还可以的职业，然后以爱好的形式来写网文</p>
<p>卖报小郎君：一本书火了，别急着辞职，见过太多起落落落落落的作者……</p>
<p>临江仙：确实很多。</p>
<p>卖报小郎君：所以，最起码有两本以上的火书，再考虑全职吧</p>
<p>卖报小郎君：另外，想靠写书赚钱，首先得做好吃苦的心里准备。</p>
<p>卖报小郎君：那么多大佬的例子告诉我们，写书是需要很多年很多年积累的。</p>
<p>卖报小郎君：在这个过程中，你得有足够的毅力不放弃，有足够的热情去钻研。</p>
<p>卖报小郎君：说实话，我当初读书时要有这份劲头，我可能会考一所更好的大学。</p>
<p>卖报小郎君：就我来说，我几乎戒掉了所有娱乐。天天上班，宅家里研究网文。</p>
<p>卖报小郎君：所以，如果只是爱好，不要求写作谋生的，怎么来都无所谓。</p>
<p>卖报小郎君：如果想以此为职业，就要做好心理准备了，要慎重。</p>
<h2>7，扑街新手心态</h2>
<p>卖报小郎君：对了，说一说我扑街时的感受</p>
<p>卖报小郎君：很多人不知道，其实我写网文小十年了，一直闭门造车。</p>
<p>卖报小郎君：我是 17 年才出成绩的。</p>
<p>卖报小郎君：过去的六七年里，一分钱都没赚，有时候会很沮丧很迷茫，感觉自己不适合写书，写一本扑一本，找不到学习的方向，感觉创作没有出头之日。</p>
<p>临江仙：插播一条广告，你那个时候就缺一个“龙空”。</p>
<p>卖报小郎君：想靠写书为生简直是做梦，心情很低落很低落，大概很多人都跟我当时一样。</p>
<p>临江仙：不知道是不是错觉，为啥我听这段这么有代入感呢？</p>
<p>卖报小郎君：但我还是起来了，虽然起来的迟了点，但终究是取得了一定的成绩。</p>
<p>卖报小郎君：现在回想一下，我之所以能起来，靠的是钻研和努力。</p>
<p>卖报小郎君：在网文作者行列中，我的天赋并不算拔尖，只能说很一般。</p>
<p>卖报小郎君：<strong>因此我相信，只要大家肯花时间去研究，去努力，也迟早会出成绩的</strong>。</p>
<p>卖报小郎君：至于成功的到来，那只是时间问题。</p>
<p>临江仙：作为资深扑街，我替广大扑街谢谢卖报巨的鼓励了，呜呜呜</p>
<p>临江仙：其实我觉得，作为一名扑街，写书不赚钱倒是其次，写的没人看才最伤。</p>
<p>卖报小郎君：无人问津嘛，就跟陈奕迅的浮夸一下，所以很喜欢浮夸这首歌。</p>
<p>临江仙：预感这首歌要火。</p>
<p>卖报小郎君：除了实在没天赋的人，其实大部分人的天赋相差不大的。</p>
<p>卖报小郎君：大佬和扑街的差距，只是时间的积累和个人努力而已。</p>
<p>卖报小郎君：不要轻易自我怀疑，多积累，肯定能成功。</p>
<p>临江仙：不过也很难，很多新入行的作者，经过一两次扑街的打击，就会陷入自我怀疑自我否定</p>
<p>卖报小郎君：对，我当年也是这样，但凭着对网文的热情，坚持下来了。</p>
<p>卖报小郎君：所以，要先有一份稳定收入的职业，起码能支撑得起梦想。</p>
<p>卖报小郎君：写作要好几年，甚至十年的积累。</p>
<p>卖报小郎君：我就是因为扑街了七八年，有心理阴影了，到现在也不敢全职。</p>
<p>临江仙：有一个稳定的职业，稳定的收入，能平衡许多扑街所带来的焦虑感。</p>
<p>卖报小郎君：嗯，心里有退路，就不会慌，能静下心来写作。</p>
<p>临江仙：说一个玄学点的东西，其实，有时候作者还需要“顿悟”，迈过那个坎，才能真正学会一些东西。</p>
<h2>8，大神口中的顿悟指什么</h2>
<p>卖报小郎君：这点很赞同，我有时候看电影，看动漫，发现一段精彩剧情，会莫名其妙的顿悟。</p>
<p>卖报小郎君：其实是积累到一定程度了，本质还是厚积薄发，然后自然就会有种豁然开朗那种感觉。</p>
<p>临江仙：一个大神作者，有时候需要几次顿悟。</p>
<p>卖报小郎君：这个确实玄学，我有好几次类似的顿悟，<strong>今年看某部动漫，男主被一个女配表白，我突然感觉很爽</strong></p>
<p>卖报小郎君：然后，那一刹那，我就顿悟了</p>
<p>卖报小郎君：<strong>为什么会觉得爽？</strong></p>
<p>卖报小郎君：<strong>因为动漫之前对女配铺垫很多，铺垫她如何可爱，如何漂亮</strong></p>
<p>卖报小郎君：<strong>等待她向男主表白，观众就觉得爽</strong>。</p>
<p>卖报小郎君：后来我反思，之所以会有爽点，核心是铺垫。</p>
<p>卖报小郎君：如果没有之前的铺垫，女配只是女配，根本感觉不到爽。</p>
<p>卖报小郎君：写小说也是，铺垫所营造的那种期待感。</p>
<p>卖报小郎君：男主要睡某个女角色，如果作者把女角色塑造的很好，读者期待感瞬间拉满，那么当看到那个剧情的时候，势必会觉得很爽。</p>
<p>卖报小郎君：类似的顿悟我还有好多，只是以前没想过这些，在描写装逼时也是一样，总是 get 不到那个点。</p>
<p>卖报小郎君：后来逐渐领悟，<strong>要想让读者如何期待主角装逼，你得事先做好铺垫</strong>。</p>
<p>卖报小郎君：这里其实也体现阅读量的重要性，如果我不去看书，看动漫，可能不会有这样的顿悟。</p>
<p>临江仙：对的，但看书和影视作品的时候，还要花心思看，全身心投入进去的看，不能光刷剧情</p>
<p>卖报小郎君：嗯，这就是作者看书和读者看书的区别</p>
<p>卖报小郎君：我以前看书不会想那么多，爽就够了，<strong>现在看书，我要思考这段剧情为什么爽，本书的节奏怎么样</strong>。</p>
<p>卖报小郎君：很多书，我看个几百章就腻了，看不下去了，但有的书，熬夜通宵都能看，这就是节奏的问题，而不是爽点的问题。</p>
<p>卖报小郎君：尝谕的《我真是大明星》在节奏方面，超级赞，乌贼的《诡秘之主》是结构。</p>
<blockquote>
<p>《我真是大明星》<a href="https://www.xbiquge.bz/book/270/%EF%BC%8C%E3%80%8A%E8%AF%A1%E7%A7%98%E4%B9%8B%E4%B8%BB%E3%80%8Bhttps://www.qidian.com/book/1010868264/">https://www.xbiquge.bz/book/270/，《诡秘之主》https://www.qidian.com/book/1010868264/</a></p>
</blockquote>
<p>卖报小郎君：如果能研究透彻水鱼的节奏，肯定会出成绩。</p>
<p>卖报小郎君：我打算打更人完结后，去重新研究一下这两本书。</p>
<p>卖报小郎君：取长补短</p>
<blockquote>
<p>这个节奏是多少章节完成一个小高潮情节，卖报的《妖二代》在15章以内。一般飞卢的节奏是这样的：</p>
<p>公众期5章一个循环：1章人设，2章铺垫，1章打脸，1章事后反响或者收获等等善后。</p>
<p>VIP可以拉长，1~2章人设5章铺垫，1~2章打脸，1章事后总结。</p>
<p>飞卢节奏比起点快了一倍左右。</p>
</blockquote>
<p>临江仙：我也得学学去，到时候找你讨论学习心得，哈哈</p>
<p>卖报小郎君：学习和思考是进步的关键。</p>
<p>卖报小郎君：可以。</p>
<p>卖报小郎君：对了，我之前在龙空看到一个帖子。</p>
<p>卖报小郎君：楼主是个高手，实际水平不知道，但理论经验真的扎实，墙裂推荐。</p>
<p>临江仙：还记得标题，或者作者吗？</p>
<p>卖报小郎君：<a href="http://www.lkong.net/thread-2708019-1-1.html">http://www.lkong.net/thread-2708019-1-1.html</a></p>
<blockquote>
<p>这是某位工作室大佬总结的都市飞卢爽文技能贴，稍后有全文解析，见。</p>
</blockquote>
<p>临江仙：这个帖子作者要火。</p>
<p>卖报小郎君：楼主把写爽点的核心，阐述的非常到位</p>
<p>卖报小郎君：我很认同他的理论，因为和我研究出的东西很相似。</p>
<p>卖报小郎君：铺垫是一切的核心。</p>
<p>卖报小郎君：不过这个帖子对目前来说我用处不大，但对新手来说，这帖子很有研究价值，能让新人少走很多的弯路。</p>
<p>临江仙：感谢卖报巨的耐心回答，我谨代表龙空，以及龙空的广大作者朋友，感谢您的分享。</p>
<p>临江仙：下边是龙友问答环节，还希望卖报巨再接再厉，继续发扬风格，哈哈。</p>
<h2>9，卖报读者答疑</h2>
<ol>
<li>秋名山车神的车技是怎么练就得/那么多开车成语，平时是怎么积累的，或者说怎么用成语开车</li>
</ol>
<p>卖报小郎君：瞎说，我从不开车</p>
<blockquote>
<p>开车、写幽默是卖报天赋。《妖二代》里面有诸多体现，除了直接的开车等语言幽默，卖报还擅长使用反差、对比、反转等手法制造幽默。</p>
</blockquote>
<ol start="2">
<li>怎么快速立人物，怎么让日常写的有趣。还有，怎么写出一个能让人感动、泪目的剧情？我能写出让人爽、让人笑的情节，但是让人哭的，试了几次都写不内味</li>
</ol>
<p>卖报小郎君：日常不是无意义的日常，首先要想好有趣的点在哪里，如果没有有趣的点，宁愿不写日常。这方面，其实可以根据人设来写日常。</p>
<p>泪目的剧情：首先得抓住泪点在哪里，一个舍生取义的人为自己的理念牺牲，和一个平平无奇的配角，突然自我牺牲，两者是不同的。泪点，其实也靠事先的铺垫。</p>
<ol start="3">
<li>卖报大大，是怎么边上班，还能日更那么多的？他为什么这么有毅力/大奉打更人这么密集搞笑的情节是平时是怎么写出来的，不卡文吗</li>
</ol>
<p>卖报小郎君：主要是上班挺闲的，有时间码字。搞笑情节的话，就我个人来说，其实是脑子一动，就有剧情了。没什么特别好的经验分享。个人文风和天赋问题。</p>
<p>卡文，我也卡文，我经常卡的痛不欲生。</p>
<ol start="4">
<li>结构，大奉打更人结构怎么做的。我之前反推过，大致是以一个许父杀子案为主线，反推出部分故事，然后把其它案件像挂件一样镶嵌进去。</li>
</ol>
<p>卖报小郎君：你的反推是对的，你是一个很会研究的作者。结构怎么做？答案很简单，先做好大纲。</p>
<ol start="5">
<li>打更人不悲剧了吧？/小母马会加入后宫吗？/打更人一开始简介后面的“ps. 本书不悲”为什么后来删掉了，是准备在结尾的时候给读者们一个惊喜吗？</li>
</ol>
<p>卖报小郎君：打更人不会悲剧。</p>
<ol start="6">
<li>为什么要给浮香设定一个妓女的身份？还不是处？后面还准备挖剧情？哪怕后面有了新身体，她以前在别人……都是记忆……难道不算绿？/想问熟女真的那么舒服吗？我是老书友了，应该还在 lk 推过他的书，这个问题想问很久了/什么时候会再写女主被绿的剧情？</li>
</ol>
<p>卖报小郎君：这个女角色其实是写偏了，本身只是花魁，后来人气太高，只能做修改，增加戏份。</p>
<p>我们写作的时候，常常会出现写偏的情况，无法真正按照自己的想法走，还得考虑读者的感受。读者喜欢哪个角色，哪怕是花魁，也得给她增加戏份。取悦读者很重要。毕竟要恰饭。</p>
<p>7，想知道多少均定了，感觉会是下一本破十万均的火书</p>
<p>卖报小郎君：现在均订 8.3 了，十万均订随缘吧。</p>
<ol start="8">
<li>登上畅销榜取得这个成绩后心情的变化，对扑街有什么想说的或者是经验？</li>
</ol>
<p>卖报小郎君：说实话，兴奋程度并不高，因为压力太大了，经常抓耳挠腮。减轻了成功的喜悦。有些不堪重负。对于新人作者，我只有一句话：坚持，坚持，一定要坚持下去。</p>
<ol start="9">
<li>被家里人熟人看到后，是啥子心情</li>
</ol>
<p>卖报小郎君：家人和同事并不知道我写书，我不想社死。</p>
<ol start="10">
<li>杀皇帝后的订阅情况，是否有所降低？</li>
</ol>
<p>卖报小郎君：杀皇帝不是订阅巅峰，父子摊牌才是订阅巅峰，24 小时追订有五万吧。高潮之后，追订有所回落，正常现象。打更人的追订一直比较稳。</p>
<ol start="11">
<li>请问经常写了一个大高潮，读者一脸懵逼的表示发生了什么时，有什么感想？</li>
</ol>
<p>卖报小郎君：说明铺垫没有到位。</p>
<ol start="12">
<li>有了一些点子，怎么构思出一个完整的故事？</li>
</ol>
<p>卖报小郎君：灵光一闪的情况每个人都有，但能写成好书的，凤毛麟角。根据点子，来构思人物、剧情。</p>
<ol start="13">
<li>卖报的到底几岁了</li>
</ol>
<p>卖报小郎君：十八岁。</p>
<ol start="14">
<li>作者一本书赚了多少？</li>
</ol>
<p>卖报小郎君：这本书写完，上海买套过得去的房应该没问题。</p>
<p>龙空临江仙：感谢卖报巨能于百忙之中抽出时间，参加我们龙的天空特别栏目“龙门访谈”的专访。在这里，我谨代表龙空，已经龙空的广大龙友，祝您的作品全面开花，订阅、IP 双丰收。</p>
<p>同时，也在这里诚挚的希望您能经常来龙空，参与我们龙空的热门话题。</p>
<p>卖报小郎君：谢谢祝福，我会经常来龙空转转滴。</p>
<h2>回顾</h2>
<p>上一篇在解析起点专访时，探长大概将卖报的成长历程分为了五个等级：</p>
<p>第一等级：通过阅读《西游记》和创作《九州经》完成</p>
<ul>
<li>清晰地表达故事的笔力</li>
<li>细致地刻画人物</li>
</ul>
<p>第二等级：通过创作《我的姐姐是大明星》完成</p>
<ul>
<li>对爽文套路及爽点的初步把控，拿着套路构思情节</li>
</ul>
<p>第三等级：通过创作《原来我是妖二代》完成</p>
<ul>
<li>原创世界观（修行体系设定）</li>
<li>故事结构：剧情张力（写好铺垫和逻辑性，写出期待感）、环环相扣的情节设计</li>
<li>人物群像初级，写好 4、5 个人物</li>
</ul>
<p>第四等级：通过创作《我的姐姐是大明星》番外完成</p>
<ul>
<li>对爽文套路及爽点的深度把控，随便构思情节，自由选择套路。</li>
</ul>
<p>第五等级：通过创作《大奉打更人》完成</p>
<ul>
<li>人物群像高级，写好每一个主要人物</li>
</ul>
<p>这次探长结合龙空的专访，及卖报自言的网文关键五项“逻辑、人物、剧情、结构和爽点”，外加一个“笔力”，将这五个等级做进一步的扩充和完善：</p>
<p>第一等级：通过阅读《西游记》和创作<a href="https://www.uukanshu.com/b/51274/">《九州经》</a>完成</p>
<ul>
<li>笔力：清晰地表达故事的笔力</li>
<li>人物：细致地刻画人物</li>
</ul>
<p>第二等级：通过创作<a href="https://www.xbiquge.bz/book/17145/">《我的姐姐是大明星》</a>完成</p>
<ul>
<li>爽点：对爽文套路及爽点的初步把控，拿着套路构思情节</li>
</ul>
<p>第三等级：通过创作<a href="https://www.xbiquge.bz/book/42491/">《原来我是妖二代》</a>完成</p>
<ul>
<li>逻辑：原创世界观（修行体系设定）</li>
<li>结构、剧情：故事结构之剧情张力（写好铺垫和逻辑性，写出期待感）与环环相扣的情节设计</li>
<li>人物：人物群像初级，写活 4、5 个人物</li>
</ul>
<p>第四等级：通过创作<a href="https://www.xbiquge.bz/book/17145/">《我的姐姐是大明星》</a>番外完成</p>
<ul>
<li>爽点：对爽文套路及爽点的深度把控，随便构思情节，自由选择套路</li>
</ul>
<p>第五等级：通过创作<a href="https://www.qidian.com/book/1019664125/">《大奉打更人》</a>完成</p>
<ul>
<li>人物：人物群像高级，写好每一个主要人物</li>
</ul>
<p>下面对这五项的要求统一做一个列表说明：</p>
<ul>
<li>笔力：清晰地表达故事</li>
<li>逻辑：做好世界观设定及大纲，写书的时候尽量让剧情符合逻辑</li>
<li>人物：外貌、身材、职业、社会地位、家庭关系、江湖评价等是一个层次，技能欲求情感理念是更高的一次层次。在关键时刻还要写好反差，例如一个贪生怕死的人舍生取义，一个贪吃好玩的人一本正经干大事等等。</li>
<li>剧情：剧情一定要有起伏、有冲突，有反转。在节奏上，一个装逼剧情，最好不要超过十五章，连载最好不要超过一个星期。</li>
<li>结构：《大奉打更人》结构怎么样的？有人反推过，大致是以一个许父杀子案为主线，反推出部分故事，然后把其它案件像挂件一样镶嵌上去。</li>
<li>爽点：对爽文套路及爽点的把控，初级是拿套路想情节，高级是拿情节选套路。爽点的核心是装逼，装逼的核心，是凸显出主角的与众不同。爽点情节想避免生硬和无脑，必须重视情节的铺垫和人物的人设建设。</li>
</ul>
<p>在网文创作的实践探索中，注意以上这六项，再将卖报的三部作品《姐姐》《妖二代》《大奉》依次研读一下，相信对你会有大启发。祝所有看到的网文作者都有大进步，作品大卖！</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[龙空工作室大佬分享飞卢都市爽文写作秘籍，爽点写得好不好关键在两点]]></title>
            <link>https://yishulun.com/./src/posts/2023/30.html</link>
            <guid>https://yishulun.com/./src/posts/2023/30.html</guid>
            <pubDate>Thu, 09 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="./assets/image-20231110170750816.png" alt="龙空"></p>
<h1>龙空工作室大佬分享飞卢都市爽文写作秘籍，爽点写得好不好关键在两点</h1>
<blockquote>
<p>你好，今天聊一下如何写都市爽文的爽点，为什么同样俗套的情节大神能写好你写不好，关键点是铺垫与逻辑性。</p>
<p>下面的内容即是大佬分享的内容，注释部分是探长添加的。我是在卖报小郎君的龙空专访中看到对这个帖子的推荐的。</p>
</blockquote>
<p>每月末都会给手底下几个枪讲了下课，这半年都是讲都市。</p>
<p>都市最重要的东西就是装逼打脸。</p>
<p>在讲解以及提问时，我发现了个关键的东西。</p>
<p>这个东西大家或许都知道，但是并没有谁去专门的讲解。</p>
<p>装逼打脸写不好，我认为可能这就是最主要的。</p>
<p>所以今天我就专门讲一下装逼打脸，多举例子，今天抽选一个飞卢的实例书来配合讲解。</p>
<p>单纯的理论性东西，很多人并不能深刻理解。</p>
<p>本篇差不多是我这半年讲都市课的集合了，算不上太高大上，但是理解学会，飞卢闭眼几百订跟喝水一样。稍微动点脑子，有点创新，十本书有八本千订。</p>
<h2>前言：同样的爽点核心不同的表现</h2>
<p>无论是无线文还是飞卢文的都市，其实就算菜鸟也知道，装逼打脸是故事的主旋律。</p>
<p>不是在去装逼打脸的路上就是在装逼打脸，一刻不停。</p>
<p>这句话就可以概括飞卢都市玄幻等各大题材的一个核心。</p>
<p>但是，为什么都知道的东西，依旧写不好？</p>
<p>甚至越写越迷茫，不断的寻找攻略技巧。</p>
<p>网文不是数学，有一套严谨的公式。</p>
<p>网文的技巧多种多样，甚至是两种技巧理论是对立的都可能。</p>
<p>举个例子：</p>
<p>比如飞卢早期的神豪有本天榜书，上来系统直接给了百亿，然后第一个任务让一天内花掉这一百亿。</p>
<p>主角穿着屌丝服骑电动车直接奔赴奢侈品区域购物。</p>
<p>百达翡丽专柜，主角的同学，销售员，同事，亲戚都在场了。</p>
<p>被嘲讽数落不脚踏实地，攀比，没钱就不要来等各种言语洗礼后。</p>
<p>主角开始装逼。</p>
<p>来，把所有的表给我包起来，我都要了，对你没听错，这个店里所有在售的都给我包起来。</p>
<p>什么，你做不了主，找个能做主的来。</p>
<p>旁边看热闹的是江诗丹顿么？</p>
<p>来，把你店的手表也给打包。</p>
<p>劳力士的是不是没点你们名？不想赚钱就继续傻站着。</p>
<p>震惊全场，震惊全商场，震惊全网络，震惊全世界。</p>
<p>这就是脸打的上天了。你也跟着学，脸打的啪啪的，反派各种嘲讽，哪怕是一条狗都觉得主角是个穷屌丝。</p>
<p>但是你隔天又看了本书，同样是神豪文。</p>
<p>开局主角获得系统，签到送了辆跑车，又送了一亿现金，也让主角去花钱。</p>
<p>主角也去了手表店，一进门，高素质服务员面带微笑的服务主角（服务员不嘲讽），店门口碰到同学，同学惊讶主角这么壕了，表示能不能跟着主角长长见识，看看有钱人是怎么消费的，主角淡定表示可以。</p>
<p>前十几章甚至几十章，就是这么个吊。无反派，不打脸装逼都懒得装了。</p>
<p>然后你迷惘了，不对啊。</p>
<p>我前天看的攻略是要啪啪打脸，反派都没，这书不对劲，可是在不对劲，你看人家天榜高高挂着，还不对劲么？</p>
<p>这就是我说的，网文的技巧和攻略他不是公式定律，甚至有些大神说的理论和技巧都是可以推翻的。</p>
<p>我所讲的都是基于我的理解的，并不一定适合你，如果是想学我这种装逼打脸，可以看下，应该能有些感悟。</p>
<h2>关键问题是爽点情节尴尬、生硬和无脑</h2>
<p>几乎每个网文作者都知道，装逼打脸非常重要，是核心技能。那么，我们对装逼打脸的领悟是什么？有多少人真正理解这四个字的真正含义呢？</p>
<p>先简单说一下什么是装逼打脸吧。举个简单的例子：</p>
<blockquote>
<p>同学聚会，同学嘲讽，主角打脸，同学都大跌眼镜，原来昔日的小屌丝同学如今已经是神豪了，一个个态度大变。</p>
</blockquote>
<p>这就是一个一句话描写的装逼打脸。</p>
<p>都市装逼文，无非就是把这句话扩写而已，扩写成一部几十万、甚至上百万的长篇小说。</p>
<p>关键点来了，这个装逼打脸的核心是什么，或者说关键点是什么？</p>
<p><strong>新手写装逼打脸，遇到最大的问题不是他写不了一个完整的装逼打脸情节，而是写的情节显得尴尬、生硬和无脑。</strong></p>
<p>飞卢网站的都市书，收藏低的书评区也经常有读者喷，大概有这样的问题；</p>
<blockquote>
<p>1）又见无脑装逼。</p>
<p>2）装逼真尴尬，我们鸡皮疙瘩都起来了。</p>
<p>3）这真是生般硬凑出来的打脸啊，干脆把配角的脸伸到主角面前算了。</p>
</blockquote>
<p>所以，你要写好装逼打脸，就要从这三个问题入手了。</p>
<h2>解决问题的关键是重视铺垫和人设</h2>
<p>先说第1个问题：无脑。这个无脑是作者需要有脑，读者无脑看，但是他无脑看如果你有个情节或者设定N，太出戏，他就得出来喷你了。</p>
<p>这个无脑并不是我们今天讲的重点，以后我们会专门说一下飞卢的脑子是什么，以及如何几句话让书变得有脑。</p>
<p>至于第2个和第3个问题，是相辅相成的，一起讲。</p>
<p>你想写的不生硬，不尴尬，首先排除你的文笔和其他创作条件，就说情节。</p>
<p>是情节哪里出问题了，导致这段情节读者看起来生硬和尴尬呢？</p>
<p><strong>我们一般的理解是，缺乏圆润的部分，润滑剂。这个润滑剂就是铺垫和人设。</strong></p>
<p>有了铺垫和人设，甚至你的情节都变得有脑了。</p>
<p>人设和铺垫，也是很多飞卢大佬讲解都市最核心的东西。</p>
<p>但是并没有谁真的再深入一步的讲解人设和铺垫，大部分的装逼打脸帖子都是教你装逼的分类，什么震惊法，KTV场景装逼套路，如何花式装逼等等。</p>
<h2>如何进行铺垫和打造角色人设</h2>
<p>我们继续，下面举例子讲解一下人设和铺垫，以及如何通过这两点让装逼打脸不那么尴尬，生硬。</p>
<p>常见的小说中食堂吃饭场景，直接提取装逼打脸情节。例子是这样的：</p>
<blockquote>
<p>视角给到主角和张三身上，张三挤了主角一下反倒把自己绊了个趔趄。</p>
<p>张三喷：主角你走路不长眼么，把老子的饭都差点弄撒了。</p>
<p>主角站在道德制高点，说：张三，明明是你走路撞到我们，只是你虚胖没我们站得稳。</p>
<p>张三恼怒了，上来干主角，主角反而一拳将他打倒在地上。</p>
</blockquote>
<p>这就是一次打脸，大家看着尴尬不尴尬，圆润不圆润？</p>
<p>相信读者一看就点关闭页面退出了，原因很简单：一，无逼格；二，看得没头没脑；三、反派张三是个智障么，明明是被人一巴掌干倒的战五渣实力，为什么还这么狂，他是怎么活到现在的？</p>
<p>你要想把这段在生活中无时无刻可能都重现的情节，写到圆润自然，装逼不尬，有脑，必须要加入刚才我们提到的人设和铺垫。</p>
<p><strong>人设和铺垫是相辅相成的，都是为了主角装逼打脸做贡献、添砖加瓦的。</strong></p>
<p>这两样东西同时又可以引出潜在的期待感。<strong>期待感这东西怎么来的，就是人设和铺垫衬托出来的。</strong></p>
<p>我们继续用刚才那个例子讲解，修改过前置增加的内容是这样的：</p>
<blockquote>
<p>主角开局获得了拳王系统，新手大礼包将主角身体和拳击术提高到职业一流水平。</p>
<p>张三人高马大是学校出名的混混，恶事做绝，在食堂打饭从来都是不排队，看谁不顺眼就拳打脚踢。</p>
<p>......</p>
</blockquote>
<p>这两句话就是简单的人设和铺垫。</p>
<p>主角有了一流职业拳手的实力，一拳几百斤的实力那种，打普通人还不是一拳秒杀。</p>
<p>然后反派又是个很可恶很嚣张的人渣。</p>
<p>反派与主角开始碰撞，两个角色开始交织起来。期待感也起来了。有了冲突矛盾，然后主角讲完道理，对方恼羞成怒先动手，结果主角一拳秒了对方。这样，情节看起来就顺畅许多，打脸也自然。</p>
<p>同样举一反三，再举个例子，你写美女，写多么美，多少人追，读者看了就会有期待感，有主角一定要收了这个美女的期待感。后面如果你不让主角收，反而被反派收了，读者能喷死你。</p>
<p>这是最基本的人设和铺垫，应用到具体的小说里，这个铺垫肯定要更完善的，字数不可能这么少，甚至可以铺垫好几章。</p>
<p>举个例子，比如我们再随便延伸一下，张三被秒，知道主角武力无双，于是动用权利，他叔叔是教导主任。这时候，你如何再装逼打脸呢？还是要铺垫，铺垫更多的内容。</p>
<p><strong>一本书，铺垫故事环节比打脸环节还重要。</strong></p>
<p>打脸情节的形式一般是这样的：</p>
<ul>
<li>打脸环节你可以选择写的平淡，对方尴尬抱拳，说我们输了就行。</li>
<li>也可以选择打的对方脸啪啪响，对方磕头认错，或者以前无线文那套“打了小的来老的，不死不休的套路”都行。</li>
<li>也可以无形装逼，主角不说我厉害，但是你知道我很厉害，各种恭维巴结跪舔。</li>
</ul>
<p>这里补充一下，如果你的人设和铺垫都没弄好，一个富二代对你跪舔，你觉得尴尬突兀不？脑子呢？如果人设是主角上来签到领了某房地产公司 80% 的股权，而这个富二代的老爹自己开了个小公司，靠那个房地产公司吃饭，富二代知道了主角的这层身份后，再跪舔是不是合理多了？甚至得把老爹拉过来一起跪舔。</p>
<p>根据人设和铺垫开发各种爽点，拉各种期待感。当然，你要拉对读者想看的期待感，拉偏了虽然是爽文，但是会掉订阅。飞卢一个毒点少说掉几百订，多了甚至会雪崩。比如武侠小说，看的就是靠武力碾压，结果主角跟人比谁文采好......这就是拉期待感拉错了，导致爽点也偏了。</p>
<h2>飞卢的铺垫：前置小无敌</h2>
<p>飞卢的铺垫，与外站还有些不同。</p>
<p><strong>都知道飞卢不能虐和压主角。</strong></p>
<p>但是为什么你看，很多天榜书不照样主角被嘲讽，被打压么。</p>
<p>你写个反派骂主角，读者都觉得虐主。</p>
<p>这是因为，人家的铺垫，有个前置的无敌条件。</p>
<p>比如洪荒，大部分都会有系统，或者各种牛逼的跟脚，身份。都市神豪，都上来签到就几百亿了。</p>
<p>故事还没发生，主角已经小无敌了，然后接着铺垫打脸环节，读者自然一副轻松看主角装逼了。</p>
<p>你要是没这个前置的无敌条件，那不就跟看传统武侠一样，总是为主角担惊受怕，主角会不会死了啊？</p>
<p>飞卢的玄幻书，经常有这种书评，蚂蚁大点本事就敢捅马蜂窝，真N……，还不赶紧去修炼？</p>
<p>如果主角都无敌了，读者会说这话么？</p>
<p>当然你解释，我不是出场无敌啊，所以我说的很保守严谨，小无敌，局部无敌，不是全图无敌。</p>
<p>简单的说，就是你要<strong>在装逼最关键的场景那一幕开始前，把道具，人物，实力这些打脸用的东西都准备好，缺啥你就铺垫写啥，准备好了就装逼打脸。</strong></p>
<p>（这个小无敌，具体的书可以具体设置，比如神豪就是金钱无敌，同时你的故事也大多要以主角强的方面来做打脸装逼的布置。不然你一个神豪，别人用音乐装逼，你钱再多，不会弹琴说个毛，所以很多神豪又都在补充给主角各种技能，无所不能。无论是比啥，对手都是渣渣。这就是很明显的布置前置的小无敌。你只有知道主角在这方面无敌了，敌人自认为在这方面也挺无敌的至少比你强，这才能有基本的期待感。）</p>
<p>前置条件设定好，你可以小压一下，做好铺垫。</p>
<h2>如果做好爽点的准备：铺垫与人设</h2>
<p>那么，这个铺垫要写哪些呢？</p>
<p>这个<strong>铺垫有个核心就是要跟你接下来的装逼相辅相成。</strong></p>
<p>比如就以我刚才说的那本大开大合的神豪装逼，他在百达翡丽专柜买表前的铺垫是什么？</p>
<p>首先他前置的一个无敌条件就是已经有百亿的资产，而且系统要他短时间内花掉一百亿，同时会有更大的奖励。</p>
<p>然后他又做了一些人设，一个狗眼看热低，嫌贫爱富的势利眼亲戚。</p>
<p>看不起人的销售员，拜金女班花老同学，</p>
<p>这三个人设的反派与主角交织，那个场面大家能现象吧。</p>
<p>打脸，其实打脸的过程很简单，都傻眼了。</p>
<p>主角直接打包百达翡丽整个店的手表，好家伙，一下花出去十几亿。</p>
<p>震惊了一切。</p>
<p>如果没有这个前置的小无敌。</p>
<p>那读者看起来肯定不是轻松的，因为根据目前的已知条件，主角就是个小屌丝。</p>
<p>缺乏实力又盲目装逼，关键时候虽然有系统救场，但是这时候已经晚了。</p>
<p>传统文虽然主角大多数也不死，但是为啥你看着总是担惊受怕？</p>
<p>就是缺乏这个前置的小无敌。</p>
<p>同样缺了这个前置的小无敌，期待感也不强了。</p>
<p>这时候你写亲戚同事怎么嘲讽你，老哥，这就是真虐了。</p>
<p>很多人不知道爽是什么。</p>
<p>通过你的人设和铺垫拉出来期待感，然后你把这个期待感完整写出来就是一个爽点。</p>
<p>所以<strong>爽点=（人设+铺垫）+人物的碰撞交织</strong>。</p>
<p>这是我自己总结的一个我写爽点上的一个公式。</p>
<p>所以很多具体问神豪文核心爽点，洪荒文核心爽点是什么的，我一般不回答。</p>
<p>如果真要说出爽点是什么，爽点情节，我能从今天说到世界末日。</p>
<h2>飞卢作品的选题</h2>
<p>起点的很多书，飞卢的天榜书，越来越多的大神都是在铺垫故事环节下了很大功夫的。</p>
<p>我自己感悟是，<strong>一本书能不能看进去，不是看你金手指有多花里花哨新颖，而是铺垫情节能不能让人进入到这个故事里，这个人设和铺垫，能不能引出一个很强的期待感。</strong></p>
<p>飞卢都市为什么全是微博热点当书名？</p>
<p>最通俗的一个原因是，这些东西自带流量和人气。</p>
<p>我用专业的视角解释，就是因为这本身就是一个人设和铺垫做好了，大家都知道的情节。</p>
<p>你是在把这个梗当同人写了。</p>
<p>比如扶弟魔，大家都知道人设和大概铺垫故事，所以你不需要多少脑的去想人设和铺垫，你直接可以打脸这扶弟魔一家了。直接开局就是王炸。</p>
<p>但是抛去开头，越往后写你又陷入迷惘了。</p>
<p>我见过跟风这些热门的，最夸张的有5万V不到50首订的，而这类书通常万V百收是常规操作。</p>
<p>开头引用热点新闻已经设置好的人设和铺垫，你金手指一开，啪啪打脸，将这个不让人爽的热点新闻改成了喜闻乐见的反派吃大亏的结局。</p>
<p>可是之后呢？</p>
<p>你的书总会出现新的人物，剧情，你还是要装逼打脸，你如果不做好人设和铺垫，那同样你按照开局的模板写，就会出现截然相反的两种局面，读者要么说老套重复，要么就是装逼尴尬，无脑，生硬了。</p>
<p>（所以我说写不好装逼打脸，并不是你装逼打脸的高潮场面不会写，而是铺垫，铺垫好了，站在那里一言不发都可以装逼打脸。）</p>
<p>如何写好铺垫，这就是真的基本功和你动脑的程度了。</p>
<p>具体如何写好铺垫，这个其实也可以单独讲解。</p>
<p>铺垫情节很多人误认为是过度情节，能短这短，这是误区。</p>
<p>相反，铺垫写得好，还需要过度么，我这边打脸完毕，马上赶下一场，下一场都提前布置一半了，主角直接进场可以开始。</p>
<p>PS：我见过最牛逼的一个读者对人设和铺垫写好的一个评论是。</p>
<p>作者问下这是什么时候的新闻，想去看看原文。</p>
<p>是的，该写手这段开头情节的人设和铺垫，已经让读者也以为是类似微博那些热点新闻了。</p>
<p>都市装逼打脸的铺垫，就是尽量把他做到这个地步。</p>
<h2>都市修仙KTV场景装逼实例讲解</h2>
<p>关于都市修仙KTV的装逼技巧，其实有很多版本，今天我只说一下我的视角，也就是可以和我今天讲解的东西所串联起来的东西。</p>
<p>我问你，剑神的KTV装逼，是他装逼虐周老板手下那个阿彪的几下打斗你不会写，还是让周老板服了的场面你不会写么？写不出来么。</p>
<p>KTV陈逼王装逼打脸的高潮部分，其实就是千把字左右，分别是用了几招让周天豪手下头号打手阿彪倒下，然后又用魏老的贵人这个身份让周天豪彻底折服。</p>
<p>高潮装逼打脸部分就千把字，但是他用了几万字铺垫。</p>
<p>如果没这个铺垫，直接开局参加同学聚会，哦，同学被人威胁，一开始我记得是个有点小钱的男同学跟个晋西煤老板刚，同学们都表示会帮忙。</p>
<p>但是陈逼王没出手，因为这个同学本身就跟他不对付，算个屁啊，他有理由帮么，肯定不帮啊。</p>
<p>这就是脑子，有没有脑，不仅是配角，也是主角。主角如果帮了，那就是无脑了。</p>
<p>再接着看，剑神的一切铺垫都是为了主角装逼，所以，肯定剧情接下来发展。当周天豪让姜初然这个主角还是比较在意的角色陪酒后，主角开始装逼打脸了。</p>
<p>铺垫也可以理解为拉仇恨，其目的就是更好跟自然的通过一个故事让主角装逼。（拉仇恨不是一句你瞅什么，再看弄死你，而是人设和情节去铺垫出来的。比如张三性格老实，养了一些猪，赶上猪肉大涨价发财了，邻居李四一个小肚鸡肠见不得人好的主，看张三发财了，去借钱，借钱了又不换还去借，张三不借了，于是李四毒死了张三的猪。 我说这个故事，就是铺垫故事包含人设，网络小说，就是通过一些这种铺垫故事引出期待感，拉族仇恨，然后装逼打脸。）</p>
<p>继续讲。</p>
<p><strong>所以网文的情节是什么，就是装逼打脸前的故事，就是铺垫的故事。</strong></p>
<p>铺垫好出来那个味道，氛围，你不会写装逼打脸，你就简单点写个一二百字都可以。</p>
<p>这样读者还会夸你，真好，不装逼打脸。</p>
<p>其实，他不知道，他看的都是装逼打脸。只是他自己以为自己看的是故事。</p>
<p>而作者写的故事的目的就是为了装逼打脸。</p>
<p>所以，都是修仙，我们作者都说他是一本无脑装逼小说，可是看这本书的读者却认为这书逻辑严谨，经得起推敲，不是无脑装逼。</p>
<p>装逼的桥段其实就是铺垫故事。</p>
<p>比如今天说一个张飞装逼的故事，我直接说张飞一招秒了吕布，你爽了么？</p>
<p>没爽。张飞吕布有人设，可是没铺垫故事，爽不起来。</p>
<p>陈逼王在这次KTV装逼，铺垫和人设都做得很好，同时也有我刚才说的那个前置的小无敌。</p>
<p>首先，他在KTV出场时，武力上已经碾压了大部分人，至少KTV这个装逼场子，主角不存在被打被虐的情况。</p>
<p>同时，他为了让剧情更加饱满，打脸更精准，还提前布置了魏老这个人物。</p>
<p>这个人物主要在KTV剧情的目的就是让主角在权势上也暂时的一个小无敌。</p>
<p><strong>武力，权势都在要装逼的场合是小无敌了，铺垫完了才去KTV装逼。</strong></p>
<p>铺垫可以简单一句话，也可以复杂到几章几十章，具体的看各自的能力了，也是一个基本功。</p>
<p>根据故事的新颖，读者喜好程度，自行决定铺垫情节的长短。</p>
<p>读者觉得啰嗦，你就加快铺垫情节。</p>
<h2>飞卢更新的章节节奏</h2>
<p>飞卢一些顶尖天榜写手有个章节节奏大家可以牢记一下。</p>
<p>公众期5章一个循环。</p>
<ul>
<li>
<p>1章人设，2章铺垫，1章打脸，1章事后反响或者收获等等善后。</p>
</li>
<li>
<p>VIP可以拉长，1~2章人设5章铺垫，1~2章打脸，1章事后总结。</p>
</li>
</ul>
<p>从这个节奏模板，你看出真正重要的是什么了么？</p>
<p>是铺垫，铺垫才是整个装逼打脸完整情节的最核心和最值得去详细描写的部分。</p>
<p>XXOO，高潮就是最后那几秒钟同装逼打脸最后的结局部分，可是如果掐掉前面的一切过程，还爽么？</p>
<p>同样没铺垫的，举个例子，玩游戏开挂。</p>
<p>吃鸡开暴力挂，一秒钟吃鸡，爽了么？</p>
<p>不爽吧。</p>
<p>如果开透视和自瞄，去各种完虐对手，最后在对手绝望崇拜下吃鸡，爽么？</p>
<h2>《开局抽奖获得科尼塞克》拆解</h2>
<p>好了，下面开始实例讲解环节。</p>
<p>这一次我是随即在飞卢书库挑选了一本都市神豪文。</p>
<p>开局抽奖获得科尼塞克</p>
<p>作者：神豪饭桶</p>
<p>大家可以先去飞卢搜索看下这书的前几章，配合讲解会领悟更深。</p>
<p>这本书是我随即从网文小扑街那挑的一本。</p>
<p>首V大概1000的样子。</p>
<p>三天这个写手就果断TJ了，因为评价和鲜花几乎为0.</p>
<p>这个写手应该不是新人，光这个账号下就有不少书了，对飞卢风啊也绝对有了解，算是水平差的老写手。</p>
<p>从书名简介来看，没啥问题。</p>
<p>神豪文标准书名和简介。</p>
<p>那么重点就放在第一章了。</p>
<p>他第一章的内容我总结下。</p>
<p>开头前几百字引出主角，介绍下主角当前的现状（老菜鸟写手知道困境开局，重点写了主角就是个工厂狗）然后开始有意识的介绍目前生活不如意，好一会跟变成神豪后形成落差，鲜明对比。</p>
<p>同时埋下同学聚会的伏笔，以及有了系统直接不刁顶头上司，得罪了上司，老菜鸟还会铺垫和人设呢。用几百字写了微信群里，某某富二代在群里装逼买了宝马，班花表示很感兴趣，主动求约。</p>
<p>然后结尾部分系统来了。</p>
<p>直接神豪系统加载，先奖励个几千万的跑车。</p>
<p>这就是第一章的内容。</p>
<p>按说，这个开篇其实是没啥太大的问题的，该有的都有，还拉了个期待感。</p>
<p>那就是去同学聚会装逼。</p>
<p>这个开篇如果按照标注的神豪文打分的话，大概是60分。</p>
<p>该有的都有，算合格。</p>
<p>正常要一个首订几百~1000，其实这个开头是没啥问题的。如果想高订，开头必须有新意，不落俗套。</p>
<p>这种开篇，中规中矩。</p>
<p>第二章是重点。</p>
<p>他第一章把人设和小铺垫都做了，当然，也只是有这些东西，做得并不是很好。</p>
<p>然后期待感也勉强拉出来了，也设置了前置的小无敌（就是神豪系统，当场奖励一场豪车，点题了。）</p>
<p>所以我说他的第一章是没啥毛病的，不优秀，及格的分数。</p>
<p>那么第二章呢？</p>
<p>如果说第一章我给60分，第二章，我只能给40分。</p>
<p>为什么这么说？</p>
<p>第二章的主要内容。</p>
<p>主角去马路上提系统奖励的跑车，发现有几个女的在那拍照。</p>
<p>然后女的居然嘲讽主角，说看个毛，这车你能买得起么。还秀优越表示身上衣服几千一件（这就是拉仇恨，所以我说这个作者是老菜鸟，该知道的东西他都知道，也都写了，就是写不到点，写不好。</p>
<p>主角表示，这车是我的。</p>
<p>女的大跌眼镜，后悔不跌。</p>
<p>洋洋洒洒1000字。</p>
<p>这个装逼打脸我的点评就是很尴尬，出戏，无脑了。</p>
<p>这种装逼是神豪文大忌，神豪神豪，你和阿猫阿狗装逼么？你的逼格呢？</p>
<p>我写杭州马和乞丐装逼，你看不看？</p>
<p>杭州马说，这杭州城一半都是我的，乞丐说跟我装犊子，我天天到处乞讨，这杭州谁是老大你以为我不清楚？</p>
<p>?你说尴尬不尴尬？</p>
<p>?你真要写，几句话就行了。</p>
<p>飞卢前几章冲首V判断切不切的重要时刻，那是每一个小情节都要想清楚的。</p>
<p>你用快一章的篇幅写跟路人甲装逼，装的再好也是减分。</p>
<p>更何况，这个比装了也没意义啊。</p>
<p>路人甲羡慕下，震惊下，读者爽了么？</p>
<p>读者爽个毛，这就是作者自嗨。</p>
<p>如果换做我是急诊科医生，他非要写这段情节，我给的补救方法是。尽量带脑的把这个比装完吧。</p>
<p>修改后:主角去提车，看见有美女拍照，主角高大帅，美女一边拍照一边说，帅哥，你也来拍这神车的么？你们男生都喜欢跑车，这车是什么车啊？主角表示：柯尼塞格，几千万的。这个美女惊叹：哇，我以为就几百万呢，几千万，不敢想象。然后主角掏出车钥匙上车。女主角惊呆了，大喊，喂帅哥，带我一程啊，微信多少啊，我功夫很好啊，看着车一溜烟没眼了，美女感叹，错过了一个真正的高帅富。</p>
<p>你看这样改，是不是顺畅自然了许多，装逼了，不尴尬，如果上来那种路人美女嘲讽，主角啪啪打脸，很生硬，而且前期主角一般代入感不强的请款下，这种生硬情节是非常扣分的。）</p>
<p>这一章的后半段，这个老菜鸟可能是学的别人的节奏还是啥，亦或者是神豪文的基本节奏，系统再次签到奖励了一个大公司的一个大股东身份。</p>
<p>许多学写神豪的新人，看别人签到领这个领那个，这个其实没啥爽点，还不如花钱有点爽点。</p>
<p>之所以如此，其实还是一个我之前说的东西。</p>
<p>前置小无敌。</p>
<p>系统送这个公司大股东给主角，不是给主角增加财富或者随便送的，否则直接送一万亿花去吧。</p>
<p>送这个还是为了装逼，给主角提前布置一个小无敌身份。（如同都市修仙，魏老的出现差不多的道理。）</p>
<p>而你进一步铺垫，比如该公司一把手是个美女冰山总裁，某富二代跟你装逼，他爹是该公司的小股东，某美女的爸爸是该公司的中层。</p>
<p>第三章。</p>
<p>第二章这个老菜鸟写的这些东西，可能已经劝退了一些读者，另外还看得读者，对主角估计好感度也要减分。</p>
<p>第三章我先说一下我的打分。</p>
<p>40分左右。</p>
<p>他这个第三章的大概内容就是引出了两个相对大一点的人物，一个是主角之前上班的公司的老板和这个公司的总部来的一个大人物。</p>
<p>因为之前系统送了该总公司集团的53%股份，所以总公司派人来跟主角碰面。</p>
<p>作者安排了上班的公司的老板跟这个总公司的人碰面，这是老菜鸟的铺垫和思路。</p>
<p>之后的内容就是这个老菜鸟又开始给同学聚会拉仇恨了，比如富二代同学群里问，你现在搁哪混啊，年薪多少啊， 混的行不行啊。</p>
<p>这第三章从技巧上来讲，应该比第二章要高，但是我依然还是给40分。</p>
<p>因为，铺垫无新意，按部就班，拉仇恨也是司空见惯的书。</p>
<p>飞卢几千本神豪，这种情节实在是烂了。</p>
<p>我之所以给40分，是因为，这一篇从读者感官阅读体验角度来说。</p>
<p>视角切换有些频繁。</p>
<p>一共1500字，分好几个场景，分别是俩大人物聊天喝茶一个场景，主角微信群被嘲讽拉仇恨一个场景，然后大人物打电话邀请主角去装逼现场一个场景。</p>
<p>视角转换太快，缺乏足够的画面感，代入感也就不强。</p>
<p>虽然这个铺垫的目的也很明显。就是要装逼了。</p>
<p>可是他铺垫缺了关键的人设。</p>
<p>接下来的第五章我不想看，因为他的人设缺乏了。</p>
<p>之前第一章拉的矛盾是啥。和顶头上司的矛盾，那个上司也就是公司一个中层。</p>
<p>主角现在和高层见面，高层恭维下主角年少有为，当乃当世神豪。</p>
<p>高层当着中层面宣布主角是该公司最大股东，然后主角把那个顶头上司开除么、</p>
<p>这装逼场景我个人认为和你的人设有些不对称，不应景。</p>
<p>第五章我已经没期待感了，所以就不看了，我已经能想象那尴尬的装逼场景了。</p>
<p>吓尿的顶头上司，震惊的两位大佬。</p>
<p>从广义上来说，没啥毛病，但是仔细看，通过第二章拉低逼格，第三四错误的铺垫，直接导致第五章的装逼高潮点缺乏足够的期待该。</p>
<p>所以飞卢绝大部分读者看他这本书，应该就是看到第五章左右吧，看不到他这本书铺垫还算勉强合格的同学聚会装逼了。当然，0鲜花评价的数据也无法支持这个老菜鸟写到同学聚会。</p>
<p>同样的我们对比一本天榜书，也有类似的情节。</p>
<p>神豪：相亲逃单。主角也是获得了该公司的大股份。</p>
<p>这个写手要写打脸这个顶头上司，他的铺垫就很准确到位。</p>
<p>大概情节是，这个公司上司认为主角挺朴实能干，给主角介绍对象。</p>
<p>主角一开始也是感恩戴德，然后主角逃单了，主角跟这个公司上司解释，上司倒是通情达理。</p>
<p>但是主角那个相亲对象要报复主角啊，女的表示陪这个顶头上司，然后顶头上司就决定开除主角。</p>
<p>因为前置的小无敌已经布置，主角是该公司的大佬了，这顶头上司还不知道，于是跟主角装逼，说主角一个底层业务员，他想开除不就开除，还让主角把相亲吃饭的钱还了。</p>
<p>主角不干了，亮身份打脸。</p>
<p>亮身份打脸也就一章半章内容，可是他的人设和铺垫却用了好几章。</p>
<p>这就是我今天讲的东西的核心。</p>
<p>花了一中午的时间整理，算是今年飞卢的最后一份攻略了。</p>
<h2>回顾</h2>
<p>铺垫和人设对于爽点情节是至关重要的。所谓铺垫，就是高潮情节之前的情节，人设也是在故事情节中体现的，归根结底，网文创作就像和面，你需要投入时间和精心，投在设定、人物、情节上面，大胆想象，然后小心纺织最终的情节。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[印泥的种类、起源、使用与保养]]></title>
            <link>https://yishulun.com/./src/posts/2023/27.html</link>
            <guid>https://yishulun.com/./src/posts/2023/27.html</guid>
            <pubDate>Wed, 08 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="./assets/image-20231110095118743.png" alt="印泥"></p>
<h1>印泥的种类、起源、使用与保养</h1>
<p>你好，今天聊一下鱼汤，不是，是印泥。</p>
<h2>种类</h2>
<p>种类繁多，以下是双维印泥厂子生产的品类。我用过的有堆朱、朱砂、朱磦（piao）、黄磦印泥，它们颜色的亮度也是按我给出的顺序依次拔高的，其中黄磦印泥最喜欢，目前主要使用的也是这一款。</p>
<p><img src="assets/1699399965154.png" alt="种类"></p>
<h2>印泥的起源</h2>
<p>据考古和史书记载，印泥的发展已有两千多年的历史。</p>
<p>早在春秋期就已经出现了印泥。不过那时候的印泥和现在不同，它是用由多种物质配制的黏土做的，平时搓成泥丸子，临用时用水湿透。因为当时的公文和书信是用漆书写在竹简木牍上的，为了防上泄密或传递过程中的私拆，在写好了的简牍外面加上一块挖有方槽的木块，再用绳子把它们捆在一起，然后把绳结放入方槽内，加上一丸湿泥封上，再用铜印章铃上印记，作为封检的标记发出去。这种泥丸称为“封泥”可以视为印泥的始祖，这种封泥工艺一直沿用到了魏晋南北朝。</p>
<p>随着造纸术的诞生和发展，纸张逐渐取代简牍成为人们日常生活中的必需品，公私书信一律改用纸张，用泥封信的陈旧做法也不再适用。于是人们又改用清水，调制朱砂于印面，再印在纸上，称之为“濡朱”，这就是现代印泥的雏形。所谓“濡朱”，就是把朱砂与胶水或蜂蜜之类的黏液体调和后，涂在印文上，然后盖在纺织品或纸张上。</p>
<p>但水或蜂蜜调和的印泥容易脱落不能长久保存。为解决朱砂易落的问题，长期以来人们尝试不同的方法对此进行改进，终于发现用油调朱砂不容易脱落，这成为印泥发展的又一个重要转折，印泥由此也开始进入艺术领域。这个时间点大概在元末明初王冕生活的年代，以花乳石为章料，以刻刀为工具，以篆字入印的篆刻开始兴起，印泥同时也得到了广泛的使用。</p>
<p>现代印泥除了办公盖戳办的印泥，书画用的印泥，沿用的仍然是老制作工艺。材料主要有以下三种。</p>
<h3>朱砂</h3>
<p>朱砂是印泥中的显色剂，先由天然原矿石碎成辰砂，最后磨成朱砂粉。</p>
<p><img src="assets/image-20231108073027273.png" alt="朱砂"></p>
<h3>蓖麻油</h3>
<p>蓖麻油是印泥中的分散剂，由蓖麻叶、蓖麻籽炸出蓖麻油。</p>
<p><img src="assets/image-20231108073050852.png" alt="蓖麻油"></p>
<h3>艾绒</h3>
<p>艾绒是印泥中的吸附剂，从艾株上采下干艾叶，制成艾绒，最后干脱，制成印泥用的干艾绒。</p>
<p><img src="assets/image-20231108073113895.png" alt="艾绒"></p>
<h2>使用说明</h2>
<p>下面说一下使用，先调泥，接着蘸泥，最后盖印。如果经常使用，第一步调泥是可以省略的。</p>
<p>调泥：</p>
<p>1、入缸：先将印泥盛装于瓷或玉的印泥盒中。金属盒不可用，因朱砂会产生缓慢的化学反应，导致颜色改变。</p>
<p>2、调堆：印泥使用前，用印筋将置于印泥盒内的印泥上下翻动。</p>
<p>3、同时顺势沿同一个方向环转搓压，转动印缸，另换挑拨位置状，反复多次，直至印泥堆成一个顶部球。</p>
<p>蘸泥：</p>
<p>1、一手持稳印缸，一手持章，使印面触打堆好的印泥顶上的圆光处。</p>
<p>2、轻触轻打，边打边转动印章，使印章四边、中间均匀上色，</p>
<p>铃印：</p>
<p>1，铃印时，用力要均匀、平稳，宜轻宜慢，防止晃动。</p>
<p>2、起印时，时间不宜过长，见色透底即起，呈现完美的印蜕。</p>
<h2>保养</h2>
<p>印泥的保养</p>
<p>许多人认为书画篆刻印泥同普通办公印泥一样无需保养，其实是大错特错了。越是好的印泥越是需要人们对它呵护。以下我们介绍一些最主要的保养方法，以供大家参考。</p>
<p>1、慎收贮一一容器采用旧瓷器最好，水晶玉器亦可，不宜开铜物于金属，取总用漆器木器陶器，以及犀象等动物骨骼容器。使用金属器，容易同印泥产生化学反应，使印泥变黑变硬。而漆器木器陶器等容器，由于其结构疏松，孔隙较大，印泥中的油分容易散失，会影响其长期正常使用。如果一定要使用上述忌用器具，可在容器内壁加涂一层薄膜，隔离其间，就无大碍。</p>
<p>2、宜翻晒一一春冬日暖，宜晒一时；夏秋日烈，宜晒一刻。久而不动，印色自坏。</p>
<p>3、远污垢一一盖章用毕必净章面，盖好印缸，毋使灰落，有损印泥质量。</p>
<p>4、慎霜湿一一芒种后霜概宜尚阁，冀北风尚，防其灰入，南山烟雨，斥卤卑湿，高藏慎密，又宜常晒。</p>
<p>5、勤翻调一一印泥存放时间长久之后，砂体沉下，油性浮上，会产生分层现象。所以，须经常翻调至均，和其体性。一般十日半月就需翻调一次。</p>
<p>书画印泥是用油调制的，不怕晒。它也不怕翻动，时间久了油少了，还可以往里面添点蓖麻油。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[vscode 右下角的通知弹窗如何关闭？以及我眼中的产品经理]]></title>
            <link>https://yishulun.com/./src/posts/2023/28.html</link>
            <guid>https://yishulun.com/./src/posts/2023/28.html</guid>
            <pubDate>Wed, 08 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>vscode 右下角的通知弹窗如何关闭？以及我眼中的产品经理</h1>
<p>你好，今天聊一下弹窗与产品经理。</p>
<p>早年企鹅喜欢在 PC 桌面右下角弹窗，弹消息、弹新闻，什么都弹，后来其它厂子也学，一打开电脑，不弹它几分钟，启动步骤完成不了。更有甚者，有的流氓软件还居中弹出。</p>
<p>15 年以上的老网民对这类弹窗都是深恶痛绝，印象深刻！现在国内这类弹窗基本消声匿迹了，国外的 vscode 却学会这一招了，也不知道是老外学坏了，还是国内工程师把优秀文化带到了国外。</p>
<p>弹窗必须关掉！关闭方法只需要以下三步：</p>
<p>1，首先找到 vscode 的安装路径，无论是 windows 还是 mac，在软件上点右键，就可以找到安装位置。</p>
<p>2，然后依次往里找，找到 resources\app\out\vs\workbenc 这个目录。</p>
<p>3，用 vscode 打开目录下的 workbench.desktop.main.css 文件，搜索 monaco-workbench&gt;.notifications-toasts.visible，将 display:flex 设置改成 display:none。保存，重启 vscode 即可。</p>
<p>我们用 vscode 编辑，关掉 vscode 自身的弹窗。至于原理，很简单，因为 vscode 是基于 electron 开发的，整个工作环境可以看作是一个“大网页”，我们通过改变页面上的样式，由显示改为不显示，控制了弹窗的显示。这里可能有一个问题，就是 vscode 自动更新后，有可能会覆盖我们的修改，弹窗又显示了。如果有这种情况，你再修改一下，要么就关掉 vscode 自动更新。</p>
<p>突然想到一个问题，什么是产品，为什么要产品经理？</p>
<p>产品要测试，产品要和用户一起成长。为什么呢？因为用户傻、用户蠢、用户没有见识！你给他高级的，他不认；你给他低级的，他嫌弃；只有给他正好的，他能理解和接受的，他才高兴。产品就是在找一个让大多数目标用户都接受的最大公约数，并和用户一起成长。产品经理就是干这个的。</p>
<p>神奇吧！</p>
<p>所以，我回头想，早年真的是企鹅喜欢在 PC 桌面右下角弹窗吗？</p>
<p>不。是那时候的网民喜欢这样的弹窗，他们刚开始学习使用电脑，不知道怎么摆弄它，一个大窗口盖住了屏幕，就不知道如何切换到另一个窗口了。产品经理说：有消息来了？弹窗吧！千万别把用户当前的窗口挡住，不然用户又要抓狂了。</p>
<p>网民就像时时越要照顾的世婴，产品经理就像网民大保姆。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[昨天 OpenAI 召开首届开发者大会，GPT Store 即将上线，智能化时代真的来临了]]></title>
            <link>https://yishulun.com/./src/posts/2023/26.html</link>
            <guid>https://yishulun.com/./src/posts/2023/26.html</guid>
            <pubDate>Tue, 07 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<iframe width="1009" height="757" src="https://www.youtube.com/embed/6SQE_6ynj4s" title="[中英双字幕]AI春晚-OpenAI第一届开发者大会完整视频" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<h1>昨天 OpenAI 召开首届开发者大会，GPT Store 即将上线，智能化时代真的来临了</h1>
<p>​你好，今天聊一下 OpenAI 的首届开发者大会。这次发布会被网友戏称为 AI 春节，相同的感觉在 2007 年有过一次，那一年过世的乔帮主给我们开启了智能手机时代。</p>
<p>这一次是奥特曼，不是日本打怪兽的那个奥特曼，是现实里 OpenAI 公司的 CEO。昨天，11 月 6 日，OpenAI 开始第一届蓄谋已久的开发者大会，向人们展示了 OpenAI 三项重大产品更新。</p>
<p>我为什么说这是蓄谋已久的？看了内容就明白了，每一项更新都直击开发者的软肋，我身为一名老工程师，都想重操旧业为 OpenAI 开发智能应用了。</p>
<p>首先是数据介绍，奥特曼说，已经有200 万开发者正在使用 OpenAI 的 API，全世界 92%的财富 500 强公司正在使用 OpenAI 的产品搭建服务，ChatGPT 的周活用户数也达到 1 亿人。、</p>
<p>对于这三项数据我早有预料，但真正看到官方披露的时候，也是微微感到震惊。这意味着，整个互联网的注意力，无论是 B 端，还是 C 端，都是向 AI 倾斜。这是给全世界开发者的风口，并不仅仅是已有的 200 万开发者。</p>
<h2>一，GPT-4 Turbo</h2>
<p>第一个登场的功能是 GPT-4 Turbo。</p>
<p><img src="assets/image-20231107195208765.png" alt="GPT-4 Turbo"></p>
<p>它相比旧的 GPT-4 和 GPT-3.5，主要有 6 项改进：</p>
<p>1，允许更长的上下文对话长度，这次升级后，基本上日常对话不需要考虑 token 不够用的情况了。由于用户抱怨，GPT-4 升过两次级，第一次升到 8192 个 token，第二次升到 3.2 万个 token，这一次直接涨到了 12.8 万个 token。普通的 200 页 PDF，对于新模型 GPT-4 Turbo 都可以一口吃下。</p>
<p>祝贺那些至今还没有用过 GPT-4 的人，现在他们没有必要使用 GPT-4 了，直接使用更强的 GPT Turbo 就可以了。</p>
<p>2，GPT Turbo 给了开发者更多的控制权。对于大语言模型 AI 都喜欢“一本正经胡说八道”的毛病，开发者可以通过访问 seed 参数和 system_fingerprint 响应字段，来确保实现“模型对每次请求都给出确定性的输出”。</p>
<p>3，新模型将知识库更新到了 2023 年 4 月，并且以后还会定期更新。GPT 3.5 一直被竞争对象嘲笑诟病的 2021 年 9 月，已经成为历史。</p>
<p>4，全面进入多模态时代。什么是多模态？就是不只是文本，语音、图片和视频都支持。发布会当天，文生图模型 DALL·E 3、具有视觉输入能力的 GPT-4 Trubo，以及新的声音合成模型（TTS），还有新的语音识别模型 Whisper V3 全部都发布更新了。</p>
<p>5，GPT-4 像它的前任 GPT 3.5 一样，也支持微调了。不过对于一般开发者这一项功能就不要惦记了，它是为 92%的世界 500 强公司准备的，因为针对特定领域训练 GPT-4 模型，奥特曼表示，这个成本并不便宜。</p>
<p>6，最后一项，是开发者调用 API 的速率提升了一倍，简单说就是反应速度变快了。返回结果的速度更快了，本质上是大语言模型的响应速度更快了。不知道 OpenAI 是怎么做到的，但从 4 月份固定知识库，10 月份正式发布，相信他们团队也付出了许多辛苦。</p>
<p>7，价格更低了。</p>
<p><img src="assets/image-20231107200553625.png" alt="价格对比"></p>
<p>调用 API 的价格分为输入价格和输出价值，GPT Turbo 模型相比前任，输入 Token 的价格只有 1/3，输出 Token 的价格只有 1/2，</p>
<p>总的来说就是，功能变强了、变快了，价格还变便宜了。</p>
<p>这是有可能的，大的东西都容易产生规模效应，OpenAI 的 AI 产品彻底成了气候以后，很难再有人撼动它的地位。甚至不远的将来，一些除 Meta、Google 之外的中小公司不再开发自己的 AI 产品，直接套牌 OpenAI 的产品了，因为这样更便宜、成本更低。</p>
<h2>二、自定义 GPT</h2>
<p>这个东西和上面提到的模型微调还不是一个东西，奥特曼说，用户可以通过自定义指令、拓展（模型）的知识边界和下达行动命令，来构建属于自己的 GPT，称之为用户的自定义 GPT。</p>
<p><img src="assets/image-20231107201529009.png" alt="自定义 GPT"></p>
<p>它不需要编程，动动嘴说说话，动动手上传一些资料就可以了。</p>
<p>在现场演示中，奥特曼创作了一个创业咨询 GPT，还顺手生成了一个 Logo。随后奥特曼在属性页面中上传了一份他自己关于创业公司的演讲稿，向这个用例提供了额外的知识。至此，自定义用途的 GPT 就初步搭建完成了。神奇啊！</p>
<p>并且，官方宣称，稍后会有一个 GPT Store 上线，开发者将可以上架自己的智能应用并能在销售中拿到分成。现场的开发者们听到这个消息沸腾了，上一次他们听到类似的声音，还是在 2008 年，那一次乔帮主开启了 App Store。</p>
<h2>三、助理 API</h2>
<p>助理 API 是一个专门构建的人工智能。如今在 OpenAI 在线构建的产品和服务中，早已经不是单一的模型了，每个模型都有它自己独特的用途。</p>
<p>这个助理 API 提供了如代码解释器、检索以及函数调用等功能，用于处理此前开发者必须自己完成的许多繁重工作。对于该功能，OpenAI 的工作人员现场做了演示，他用语言告诉 AI：</p>
<p>“从开发者大会现场随机挑选 5 位观众，给他们的 OpenAI 账户里各充值 500 美金！”</p>
<p>结果，AI 完成了。</p>
<p><img src="assets/image-20231107202913243.png" alt="助理 API"></p>
<p>随后，这位工作人员为了安慰所有现场与会未中奖人员，再次向 AI 发出语言指令：</p>
<p>“给现场所有人的账户里打入 500 美元！”</p>
<p>AI 也完成了！</p>
<p>看到这个，探长震惊了！AI 了不起啊，它不仅能联网，还能调用程序，如果再给它一副可以行走的皮囊，相信 99% 的人都没有它能干！</p>
<p>对于现场参会人员，探长祝贺他们免费参加了一次 AI 春晚，门票价格是 450 美元，他们每人至少拿到了 500 美金，还赚了 50 块。希望国内举办大会的大厂大公司迅速学习与借鉴这种文化！</p>
<h2>回顾</h2>
<p>最后总结一下。</p>
<p>前两天，马斯克刚刚宣布 Grok 要上线，昨天奥特曼的首届开发者大会就召开了，大佬竟然也这么卷。过不了多久，一个 GPT Store 就会诞生，到时候又有很多开发者扑上去掘金。</p>
<p>探长常常感叹这个世界走得太快，而常常叹息自己行动缓慢，担心被时代的浪潮抛弃。</p>
<p>公众号兴起了，落下去了；短视频兴起了，还没有落下去，AI 兴起了。</p>
<p>​这是一个风口，相信有了开发者的加成，将涌现更多有价值、有趣的智能应用，传统行业的智能化数字化浪潮只会加快，不会回头或降速了。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[读《妖二代》之一，前三个小高潮情节]]></title>
            <link>https://yishulun.com/./src/posts/2023/35.html</link>
            <guid>https://yishulun.com/./src/posts/2023/35.html</guid>
            <pubDate>Tue, 07 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>读《妖二代》之一，前三个小高潮情节</h1>
<p>目录</p>
<p>[TOC]</p>
<p>《妖二代》是卖报小郎君网文创作能力修炼大成之作，值得创作者阅读。这里指的是创作者，并不是读者，如果你仅仅是读者，阅读他的最新佳作《大奉》或《灵境》即可。</p>
<p>下面的内容，及后面几篇的内容，是探长从创作者角度所做的阅读与分析记录。如果你对我的读书笔记感兴趣，建议先阅读<a href="https://www.xbiquge.bz/book/42491/">原作</a>，再来看书评。</p>
<h2>1）什么是好文笔？</h2>
<p>你读了第一章就会同意很多人已经同意的这个观点，卖报的文笔真不是吹的。<strong>所谓好文笔，就是可以从 360 度各个角度将一个事物进行描绘与呈现，而文字没有——或者几乎没有任何冗余。</strong></p>
<p>这里的 360 度指，变换视角，变现角色，变现人物，变换人称，变得一切可以变换的东西，同时在修辞逻辑上毫不违和。</p>
<p>好文笔是通过大量的写作实践修炼出来的，并且不是无脑写，要思考，重点是对自己创作的作品要有充足的想象和思考。只有对作品有 360 度完全清晰的认知构建，才可能从 360 度上无死角地描绘。</p>
<p><img src="./assets/F-NcYUgbEAApCe8.jpeg" alt="第 1 章"></p>
<h2>2）关于幽默与笔力</h2>
<p>作者的文笔中体现出来的幽默，读者应该也把它归到了文笔里面。</p>
<p>这样的幽默在妖二代里面时有体现，甚至比比皆是。大多数时候它们是这样的，先写一个东西，让你以为是 A，结果再反过来让你以为是 B，A 与 B 往往还是相反的，这个过程让捧腹大笔。</p>
<p>举两个具体的例子，例如主角李羡鱼和祖奶奶第一次来到宝泽集团餐厅，从先选择文职岗位到选择执法岗位，就是一个反差幽默。再如，进入宝泽后，大位大佬在群里的聊天，就显得很不着调，画风有时候是突然从正面转向反面的。</p>
<h2>3）第一个剧情：主角李羡鱼救徐薇</h2>
<p>这个剧情的剧情张力与情节环环相扣设计，及其它优点，是如何体现的？</p>
<p>首先是设定，古妖血裔与都市中的超能力。</p>
<p>然后是人物群像，有三个主要人物：贪色正义的主角李羡鱼，深藏不露的秦大爷，和好吃贪玩的祖奶奶。</p>
<p>接着是剧情张力，铺垫与逻辑的合理性。主角与祖奶奶在小吃店里吃饭，以及在小区中遇到秦大爷，以及主角在学校宿舍中看到已经去世的张明玉，都是为后来主角来到徐薇家里发生小高潮情节做的铺垫。当主角绝望，问题无解的时候，秦大爷出现了，到这里，基本上把高潮前的张力都拉满了，且逻辑也是合理的。</p>
<p><img src="./assets/F-PKD7tbIAAOgrq.jpeg" alt="秦大爷"></p>
<p>最后是环环相扣的情节设计。主角父亲留下的信件，坦言先祖们活的都不太久，这与接下来主角的肾亏有关。祖奶奶在小区里遇到平时不太正经的秦大爷，却聊的特别开心且愉快，祖奶奶对他的印象也很不错，这是一个伏笔。包括在小吃店，祖奶奶让主角开了灵曈术，看到了怨鬼，这也是为下面在徐薇家中大半古妖的情节做的一个铺垫。唯一感到没有提前铺垫的就是主角与徐巍之间多年的深厚同学情谊，这一点让现场假徐薇的反常热情勾引代替了。</p>
<p><img src="./assets/image-20231107092407841.png" alt="妖二代的修炼"></p>
<p>以上四点体现的都很不错。</p>
<h2>4）何为铺垫？</h2>
<p>在主角加入宝泽的这一章，体现了铺垫的作用。</p>
<p>在开始的时候，主角因为担心自己实力不足，执意要加入文职部门。但是，当听说执法部门有 10 万月薪的时候，主角马上改变了自己的决定。</p>
<p>这种由铺垫产生的反差，相比直接让执法长老说出执法部门员工有 10 万月薪，主角发出一声惊叹，这样的效果要好很多。</p>
<p>此外，还有逻辑作用。逻辑是一种修辞上的因果关系，只要说得过去，剧情就能往下发展，逻辑是为了情节服务的，至少在小说中是这样的。</p>
<p><img src="./assets/F-PK29Va4AABDtg.jpeg" alt="第 18 章"></p>
<h2>5）第二个情节：张晨与萨摩爱狗的生死情感</h2>
<p>这个情节也是有铺垫的，小狗萨摩在主角和祖奶奶第一次到 S 县小吃店吃饭的时候，就已经出场了，并且展现了对旧主人张晨的思念。</p>
<p>在桥下，小狗又展现了对张晨的依赖。</p>
<p>在张晨这边，他在死后，报复将小狗的狗腿打断的 S 县店主，这是张晨对小狗情感的铺垫。</p>
<p>这个情节大概用了 13 章，也第一个情节类似，第一个情节大概也是用了 13 章。第二个情节的铺垫是从第一个情节就开始了，这也体现了情节设计的环环相扣。</p>
<p><img src="./assets/F-QUtQXXQAAn8yi.jpeg" alt="第 27 章"></p>
<h2>6）剧情张力来源于哪里？</h2>
<p>从目前的两个情节看，剧情张力来自于转折或情感相互反馈。</p>
<p>第一个小高潮剧情，主角以为同学李薇有危险，跑到她家里，闻听她有裸货困难，还要拿出自己的钱帮她，结果情节大反转，这个“李薇”是假的，她是古妖。主角陷入了死局，如果不是外援秦大爷到来，主角就挂了。</p>
<p>第一个情节是反转。</p>
<p>第二个小高潮剧情，写的是张晨与一只狗之间的故事。既写了狗对人的思念，也写了人死后对狗的维护，这是一种相互的情感反馈。</p>
<p>第二个情节是情感相互反馈。</p>
<p>张力来源于逻辑合理的铺垫，要么突然反转，要么感情上有来有往。</p>
<h2>7）第三个情节：张颖教室遇鬼婴痴缠案</h2>
<p>这个故事，先是主角装逼似地携带祖奶奶和三无美女大摇大摆到教室上课，看到骑在张颖脖子上的鬼婴怨灵。主角对张颖提出批判，随后借着鬼婴的视角，引导读者产生对为了钱而堕胎之张颖的厌恶。后来，张颖突然死后，主角张羡鱼亲自去女生宿舍调查，揭秘了事情的真相。原来张颖是被厕所的怨灵女鬼杀死的，在主角调查时，先前一直痴缠她的鬼婴却帮她报了仇。</p>
<p>这个剧情的铺垫也是足够的，其一，张颖为了钱狠心堕胎，但她的孩子却一点不怨她，在她死后还要为她报仇，这是一个感人的转折；其二，祖奶奶和宝泽一干大佬都说，没有对付怨灵的办法，这个恐怖值拉满了。</p>
<p>总之，这个剧情的张力是不错的，最后揭露小鬼婴的目的是小高潮。</p>
<h2>8）前三个案件情节的总结</h2>
<p>下面是对前三个案件情节的总结。</p>
<p><strong>优秀作品的特征</strong></p>
<p>余秋雨说，优秀作品都有两个特征：无解的两难结构和双层的透明结构。《妖二代》这部首订 3000，完结万订的作品可能算不上优秀吧，但目前已经呈现的三个小高潮情节，都体现了优秀作品该有的特征。举两个例子：</p>
<p>1，主角张羡鱼在教室看到鬼婴的第一感觉是要干掉它，但被祖奶奶阻止了。祖奶奶这个外挂，是主角身上强大而正确的智慧。后来，他在教室被鬼婴附身，看到张颖殒命当天的事件真相，他还以为鬼婴是坏的（作者描写的角色以为鬼婴是坏的，读者也认为是坏的）。直到最后他在女生厕所用国徽杀死怨灵，才揭露鬼婴的真相。对鬼婴的多层次递进揭秘，是一种高级的双层透明手法。</p>
<p>2，还有，奶奶是一个磨人的小妖精，在对祖奶奶的刻画中，也出现了多重反转与层级递进。直相并不重要，让读者以为是 A，继而再打破读者的这个认知，再让读者以为是 B，这也是重要的。</p>
<p><strong>案件中的正义</strong></p>
<p>目前，《妖二代》所写的三个小高潮情节，都在一定程度上反应了社会的正能量，卖报这个胖子用最污的语言，呼吁了社会上最阳光的正义。以下是对这三个正义事件的归纳：</p>
<p>1，张明正与徐薇被杀案，批判校园包养与祼贷之风<br>
2，张晨与爱狗萨摩生死之恋案，批判虐狗之风<br>
3，张颖教室遇鬼婴痴缠案，批判堕胎之风</p>
<p>但凡要赚到读者的眼泪，一定要有反转。例如，第一案中，张薇由人向妖的身份转变；第二案中，张晨由弃狗到为鬼后为狗报仇的转变；第三案中，对鬼婴观感的变化。</p>
<p>对读者观感的把控，是创作者的基本功。如果感受某处读者没有按照产生我们想要的观感效果，那就使用渲染大法，总之，一定要让读者按照作者预定的“感觉”走。</p>
<p>未完。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[马斯克发布全新 AI——Grok，宣称世界第三，现在加入列表等待舱门开启]]></title>
            <link>https://yishulun.com/./src/posts/2023/23.html</link>
            <guid>https://yishulun.com/./src/posts/2023/23.html</guid>
            <pubDate>Sun, 05 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/1cf8a18e1fb705a7de0109a15eaa1d6.png" alt="grok"></p>
<h1>马斯克发布全新 AI——Grok，宣称世界第三，现在加入列表等待舱门开启</h1>
<blockquote>
<p>下文中的“我们”，指代 Grok 的开发团队。这是一篇译稿，引用部分为探长添加。</p>
</blockquote>
<p>Grok 是一款模仿《银河系漫游指南》的人工智能，<strong>因此几乎可以回答任何问题，更难的是，它甚至可以建议要问什么问题！</strong></p>
<blockquote>
<p>注：《银河系漫游指南》是一部由英国作家道格拉斯·亚当斯创作的系列科幻喜剧小说。《银河系漫游指南》讲述了地球人阿瑟·丹特和他的朋友福特·派法特的故事。福特是一名来自参宿四的宇宙旅行者，他一直在地球上伪装成人类。在地球被沃贡人摧毁后，阿瑟和福特搭上了黄金之心号太空船，开始了穿越银河系的冒险。</p>
</blockquote>
<p>Grok 的设计目的是用一点智慧来回答问题，并且具有叛逆性，所以如果你讨厌幽默，请不要使用它！Grok 的<strong>一个独特且基本的优势是它通过 𝕏 平台实时了解世界</strong>，它还将回答大多数其他人工智能系统拒绝的尖锐问题。</p>
<blockquote>
<p>马斯克说，X 是人类的共同意识。而 Grok 声称，它的最大优势就是它可以访问 X 上所有用户的数据、观点、评论等一切信息，甚至与温和的 Google Bard、Claude2 不同，它可以回答用户比较尖锐的问题。那么，用户的数据隐藏在这里还有保障吗？所有 twitter 把自己的日常、思想上传到 twitter，是为了训练 Grok 吗？</p>
</blockquote>
<p>Grok 仍然是一个非常早期的测试版产品——我们在 2 个月的训练中所能做到的最好的产品——所以期望它在您的帮助下每周都能快速改进。</p>
<h2>我们为何构建 Grok</h2>
<p>在 xAI，我们希望创建人工智能工具来帮助人类寻求理解和知识。</p>
<p>通过创建和改进 Grok，我们的目标是：</p>
<ul>
<li>收集反馈并确保我们正在构建能够最大程度造福全人类的人工智能工具。我们认为，<strong>设计对各种背景和政治观点的人都有用的人工智能工具非常重要</strong>。我们还希望在遵守法律的前提下，为用户提供人工智能工具。我们与 Grok 的目标是公开探索和演示这种方法。</li>
<li>赋能研究和创新：我们希望 Grok 成为任何人强大的研究助手，帮助他们快速访问相关信息、处理数据并提出新想法。</li>
</ul>
<p>我们的最终目标是让我们的人工智能工具协助追求理解。</p>
<blockquote>
<p>从这里看，Grok 说，让拥有各种意识形态的人都有 AI 使用，这是它追求的公平。同时，另一个目的是，为科研人员赋予研究与创新能力。这里可能更多指社会科学研究人员。</p>
</blockquote>
<h2>前往 Grok-1 的旅程</h2>
<p>为 Grok 提供动力的引擎是 Grok-1，它是我们在过去四个月内开发的前沿大语言模型。Grok-1 在这段时间经历了多次迭代。</p>
<p>宣布 xAI 后，我们训练了一个具有 330 亿个参数的原型 LLM (Grok-0)。这个早期模型在标准 LM 基准上接近 LLaMA 2 (70B) 功能，但仅使用其一半的训练资源。在过去的两个月里，我们在推理和编码能力方面取得了显着的进步，最终诞生了 Grok-1，这是一种最先进的语言模型，功能更加强大，在 HumanEval 编码任务上实现了 63.2%，在 HumanEval 编码任务上实现了 73%。在 MMLU 上。</p>
<blockquote>
<p>ChatGPT 3.5 宣称的参数量是 1750 亿，GPT-4 据说达到了 1.8 万亿，掌管 Twitter 后以节省著称的马斯克可不舍得像 OpenAI 那样烧钱。Grok1 是在 Grok0 的基础上调优得到的，Grok1 的参数量是 330 亿，Grok1 应该不足 400 亿。Google Bard 最初发布时，是基于轻量版语言模型 LaMDA 开发的，参数仅有 1370 亿，不比 ChatGPT 3.5 强；后来谷歌对效果不满意，使用 PaLM 加强，参数达到 5400 亿，效果才崭露头角。马斯克的 Grok 只有 330 亿参数，效果很让人担忧，预测第 4 把椅子都难坐上。</p>
</blockquote>
<p>为了了解我们使用 Grok-1 所做的能力改进，我们使用一些旨在衡量数学和推理能力的标准机器学习基准进行了一系列评估。评估内容主要是以下四项：</p>
<ul>
<li><strong>GSM8k</strong>：中学数学应用题，（Cobbe et al. 2021），使用思维链提示。</li>
<li><strong>MMLU</strong>：多学科多项选择题（Hendrycks et al. 2021），提供了 5 个上下文示例。</li>
<li><strong>HumanEval</strong>：Python 代码完成任务（Chen 等人，2021），针对 pass@1 进行零样本评估。</li>
<li><strong>MATH 数学</strong>：用 LaTeX 编写的初中和高中数学问题（Hendrycks 等人，2021），以固定的 4 次提示进行提示。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">Benchmark</th>
<th style="text-align:right">Grok-0 (33B)</th>
<th style="text-align:right">LLaMa 2 70B</th>
<th style="text-align:right">Inflection-1</th>
<th style="text-align:right">GPT-3.5</th>
<th style="text-align:right"><strong>Grok-1</strong></th>
<th style="text-align:right">Palm 2</th>
<th style="text-align:right">Claude 2</th>
<th style="text-align:right">GPT-4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GSM8k</td>
<td style="text-align:right">56.8%</td>
<td style="text-align:right">56.8%</td>
<td style="text-align:right">62.9%</td>
<td style="text-align:right">57.1%</td>
<td style="text-align:right">62.9%</td>
<td style="text-align:right">80.7%</td>
<td style="text-align:right">88.0%</td>
<td style="text-align:right">92.0%</td>
</tr>
<tr>
<td style="text-align:left">MMLU</td>
<td style="text-align:right">65.7%</td>
<td style="text-align:right">68.9%</td>
<td style="text-align:right">72.7%</td>
<td style="text-align:right">70.0%</td>
<td style="text-align:right">73.0%</td>
<td style="text-align:right">78.0%</td>
<td style="text-align:right">75.0%</td>
<td style="text-align:right">86.4%</td>
</tr>
<tr>
<td style="text-align:left">HumanEval</td>
<td style="text-align:right">39.7%</td>
<td style="text-align:right">29.9%</td>
<td style="text-align:right">35.4%</td>
<td style="text-align:right">48.1%</td>
<td style="text-align:right">63.2%</td>
<td style="text-align:right">-</td>
<td style="text-align:right">70%</td>
<td style="text-align:right">67%</td>
</tr>
<tr>
<td style="text-align:left">MATH</td>
<td style="text-align:right">15.7%</td>
<td style="text-align:right">13.5%</td>
<td style="text-align:right">16.0%</td>
<td style="text-align:right">23.5%</td>
<td style="text-align:right">23.9%</td>
<td style="text-align:right">34.6%</td>
<td style="text-align:right">-</td>
<td style="text-align:right">42.5%</td>
</tr>
</tbody>
</table>
<p>在这些基准测试中，Grok-1 显示了强劲的结果，超过了其计算类别中的所有其他模型，包括 ChatGPT-3.5 和 Inflection-1。只有使用大量训练数据和计算资源（例如 GPT-4）进行训练的模型才能超越它。这展示了我们 xAI 在以卓越的效率培训大语言模型方面取得的快速进展。</p>
<blockquote>
<p>Inflection-1 是 AI 公司 Inflection 的大语言模型。</p>
</blockquote>
<p>由于这些基准可以在网络上找到，并且我们不能排除我们的模型无意中接受了这些基准的训练，因此我们在 2023 年匈牙利全国高中决赛中对我们的模型（以及 Claude-2 和 GPT-4）进行了手工评分在数学中，该文章于五月底在我们收集数据集后发布。Grok 以 C (59%) 的成绩通过了考试，而 Claude-2 也取得了相同的成绩 (55%)，GPT-4 以 68% 的成绩获得了 B。所有模型均在温度 0.1 和相同的提示下进行评估。必须指出的是，我们没有努力针对此评估进行调整。这个实验是对我们的模型从未明确调整过的数据集的“现实生活”测试。</p>
<table>
<thead>
<tr>
<th style="text-align:left">人工分级评估</th>
<th style="text-align:right">Grok-0</th>
<th style="text-align:right">GPT-3.5</th>
<th style="text-align:right">Claude 2</th>
<th style="text-align:right"><strong>Grok-1</strong></th>
<th style="text-align:right">GPT-4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">匈牙利全国高中数学考试（2023 年 5 月）</td>
<td style="text-align:right">37%</td>
<td style="text-align:right">41%</td>
<td style="text-align:right">55%</td>
<td style="text-align:right">59%</td>
<td style="text-align:right">68%</td>
</tr>
</tbody>
</table>
<p>我们在模型卡中总结了 Grok-1 的重要技术细节。</p>
<blockquote>
<p>对于以上结果，貌似 Grok1 已经移居世界第三，大多数情况下它的测试表现都是稍稍落后于 Claude2，甚至在高中数学考试中还比 Claude2 强。但是一直不比 GPT-4 强，GPT-4 仍然是目前公认的 AI 强者。另外，我们还应该看到，GPT-3.5 与 GPT-4 的差距不是一点半点，简直是两倍的差距。<strong>对于试用 ChatGPT 感觉世界最强人工智能不过尔尔的人，不要着急下结论，结果不炸裂，可能是你不会写 Prompt，或者你使用的只是 GPT-3.5。</strong></p>
<p>探长对以上的测试结果表示怀疑，Grok 很可能世界第四，世界第三有点悬。世界第二是不可能的。</p>
</blockquote>
<h2>xAI 的工程</h2>
<p>在深度学习研究的前沿，必须像数据集和学习算法一样谨慎地构建可靠的基础设施。为了创建 Grok，我们构建了一个基于 Kubernetes、Rust 和 JAX 的自定义训练和推理堆栈。</p>
<p>LLM 训练就像一列呼啸而过的货运列车；如果其中一节车厢脱轨，整列火车就会被拖离轨道，很难再次恢复直立。GPU 出现故障的原因有很多种：制造缺陷、连接松动、配置不正确、内存芯片性能下降、偶尔的随机位翻转等等。训练时，我们会连续数月在数万个 GPU 上同步计算，并且由于规模的原因，所有这些故障模式都会变得频繁。为了克服这些挑战，我们采用了一组定制的分布式系统，以确保立即识别并自动处理每种类型的故障。在 xAI，我们将最大化每瓦有用计算作为我们努力的重点。在过去的几个月里，我们的基础设施使我们能够最大程度地减少停机时间并保持较高的模型失败利用率 (MFU)，即使在存在不可靠的硬件的情况下也是如此。</p>
<blockquote>
<p>以上开火车的例子很形象，大概说明了 LLM 训练是非常烧钱的，就像拿软妹币直接往火炉里扔一样。没有钱，大语言模型训练想都不要想。</p>
</blockquote>
<p>Rust 已被证明是构建可扩展、可靠且可维护的基础设施的理想选择。它提供高性能、丰富的生态系统，并防止分布式系统中通常会发现的大多数错误。鉴于我们的团队规模较小，基础设施的可靠性至关重要，否则维护就会缺乏创新。Rust 让我们充满信心，任何代码修改或重构都可能产生可以在最少监督的情况下运行数月的工作程序。</p>
<blockquote>
<p>Rust 是一个“天生冷漠、吝啬”的语言，一切数据默认皆是不可修改的，一切数据有且只有一个拥有者。探长在刚刚接触 Rust 语言时，就感觉到这个语言不简单，它在大数据应用市场中将大有可为，十年之后可能称霸世界。Grok 又想省钱，又想安全、效率高，选择使用 Rust 是意料中的事。</p>
</blockquote>
<p>我们现在正在为模型功能的下一次飞跃做准备，这将需要可靠地协调数万个加速器上的训练运行、运行互联网规模的数据管道，以及在 Grok 中构建新型功能和工具。</p>
<h2>xAI 的研究</h2>
<p>我们为 Grok 提供了搜索工具和实时信息的访问权限，但与所有受过下一个令牌预测训练的大语言模型一样，我们的模型仍然可以生成错误或矛盾的信息。我们认为，实现可靠推理是解决当前系统局限性的最重要的研究方向。在这里，我们想重点介绍 xAI 最令我们兴奋的几个有前景的研究方向：</p>
<ul>
<li>**通过工具辅助进行可扩展的监督。**人类反馈至关重要。然而，提供一致且准确的反馈可能具有挑战性，特别是在处理冗长的代码或复杂的推理步骤时。人工智能可以通过查找不同来源的参考资料、使用外部工具验证中间步骤以及在必要时寻求人类反馈来协助进行可扩展的监督。我们的目标是在模型的帮助下最有效地利用人工智能导师的时间。</li>
<li>**与安全性、可靠性和接地性的形式验证相集成。**为了创建能够深入推理现实世界的人工智能系统，我们计划在更明确、更可验证的情况下培养推理技能。这使我们能够在没有人类反馈或与现实世界交互的情况下评估我们的系统。这种方法的一个主要直接目标是为代码正确性提供正式保证，特别是在人工智能安全的可正式验证方面。</li>
<li>**长上下文理解和检索。**在特定环境下有效发现有用知识的训练模型是产生真正智能系统的核心。我们正在研究可以在需要时发现和检索信息的方法。</li>
<li>**对抗鲁棒性。**对抗性示例表明，优化器可以在训练和服务期间轻松利用人工智能系统中的漏洞，导致他们犯下严重错误。这些漏洞是深度学习模型长期存在的弱点。我们对提高大语言模型、奖励模型和监控系统的稳健性特别感兴趣。</li>
<li>**多式联运能力。**目前，Grok 没有其他感官，例如视觉和听觉。为了更好地帮助用户，我们将为 Grok 配备这些不同的感官，以实现更广泛的应用，包括实时交互和帮助。</li>
</ul>
<p>我们相信人工智能具有为社会贡献重大科学和经济价值的巨大潜力，因此我们将努力开发可靠的保障措施，防止灾难性的恶意使用。我们相信尽最大努力确保人工智能仍然是一股正义的力量。</p>
<p>如果您与我们一样乐观并希望为我们的使命做出贡献，请在<a href="https://x.ai/career/">此处</a>申请加入团队。</p>
<h2>抢先体验 Grok</h2>
<p>我们在美国为有限数量的用户提供试用 Grok 原型的机会，并提供宝贵的反馈，这将帮助我们在更广泛的发布之前改进其功能。您可以加入 Grok 候补名单。此次发布只是 xAI 的第一步。展望未来，我们有一个令人兴奋的路线图，并将在未来几个月内推出新的功能和特性。</p>
<blockquote>
<p>如果你也好奇，不妨戳下面的链接加入等待列表，等待测试舱门开启：</p>
<p><a href="https://grok.x.ai/">https://grok.x.ai/</a></p>
</blockquote>
<h2>回顾</h2>
<p>最后总结一下，自从 2018 年马斯克被踢出 OpenAI 董事会后，一直想推出自己的 AI 产品。现在终于如愿了，Grok 便是。**Grok 宣称，它不仅可以回答人类的一切问题，还可以教人类如何向它提问题。**这让我感觉 Grok 真的有独立意识了一样。</p>
<p>如果 Grok 真如它宣称的那样，它可以连接 Twitter 这颗人类意识大脑，那么它作为一个研究社会科学的工具，将可能是最好的选择。在这一点上，其他 AI 如 GPT-4、Claude2、Google Bard 可能都不如它。</p>
<p>英文原文：<a href="https://x.ai/">https://x.ai/</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[卖报小郎君的网文创作之路及他的主要作品介绍，一名扑街选手究竟是如何成为网文界第一大神的（修改）]]></title>
            <link>https://yishulun.com/./src/posts/2023/24.html</link>
            <guid>https://yishulun.com/./src/posts/2023/24.html</guid>
            <pubDate>Sun, 05 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>卖报小郎君的网文创作之路及他的主要作品介绍，一名扑街选手究竟是如何成为网文界第一大神的（修改）</h1>
<p>你好，今天聊一下卖报小郎君，他的代表作品是《大奉打更人》。</p>
<p>他开创了修仙探案流派，创造了起点中文网最快达成十万均订、起点仙侠第一本十万均订、起点高订纪录创造者三项纪录，《大奉》成为网络文学现象级作品。</p>
<p>第六届阅文原创 IP 盛典时，《大奉打更人》一举囊括了“年度最佳作品”、“年度男频人气十强”、“年度东方幻想题材作品”及“年度影视改编期待作品”四项称号。</p>
<p>卖报当之无愧是一名实力强劲的网文作者之一。</p>
<h2>《九州经》的总结与作者的执念</h2>
<blockquote>
<p>在进一步了解卖报的创作历程之前，我们先看一下他在其作品《九州经》完结时写下的几段话。内容出处在<a href="https://www.uukanshu.com/b/51274/110642.html">这里</a>。</p>
</blockquote>
<p>很遗憾，这本书扑了。去年十二月发《九州经》，到现在，有九十万字了。书的成绩让我很沮丧，这本书我构思了一年多，存稿六个多月，五十万字，才发的小说。本以为就算不会火，至少不算差吧。现实给了我沉重的一巴掌，脸好痛。</p>
<p>虽然各方面成绩都差劲，但是，至少我总结、学习到了很多东西。明白了自己的不足之处，对我而言，有进步就是好事。本来和编辑说好，写一百万练笔，但是，实在坚持不到一百万了。</p>
<p>激情和斗志，在一次次惨淡的订阅面前，灰飞烟灭。</p>
<p>但，我构思了一年多的小说，我不想放弃，这本书虽然扑了，我以后会重新写，情节上会有变化，大纲不会变。这些话，你们看过就算了，源于我自身的执念，但不保证什么时候重新写。</p>
<blockquote>
<p>不知道你读了卖报的总结之后有什么感觉，很多网文扑街作者都有同样的感慨，都经历过类似的痛苦。那么，后来，卖报是如何飞起的呢？</p>
</blockquote>
<h2>卖报的主要创作历程</h2>
<p>我们考查一名出色的网文作者，他一般需要在以下这些方面表现出色，探长将这些能力分为五个等级。</p>
<p>第一等级</p>
<ul>
<li>清晰地表达故事的笔力</li>
<li>细致地刻画人物</li>
</ul>
<p>第二等级</p>
<ul>
<li>对爽文套路及爽点的初步把控，拿着套路构思情节</li>
</ul>
<p>第三等级</p>
<ul>
<li>原创世界观（修行体系设定）</li>
<li>故事结构：剧情张力（写好铺垫和逻辑性，写出期待感）、环环相扣的情节设计</li>
<li>人物群像初级，写好 4、5 个人物</li>
</ul>
<p>第四等级</p>
<ul>
<li>对爽文套路及爽点的深度把控，随便构思情节，自由选择套路</li>
</ul>
<p>第五等级</p>
<ul>
<li>人物群像高级，写好每一个主要人物</li>
</ul>
<p>以下是卖报创作的主要作品，作品顺序从新到旧。根据下面起点对卖报的采访，大概还原了卖报网文创作各项能力的修炼过程。</p>
<ul>
<li>
<p><a href="https://www.qidian.com/book/1031940621/">灵境行者</a> 更新中</p>
</li>
<li>
<p><a href="https://www.qidian.com/book/1019664125/">大奉打更人</a> 2021-08-05</p>
<p>自评：群像写得更好了，人物一个一个都立起来了！</p>
</li>
<li>
<p><a href="https://www.xbiquge.bz/book/42491/">原来我是妖二代</a>(又名古妖血裔）2019-10-16</p>
<p>目标：锻炼原创世界观能力，以及剧情张力，还有群像。成绩：首订 3000，万订完结，成绩是《姐姐》一半。自评：在剧情的张力方面，做得还不错；群像写得还行，有 4、5 个人物出彩，但还不够有趣和出彩；爽点不足。</p>
</li>
<li>
<p><a href="https://www.xbiquge.bz/book/17145/">我的姐姐是大明星</a> 2018?</p>
<p>领悟爽是娱乐本质，开始公众号练笔，目标：研究但不限于套路的“爽点”表达方式。成绩：大概完结时两万订。自评：写爽略有小成，缺点是纯靠文风（笔力）、人设撑起来，属于剑走偏锋。</p>
</li>
<li>
<p><a href="https://www.uukanshu.com/b/51274/">九州经</a> 2017 年</p>
<p>自评笔力与人物的细致刻画可以。</p>
</li>
</ul>
<p>《九州经》是卖报小郎君精心创作的第一本都市小说。网上有人<a href="https://www.dushu263.com/643475.html">这样评价</a>：</p>
<blockquote>
<p>这本书是作者早年的作品，距离现在有五年的时间了，在那个时间段，可能网上还没有中原五绿这样带着调侃的称谓，也正是因为这本书让作者入选了中原五绿，虽然有点牵强的感觉，为什么说比较牵强呢？因为读者和作者对于被绿的概念可能不一样，作者会认为只要最后一刻救下来就不算被绿，很明显读者们不这样认为，我想任何读者也架不住作者三番两次的往被绿那个方向去描述情节。</p>
<p>这本书应该是作者的第一本小说，<strong>文笔不错</strong>，有点模仿树下野狐的蛮荒三部曲，有一股文青范，<strong>对于主角配角的塑造都栩栩如生</strong>，剧情的推动能引起读者的共鸣有代入感。感兴趣的朋友可以去看看。</p>
</blockquote>
<p>这位网文对《九州经》的评价，与卖报的自评是一致的，后面卖报在采访中坦言，早期产品是全靠文笔与人物撑起来的。</p>
<p>在了解了卖报的创作历程之后，我们发现卖报的写作修炼之路是这样的：</p>
<p>第一等级：通过阅读《西游记》和创作《九州经》完成</p>
<ul>
<li>清晰地表达故事的笔力</li>
<li>细致地刻画人物</li>
</ul>
<p>第二等级：通过创作《我的姐姐是大明星》完成</p>
<ul>
<li>对爽文套路及爽点的初步把控，拿着套路构思情节</li>
</ul>
<p>第三等级：通过创作《原来我是妖二代》完成</p>
<ul>
<li>原创世界观（修行体系设定）</li>
<li>故事结构：剧情张力（写好铺垫和逻辑性，写出期待感）、环环相扣的情节设计</li>
<li>人物群像初级，写好 4、5 个人物</li>
</ul>
<p>第四等级：通过创作《我的姐姐是大明星》番外完成</p>
<ul>
<li>对爽文套路及爽点的深度把控，随便构思情节，自由选择套路</li>
</ul>
<p>第五等级：通过创作《大奉打更人》完成</p>
<ul>
<li>人物群像高级，写好每一个主要人物</li>
</ul>
<p>如果你想学习卖报的写作风格，只看《大奉打更人》肯定是不够的，至少还要看《我的姐姐是大明星》，因为对爽及网文套路的把控，是至关重要的。此外，你还需要看《原来我是妖二代》（又名《古妖血裔》），卖报绝大部分的网文创作能力都是在《妖二代》的创作中修炼完成的。甚至，你还要读一下卖报的早期作品《九州经》，探长认为，它能让你理解扑街作者为什么扑街，缺失了必火元素的作品究竟长什么样子，它像一面镜子，能照到你到底缺失了什么、为什么火爆的不是你。</p>
<p>探长之所以有这样的断言，来源于下面龙空对卖报的“龙门访谈”，及起点对卖报的人物专访。</p>
<h2>补充：《姐姐》在前《妖二代》在后</h2>
<blockquote>
<p>从下面来自于“龙门访谈”的部分来看，卖报创作《姐姐》其实是在《妖二代》之前的。探长第一次捋这段作品前后关系时搞错了，现在已修改。</p>
</blockquote>
<p>卖报小郎君：像我写妖二代的时候，成绩只有姐姐的一半，但我一直耐心写下来了，并总结了自己的不足，这才有了打更人。</p>
<p>卖报小郎君：写《姐姐大明星》的时候，其实<strong>是靠文风（笔力）、人设撑起来的</strong>，属于剑走偏锋，和大部分只有一个卖点的脑洞文一样。</p>
<blockquote>
<p>《姐姐》是卖报刻画练习写爽点和把握套路的习作，由“拿套路卡情节”向“拿情节选套路”进化。</p>
</blockquote>
<p>卖报小郎君：但剑走偏锋是不长久的，网文的王道，还是故事、人设和爽点、期待感。</p>
<p>卖报小郎君：写《妖二代》的时候，我刻意练习故事结构，以及群像。</p>
<p>卖报小郎君：期待感是网文的核心了，不过“期待感”三个字太笼统。</p>
<p>卖报小郎君：故事写得好，读者会有期待感；套路用的好，读者会有期待感</p>
<p>卖报小郎君：<strong>妖二代的动漫版权卖了，说明故事结构还算可以</strong>，这是我最大的收获。</p>
<p>卖报小郎君：但妖二代的爽点不足，后期看起来会有些枯燥。于是写打更人的时候，我针对这个，做了很深的研究。</p>
<p>卖报小郎君：打更人的爽点方面，远胜妖二代。</p>
<p>卖报小郎君：另外，我其实没写过破案，但**《妖二代》的写作核心是铺设悬念，解开悬念**，这个和写破案文异曲同工。</p>
<p>卖报小郎君：所以，打更人有这个成绩，完全是妖二代时的积累。</p>
<h2>起点对卖报小郎君的采访</h2>
<blockquote>
<p>以下内容是卖报的作品《大奉打更人》在火爆出圈以后，起点对他的采访，以下内容中的“我”指卖报小郎君，引用部分是探长添加的注释。</p>
</blockquote>
<p>从小写作天赋就很好，小学到高中，作文频频得奖，正因为这样，才会有膨胀的创作欲求，现在想来，这是我踏入网文圈最重要的原因。我记得，自己在键盘上敲下第一个字，开始一部短篇创作，是在 08 年。那会儿我还在读高中。写了几万字后，就不写了，心说还是好好读书吧，我不适合写小说。过了一个学期后，我又觉得，我不适合读书，还是好好写小说吧！哈哈哈哈。</p>
<p>上高中那会儿，家里有台式电脑，每周末回家，就坐在电脑前码字创作。上学的时候，也利用课外时间写作，那会儿甚至连手机都没有，怎么写作？写在笔记本上，然后很得意地给班级里的同学传阅，当做趣味读物。</p>
<p>那时候的孩子多质朴啊，剧情写得稀烂，他们也看得津津有味，并不停地吹嘘：哇，你好厉害。不像现在的读者，只会说：就这？</p>
<p>或者：下次一定！（狗头保命）</p>
<p>好景不长，我的“壮举”很快就被班主任发现了，当天就给了我一键三连：罚站、打手掌、喊家长。班主任耳提面命地教育我，有句话我至今还记得：好好的书不读，写小说？将来没出息，看你后不后悔。老师，老师，你现在在哪儿，给我卖报·萧炎一个“三十年河东三十年河西”的机会.........</p>
<p>以上是玩笑话，老师的做法没什么不对，那个年代，成绩才是硬道理，兴趣爱好都是歪门邪道。　说这么多，主要是想突出我写作经历的坎坷。</p>
<p>这只是开端，更坎坷的在后面。</p>
<p>我是一个闭门造车式的作者，我写的是网文，但我看的，模仿的，却不是网文，这注定了我后面艰难坎坷的写作生涯。有过创作经验的人应该都清楚，新手的第一步，是模仿！我模仿的书，大家很熟悉：《西游记》。</p>
<blockquote>
<p>《西游记》其实是一本很讨创作者喜欢的小说，它章回体的结构，一个故事跟着一个故事，简单的结构组成了一个大长篇。你有没有觉得这种结构与《大奉打更人》很像？</p>
</blockquote>
<p>当时觉得，写小说，<strong>当然要以文笔为重</strong>，能写诗，能写出华丽的辞藻，你才有资格称为作家！于是脑子一抽，模仿西游记的文笔。我把西游记逐字逐句，文言文，读了两三遍。揣摩远古大神吴承恩的文笔，半年后，自觉修为小成，写了一篇仿西游记的仙侠给我同寝室的哥们看（那会儿已经上大学）。那哥们看完，说：你这写的是啥子东西哦，看得老子脑壳青痛。</p>
<blockquote>
<p>仿写《西游记》，虽然没有让网文创作之路成功，但练就了作者的文笔和刻画人物的能力。你想想，西游记里有多少人物，妖魔鬼怪各路神仙每个角色都不一样，这样的刻意人物让卖报掌握了<strong>细致刻画人物</strong>的内功。</p>
</blockquote>
<p>我忽然意识到，这种文风并适合现代，套用大家都熟悉的梗来形容：大人，时代变了。于是，我开始模仿金庸和古龙的画风，期间也会到学校图书馆找一些名著来看，主要是揣摩文笔，学习他们文字间的转折、铺垫，以及人设等等。</p>
<p>唯独没有研究过网文的套路 。这也就导致了我自娱自乐很多年，从 08 年玩票性质的创作，到 14 年左右，开始真正的连载创作，截止 2017 年之前，我都是扑街的。扑街到什么程度？一分钱都没赚到。</p>
<blockquote>
<p>大概 9 年的时间，约等于 10 年，没想到大神一直在扑街，更没有想到大神一直在坚持创作。小十年的时间，没有收入，大神一直在练笔，其动力不在于收入。</p>
</blockquote>
<p>对于新人来说，至少还有一个全勤的盼头，但 14 年的时候，我恰巧是实习生，工作忙，因此连全勤都混不到。</p>
<p>2014 年至 2017 年，整整三年时间里，我白天工作，晚上熬夜码字到一两点，日复一日，全凭对创作的热爱坚持着。包括现在，我依然保持着当初的状态，白天工作，晚上码字。睡眠严重不足，以我现在的收入完全可以全职，但是过去近十年的零收入，对我产生不小的心理阴影。</p>
<p>没有工作就没有了安全感。</p>
<p>言归正传，到了 17 年中旬，我意识到这样下去不行，梦想是需要金钱支撑的，刚毕业这三年，不用考虑未来、婚姻等等问题，所以可以为兴趣尽情地燃烧青春。</p>
<p>但从 08 年开始，到 17 年，<strong>小十年过去，我已经不再是少年，这份爱好并没有给我带来经济收入</strong>。于是痛定思痛，开始研究网文套路。17 年是改变我写作生涯的一年，我收获了人生中第一笔稿费，大概是四万左右。也在圈子里收获了一定的名气。</p>
<blockquote>
<p>读到“小十年过去，我已经不再是少年，这份爱好并没有给我带来经济收入”这一句，有没有感到一丝淡淡的忧伤？此时卖报开始反思，开始研究网文中的套路，于是在 2017 年崭露头角，拿到了网文创作的 4 万稿费收入。</p>
</blockquote>
<p>人生很奇妙，积累十年，一朝破茧成蝶。得益于我闭门造车小十年，韧性十足，心态稳如老狗。并没有因为无人问津而停止创作。如果当初放弃了，或许就没有后来的我。</p>
<p>从扑街到两万订，我缺乏一个循环渐进的过程，以致于某段时间心态特别飘。后来当然调整回来了，心态膨胀是在所难免的，呕心沥血获得成绩，你就有膨胀的资格。但是不要停下学习的脚步。</p>
<blockquote>
<p>默默积累很久不自觉，突然一朝发生质变，心态容易飘，这种经历很有人都有。难能可贵的是，飘过之后能够再次稳定一下。</p>
</blockquote>
<p>我是在小有名气后，才真正混入网文圈，加入各个作者群，才知道网上有许多“网文套路”的总结和模板。当时心情就很复杂，如果我能早点接触到这些，或许早就有成绩了。但我仍要感谢两耳不闻窗外事那段漫长时光，这是我一飞冲天的基础，现在想来，我对剧情的驾驭，对文笔的驾驭，其实就是那几年打下的基础。</p>
<p>写作是一个沉淀和积累的过程。</p>
<p>我前期的书，<strong>全靠人物和笔力撑起来</strong>的，套路很少，偶尔几次尝试套路写作，效果一般，有次还翻车了。　　时隔三年，我现在可以坦然地说一说。其实那段剧情是一个很标准化的套路，英雄救美嘛。我当时想不明白，为什么都市文里司空见惯的套路，读者们的反响却那么激烈？</p>
<p>其实从这一点，可以看出我当时是纯粹的新人，<strong>不擅长套路</strong>的新人。我在用十年前的套路..........　另外，<strong>铺垫和逻辑性不够</strong>，这同样是一个新人的经验不足，换成现在，就不会犯这样的错误。成名之作完结后，虽然给我带来了不错的收入和名气，但我也意识到自己的不足。我是都市频道写出来的作者，<strong>深知都市文有天然的代入感，自己在世界观构架方面，是个不折不扣的新手</strong>。</p>
<blockquote>
<p>这里的成名之作，应该指《九州经》，这正是一本都市小说，它是卖报 2017 年创作的小说。</p>
</blockquote>
<p>总结起来就是，我的弱点：<strong>原创世界观、剧情张力（铺垫和逻辑性不够）、爽文套路，以及人物群像</strong>。于是，半年后，《原来我是妖二代》就出来了。写这本书，<strong>我的方向是很明显的，锻炼原创世界观能力，以及剧情张力（还有群像）</strong>。考虑到步子迈得太大，容易扯到蛋，于是把<strong>原创世界观改为“修行体系设定”</strong>。</p>
<p>相比起只有四五个角色出彩的上本书，《妖二代》里，我比较刻意地去写群像，每一个角色都有自己的性格，个性比较鲜明，但依旧不太成熟。</p>
<p>此外，<strong>在剧情的张力方面，《妖二代》做得还不错</strong>，为我后续写《大奉打更人》打好了基础。</p>
<p>不过《妖二代》的成绩只能算一般，首订三千，到完结是万订水平。但是，《妖二代》是我第一本卖了动漫版权的书，这证明我的创作思路是对的，证明整本书的剧情张力还算不错。</p>
<p>磕磕绊绊地写完《妖二代》，我又停笔半年，开始了自省和思考。这次，我总结出自己的缺点是：<strong>不够爽和节奏不行，以及大纲！网文是娱乐，娱乐的本质就是爽</strong>，这一点，不管是综艺、影视剧还是游戏，但凡是娱乐，追求的核心就是一个字：爽！</p>
<p>**套路是表现“爽”的方式，但不是唯一的方式。**于是停笔的半年里，我在公众号练笔写番外，<strong>研究但不限于套路的“爽点”表达方式</strong>，三四十万字后，感觉修为略有小成。</p>
<p>然后开始了《打更人》的世界观构架、修行体系的设定、人设的刻画以及大纲的写作。<strong>《打更人》以案件为核心写故事，从开头的税银案到第二卷结束，整整两百万字，其实讲的是一个案子。环环相扣，还算可以。这是《妖二代》时锻炼出的基础，《妖二代》整本书是一个无限轮回，没有《妖二代》，就没有《打更人》</strong>。而在群像方面，《打更人》也是脱胎于《妖二代》，《妖二代》的群像写得还行，但不够有趣和出彩，《打更人》就不同了，我立起了一个又一个的人物。</p>
<p>以上，就是我个人的创作经历。</p>
<p>其实还有很多技术性的东西想和大家分享，但篇幅有限，写不了那么多。以后有机会，单独写一篇技术性的文章，供大家阅读，他山之石可以攻玉嘛。　比如如何写大纲，如何埋伏笔，如何在人前显圣时渲染情感，如何快速地立起一个人物，如何让日常也写得有趣，如何提升剧情的张力，如何断章.........　起点作者都是断章培训班出来的，最后这点想必都是高手，哈哈哈。</p>
<p>最后，和正在迈向成功的作者分享两个经验：一、要耐得住寂寞，二、要懂得思考和反省。</p>
<h2>回顾</h2>
<p>最后回顾一下。</p>
<p>不知道你看了卖报的专访有什么感受，每个人的成功都不是偶然的，都是天赋+汗水，十年如一日耕耘的结果。当然，在网文创作这条路上，还需要不断思考与反省，要学习别人成功的经验。</p>
<p>我认为卖报的创作修炼非常值得借鉴，如果你喜欢传统文学，也想成为一名优秀的网文作者，请回头看一下探长总结的那 4 个等级及修炼建议，把卖报走过的路重新走一下，或许你也可以成功。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[“我交代给你的事情，你落实得怎么样了？”]]></title>
            <link>https://yishulun.com/./src/posts/2023/22.html</link>
            <guid>https://yishulun.com/./src/posts/2023/22.html</guid>
            <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/image-20231102223349483.png" alt="23 女教师的遗书"></p>
<h1>“我交代给你的事情，你落实得怎么样了？”</h1>
<blockquote>
<p>以下内容来自朋友投稿，我读了之后惊骇莫名。</p>
</blockquote>
<p>就在前两天，2023 年 10 月 31 日，河南一名年仅 23 岁的小学女老师跳楼自尽了。</p>
<p>她在遗书中说：“每天上班像进了牢笼，喘不过来气，真的让人崩溃，每天都是提着最后一口气在工作。”</p>
<p>你是不是不能理解？我刚看到这个报道的时候也很难理解，年纪轻轻，身体健康，也有稳定的工作，为什么要自杀？</p>
<p>教师这个职业虽不是让人大富大贵的工作，但在目前经济不是很景气的时候，图个温饱小康还是没问题的。</p>
<p>在个别欠发达地区都偶有传出公务员或公交集团的工作人员发不出工资的情况，但教师的工资一直都是有保障的；还有，每年有近 3 个月的寒暑假，怎么看，教师都是一份让人羡慕的职业。</p>
<p>那么，既然如此，她为什么要轻生呢？</p>
<p>我最近听说了另外两件实事，两者联系起来，有点明白这位老师的痛苦了。我希望社会能给予教师这个职业基本的理解和尊重。</p>
<p>下面我讲这两件事。</p>
<h2>第一件事</h2>
<p>一个刚进学校工作不满一年的女硕士，新学期当班主任带班不到两月，主动向校长递交了辞呈。</p>
<p>为什么？因为她有了更好的出路？</p>
<p>不是！是不得已而为之。</p>
<p>因为她感觉“再干下去，人就要疯掉了！”</p>
<p>她班上有两个小朋友，课间一起玩，一个小女孩对另一个小男孩说：“你藏在柜子里，我去找你。”</p>
<p>在教室的后面有一排立柜，是让小朋友放东西的。柜子不小，小朋友个头矮，藏里面没有问题，小男孩就藏进去了。</p>
<p>但是小女孩把他忘了，一直没去找他，直到上课了，小女孩也没有去找。</p>
<p>科任老师来上课了，小男孩听到老师讲课的声音，更不敢出来了，在柜子里憋了一节课，下课了科任老师走了，他才敢从柜子里出来。同学们知道了都笑话他。</p>
<p>小男孩觉得委屈，晚上把这件事告诉了妈妈。</p>
<p>他妈妈不干了，第二天就来到了学校，质问班主任——也就是上面我们提到的马上要辞职的女硕士：</p>
<p>“你当班主任干什么吃的？你不知道班上少一个学生吗？”</p>
<p>“我儿子这是万幸没有出事，如果出事了，你担得起这个责任吗？！”</p>
<p>我乍一听说这个事，感觉这位妈妈说的好像也有道理。我就问：“班上少了一个学生，老师没有发现吗？”</p>
<p>朋友告诉我：“科班老师都是同时教好几个班，是根本记不住每个班都有哪些学生的。”</p>
<p>“那班主任应该知道自己班上都有哪些学生吧，班主任没有例行巡视吗？”我又问。</p>
<p>“有啊，班主任每个课间都会到班上查看一番——但因为班主任自己也有课，只能课间查看，孩子有时候去接水了，有时候上厕所了，偶尔少一两个人根本觉察不出来。”</p>
<p>女硕士一方面觉得自己确实疏忽了，所以她一再向小女孩的妈妈道歉，希望得到家长的谅解；另一方面她也觉得自己很委屈，这完全是一件基本无法避免的事情，换作其他班主任也发现不了，只是她比较倒霉，碰上了。</p>
<p>这件事发生后，学校马上安排后勤人员连夜拆除了所有教室里所有立柜的门，杜绝类似事情的再次发生。</p>
<p>女硕士也是一直向小男孩的妈妈赔笑脸说好话，希望这件事可以化解。</p>
<p>但是。</p>
<p>小男孩的妈妈不依不饶，天天来学校，天天找她，责问她为什么没有及时发现她班上的学生丢失了。</p>
<p>“你不是说每一个学生都像你的孩子一样吗？你不是说你爱你的每一个学生吗？为什么你的学生丢失一节课的时间了，你都没有发现？”</p>
<p>“作为一名老师，你还是一个硕士，你觉得你够资格当老师吗？”</p>
<p>女硕士身为教师，对小男孩的妈妈不能打、不能骂，不能驱赶，也不能置之不理。</p>
<p>小男孩的妈妈天天来，用她自己的话说，她的理由是：“这个班主任不负责任，我不放心，我必须天天来学校亲自看护我儿子。”</p>
<p>最后，实在没有办法了，出现了故事刚开始的那一幕，女硕士向校长提出了辞呈，她说：</p>
<p>“自己已经神经衰弱了，再干下去非疯掉不可！”</p>
<p>校长也没有办法，只好同意了她的辞呈。</p>
<p>小男孩的妈妈看到女硕士“被辞退”了，班上换了新的班主任，这件事才算结束了。</p>
<p>她终于肯回到家里，放心把孩子交给学校了。</p>
<h2>第二件事</h2>
<p>下面说第二件事。</p>
<p>一个学生的铅笔丢了，她妈妈找到了学校，让班主任调查偷铅笔的小偷。</p>
<p>这位班主任我们姑且称为小芹老师吧，小芹老师问了班上的同学，都说没有见到这位同学的铅笔。</p>
<p>都是一二年级的小屁孩，没有什么偷的概念，有可能是孩子们打闹玩游戏时，将铅笔丢在某处又忘记了，小芹老师也无法查找。</p>
<p>小芹老师说：“一人铅笔确实很难找到，学校为了保护孩子们的隐私，也没有监控，您看，我下课了给孩子买一个一模一样的铅笔成不成？”</p>
<p>小芹老师对小女孩的妈妈很客气，希望早点把这件事摆平，学校还有许多其他事等她处理。</p>
<p>没想到小女孩的妈妈根本不干，她说：“我们的铅笔是国外进口的，国内能买得到吗？”</p>
<p>“不行！必须查出小偷，必须找到我们原来的那一支铅笔。”</p>
<p>小芹老师说：“可是，xx 妈妈，没有一点线索，根本无从查起啊。”</p>
<p>小女孩的妈妈却说：“怎么没有线索？我看班上好多外地孩子，他们什么都没有见过，见到一点好看的东西就手痒痒想偷了去！”</p>
<p>“我给你说，小芹老师，就从这些外地孩子一个一个查起！”</p>
<p>我听到这个故事的时候，惊奇坏了，我问：“这位妈妈敢这样说话，班上其他家长应该有来自外地的吧，他们没有意见？”</p>
<p>朋友说：“小女孩的妈妈是线下与小芹老师谈的，她不是在班级群里公开讲的。”</p>
<p>“噢——”我心想，幸亏她不是公开讲，不然绝对是犯了众怒了。</p>
<p>小芹老师一听她这个话，说道：“xx 妈妈，你这样讲我不能同意，班上每一个学生都像我的孩子一样，我爱每一个学生，我对待他们都是平等的。如果你要查外地的，那从我先查起吧，我就是山西来的，我也是一名外地的。”</p>
<p>不得不说，小芹不像前面那女硕士那么软，她的这番话讲得棉里藏针。</p>
<p>“小芹老师，我哪是说您呢？”小女孩的妈妈连忙笑着解释道，“我是说那些外地的学生，他们没有教养，一定是他们偷的，你一定要把小偷找出来。”</p>
<p>第一天就这样结束了，但这件事没有结束。</p>
<p>第二天，小女孩的妈妈打 12345 把学校和老师告了。</p>
<p>有些人表现上尊重老师，当面尊重老师，给老师笑脸，但是背地里却能突然把老师告了。</p>
<p>学样不得已，又把小女孩的妈妈请到学校，小芹老师负责接待。</p>
<p>一见面，小女孩的妈妈就对小芹老师说：</p>
<p>“我交代给你的事情，你落实得怎么样了？”</p>
<p>她指的是让小芹在班上查小偷的事。</p>
<p>这件事目前仍然没有一个结果，我害怕她像上面那个小男孩的妈妈一样，不死不体。</p>
<p>据说她还是一位有公职的人，她有工作，并不是闲得无事可干。她既然有公职，最低也是本科学历，我没有想到她如此不理解老师。</p>
<h2>回顾</h2>
<p>我们这个社会，有时候，一些家长比起他们的孩子更需要接受教育。</p>
<p>有些人，他们虽然有学历，但其实并没有文化。有些人，他们身体虽然长大了，年纪老了，但心理却仍然是一个孩童。</p>
<p>请看在花朵的份上，给园丁多一些理解和尊重吧。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[读《诡异世界，我以肉身镇万物》，聊小说开篇的期待感及创作过程中作者对读者观感的把控]]></title>
            <link>https://yishulun.com/./src/posts/2023/21.html</link>
            <guid>https://yishulun.com/./src/posts/2023/21.html</guid>
            <pubDate>Wed, 01 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/F92WBRobgAA3aRt.png" alt="Image"></p>
<h1>读《诡异世界，我以肉身镇万物》，聊小说开篇的期待感及创作过程中作者对读者观感的把控</h1>
<p>你好，今天谈一下最近看的小说。它是起点新书榜上的一本小说，成绩是很不错的。</p>
<p>它的分类是玄幻高武，但我感觉它像都市，它的文笔细腻而真实，只有在世界观设定上，有武修、仙修的设定，这是属于玄幻世界的内容。如果它没有这方面的设定，它应该属于架空历史。</p>
<p>真正的网文创作应该也是清苦的，像一场路途很长的独自旅行，且还只能步行。作者需要保持日更，每天仔细地表述主角周围发生的事情，用它们展现主角的性格，或实现爽点的展现。</p>
<p>大多数时候作者写的都是日常，只能表现主角的性格，作者大概认为它应该写，所以就写了。<strong>之所以这样的流水情节读者能有耐心看下去，是因为在开篇的时候——特别在前 3 章甚至第 1 章，作者把期待感拉满了。</strong></p>
<p>期待感，是非常非常非常重要的一个东西。</p>
<p>以这本书而论，第一个大期待感就是主角陈墨给张瑜赎身。在作者的这个期待将被满足之前，作者又给读者拉起了另一个期待：主角参加武举，拿下名次。</p>
<p>期待就像被串起来的珍珠，一个接着一个。拉起一个期待，你不能迅速让读者满足，怎么也要水上 20 章；但也不可能一个期待贯穿全书，该满足读者的时候就满足，只是在满足旧的期待之前，须拉起新的期待。</p>
<p>**故事情节走到的每一步，主角怎么想、怎么做，周围的人怎么想、怎么做，这些都属于想象力的范畴。是作者的想象力+常识推理的结果。**并没有一定的规矩说，读者读到这里一定会有什么样的想法，没有，不是的，读者群体大概是那样的想法，但具体每一个读者身上，每个人的想法又可能是不同的。</p>
<p>我们在小说的章评评论区经常看到读者有时候对作者当前撰写的情节指手划脚，这是为什么？这就是作者对读者观感的把控出现了小小的失误。</p>
<p>为了避免这种“失误”，为了让读者朝作者预定的方向去想，作者往往要特意描写一些额外的情节，或直接点出某些历史背景，请读者往预定的方向去想。作者在创作的时候，在每一个具体更新的节点，他想到了很多，如果以数字计数，例如 100 个，在他真正落实在纸面上的时候，可能只有 10 个被采纳。</p>
<p>那些不利于展现主角性格、不利于以主角为核心展现爽点的情节或话语，都被作者有选择性地忽略了。有时候读者在书中走着走着，突然发现：“咦，这里真巧啊！”</p>
<p>是的，真巧！这是作者故意保留的，“不巧”的内容都被作者故意剔除了嘛。</p>
<p>这个过程，就像作者在控制一个圆球，圆球随意滚动就像读者，作者用自己创作的情节，小心引导读者向预定的方向前进。</p>
<p>这种把控，没有什么“包治百病的灵感妙药”，它是常识推荐+想象力共同作用的结果。有什么办法可以增加这种“功力”呢？</p>
<ul>
<li>多读相关题材的优秀小说；</li>
<li>适当看一看书评，注意一下读者的阅读感受；</li>
<li>多读文化与历史方面的图书，尽可能做一些文化、历史方面的思考与评论。</li>
</ul>
<p>多做以上这些事情，探长相信对创作小说大有裨益。无论是什么题材的小说，它们只是因世界观设定不同而分类不同，它们描写的人性都是共通的。阅读、思考与评论文化、历史方面的内容，对创作所有题材的小说都是有帮助的。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[我们为什么选择 ChatGPT？]]></title>
            <link>https://yishulun.com/./src/posts/2023/18.html</link>
            <guid>https://yishulun.com/./src/posts/2023/18.html</guid>
            <pubDate>Tue, 31 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/image-20231031081339847.png" alt="image-20231031081339847"></p>
<h1>我们为什么选择 ChatGPT？</h1>
<p>你好，今天开始聊一下 ChatGPT。</p>
<p>ChatGPT 全名 Chat Generative Pre-trained Transformer，是 OpenAI 于 2022 年 11 月 30 日发布的一款聊天机器人程序。它在自然语言理解、语音互动、数据分析、多模态等方面表现出色，是目前最值得选择的 AI 大语言模型（Large Language Model，简称 LLM）之一。</p>
<p>2023 年 3 月 14 日，OpenAI 在 ChatGPT（GPT 3.5）的基础上，又发布了新版本 GPT-4，一举奠定了 OpenAI 在大语言模型领域的领先地位。</p>
<p><img src="assets/image-20231031073332893.png" alt="ChatGPG Web"></p>
<p>一个应用发布后，最快多久能够拥有 1 亿用户？</p>
<p>Instagram 用了 2.5 年，微信用了 1.2 年，TikTok 用了 9 个月，而 ChatGPT 只用了 2 个月。</p>
<p>ChatGPT 的迅速火爆迅速引起了人们的广泛关注，就连火星移民专家埃隆·马斯克都发推称：“ChatGPT 厉害得可怕，我们距离危险而强大的 AI 不远了（ChatGPT is scary good，We are not far from dangerously strong Al）。”</p>
<p><img src="assets/tlajnjYPToiJMOw84KXGF7YMWvXIDhAn29OUgfho9IdyPoD8x9Pvt0sxUotPBDLgqIy2vy1YrI8os0JqMSVf34i9nMY3snNP1RtmKGqiesZAeF-tfRwYpyYjhlFMtPV--yaBweE_JbbkpgkXAFVu5GI.png" alt="埃隆·马斯克的推"></p>
<blockquote>
<p>截图来源：<a href="https://twitter.com/elonmusk/status/1599128577068650498">https://twitter.com/elonmusk/status/1599128577068650498</a></p>
</blockquote>
<p>ChatGPT 究竟有多强大？为什么它可以迅速获得获得如此广泛的关注？</p>
<p>ChatGPT 是第一个在大型图灵测试数据集上，取得超过 50%通过率成绩的 AI。图灵测试是英国计算机科学家艾伦·图灵于 1950 年提出的思想实验，目的是测试智能机器能否表现出与人一样的智力水准。在测试中，如果测试者分别与智能机器和人进行对话时，无法判断出与自己对话的对象是智能机器还是人，那么就认为该智能机器通过了图灵测试。</p>
<p>2023 年 7 月 25 日，来自美国康奈尔大学、新墨西哥州圣达菲研究所和谷歌人工智能的三位研究人员，在《Nature》杂志上发表了一篇题为<a href="https://www.nature.com/articles/d41586-023-02361-7">《ChatGPT broke the Turing test — the race is on for new ways to assess AI》</a>的文章指出，ChatGPT 已经通过了图灵测试。</p>
<p>在很有场景下，人类已经无法区分屏幕的另一边究竟是人还是人工智能。人类在 30 年前就开始流传那句著名的网络笑谈：“在互联网上，没人知道你是一条狗（On the Internet, nobody knows you're a dog）”，这句话最早见于 1993 年《纽约客》杂志的漫画专栏，当年的这句戏言现成已经变成了现实。</p>
<p>ChatGPT 是一个通用的 AI 大语言模块，它不像以往 AI 那样只能胜任特定领域的工作，它具有出色的通用自然语言处理能力、常识推理能力和数学能力。</p>
<p>据《纽约时报》报道，2012 年 12 月，在 ChatGPT 公开上线后不久，美国北密歇根大学（Northern Michigan University）哲学教授安东尼·奥曼（Antony Aumann）在为世界宗教课程批改论文时，读到了“全班有史以来最好的论文”。该论文用简洁的段落、恰当的例子和严谨的论点，探讨了罩袍禁令的道德意义。</p>
<p>但随后在教授的追问下，他的学生承认了论文是使用 ChatGPT 撰写的。这一发现让教授感到震惊不已，如果不是学生主动承认，他根本无法发现这篇“全班最好的佳作”竟然出于 ChatGPT 之手。</p>
<p>美国统一律师资格考试（Bar Exam）是一项比较难考的职业考试，例年通过率只有 50%左右。在 2023 年 4 月，GPT-4 发布不久，OpenAI 就在一系列专为 AI 设计的基准测试中评估了它的性能，其中就包括美国统一律师资格考试这一项，让人震惊的是，GPT-4 不但通过了考试，还取得了前 10%的排名。</p>
<p>要知道对于美国统一律师资格考试，即使是有法律基础的大学学生，要通过它也要准备6~12个月的时间，现在 GPT-4 不需要准备，仅依靠它在语料训练时的底蕴积累，分分钟就通过了。</p>
<p>类似的雷人事例还有很多，ChatGPT 作为一款通用大语言模型，自发布后已经深入到了人类生活的方方面面。</p>
<p>如果概括一下，我们发现 ChatGPT 在以下方面已经达到，甚至超过了一般人类的水平：</p>
<ul>
<li>自然语言理解与处理：ChatGPT 能够理解复杂的语言环境和语义，并生成与人类相仿甚至一致的文字。具体来讲，它可以对新闻报道、学术论文等内容进行摘要和翻译，并且能够理解和回复用户的自然语言提问。</li>
<li>文本与语音互动：ChatGPT 能够与用户进行流畅的文本或语音交互，及时生成并回复十分拟真的语音（在新版本的 ChatGPT App 中已经支持实时语言互动）。具体来讲，它可以作为客服机器人，为用户提供帮助；也可以作为生活中的虚拟电子助手，为用户提供日常陪伴。</li>
<li>Data Analytics：最初的名字叫 Data Interpreter，利用该功能 ChatGPT 能够对大量数据进行分析，并生成有价值的见解和报告。具体来讲，GPT-4 中的这项功能可以用于市场研究、金融分析等领域，并且还可以用于程序员编程，只你用自然语言清晰地描述出你需要的功能，它就能为你生成理想的初步代码。</li>
<li>多模态支持：最新版本的 ChatGPT 能够处理多种类型的输入和输出，例如文字、图像、视频等。具体来讲，它可以用于生成创意文案、编写剧本、创作音乐等协助工作。</li>
</ul>
<p>ChatGPT 的这些出色能力，在我们日常学习、办公、写作、程序开发等许多场景都有惊人的应用。</p>
<ul>
<li>学习：ChatGPT 可以帮助我们快速学习新知识，提高学习效率，例如它可以生成学习笔记、翻译外文文献等。</li>
<li>办公：ChatGPT 可以帮助我们提高办公效率，例如它可以快速生成 PPT 文档、帮助写邮件等。</li>
<li>写作：ChatGPT 可以帮助我们创作内容，例如它可以编写剧本、撰写公众号文章等。</li>
<li>程序开发：ChatGPT 可以帮助我们加速程序开发，例如它可以基于我们的自然语言逻辑描述，快速生成程序主体代码及测试代码等，当程序运行出现错误时，它根据错误提示还能提供解决异常的建议方案。</li>
</ul>
<p>在 ChatGPT 火爆出圈以后，其它大厂也跟着推出了另外的一些大语言模型 AI，其中比较有学习和使用价值的有 Claude、Notion AI、Google Bard 等，它们与 ChatGPT 相比，并不比 ChatGPT 弱，某些方面甚至比 ChatGPT 还要强一些。</p>
<p>探长接下来撰写的专栏内容，即是在以 ChatGPT 为主的 AI 工具的辅助下，完成的资料搜集、项目代码编写、文字撰写等工作。下面请跟着我的文字开始大语言模型 AI 工具的探索之旅吧，即使你是不是程序开发人员，不是文字办公人员，哪怕你只是一位使用它激发故事灵感的网文作者，或者只是一位用它辅助学习的学生，以 ChatGPT 为首的 AI 工具，都能帮助你更快、更好达到你理想的彼岸。</p>
<h2>专栏的主要内容</h2>
<p>我们使用 ChatGPT 为主的 AI 工具，一般有以下四个层次：</p>
<ul>
<li>直接使用：这是最基本的使用方式，只需简单地输入指令或问题，ChatGPT 就会生成相应的文字。</li>
<li>结构化编写提示：在直接使用的基础上，可以通过结构化编写提示，让 ChatGPT 生成更符合要求的文字。</li>
<li>基于 API 使用：可以通过调用 ChatGPT 的 API，实现更复杂的功能，例如进行智能对话、嵌入业务系统等。</li>
<li>基于 AI 大模型深度开发智能产品：可以使用目前业已成熟的 AI 大模型作为基础，开发自己的智能产品。</li>
</ul>
<p>因此，接下来的专栏内容按照这四个层次，分为了四个部分，每个部分分别对应一个层次的使用。在每一部分中，基本还会分学习、办公、写作和程序开发四个类别，分别进行讲述和介绍。无论你是哪个层次的使用者，都可以找到你想要的内容。</p>
<p>有人可能担心因为网络原因 ChatGPT 无法使用，这一点无需担忧。在四个部分的内容开始之初，在第一部分中，我们即会介绍如何正常使用 ChatGPT、Claude 等 AI 工具。有些工具甚至是免费的，对于初学者来说毫无负担。</p>
<h2>专栏的目标读者</h2>
<p>本专栏主要面向以下群体：</p>
<ul>
<li>对 ChatGPT 感兴趣的初学者、在校学生：本专栏从基础知识讲起，循序渐进地介绍 ChatGPT 的使用方法，适合没有任何 ChatGPT 使用经验的读者。在初步学习之后，如果想进一步学习研究，本专栏后续实战内容皆可作为教程参考，为以后长远的职业道理打好基础。</li>
<li>希望提高工作效率的 Office 办公人员、网文创作作者和程序开发人员：本专栏介绍了 ChatGPT 在各个领域的应用，可以帮助读者提升学习和工作的效率和质量。</li>
<li>希望深入 AI 工具原理及使用技巧的企事业单位管理人员。管理层代表了企事业单位整体的认知，只有认知提升了，才可能在数字化、智能化浪潮中不断提升企事业单位效率，从而立于不败之地。</li>
</ul>
<p>本专栏不仅介绍了实用技能，还详细阐述了以 ChatGPT 为主的 AI 大语言模型的技术原理，使读者不仅知其然，还知其所以然。</p>
<p>读者仔细阅读本专栏并加以实践，将会获得以下收益：</p>
<ul>
<li>掌握 ChatGPT 的使用方法；</li>
<li>掌握编写高效的结构化提示的方法；</li>
<li>掌握 ChatGPT 的 API 调用技能；</li>
<li>掌握基于 AI 大语言模型开发智能应用的技能。</li>
</ul>
<h2>如何开始学习</h2>
<p>本专栏按照探长的一贯写作思想，也是按照 PBL 实战教学理念编写，全书只有一个项目，贯穿整本专栏。全书内容整体上是由易到难的，建议初学者按部就班，从前向后依次学习。</p>
<p>为了启发读者思考，本专栏特意增加了以下三类内容：</p>
<ul>
<li>原因式探索引导：在书中可能会看到一些运行错误，这些错误是我们在实际开发中经常会遇到的，这时适合停下来，想一想为什么会出现这样的问题，应该如何解决。</li>
<li>拓展内容：标题凡带有“拓展”词汇的，都属于实践拓展内容，这些内容都是与当前示例实战密切相关的，阅读这些内容有助于加深对当下实践主题的深层理解。</li>
<li>思考与练习：这些习题也是与当前实践主题高度相关的，希望读者可以停下来做一做，书末附有参考答案，练习之后可以自己对照答案查验对错。</li>
</ul>
<p>本专栏附有随书源码供读者使用，读者在使用源码时，需要注意以下两点：</p>
<ul>
<li>示例源码是按分支独立放置的，各分支下的示例互不影响。每个代码文件的顶部一般都附有源码文件的相对地址，另外每课内容涉及代码运行及测试时，也会提示示例的涉及分支，读者只需要查看对应的分支即可。</li>
<li>对于不同编程语言的示例源码，可能需要使用不同的测试方式。具体使用哪种测试方式，书中对应章节都有详细讲解。</li>
</ul>
<h2>回顾</h2>
<p>最后回顾一下。ChatGPT 是一个划时代的了不起的 AI 产品，它已经出色地通过了图灵测试，它出色的通用智能表现，让人类在很多场合都分不清为自己服务的角色是机器还是人类。有人甚至将 ChatGPT 风靡全球的 2023 年，称为硅基智能开启的奇点之年。面对以 ChatGPT 为主的 AI 工具，它们是那么的新奇、强大，它们的未来充满无限可能，有人怀疑它们，有人抵制它们，先行者们已经在使用它们。</p>
<p>我们为什么不能了解、学习和利用它们呢？它们就像钢铁侠的战甲一样，每个人武装以后，都能在精神上变成一名强大的全能六边形战士。</p>
<h2>参考链接</h2>
<ul>
<li><a href="https://twitter.com/elonmusk/status/1599128577068650498">https://twitter.com/elonmusk/status/1599128577068650498</a></li>
<li><a href="https://www.nature.com/articles/d41586-023-02361-7">https://www.nature.com/articles/d41586-023-02361-7</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[我们如何使用 ChatGPT、Claude 和 Google Bard？]]></title>
            <link>https://yishulun.com/./src/posts/2023/19.html</link>
            <guid>https://yishulun.com/./src/posts/2023/19.html</guid>
            <pubDate>Tue, 31 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/image-20231031201628678.png" alt="image-20231031201628678"></p>
<h1>我们如何使用 ChatGPT、Claude 和 Google Bard？</h1>
<p>你好，今天聊一下如何使用 ChatGPT。</p>
<p>ChatGPT 很强大，且 ChatGPT 3.5 版本是公开与免费的，但并不是所有地方都可以使用它。有些地方甚至抵制使用。</p>
<p>2023 年 3 月 31 日，意大利个人数据保护局（Garante per la ProtezionedeiDatiPersonali）发表声明，宣布禁止意大利人使用 ChatGPT，同时限制 OpenAI 收集和处理意大利用户信息。意大利由此成为了第一个官方禁用 ChatGPT 的国家。</p>
<p>意大利作出这一项决定，主要理由是 ChatGPT 存在数据泄露、隐私窃取等安全隐患，目前 ChatGPT 的发展尚不成熟，出于对人民的善意保护，所以将 ChatGPT 禁止了。</p>
<p>大陆目前没有明确的法律规定禁止人们使用 ChatGPT。2023 年 2 月发布的《生成式人工智能服务管理办法（征求意见稿）》，只是限定了使用 ChatGPT 向他人提供人工智能服务的条件，主要有以下三条：</p>
<ul>
<li>体现社会主义核心价值观；</li>
<li>不得发布违反法律法规、有害于社会秩序、危害国家安全、损害公共利益的信息；</li>
<li>不得利用生成式人工智能生成虚假信息、误导公众。</li>
</ul>
<p>ChatGPT 是允许使用的。只是 ChatGPT 在大陆，如果使用者直接访问它的官网（<a href="https://chat.openai.com">https://chat.openai.com</a>），网站是打不开的。</p>
<p>怎么办？难道我们求学向道的心就此被阻止了吗？</p>
<p>显然不会，否则探长在这里也没有写这个专栏的意义了。在大陆，不仅有办法访问和使用 ChatGPT 3.5 版本，就是需要付费的 GPT-4 也是可以使用的。</p>
<h2>如何注册 ChatGPT？</h2>
<p>首先，我们需要解决网络访问的问题。</p>
<p>对这个问题，有人第一时间想到使用梯子。探长想说，不要使用梯子，墙内擅自使用梯子突破防火墙属于不规范甚至违法行为。</p>
<p>有人说，可以使用某类袋装 wifi 移动上网设备。此类设备并不是没有使用梯子，而是设备内隐含了梯子，这种行为也是不规范的。还有人推荐购买香港的 SIM 卡，在大陆漫游使用，但办理费用及 3GB 贵达 88 美金的漫游费用并不低，且办理流程麻烦，所以也不推荐。</p>
<p><img src="./assets/image-20231031154722559.png" alt="香港卡漫游资费"></p>
<p>最简单、最便宜的方式，同时也是合法的方式，是在腾讯云等云厂商平台上购买一台海外云主机。以腾讯云为例，一个美区包月云主机不到 50 元，并且流量不封顶。</p>
<p><img src="./assets/image-20231031155526336.png" alt="美区包月云主机不足50元"></p>
<p>购买云主机以后，使用微软远程桌面登录软件（Microsoft Remote Desktop Manager），既可以在 PC 电脑上登录云主机，也可以在手机上登录与使用。关于这个软件的相关教程，在网上都有，一搜便知，或者直接问 AI，它也能告诉你使用方法。</p>
<p>登录云主机以后，网络通了，接下来注册就简单了。</p>
<p>可以先注册一个 Gmail，然后用 Gmail 打开 ChatGPT 网站（<a href="https://chat.openai.com">https://chat.openai.com</a>）进行注册与登录。由于服务器在境外美区，网站都是可以直接访问的。你相当于是入侵到美国境内上网，ChatGPT对美国人民没有任何限制，注册与登录、使用都是自由的，你在美国操作也是自由的。</p>
<h2>购买 GPT-4 月租服务</h2>
<p>接下来再说一下 GPT-4 的付费购买。</p>
<p>GPT-4 的功能相比 ChatGPT 3.5 强太多了，但它是付费服务，每月需要支付 20 美元。不过这个费用是物超所值的。</p>
<p>那么，怎么购买呢？</p>
<p>由于 OpenAI 并没有将 ChatGPT 开放给中国大陆及香港地区，所以，即使我们想把这 20 美金付给人家，人家都不肯收。</p>
<p>这也是有办法解决的，我们求学问道的心是不可能就此被阻止的。</p>
<p>有人说，可以使用美区的苹果 Apple Store 帐号绑定美区的信用卡或 PayPal，在手机上支付。首先美区信用卡一般人不会有，其实 PayPal 帐号注册以后也要绑卡才能消费，没有合适的 MasterCard、Visa 或 American Express 信用卡也不行。这种方式比较麻烦，一般人不推荐。</p>
<p>还有人建议先办理一张香港汇丰的 HSBC 银行卡，或新加坡的 OCBC 银行卡，等卡办好以后再进行绑卡支付。这条道路是能走通的，但是资金成本和时间成本也不低，并非优选方式。</p>
<p>甚至还有人推荐在网上购买临时的手机号验证码及办理境外 Depay 或 vvacard 虚拟卡服务，这也是一种渠道，但如果没有经验，英文不通，一会是比特币，一会又是波场，很容易把自己搞疲惫。</p>
<p>我们就是想花钱购买一个 ChatGPT 的月租服务，然后使用它进行科学研究与学习，怎么搞这么复杂呢？</p>
<p>探长推荐的方式是使用礼品卡。直接在国内某宝上购买美区的礼品卡，然后登陆苹果官网给自己的美区帐号充值，接着打开苹果手机上的 ChatGPT App，选择为 GPT-4 付费升级，App 会自动选择手机上的礼品卡余额进行支付，整个过程不需要绑卡。</p>
<p>就是这么简单！在手机上购买月租成功以后，在 Web 上仍然可以使用。对部分读者唯一可能有困难的地方是，需要一部苹果手机，这不是什么难事，可以问朋友或同事临时借用一下。</p>
<p>对于使用礼品卡充值或使用信用卡充值的读者，探长额外有一个小提醒。在美区的 App Stoe 帐号设置中，有一个关于地区的选择，建议选择美国五大免税洲之一，这个免税洲是：俄勒冈（Oregon）、阿拉斯加（Alaska）、特拉华（Delaware）、蒙大拿（Montana）和新罕布什尔（New Hampshire）。</p>
<p>如果你选择了其它地区，在付款时苹果公司会收取一款消费税；如果你的礼品卡购买的储值金额恰好是 20 美金，那么你在支付时将因消费税而遭遇余额不足的尴尬。</p>
<h2>在 Bing 上使用 GPT-4</h2>
<p>除了在 OpenAI 官网使用 ChatGPT，还有其它方式使用 ChatGPT，甚至是收费的 GPT-4。</p>
<p>第一个推荐的免费平台是微软的 New Bing，直接访问这个微软网址（<a href="https://www.bing.com/new%EF%BC%89%EF%BC%8C%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E5%BE%AE%E8%BD%AF%E5%B8%90%E5%8F%B7%E7%84%B6%E5%90%8E%E7%99%BB%E5%BD%95%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E7%9A%84GPT-4%E6%9C%8D%E5%8A%A1%E4%BA%86%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%A4%A9%E7%84%B6%E6%9C%89%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%8A%A0%E6%8C%81%E3%80%82">https://www.bing.com/new），注册一个微软帐号然后登录，然后就可以使用免费的GPT-4服务了，并且天然有搜索功能加持。</a></p>
<p><img src="./assets/image-20231031163728574.png" alt="ChatGPT on Bing"></p>
<p>原来微软限制用户只能在自家的 Edge 浏览器上使用 New Bing，现在条件放宽了，在 Chrome 浏览器上也可以登录和使用。在 Bing 搜索中使用 GPT-4 是免费的，虽然微软对每个用户限定了每轮对话只能使用 20 次，每天总共限定使用 200 次，但这对于不常使用 AI 的用户来讲，已经足够用了。</p>
<p>用户还可以在手机上下载微软的 Skype 或 Bing App，在这两款 App 上也可以免费使用 GPT-4，<strong>并且没有次数限制</strong>。</p>
<p>微软作为 OpenAI 的大股东，曾在 2019 年 7 月向 OpenAI 投资了 10 亿美金，并且用自家的 Azure 云计算服务集群为 OpenAI 提供磅礴的算力，微软与 OpenAI 是合作关系，在 OpenAI 的火爆崛起中，微软被视为是传统搜索企业中最大的赢家。微软是率先在自家搜索引擎平台上免费提供 GPT-4 服务的，这一举措大大提升了 Bing 在搜索市场中的份额。</p>
<p>用户在微软与竞争对手的角逐过程中得到了充分的实惠，特别在 2023 年 3 月 22 日谷歌推出了 Google Bard 以后，微软更是加大了免费力度。2023 年 3 月 26 日微软宣布在 Bing App 上提供免费的 GPT-4 功能，且没有次数限制。</p>
<p>也就是说，用户只要下载承载了必应搜索功能的 Bing App，就可以免费使用 GPT-4 服务了。</p>
<h2>在 poe 上使用 ChatGPT</h2>
<p>poe（<a href="https://poe.com/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AAAI%E9%9B%86%E5%90%88%E5%B9%B3%E5%8F%B0%EF%BC%8C%E5%AE%83%E6%8A%8A%E5%B8%B8%E8%A7%81%E7%9A%84AI%E9%83%BD%E9%9B%86%E5%90%88%E5%9C%A8%E4%BA%86%E5%AE%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%B8%8A%EF%BC%8C%E4%BB%A5%E4%B8%80%E4%B8%AA%E4%BD%8E%E5%BB%89%E7%9A%84%E6%80%BB%E5%8C%85%E4%BB%B7%E6%A0%BC%E2%80%94%E2%80%94%E5%A4%A7%E7%BA%A6">https://poe.com/）是一个AI集合平台，它把常见的AI都集合在了它自己的平台之上，以一个低廉的总包价格——大约</a> 20 美金，让用户一站使用多款著名的 AI 工具，例如 GPT-4、Claude2、Midjourney 等。</p>
<p><img src="./assets/image-20231031171243959.png" alt="poe订阅面板"></p>
<p>**使用 poe 的好处是，在大陆它你可以直接访问与使用它，没有什么限制。**你不需要梯子，也不需要购买云主机。在 poe 上，ChatGPT 3.5 版本是免费的，只有你想使用更为强大的 GPT-4 时，才需要付费。</p>
<h2>使用 Claude</h2>
<p>Claude（<a href="https://claude.ai">https://claude.ai</a>）是与 ChatGPT 几乎齐名的另一款大语言模型（LLM，Large Language Model）AI，我们不得不提。它有两个版本，一个是默认的免费版本，另一个是收费的 Pro 版本，它的收费标准仍然是每月 20 美元。</p>
<p>Claude 对大陆是访问+注册同时开放的，没有任何限制；并且，它的收费限制与 ChatGPT 还不同，ChatGPT 的免费版本是低级的 3.5 版本，功能不比付费的 GPT-4 强大，而 Claude 无论是免费版本，还是收费版本，都是强大的最新的 Claude2 版本，它只是在使用次数和每日字节吞吐量上做了限制，功能是一样的。</p>
<p>这一点 Claude 与微软最初的 New Bing 的 Web 版本很像，只是限制使用次数，并不对自家可以提供的强大功力有所隐藏。</p>
<p>在 Claude 的网站上，平台对 Pro 版本的收费做了这样的解释：</p>
<blockquote>
<p>像 Claude2 这样强大的模型，需要消耗大量强大的计算机算力，尤其是在响应大型附件和长时间对话的时候。我们设置免费版本的使用限制，以及对 Pro 版本收费，是为了确保 Claude2 可以被更多人免费试用。</p>
</blockquote>
<p>这一理由非常正当，探长由衷赞同。</p>
<p>看到这里，有人可能有疑问，既然 ChatGPT 在 AI 大语言模型领域处于领先地位，我们只使用最先进的 GPT-4 就可以了，为什么这里还要介绍 Claude 呢？</p>
<p>Anthropic 是 Claude 的开发商，它是由一群来自 Google Brain、OpenAI 和 DeepMind 的人工智能工程师联合创立的。其中 Dario Amodei 是 Claude 的开发负责人，他是 OpenAI 的前研究副总裁，在他 2021 年 12 月从 OpenAI 离开时，OpenAI 在大语言模型 AI 上已经取得了突破性的进展，但是他的开发理念与上司发生了冲突，他不得不离开。</p>
<p>Dario Amodei 认为，人工智能安全是人工智能发展的关键，OpenAI 应该更加重视人工智能安全方面的研究和开发。然而，OpenAI 的首席执行官 Sam Altman 认为，OpenAI 应该把重点放在人工智能技术的开发上——至少当时应该如此，至于人工智能安全方面的研究，只能以后由其他组织来承担。</p>
<p>Dario Amodei 和他的一些同事一起离开了 OpenAI，创立了 Anthropic 公司，并在 2022 年 12 月对外发布了 Claude。Claude 并不比 ChatGPT 差，因为打造它的核心人员，与 ChatGPT 是同一班人马。</p>
<p>在实践中我们也发现，OpenAI 的 ChatGPT，即使是 GPT-4 版本，<strong>在处理小说故事创作等创意工作时，总是急于完成工作而让输出结果的结尾显得仓促草率</strong>，这让文字结果的结尾看起来不甚完美甚至糟糕，有一种甘蔗啃到了末梢突然不甜的感觉。而 Claude，尤其是 Claude2，擅长处理大文本、长问题，尤其在创意故事生成这类问题上，它的表现明显优于 GPT-4。</p>
<p>但我们并不能说 GPT-4 就比 Claude2 弱，就因此要放弃 GPT-4 而改用 Claude2，这也是不合适的。事实上 <strong>GPT-4 的 Data Analytics 功能非常强大，它用生成现实世界中可以真实运行的代码这一形式，规避或减轻了大语言模型 AI 的一个共同缺点——对不甚了解的问题一本正经地胡说八道</strong>。</p>
<p>出于同一班人马之手的两个强大 AI，它们只是在优化方向上有所不同，属于各有所长，我们各取所长即可，不必厚此薄彼。</p>
<p>读到这里，你有没有发现我为什么要特意介绍 poe ，虽然它只是一个 AI 集合，并不是一个独立而强大的 AI？因为对于 Claude2 Pro 和 GPT-4，分别购买需要 40 美元，在 poe 上购买，20 美元就够了。</p>
<h2>使用 Google Bard</h2>
<p>如果我们在 GPT-4 之外可以考虑使用 Claude，那么另外一款大语言模型 AI——Google Bard 也不得不考虑。</p>
<p>OpenAI 的 ChatGPT 之所以能够取得成功，这与 OpenAI 在获得了微软的投资以后，疯狂加大模型的参数量是分不开的。</p>
<p>2019 年 2 月，OpenAI 发布的 GPT-2 参数量仅为 15 亿，预训练数据量只有 40GB，能力表现平平。2019 年 7 月，OpenAI 拿到微软的 10 亿美金投资及庞大的 Azure 云计算资源，开始实施“大力出奇迹”的训练策略，2020 年 5 月发布的 GPT-3，其参数量达到了 1750 亿，预训练数据量达到了 45TB，效果开始突显。</p>
<p>2022 年 11 月 30 日，OpenAI 公开发布的 ChatGPT，也被称为 GPT-3.5，参数量和 GPT-3 一样，也是 1750 亿，但它是一个在 GPT-3 的基础上经过指令调优和 RLHF（人类反馈强化学习，Reinforcement Learning from Human Feedback）调优而得到的产品，效果可谓石破天惊。</p>
<p>2023 年 1 月，微软马上又向 OpenAI 追加了 100 亿投资，OpenAI 用这笔钱加快新模型的训练，同年 3 月 14 日 OpenAI 发布了 GPT-4，从而夯实了 OpenAI 在大语言模型领域的领先地位及“大力出奇迹”策略的正确性。</p>
<p>OpenAI 用 GPT-4 的通用智能彻底折服了众生，OpenAI 没有公开 GPT-4 的参数量，据权威人士推测，GPT-4 的模型参数量达到了惊人的 1.8 万亿。OpenAI 在尝到了“大力”带来的好处之后，以及微软及时送上的&quot;子弹&quot;，它是把“大力出奇迹”这一招发挥到了极致。</p>
<p>但是，我们要明白，GPT 是什么？是 Generative Pre-trained Transformer 的缩写，是基于 Transformer 的生成式预训练大语言模型，而 Transformer 又是什么？</p>
<p>Transformer 模型是一种用于序列到序列任务的神经网络架构，Transformer 模型的核心思想及主要贡献解决了是注意力机制 (Attention Mechanism)。注意力机制允许模型同时关注输入序列的不同位置，这使得模型能够更好地理解输入序列的语义，ChatGPT 之所以在加大模型参数量及训练语料数据量之后可以获得成功，与 Transformer 解决的注意力机制密不可分。</p>
<p>而 Transformer 正是谷歌大脑的 AI 研究人员于 2017 年 6 月，在论文《Attention is All You Need》中公开提出的。谷歌将自己在 NLP（自然语言处理，Natural Language Processing）领域的研究成果免费共享给了全世界，但却被它的学生 OpenAI 后来居上超越了自己，并且 OpenAI 还是与微软合作，让谷歌的搜索市场受到了强大的冲击。</p>
<p>论技术，谷歌本身就是发源地，论金钱和算力，谷歌也不缺。2023 年 3 月 22 日，谷歌发布了自己的大语言模型——Google Bard，经过几番更新，Google Bard 已经非常完善，支持连接最新的网络数据，与其搜索服务结合起来，共同为用户提供更加精准有用的问答服务。目前 Google Bard 已经完全支持中文，并且是完全免费的，大陆用户只需要一个 Gmail 帐号就可以使用。</p>
<p>根据 OpenAI 的技术报告，GPT-4 的训练数据截止日期是 2021 年 9 月，在此之后的信息 GPT-4 是不知道的。而 Google Bard，在实践中发现，它像海浪一样，与它的全网索引是结合起来的，数据是不断更新的，在涉及新闻及最新的消息查询时，Google Bard 是非常值得考虑的。</p>
<h2>回顾</h2>
<p>最后回顾一下。</p>
<p>我们有如下五种方式直接使用出色的大语言模型 AI 服务：</p>
<ul>
<li>一，使用 GPT-4，网站是<a href="https://chat.openai.com">https://chat.openai.com</a>，使用礼品卡充值付费；</li>
<li>二，在 New Bing 或 Bing App 上使用免费的 GPT-4；</li>
<li>三，在 AI 集合平台 poe 上使用 GPT-4 或 Claude2，网站是<a href="https://poe.com">https://poe.com</a>；</li>
<li>四，使用 Claude2，网站是<a href="https://claude.ai">https://claude.ai</a>；</li>
<li>五，使用 Google Bard，网址是<a href="https://bard.google.com">https://bard.google.com</a>。</li>
</ul>
<p><strong>参考链接</strong></p>
<ul>
<li><a href="https://support.anthropic.com/en/articles/8324991-about-claude-pro-usage">https://support.anthropic.com/en/articles/8324991-about-claude-pro-usage</a></li>
<li><a href="https://blog.infuseai.io/gpt-model-past-introduction-1e2558462e41">https://blog.infuseai.io/gpt-model-past-introduction-1e2558462e41</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/620494604">https://zhuanlan.zhihu.com/p/620494604</a></li>
<li><a href="https://arxiv.org/abs/1706.03762">https://arxiv.org/abs/1706.03762</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[中国之中产问题]]></title>
            <link>https://yishulun.com/./src/posts/2023/20.html</link>
            <guid>https://yishulun.com/./src/posts/2023/20.html</guid>
            <pubDate>Tue, 31 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>中国之中产问题</h1>
<h2>什么是中等收入陷阱？</h2>
<p>中等收入陷阱是指一个国家的年人均收入达到一定水平后，经济增长速度放缓或停滞，难以进入高收入国家行列的现象。</p>
<p>根据世界银行的标准，人均国民收入在1045美元（约6600元）或以下的国家属于低收入国家，介于1045美元到12696美元（约6600元~8万元）之间的是中等收入国家，高于12696美元的是高收入国家。</p>
<p>中等收入陷阱的原因有很多，包括：</p>
<ul>
<li>**劳动力成本上升：**随着经济发展，劳动力成本会上升，这会削弱企业的竞争力。</li>
<li>**产业升级困难：**从劳动密集型产业向技术密集型产业转型需要时间和资金，这对中等收入国家是一个挑战。</li>
<li>**制度不完善：**制度不完善会阻碍经济增长和创新。</li>
</ul>
<p>中等收入陷阱是一个全球性问题，许多发展中国家都面临着这个挑战，中国也不例外。</p>
<p><strong>参考链接</strong></p>
<ul>
<li>李强, 王昊. 2017. <a href="http://html.rhhz.net/society/html/20170307.htm">我国中产阶层的规模、结构问题与发展对策</a>. 社会, 37(3): 163-179. LI Qiang, WANG Hao. 2017. The Size, Structure, and Development Strategy of the Middle Class in China. Chinese Journal of Sociology(in Chinese Version), 37(3): 163-179.</li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[篆刻刻刀如何选择？不要选择哪些刻刀？]]></title>
            <link>https://yishulun.com/./src/posts/2023/17.html</link>
            <guid>https://yishulun.com/./src/posts/2023/17.html</guid>
            <pubDate>Sun, 29 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>篆刻刻刀如何选择？不要选择哪些刻刀？</h1>
<p>篆刻刻刀都是平刃刀，没有选择尖角或斜角的，因为篆刻是用 90 度的刀角刻印的，并不是用刀尖刻印的。</p>
<p>在了解如何选择刻刀之前，我们需要先细致看一下篆刻的分类。明确了以下这些分类，及不同分类的优缺点，才能彻底明白如何选择。</p>
<h2>依平刃宽度划分类别</h2>
<p>刻刀从平刃的宽度分，常用的有 10mm、8mm、6mm、4mm，一般都是偶数毫米长度，也有奇数的，但奇数刃宽的刻刀很少见。更大的有 12mm，更小的还有 3mm，再小的就没有了。</p>
<p>章料的印面大小一般有 3cm、2.5cm、2cm，一般都是使用 1/2 印面尺寸或更小的刻刀进行刻制。小刻刀可以刻制大印面，但大刻刀刻小印面总是捉刀见肘的。</p>
<p>一般 3cm 的大印面，用 12mm、10mm 的刻刀都可以；2.5cm 的印面，使用 10mm、8mm 的刻刀；2cm 的印面，就只能使用 6mm、4mm 的刻刀了。</p>
<p>至于 1.5cm 或 1cm 印面属于小印章，奏刀行刻不是很方便，就只能使用 4mm、3mm 的刻刀了。特别在刻制“力透纸背、大开大合、畅快淋漓”风格的白文印时，用小印面便不合适。章料石头的质地是颗粒均匀的，受力后出现毛边效果的颗粒大小基本也是一定的，印面太小的印章很难充分把想要表现的毛边效果表现出来。</p>
<h2>以刀刃材质划分类别</h2>
<p>从篆刻刻刀的材质来划分，又可以划分为锰钢、白钢、钨钢、纳米合金，它们的硬度也是按此次序依次长高的。锰钢刻刀从名字上看，它好像很硬，其实不然，它只是方便加工成型；一般只有初学者或刻木质印章的篆刻者，才建议选用锰钢刻刀。</p>
<p>白钢刻刀硬度在 6 左右，遇到材质不好或有砂粒的章料，很有可能崩刃；好在白钢这种材料很容易磨制，白钢刻刀崩刃后，稍微在 800 目的金刚磨盘上推磨一下，就又可以使用了。（注：后面有磨制方法。）</p>
<p>钨钢刻刀是刻制白文大印——尤其是刻制齐派单刀风格印章的首选，它的质地相对较硬，大概在 7 左右，一般的章料都能轻易驾驭。这种刻刀在出厂开刃后，基本不需要磨制，可以一直使用。</p>
<p>纳米刻刀的硬度大约在 8 以上，这种刻刀更没有必要磨刃了，一是因为它比较硬，很少能有章料能把它的刀刃崩坏；二是它之所以硬，就是因为表面涂了一层特制的材料，你把这个涂层磨掉了，它就变成普通的合金刻刀了。纳米刻刀很少见到有宽刃的，一般只有 6mm、4mm 这样的小尺寸。</p>
<h2>以开刃角度划分类别</h2>
<p>前面无论是以宽度划分，还是以刀刃材质划分，对刻刀来讲，都不是最重要的。</p>
<p>对于篆刻者来讲，最重要的是刻刀开刃的角度，并且，不同风格的篆刻者，都喜欢选择特定的角度。<strong>近现代以来，随着制钢工艺的提升与章料矿石开采的便利，刻刀的开刃角度越来越小，多位大师都喜欢使用小角度的刻刀。</strong></p>
<p>以角度划分，刻刀开刃角度主要有：40 度、30 度、22 或 23 度。下面一一介绍。</p>
<p><img src="assets/image-20231029180048282.png" alt="刻刀"></p>
<p>这是一种很常见，也是某宝上最常见的钨钢合金刻刀，杆身长约16cm。</p>
<p><img src="assets/image-20231029175940215.png" alt="刻刀"></p>
<p>开刃角度是 40 度，刃角看起来是钝钝的感觉。</p>
<p><img src="assets/image-20231029180217292.png" alt="刻刀"></p>
<p>这是纳米刻刀。</p>
<p><img src="assets/image-20231029180305795.png" alt="刻刀"></p>
<p>它的开刃角度也是 40 度。</p>
<p>关于开刃角度，如果不确定多少，可以用中学生用的量角器量一下，虽然量得不精确，但大概也能量出是多少度。</p>
<p><img src="assets/image-20231029180452677.png" alt="刻刀"></p>
<p>这是西泠印社出品的一套双坡度钨钢合金刻刀，上面那把是 6mm 的，下面那把是 8mm 的。这套刻刀初看无敌，可惜做工不太精细，刃开的也不是很光滑，顶端方杆也不圆润，十分硌手。价格也略高。</p>
<p><img src="assets/image-20231029180625027.png" alt="刻刀"></p>
<p>它们的开刃角度是 30 度。这种刻刀是双坡度，我们能看到它的刀刃坡度分了前后两级，我们说的开刃角度是与与刀刃最近的那个角度。这种 30 度刃角的双坡度刻刀，其实是优于单坡度 30 度刃角的刻刀的。</p>
<p><img src="assets/image-20231029180921837.png" alt="刻刀"></p>
<p>这是双坡度白钢刻刀，刃宽 10mm。</p>
<p><img src="assets/image-20231029181005665.png" alt="刻刀"></p>
<p>它的开刃角度也是 30 度，但价格比钨钢材质的便宜。</p>
<p><img src="assets/image-20231029181047296.png" alt="刻刀"></p>
<p>上面这把不是刻刀！它本是光杆的，被探长绕上了一层绒绳。</p>
<p><img src="assets/image-20231029182154058.png" alt="刻刀"></p>
<p>上面这些，它们是开山凿碑的钢钎！黄色部分是黄铜，上面的钎杆是白钢，下面的刀刃材质是钨钢。因为钨钢贵，白钢相对便宜，所以中间临近钎头的部分使用黄铜焊接了一下。这种钢钎杆身长达 21cm，而普通的篆刻刀杆身通常只有 16cm。</p>
<p><img src="assets/image-20231029182942617.png" alt="刻刀"></p>
<p>由于它是凿石碑的，它的开刃角度竟然有 50 度。只有开刃角度大，在凿石碑的时候才不容易崩刃。这种钢钎是不合适直接刻印的。</p>
<p>有人给探长寄了几把钎子，我把其中 8mm 的一把用金刚磨盘开了刃，如下所示，猜猜它的角度是多少？</p>
<p><img src="assets/image-20231029185810964.png" alt="刻刀"></p>
<p>23 度！刚刚好！</p>
<p>然后我还给它缠了一层牛皮绳·：</p>
<p><img src="assets/image-20231029190156981.png" alt="刻刀"></p>
<p>如图所示，上面那杆是 8mm 的钨钢钎，杆身 21cm 长。下面那把是仿制的昊昌硕 10mm 大刻刀，但仿制的不像，因为开刃角度竟然达到了 40 度。</p>
<p>以前西泠印社自己有售一套三把的昊昌硕钨钢合金篆刻刀，包含 10mm、8mm、6mm 三个刃宽尺寸，开刃角度只有 22 度，现在不卖了，原因不明。</p>
<p>现在市场上出现了仿制的西泠印社昊昌硕钨钢合金篆刻刀，其它方面都仿得像，包括收纳盒和焊接的黄色烂铜都极像，但可惜开刃角度太大了，竟然有 40 度，这一点不像。吴昌硕用的刻刀，是不可能这么钝的。</p>
<h2>吴昌硕与齐白石的刻刀</h2>
<p>在考虑如何选刻刀之前，我们先看一下近代大师们是怎么选择的。我们首选吴昌硕和齐白石两位大师。</p>
<p>吴昌硕自称缶翁，是近代集书画印大成于一身的大师，他早年穷苦，选用的刻刀并不是刻刀，而是自己使用钢钎磨制的刻刀，后来使用的是经匠人特制的缶翁刻刀。为了同时方便刻制涩刀的朱文印及斑驳的白文印，吴昌硕大师将刻刀的角度磨得非常薄，大概只有 22 度。</p>
<p><img src="assets/image-20231029193915002.png" alt="吴昌硕刻刀仿制"></p>
<p>在昊昌硕的时代，他选用的钢钎是白钢，现代冶金工艺进步了，有了更硬的钨钢，西泠印社曾经推出的吴昌硕防制刻刀，使用的便是上面白钢下面钨钢中间用黄铜焊接的合金刻刀，角度也特意磨成了 22 度，杆长 20cm 左右，是极大还原了现保存于上海吴昌硕纪念馆的两把刻刀及日本篆刻家小林斗庵收藏的一把刻刀，共三把。可惜现在不售了，否则大约300块的售价也是值得购买的。</p>
<p>另一位大师齐白石，中年学习治印，32 岁开始用修脚刀刻第一枚印章。修脚刀能有多大的角度？我们可以想象，薄刃锋利，刀刃角度甚至都不大于 20 度，大概只有 15 度左右。</p>
<p><img src="assets/image-20231029195539946.png" alt="修脚刀"></p>
<p>齐白石大师在治印时擅用单刀冲刻，这种刀法要求刻刀的刀刃绝不能厚，厚了便很难冲刻时爽利，也很难崩出毛边效果。</p>
<h2>我们如何选择刻刀？</h2>
<p>如何选择篆刻刀是篆刻者自己的自由，每个人爱好不同，选择也不一样。</p>
<p>喜欢刻细朱文花鸟篆的朋友，一般会选 6mm 的钨钢或纳米合金刻刀。喜欢刻 2.5cm 以上大印面的朋友，章料选上等轻脆的青田或老挝石，一般选 10mm 的白刚刻刀。</p>
<p>下面探长说一下自己的选择，以及对初学篆刻者的选择建议。</p>
<p>初学者两把刻刀就足够了：</p>
<p>1）一把 8mm 或 10mm 的大刀，用于刻白文印；</p>
<p>2）另一把 6mm 或 4mm 的钨钢小刀，用于刻细朱文印。并不是大刀刻不了朱文印，大刀也可以刻，只是锋利的小刀在处理细朱文笔画时更能得心应手。</p>
<p>开刃角度要选择 22 度或 23 度。如果角度达不到要求，可以自己用金刚磨盘磨制。（注：后面会介绍磨制方法。）</p>
<p>刻刀杆身长度优先选择 20cm 左右，杆身长，刻刀更重，奏刀时更稳。</p>
<p>材质优先选择钨钢合金，或白钢。</p>
<p>如果在网上购买现成的篆刻刀，怎么选择呢？</p>
<p>第一种选择是西泠印社的白钢特制篆刻刀。</p>
<p>包括 8mm、6mm 两把，刃角 30 度，稍微磨一下就可以达到 22 度，不磨也可以使用。价格在 120 左右。</p>
<p><img src="assets/image-20231029200653509.png" alt="刻刀"></p>
<p>第二种选择是铜杆钨钢篆刻刀套装。</p>
<p>有多家店铺可以选择，包括 10mm、8mm、6mm 三把，刃角 30 度。价格在 200 左右。</p>
<p><img src="assets/image-20231029200916309.png" alt="双坡度刻刀"></p>
<p>这是现代篆刻大师韩天衡喜用的双坡度刻刀，杆身是纯铜的，不会生锈，刀刃是在铜杆上嵌入的钨钢材质。如果角度不满足满足，也可以磨制，并且铜的材质相比钨钢会更容易磨制一些。</p>
<p>第三种选择是某宝上匠人自制的白钢或钨钢刻刀。</p>
<p>例如下面这款 6mm、刃度 22 度的双坡度白钢刻刀，长度 16cm 左右，价格仅 30 左右，已经相当实惠了，还是包邮的。</p>
<p><img src="assets/image-20231029201907115.png" alt="双坡度刻刀"></p>
<p>匠人自制由于没有品牌溢价，价格上都比大店铺便宜。</p>
<p>下面这种刃角仅 10 度的平头 10mm 宽刀，价格仅 40 左右。</p>
<p><img src="assets/image-20231029205815252.png" alt="10mm刻刀"></p>
<p>下面是 8mm 的薄刃刻刀，价格与 10mm 的差不多。</p>
<p><img src="assets/image-20231029202642650.png" alt="8mm刻刀"></p>
<h2>不要选择什么样的刻刀？</h2>
<p>下面说一下哪些篆刻刀不要选择。</p>
<p>首先，圆头刻刀不要选择！</p>
<p><img src="assets/image-20231029202809762.png" alt="不要购买的刻刀"></p>
<p>刻刀治印用的是刀角，圆角刻刀没有刀角怎么刻印？</p>
<p>刃面不平的不要选择！</p>
<p><img src="assets/image-20231029202915256.png" alt="不要购买的刻刀"></p>
<p>刻刀如果需要磨制，不平的或有弧度的刃面并不方便固定角度。此处，从加重刻刀刀身的稳定性考虑，也不合适在刀头上减少重量。</p>
<p>不要迷信套装型号齐全！</p>
<p><img src="assets/image-20231029203123778.png" alt="不要购买的刻刀"></p>
<p>篆刻刀只需要双平头、双面对称的刻刀，什么单平头、单斜头、圆尖头统统不需要。型号再全也没有用，上架这种商品的一看就是不懂篆刻的商家，买家也只能是不懂篆刻的初学者。</p>
<p>太软材质的，兼具木刻功能的刻刀，尤其是木柄刻刀不要选择！</p>
<p><img src="assets/image-20231029203407361.png" alt="不要购买的刻刀"></p>
<p>锰钢材质的刻刀是软质刻刀，一般也不要选择。至少选择白钢，优先选择钨钢材质的。</p>
<p>进口的、价格太贵的不要买！</p>
<p><img src="assets/image-20231029203639878.png" alt="不要购买的刻刀"></p>
<p>刻刀材质无非就是那几种，基本的白钢材质就能满足需求，国外的月亮并不比国内的更圆。在选择时，关键是刃角与刻刀的舒服度、顺手度，加个“进口”二字就多付上百块没有必要。</p>
<p>太贵的手工锻打刻刀，也没有必要购买！</p>
<p><img src="assets/image-20231029204108318.png" alt="不要购买的刻刀"></p>
<p>这类刻刀，完全可以购买 14 块钱的钨钢钎子，外加 5 块钱的金刚磨盘和两个小时的时间，自己磨制一把缶翁遗响仿制刻刀。</p>
<h2>如何自己磨制刻刀？</h2>
<p>在磨制之前，首先明确一下工具，你需要一个金刚磨盘，和一个刻刀定角器。</p>
<p>为什么一定要使用金刚磨盘？</p>
<p>因为刻刀太硬了，特别是钨钢材质的，你用油石磨吧，磨一天也磨不下多少，最后还可能把刻刀磨坏了，因为石头太软了。</p>
<p>金刚磨盘是表面附着了一层金刚石沙粒的磨盘，表面硬度并不比钨钢差，一个金刚磨盘可以重复使用很久。</p>
<p>另外，除了金刚磨盘，还需要一个定角器。如下所示，这就是一个定角器。</p>
<p><img src="assets/image-20231029204820333.png" alt="金刚磨盘与定角器"></p>
<p>定角器将刻刀固定在支架上，两边是两个可以自由滑动的轮子。在磨制的时候，向下压，前后平推，这样磨完以后，才容易保证两面的刃面是平整对称的。对于没有开刃的刻刀，或者钎子，如果没有定角器，根本是没有办法磨制的。</p>
<p>在购买刻刀的时候，如果有方杆的，就不要选择圆杆的。为什么？圆杆不是更不易硌手吗？</p>
<p>圆杆在磨制的时候不方便固定角度，如果是方杆，上面方向则很容易确定。至于硌手，根本不是问题，刀杆缠一段牛皮绳就可以了。</p>
<h2>回顾</h2>
<p>最后回顾一下。</p>
<p>究竟如何选择刻刀呢？如果你有时间，有金刚磨盘，有定角器，大概以成本 50 块，外加半天的时间，就可以得到三把分别是 10mm、8mm、6mm 的一套钨钢刻刀，刃角开 22 度、杆身长 20cm 左右。再花 10 块钱，买一些牛皮绳子缠一下，就更完美了。</p>
<p>如果你没有时间或者不想麻烦，直接在某宝上选择刃宽 6mm、刃角 22 度的白刚刻刀就可以，大概 30 块搞定。6mm 宽的刻刀，刻大白文勉强也可以，刻朱文也可以，甚至有自媒体博主说，他只用 6mm 的刻刀治印，可见这样一把尺寸的刻刀也是可以满足一般需足的。</p>
<p>如果想拥有一套相对完备的工具，一般篆刻两枚刻刀就足够了：一枚 22 度刃角的 6mm 刃宽的钨钢刻刀，和一枚同刃角的 10mm 刃宽的白钢刻刀。刀身最长 21 cm左右，前重后轻，重力放在离刀刃近的地方。</p>
<h2>10/30补充，章料的选择</h2>
<p>附一张刻刀与常见章料的硬度对比图：</p>
<p><img src="./assets/image-20231030143719609.png" alt="image-20231030143719609"></p>
<p>青田石的摩尔硬度最高只有1.5，且质地清脆，是非常适合篆刻的。青田中的封门青又不乏精品，是章料中的上选。其次可用的选择是寿山石、巴林石、较软的鸡血石等，但这类章料产量不多，市场上不是很多见，少数精品价格也不扉，不适合购买。各种冻石因为质地软糯，是非常不适合刻单刀爽利风格的白文印的，刻细朱文印也不适合，冻石是章料中的末选。</p>
<p>近年来国外章料在电商兴起的浪潮下开始大量涌入国内，尤其是离我国边境较近的老挝盛产的老挝石，颜色和质地像之前国内的寿山芙蓉石，也受到了不少篆刻者的喜爱。有人认为，只有传统的四大国石————寿山石、青田石、巴林石、鸡血石，才是正宗的章料，使用它们刻出来的印章才有充足的金石味道，所以坚持抵制、不使用外来石。</p>
<p>没有这种讲究！篆刻只有中国及日本比较风行，其它国家有石头，但不篆刻，他们的章料正好为我们所用。国内的石头是石头，国外的石头也是石头，并没有正统不正统之分；况且从保护环境的角度讲，开采国外他们不使用的石头，还有利于国内保护青山绿水。</p>
<p>**从章料的材质选择上看，只要质地均匀、没有砂丁、硬度在1～4之间就是不错的选择。**如果追求收藏价格，颜色还可以再要求均匀一些、纯净一些，甚至有一些天然的好看的纹路。</p>
<p>目前在市场销售的，以浙江青田石、浙江萧山红、老挝红花石最为流行，其中青田石、老挝石还不乏精品出现。这三种章料是篆刻爱好者在当下最好的选择。不要选择一些质地不均甚至含有砂丁，质地软糯或质地太硬的石头，例如内蒙巴林石、东北辽宁及青海、甘肃的冻石、四川雅安绿（质地太硬）等章料。</p>
<p>在青田石、萧山红、老挝石的选择上，也不要选择太便宜的石头，太便宜的石头因为质地不均匀所以走刀，偶尔有砂丁的还容易将刻刀崩坏。2.5cm 见方，单枚价格在10元以上的青田石一般都可以选用，15元以上的是稍好的。</p>
<p>至于印钮，没有必要选择，附加额外工艺的章料必定有所加价。对于青田石，圆顶素章，打磨光滑精细就是很不错的选择。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[篆刻简易刀法总结，包括刻印面与刻边款的刀]]></title>
            <link>https://yishulun.com/./src/posts/2023/15.html</link>
            <guid>https://yishulun.com/./src/posts/2023/15.html</guid>
            <pubDate>Fri, 27 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="./assets/image-20231027121250938.png" alt="简易篆刻刀法"></p>
<h1>篆刻简易刀法总结，包括刻印面与刻边款的刀</h1>
<blockquote>
<p>印分朱白，皆是刻一道沟。刀分西种，冲与切，无论是哪一种，皆是刻沟之上边沿。</p>
</blockquote>
<p>印主要分朱文印、白文印，这一点大家都清楚，即使不是刻字的人也明白这一点。但不论朱文、白文，其实只是我们作为观众的感观不同，对篆刻者，在刻字时，都是在印面上刻上一道道沟，是这些凸凹不平的沟壑表现出了我们看到的朱文与白文。</p>
<h2>始终刻上边沿的简易刀法</h2>
<p>一般常说篆刻有三法：篆法、章法与刀法。</p>
<p>篆法就是字的写法，篆刻一般是以秦汉的篆书入印的，并不是今天常用的简体字或繁体字。章法是印面上字的排列与布局。刀法是三者中最重要的，但也不外乎冲、切两种。</p>
<p>细说一下刀法吧。最简单的刻法，无论是冲与切，都是在笔画————也就是那印面上一道道沟的上边沿刻。</p>
<p>具体来讲，先说白文印。如下图所示，白色的部分是要从印面上刻掉的，箭头是冲切奏刀的方向，一圈逆时针走下来，这个笔画就完成了。</p>
<p><img src="./assets/image-20231027124854544.png" alt="image-20231027124854544"></p>
<p>朱文刻法类似，也是一直刻上边沿。如下图所示，中间的红色部分是要保留在印面上的，围绕着这个笔画顺时针走一圈，笔画也就完成了。</p>
<p><img src="./assets/image-20231027124946294.png" alt="image-20231027124946294"></p>
<p>上面的上边沿刻法，不分冲与切————无论冲刀与切刀，都是沿沟画的上边沿刻制。且在冲刀时，始终使用的是刻刀的内刀角。</p>
<p>这里出现了三个概念：冲、切、内刀角，可能有读者不明白，下面分别解释一下。</p>
<h2>冲刀、切刀、内外刀角的概念</h2>
<p>如下图所示，左侧即是冲刀。由于图是二维的，没有办法展示立体；如果是视频，我们应该同时能看到，刻刀着印的点是刻刀的内刀角。</p>
<p>右侧是切刀。切刀也是内刀角先着印面，然后用力向前压。</p>
<p><img src="./assets/F9XvG6oagAA7yT_.png" alt="Image"></p>
<p>下面再解释内、外刀角。</p>
<p>对于刻刀，无论是右手持刀，还是左手持刀，一般情况下都是在胸前平放、倾斜的状态，刻刀的两个刀角有一个是离我们身体近的，另一个是稍远的。近的便是内刀角，远的便是外刀角。</p>
<p>在简刀刀法中，在刻印的时候，我们可以始终使用内刀角刻印。</p>
<h2>锥画沙、屋漏痕之毛边效果</h2>
<p>下面说一下毛边效果是怎么产生的。</p>
<p>这种效果在齐白石大师的白文印，或吴昌硕大师的朱文印里都经常能看到。基本上是一种一边齐、一边毛的感觉。</p>
<p><img src="./assets/F9Xw_fEbIAADTWd.png" alt="Image"></p>
<p>这种效果，如果是白文印，可以用冲或切的方式达到。冲的时候，毛边是在靠近身体的一侧产生的。切不容易出毛边，需要切的时候力量稍大一些，同时也需要章料的配合，软的章料不容易出效果，青田等质地较脆的章料容易出毛边效果。</p>
<p>有时候为了让毛边笔画粗一些，还可以双切，或者先冲后切，组合起来，笔画看起来就粗了。</p>
<p>上面说的始终在沟的上边沿刻笔画，是一种最简单、最方便记忆的方法，但并不是唯一的方法。在大师眼里，是没有什么规距的，上边沿、下边沿都是可以刻的。</p>
<p>例如，如下图所示，在来楚生的这枚印上，箭头所示那种笔画被侵蚀的“锥画沙、屋漏痕”朱文效果，是反边来，沿沟的下边沿刻制的。在吴昌硕的很多朱文印里，时常也能看到这种效果。</p>
<p><img src="./assets/F9XyNMfbAAAL3IW.png" alt="Image"></p>
<p>非独上边沿、下边沿的规定可以打破，内外边角的规定也可以打破。还是那句话，在大师眼里，着实是没有什么规矩的。</p>
<p>我们始终使用内边角刻印，是在刻印面时的一般规定，在刻边款时，有时候便需要使用外边角了。</p>
<h2>如何刻边款？</h2>
<p>边款的刻制，刀法并不算复杂，在冲与切的总刀法基础之上，只要练会基本的点、横、撇、竖、捺、转折、浮鹅钩，所有的字都会刻了。</p>
<p>下面分别看这几种基本的笔画如何刻制。</p>
<h3>1）边款笔画点的刻制</h3>
<p>分两种，如下图所示，左侧是内刀角向上冲，右侧是外刀角向上冲。两种都可以，具体在实践中用哪种，取决于篆法、章法的需要，以及篆刻者的心意。</p>
<p><img src="./assets/F9X1MxKaYAAH1Pb.jpeg" alt="点"></p>
<h3>2）横的刻制</h3>
<p>可能你已经发现了，边款笔画的刻制方向总是与我们在纸面上书写的方向是相反的，至少是不同的。</p>
<p>上面讲的点，我们在纸上书写时，一般是自上向下，但在边刻款时，点画却是自上向上冲的。</p>
<p>横与点类似。横在纸面上书写时是从左向右，在刻边款时，却是自右向左，并且是使用外边角自右向左切刻的。</p>
<p>短横，切一下即可；长横，切一下可能不够，便自右向左边切、边移动、边按压，大要两三下就能刻出一个较长的笔画。当然这也取决于用的刻画是多少毫米的，10 毫米的刻刀全切，切一下不但够，而且可能还多了。</p>
<p><img src="./assets/F9X1iV8bsAA_DK4.png" alt="横"></p>
<h3>3）撇的刻制</h3>
<p>在边款中，撇有两种，第一种其实是提，有短的、有长的。刻的时候，是内刀角入印，从左下向右上方向切压。</p>
<p>第二种，是一种是自左下向右上冲，也是使用内边角。这种切法，在下面的横折笔画中也能看到。</p>
<p><img src="./assets/F9X3AgHaYAAZe6R.png" alt="撇"></p>
<h3>4）竖（与竖钩）的刻制</h3>
<p>竖的刻制就相对简单了，内刀角入印，从下向上推，推到尽头，顺时针拧一下。</p>
<p>如果是竖钩，刻完上一步，在底部末端以内刀角入印，从右下向左上挤一下。或者把印顺时针稍转一下，以右刀角入印，从左下向右上————或者说自右向左挤一下。</p>
<p>挤的这一步，是为了刻画出钩。边款笔画为了突出金石味，笔画没有连笔的，有转折的笔画也是通过点、线最基本的笔画组合而成的。</p>
<p><img src="./assets/F9acuekbUAAWr8o.jpeg" alt="竖与竖钩"></p>
<h3>5）捺的刻画</h3>
<p>捺不一定是捺，在表现形式上也可能只是一个点。逆时针转动一下石头，以外刀角入印，可以切一个简单的点，也可以切一个长长的横当点。</p>
<p>如果需要长笔画的尖，在完成上一步以后，可以用内刀角入印，向上挤出一个点，补的是这个笔画的尖。</p>
<p>边款刻画，对于点，有内刀角、外刀角的点，其中又以内刀角用的居多。对于横，只有外刀角的横，没有内刀角的横，即使充当捺的横，也是外刀角。</p>
<p><img src="./assets/F9aeerGasAA-wNo.jpeg" alt="捺"></p>
<h3>6）横折的刻制（一）</h3>
<p>这是最复杂、最丰富的边款笔画了。大体上有左折、右折两种形式。</p>
<p>先看左折，先刻一横、再向左折。刻横时，是外刀角入印，从右向左切，在末端处，为了实现一个魏碑笔画起笔向上翻转的效果，还可以以内刀角入印，向左上方挤出，添加一个顿笔的起始效果。</p>
<p>横刻完后，第二步是刻撇，与单独的长撇类似，以内刀角入印，从左下向右上冲，冲到横的末端，顺时针拧一下，将两个笔画接起来。</p>
<p>关于拧字诀，你可能也发现了，一般都是内刀角顺时针拧，外刀角逆时针拧。对吗？不全是，内刀角是顺时针拧，但外刀角只有在向上挤点的时候向上挤一下，使点画加粗，并没有显著地拧；还有，在刻横的时候，也是从来不拧的。</p>
<p><img src="./assets/F9agaZIasAAs9Pd.jpeg" alt="横折一"></p>
<h3>7）横折的刻制（二）</h3>
<p>接一来看右折，先竖刻一画，再向右折。</p>
<p>竖的刻制与前面的竖一样，内刀角入印，自下向上冲。竖刻完后，顺时针转一下印面，再以外刀角入印，从右向左切出一个横，充当右横折的第二笔。</p>
<p>最后一步，如果需要，以外刀角入印，向上挤出一个小小的钩来。如果需要长一点的钩，也可以内刀角入印，竖着切出一个钩来。一般不要长钩，在边款中，长钩并不比钝钝的小短钩有感觉。</p>
<p><img src="./assets/F9ah4_oa8AAYwhN.jpeg" alt="横折二"></p>
<h3>8）浮鹅钩</h3>
<p>这个笔画也是由三部分组成，先是内刀角入印，从下向上冲出一条竖，冲到末端挤一下。</p>
<p>这条竖在向上冲的时候，可以自左向右微微转出一个弧度来。</p>
<p>然后是第二部分，外刀角入印，自右向左横切，切出一横，短一些、长一些都可以，看需要。与第一部分接不接得上也没有关系，有时候似连非连更有意境。</p>
<p>最后一步，外刀角入印，在第二部分笔画的开端处，挤出一个向上的小钩来。</p>
<p><img src="./assets/F9ajpFrb0AADgg7.jpeg" alt="浮鹅钩"></p>
<h2>回顾</h2>
<p>最后回顾一下。</p>
<p>刻印面重篆法、章法，刻边款重刀法。相信你也发现了，刻边款的刀法比刻印面复杂一些。</p>
<p>刻印面，一般情况下，始终是内刀角入印，在沟的上边沿或冲或切。方向不对，就转一下印面。转印面很重要，刻一枚印会经常转动印面。</p>
<p>刻边款，主要是用简单的点、线笔画组合笔画。奏刀方向在大多数情况下，与纸上行笔的方向都是相反的。用笔写字时，横是自左向右，奏刀刻边款却是自右向左。类似的还有，竖是自下向上冲，撇也是。</p>
<p>刻边款，整体上重小字、大笔画，用小钩、大断连，这样刻出来才比较有意境。当然，在刻之前，字的篆法、章法也很重要。刻边款不用篆书，有时候也称写法，说篆法。</p>
<p>以上便是简易的金石味篆刻法。刀法与要实现的效果是相关的，如果我们要实现简洁、快意的金石效果，无论是印面还是边款，用上面的简易篆刻刀法便可以了。</p>
<p>如果我们想实现婉转的细朱文，或者在刻边款时使用草书，刻出连笔效果，使用上面的简易篆刻刀法便不合适了。刀法本质上也是为篆法服务的。</p>
<h2>现场演示补充</h2>
<p>附南华大学陈书墩老师的篆刻教学示范：</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/QHtUJr_yDds?si=iESD70TefvPN5mWG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>陈老师刻的是白文印，使用蝉翼纸+陈墨转印上石，演示了冲刀、切刀的基本技法。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[他的生平，及什么是克强经济学与克强指数等]]></title>
            <link>https://yishulun.com/./src/posts/2023/16.html</link>
            <guid>https://yishulun.com/./src/posts/2023/16.html</guid>
            <pubDate>Fri, 27 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>他的生平，及什么是克强经济学与克强指数等</h1>
<blockquote>
<p>他对自己提出的理想政策并非不知有哪些推进困难，他可是一向被称作经济政策的务实主义者，就像他在给他的大学同学写的临别赠言那样，既仰望星空，又脚踏实地。</p>
<p>注：以下内容均来源于公开资料。前面是生平介绍，后面是关于克强经济学等概念的介绍。</p>
</blockquote>
<p>2015 年 3 月 5 日，十二届全国人大三次会议在北京开幕。他在政府工作报告中坦言，政府工作还存在不足，有些政策措施落实不到位，“少数政府机关工作人员乱作为，一些腐败问题触目惊心。”国务院总理他 5 日在作政府工作报告时说，“<strong>有的为官不为，在其位不谋其政，该办的事不办。我们要直面问题，安不忘危，治不忘乱，勇于担当，不辱使命，不负人民重托。</strong>”</p>
<h2>他的生平</h2>
<p>他在安徽合肥出生并长大，早年曾是安徽凤阳县大庙公社东陵大队的下乡插队知识青年，担任过生产队的党支部书记。1970 年代末高考制度恢复后，考入北京大学法律系学习，毕业后留在校团委工作，并在不久之后进入中国共青团中央系统任职，后于 1993 年出任共青团中央书记处第一书记。</p>
<p>1997 年后，陆续在河南、辽宁两省担任党政主要领导职务。2007 年 10 月，在中共十七届一中全会上跃级当选为中央政治局常委，为当时政治局常委会中的最年轻成员。2008 年 3 月，当选为排名第一的国务院副总理，兼任党组副书记。</p>
<p>2012 年 11 月及 2017 年 10 月相继在中共十八届一中全会、中共十九届一中全会上连任中央政治局常委。2013 年 3 月，在十二届全国人大一次会议上当选为国务院总理，并于 2018 年 3 月的十三届全国人大一次会议上获得连任，至 2023 年 3 月卸任。</p>
<h2>大学毕业时给同学的赠言书法</h2>
<p>以下内容是他在大学毕业时写给同学的赠言：纯真而不欠闻达，善良而不失坚强，把生命高举在尘俗之上，又溶化于社会之中，这应当是我们这一代的共同追求。</p>
<p><img src="./assets/image-20231027182141383.png" alt="image-20231027182141383"></p>
<p>现在喜欢玩手机、电脑的少年学生，有几人写得出这样的钢笔书法。恐怕一直使用签字笔，一直没有用过钢笔的人都大有人在。</p>
<h2>英语很好</h2>
<p>他是 1977 年中国恢复高考后第一批北京大学法律系的学生，在北大上学期间，师从厉以宁等学者，曾任北大学生会常代会会长，毕业后在职获得北大经济学博士学位。</p>
<p>他 22 岁走进北大校门，对于他这代基础教育断档的人，英语基础都很糟糕，有的同学怕麻烦申请了免修，但他非常勤奋，做了个小本，正面是一个英语单词，反面是中文解释，苦记硬背。“<strong>走在路上在背，上食堂吃饭排队时在背，外出坐公共汽车等车时也在背。</strong>”</p>
<p>他的英语水平很快提升，大三以后能使用流利的英语与外国人交流，可以翻译英文原版的法律文献，曾翻译《法律的正当程序》等书。</p>
<p><img src="./assets/image-20231027181053395.png" alt="《法律的正当程序》"></p>
<p>1980 年 5 月，同学何勤华在一则日记中写道：“克强同学真不简单，他翻译的《英国宪法资料》已被全国人大常委会法制委员会录用，共 1 万多字。”</p>
<h2>他的论文著作</h2>
<ul>
<li>《农村工业化：结构转换中的选择》</li>
</ul>
<p>他的硕士论文是在肖灼基教授指导下完成的《农村工业化：结构转换中的选择》，分析说中国农村工业化的兴起与发展，使中国走上了独特的工业化道路，促成国民经济呈现出崭新的局面。</p>
<p>该论文并收入与他的博士导师厉以宁教授以及孟晓苏、李源潮合著的《走向繁荣的战略选择》（经济日报出版社 1991 年初版，2013 年再版）书中作为第七章。</p>
<ul>
<li>《论我国经济的三元结构》</li>
</ul>
<p>他攻读博士学位在《中国社会科学》1991 年第 3 期发表《论我国经济的三元结构》，论文中认为，中国传统经济中二元结构的特点, 决定了中国不能走从传统农业社会直接转变为现代工业社会的发展道路, 而必须经历一个农业部门、农村工业部门与城市工业部门并存的三元结构时期。</p>
<p>该论文获得中国经济学最高奖项——孙冶方经济科学奖（第七届-1996 年-论文奖）。厉以宁教授认为论文经得起考验。</p>
<h2>主政河南关心底层疾苦</h2>
<p>1998 年 6 月，他离开北京转任河南省省长，开始了在河南为期 7 年的工作，期间河南省的经济总量跃居至全国第 5 位，居中西部省份之首。基于河南省城镇化落后，导致产业结构升级缓慢，现代农业发展困难重重的现实，2002 年 12 月 24 日，<strong>他在河南提出加快工业化、城镇化、推进农业现代化</strong>，从而把更多的富余劳动力从土地上解放出来。2003 年 3 月他提出“中原崛起”概念，在他的领导和推动下，协调发展大中小城市、规划建设郑东新区、谋划中原城市群、振兴小城镇等一系列举措相继展开。</p>
<p>二十世纪九十年代至二十一世纪初年时任河南主要官员推动的“血浆经济”对部分河南人民造成重大伤害，致使艾滋病疫情泛滥，后来他担任中共河南省委书记兼河南省人大常委会主任，组织力量开展了中国首次省级艾滋病情普查，组织省直部门对口帮扶重灾村，并确立了患者“四有一不”的权益机制，使疫情蔓延得以遏制。</p>
<p>下面开始解释相关概念。</p>
<h2>什么是克强经济学？</h2>
<p>“克强经济学”是外资机构巴克莱资本公司于公元 2013 年 6 月底提出的概念，予以指称他为中国制定的经济增长计划。</p>
<p>巴克莱所提的“克强经济学”仅系一个初步的概念，是经济思路和经济政策的取向，并不是一个完整的经济政策体系。“克强经济学”概念核心包含三个主要的构成部分，也被解读为“克强经济学”的三大支柱。</p>
<p>这三部分核心内容概括如下：</p>
<p>一、政府不推出刺激经济的政策，而是通过逐步缩减国家主导的投资行为；</p>
<p>二、去杠杆化，以大幅削减债务，降低借贷与产出比；</p>
<p>三、推行经济结构改革，以短痛换取长期的可持续发展。</p>
<h2>克强经济学的提出背景</h2>
<p>经历了 21 世纪头 10 年的高速发展，中国经济的发展遇到了一个坎。外界普遍认为，中国经济面临巨大的下行压力，而压力的来源包括<strong>投资与出口导向的增长模式不可持续、劳动力的人口红利接近枯竭，以及产业结构长期落后</strong>等。改革已进入深水区，要想继续发展，必须实行新的改革措施，以转变经济增长方式，保持经济长期增长的活力。</p>
<h2>如何理解“刺激经济的政策”？</h2>
<p>不出台刺激措施，也是指一般情况下政府不会出台刺激措施，政府在利益集团的压力下要能“顶得起”、“扛得住”，但当经济雪崩式下滑时，或者市场情绪极度悲观时，政府当然不会放手不管。以前段时间银行间钱荒的而言，央行确实是一反常态地放言不会随便向市场注入流动性。但当股市重挫，人心惶惶时，央行又出来温和表态，稳定市场信心。</p>
<p>又比如投资，在任何经济体，投资永远都是拉动经济增长的重要一环，新型城镇化其实也是刺激投资的政策。但重要的是，克强经济学更加重视投资的方向和投资的效率。**城镇化绝不是大城市基础上的“床上叠床”、“屋上架屋”，而是发展小城镇和小城市，放开户籍管制，让农民也享受到市民待遇和社会公共服务。**改革收入分配制度，提高老百姓收入水平。这种投资，就和重视民生以及促进消费紧密联系在一起，是思路完全不同的城镇化。</p>
<h2>如何理解“推行经济结构改革”，加强改革开放？</h2>
<p>以上海自贸区为例，可以说，上海自贸区是他经济学的试验田。上海自贸区初期的侧重点主要是在政府权力收缩、投资领域放宽、贸易便利化方面。上海自贸区改革的重点和要在于以下几点：</p>
<p>1、开放外资更进一步进入服务贸易领域（原来主要是制造贸易）；</p>
<p>2、减少对外资合同章程审批，改为备案制，为全国推广做准备；</p>
<p>3、提高通关便利化，缩减区内海关查验；</p>
<p>4、实行负面清单，减少细化行业管制；</p>
<p>5、创新航运中心产品，力推上海成为全球航运中心。</p>
<p>与克强经济学密切相关的一个词汇是克强指数。</p>
<h2>什么是克强指数？</h2>
<p>这个名词起始于 2010 年。</p>
<p>克强指数即他指数，是以中华人民共和国国务院总理他命名的衡量经济发展状况的指标。 最早由英国政经杂志《经济学人》于 2010 年提出，源于他在 2007 年任职中共辽宁省委书记时，向当时来访的美国驻华大使雷德解释，用于分析当地经济状况的数据。</p>
<p><img src="./assets/image-20231027172909577.png" alt="sc.macromicro.me"></p>
<p>注：截图来源<a href="https://sc.macromicro.me/charts/5751/zhong-guo-tie-lu-huo-yun-liang">https://sc.macromicro.me/charts/5751/zhong-guo-tie-lu-huo-yun-liang</a></p>
<p>克强指数包括耗电量、铁路货运量和银行贷款发放量三个指标组成，分别占比重 40%、25%及 35%。基数学计算公式为：</p>
<p><img src="./assets/image-20231027172523186.png" alt="image-20231027172523186"></p>
<p>克强指数与中华人民共和国公布的国内生产总值（GDP）走势总体一致，但上下波动方面，克强指数表现会更剧烈，更能反映中国经济状况。</p>
<p>《经济学人》也认为，克强指数比中国官方的 GDP 数字更能真实的反映中国经济的现实状况。有学者分析，克强指数更能精确地反映中国经济现状，比如耗电量可以准确反映中国地区工业生产活跃度以及工厂开工率；铁路货运量能反映经济运行现状，以及经济运行效率，因为铁路是中国货运的最大载体。此外中国间接融资占社会融资总量高达 80%以上（2002 年至 2013 年平均值为 87.8%），银行贷款又占间接融资的核心，贷款发放量可以反映市场对当前经济的信心，也可用于预判未来经济风险。</p>
<h2>15 年之后失灵的克强指数与新克强指数</h2>
<p>克强指数一度受到了花旗银行等国内外大型投资机构的认可，但是，有人说，现在好像不怎么行了。我们先来看看近十多年的克强指数走势。</p>
<p><img src="./assets/image-20231027173641390.png" alt="克强指数变化"></p>
<p>再来看国内生产总值的走势图，里面我们加上了第一、二、三产业对 GDP 的贡献率，这对下文分析克强指数的失灵有些帮助。</p>
<p><img src="./assets/image-20231027173736388.png" alt="同期GDP变化图"></p>
<p>从克强指数和 GDP 增速这两张走势图，可以看出，以 2015 年为分界点，2015 年之前克强指数可以反映 GDP 的走势，期间克强指数下降，GDP 增速也出现了持续的下降。</p>
<p>但是在 2015 年之后，克强指数“似乎”有些失灵了，2015 年之后克强指数出现了反弹，但是 GDP 增速在经过长期的高速增长之后，开始变得缓慢，甚至在疫情期间，GDP 增速一度转负。</p>
<p>藉此，有人猜测，克强指数已经失灵了。</p>
<p>在 2015 年末，克强总理为《经济学人》年刊撰文《中国经济的蓝图》中提出了衡量中国经济新的三个指标，分别是<strong>就业、居民收入和生态环境的改善</strong>，这也被称为“新克强指数”。</p>
<p>十年前二十年前，那个时候一心就是想把 GDP 搞上去。现在发生了变化，GDP 要搞但是要高质量的搞，我们从一二三产业的变化就能看出来经济结构在发生变化，发达的经济体往往是伴随着第三产业占比的不断扩大。</p>
<h2>外界对克强经济学三项政策的质疑</h2>
<p>十年前就有人指出，克强经济学三个部分的期望在一定时期内是没法彻底贯彻实行的，主要理由如下。</p>
<p>1）不出台刺激措施的愿望可能是一厢情愿。对本国经济的刺激推进，本来就是政府的职责。尤其在中国现有发展阶段，政府的政策走向利益攸关，政府的激励措施当然是必要的，也是市场欢迎的内容。问题的关键是采用什么样的刺激办法，采取多大的规模？激励的对象是什么？代价有多大？但经济一放缓，利益群体受损，就业压力带来的社会稳定问题便会成为最为有力的道理，迫使国家主导的投资行为和财政刺激及货币政策出台。</p>
<p>2）去杠杆化？在不改变现有经济政治资源安排和发展模式的格局下，去杠杆化无疑是自相矛盾的提法。地方政府的竞争，某种程度提供了中国经济快速增长的动力。在现有的官员激励制度下，各级政府当然责无旁贷地、史无前例地、急遽大规模地进行城市化建设和改造。而金融体系没有坐失历史机遇，义无反顾地推动配合。当前过度杠杆化的主要原因是地方政府与国有控制的金融体系以及财政货币政策的捆绑。这个模式的杠杆作用，在一定区间里保证了过去十年的经济成就。</p>
<p>3）结构改革并非现在才提，早在朱镕基时代之前就已经开始，只是过去十年延迟了。而结构改革的重点不应该只是部门的撤并，不只是审批职能的下放和放宽。着眼点应该有个理论高度，那就是如何限制政府权力，促使公权力的实施沿着高效、廉洁的道路转向。这不是断腕断臂或者甩开膀子就能实现，而是必须触及“灵魂深处”。</p>
<p><strong>他对自己提出的理想政策并非不知有哪些推进困难，他可是一向被称作经济政策的务实主义者，就像他在给他的大学同学写的临别赠言那样，既仰望星空，又脚踏实地。</strong></p>
<p><strong>参考资料</strong></p>
<ul>
<li><a href="https://baike.baidu.com/item/%E5%85%8B%E5%BC%BA%E6%8C%87%E6%95%B0/1532682">https://baike.baidu.com/item/克强指数/1532682</a></li>
<li><a href="https://mirror.xyz/0x0372f8D07092D7154F65D09A0319a5fE147E3AD4/AFWf0IKxWggmHOuQaQPD6frEWczjZyBgCD5uGq2zx9s">https://mirror.xyz/0x0372f8D07092D7154F65D09A0319a5fE147E3AD4/AFWf0IKxWggmHOuQaQPD6frEWczjZyBgCD5uGq2zx9s</a></li>
<li><a href="https://cn.nytimes.com/business/20130719/cc19liconomics/">https://cn.nytimes.com/business/20130719/cc19liconomics/</a></li>
<li><a href="https://cn.chinadaily.com.cn/2015lianghui/2015-03/06/content_19738874.htm">https://cn.chinadaily.com.cn/2015lianghui/2015-03/06/content_19738874.htm</a></li>
<li><a href="https://zh.wikipedia.org/zh-hans/%E6%9D%8E%E5%85%8B%E5%BC%BA">https://zh.wikipedia.org/zh-hans/李克强</a></li>
<li><a href="http://www.ce.cn/xwzx/gnsz/szyw/201303/16/t20130316_24204477_1.shtml">http://www.ce.cn/xwzx/gnsz/szyw/201303/16/t20130316_24204477_1.shtml</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[有感于四川崇州 2 岁小女孩被狗咬，伤重住院，以后再碰到不文明养犬的马上举报，让其付出被罚 2000 元的代价]]></title>
            <link>https://yishulun.com/./src/posts/2023/14.html</link>
            <guid>https://yishulun.com/./src/posts/2023/14.html</guid>
            <pubDate>Tue, 24 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>有感于四川崇州 2 岁小女孩被狗咬，伤重住院，以后再碰到不文明养犬的马上举报，让其付出被罚 2000 元的代价</h1>
<p>你好，今天聊一下安全文明养犬的事。</p>
<p>大概北京时间 16 日早上 8 点多，在四川崇州发生了一起黑狗袭人事件。</p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/QFe-JEkce7I?si=cagkxvqNVpUIvw9B" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>上面有视频，你可以看一下。我看了之后，非常气愤。妈妈带着两岁多的女儿从居民楼里出来，一条黑犬——确切地说是一条罗威纳犬在楼下已等候多时。</p>
<p>见母女二人出来了，黑犬上去就咬，并且专挑人类幼小袭击。不要质疑妈妈保护儿女的决心和勇气，如果你看了视频就会发现，母亲在手无寸铁的情况下，已经在想方设法尽自己最大的努力保护女儿。我相信，妈妈当时的想法是：“狗你有种冲我来，不要伤害我女儿！”</p>
<p>短短两分钟，悲剧就发生了。事后经医院检查，小女孩周身有 20 余处伤口，最长的一处竟然有 8 公分长。8 公分什么概念，那相当于一个成年男子中指的长度。</p>
<p>经医院抢救，小女孩终于脱离生命危险了。若不是周围刚好有一个持墩布打扫卫生的大妈，及时加入保护人类幼崽的战斗，用拖把逼退黑狗，后果可能更加严重。</p>
<p><img src="./assets/image-20231025112956980.png" alt="咬伤小女孩的狗罗威纳犬"></p>
<p>我看过视频，震惊坏了！</p>
<p>这烈性犬袭人，毫无征兆，且似乎又毫无理由。视频中那条黑狗就像与小女孩有数世仇怨一样，上来就干，且完全忽视了成人妈妈的在场。</p>
<p>我是今天在报纸上看到这则报道，然后在网上查视频观看的。看视频之前我很好奇，在有成人监护的情况下，小孩怎么可能被恶犬伤害得那么严重。</p>
<p>看过视频之后，我不再有任何怀疑了。换作其他任何一位妈妈，或者奶奶，都有可能发生类似的不幸。</p>
<p>重点是，如何防范？</p>
<p>报纸上给出的建议更加让我吃惊！</p>
<p>那篇报道的作者说，当我们在户外遇到烈性犬时，要注意躲着它走。</p>
<p>这里插一句，什么是烈性犬？有些读者可能不了解它的定义，在北京身高 35 厘米以上就是烈性犬。35 厘米大概就是一尺的距离。</p>
<p>现代狗主人一般会给狗束一条伸缩绳，这种绳子在狗跑远时可以自动伸长，狗离得近时又可以自动伸缩，着实很方便。</p>
<p>这不等于没拴绳嘛？！</p>
<p>但不能不拴！我查了一下，北京自 2016 年就出台文明养犬条例，带狗外出遛弯必须束绳，被发现不拴绳将可能被处以 2000 元罚款。</p>
<p>但是狗拴了绳就不舒服，狗不舒服，狗主人可能也不舒服，一是心里不舒服，二是手里始终拽根绳子不舒服。</p>
<p>于是有聪明的商家，设计了一种伸缩狗绳，既没有违反城市管理条例，又让狗和狗主人都舒服了一些，自己还赚了钱。</p>
<p>商家真聪明也！</p>
<p><img src="assets/image-20231024231239499.png" alt="全国消费者信誉保障产品"></p>
<p>下面继续说报纸上这位作者给出的建议，他说，在室外如果遇到这种拽着伸缩绳遛狗的女士或男士，以及压根不肯给狗拴绳的，要注意避让。</p>
<p>如果狗在狗主人左侧，我们就从狗主人的右侧通过；如果狗在狗主人右侧，我们就从狗主人的左侧通过。将狗主人当作我们与狗的安全隔离物，最大保障我们安全通过。</p>
<p>这位报刊作者好聪明啊！</p>
<p>请问，我们为什么不能立法禁止养狗人使用伸缩绳？</p>
<p>甚至对出售伸缩绳的商家及其商品，为什么不能取缔、没收？就那样一条 5 米内可以自由伸缩的绳子，让法规上的外出遛狗必须束绳的条文，还有什么存在的尊严可言？</p>
<p>用伸缩绳与不用绳子，有何区别？</p>
<p>更有甚者，有的养狗人压根不给狗束绳子，理由大概就是“<strong>他家的狗温顺、不咬人</strong>”。</p>
<p>关于烈性犬的定义，并没有<strong>温顺不温顺</strong>这一条，只有身高规定一说。</p>
<p>条例规定，凡是超过 35 厘米的，就是烈性犬。尤其是国民爱养的外国品种，例如獒犬、德国杜宾犬、圣伯纳犬、罗威纳犬、阿富汗猎犬、灵缇、苏俄牧羊犬、英国斗牛犬、松狮犬、斑点犬、秋田犬、贝林登梗等均属于禁养的烈性犬范畴。</p>
<p>任何市民，凡是发现有人在公共场所遛狗，或在马路边不拴绳遛狗，无论在哪里，狗的身高超过 35 厘米的，都可以拨打城管电话 96310、110 或当地派出所电话进行举报。</p>
<p>管理条例规定，养犬人严禁携犬进入市场、商店、商业街区、饭店、公园、公共绿地、学校、医院、展览馆、影剧院、体育场馆、社区公共健身场所、游乐场、候车室、风景游览区等公共场所。</p>
<p><strong>公园、公共绿地</strong>是严禁遛狗的，违者罚款 2000 元。对于没有及时办狗证，及给狗接种狂犬疫苗的，将狗没收，再处以罚款。</p>
<p>我们周围的养狗人有几人真正懂法守法了？</p>
<p>很多人都是带着狗在公园、绿道上散步遛弯，并且还是 35 厘米以上的大型犬，当有小孩、孕妇或老人被吓到时，他们还会及时出声解释：“没事，没事，我家狗不咬人！”</p>
<p>说到狗咬人，<strong>什么样的狗会咬人？</strong></p>
<p>文章中指出，有两种狗最可能无缘无故突然袭击人：</p>
<p>1）狗的血缘父亲曾经袭击过人，这是遗传的；</p>
<p>2）狗小时候被主人虐待过，对人有憎恨情绪，或这只狗它自己曾经咬过人。</p>
<p>针对第一种情况，避免伤害的唯一建议就是不要随便收养流浪狗及来路不明的狗。一时的好心泛滥，可能会害了自己或周围邻居。</p>
<p>针对第二种情况，作者疾呼，养狗就要爱狗，如果没有足够的心智负担狗的正常养护，请主动拨打动物收养站电话，给狗一个寻找新生活的机会。</p>
<p>狗存在袭击人的可能，但并不是在所有场合下都会爆发，也并不会针对所有人袭击。</p>
<p>报刊作者指出，狗，非常具有“狗仗人势、欺软怕硬”的奴性。</p>
<p>在视频中，黑狗为什么不袭击妈妈和清洁工，为什么单单袭击小女孩？</p>
<p>因为黑狗在小女孩的身上感受到了她的恐惧，因为小女孩怕它！</p>
<p>面对害怕自己的弱者，黑狗是疯一样的，完全不顾被炖掉的危险上去撕咬。</p>
<p>这就是狗的奴性！</p>
<p>为什么影视剧中形容婢膝奴颜的人总是用“狗奴才”，这是有一定道理的。</p>
<p>报刊作者指出，面对欺软怕硬的狗，千万不要恐惧，心中要升起一种把它狗脑子打出来的怒意，它如果敢对视你，你就在周围找砖头、木棍等一切可以利用的武器。</p>
<p>如果实在找不到，就脱下自己的鞋子，甚至将自己的手机当作武器，狠狠地砸出去！</p>
<p>砸中砸不中不要紧，气势上绝对不能输！气势输了，让它感受到你的怯意了，它就会变本加厉。在人类生活的都市中，又不是荒郊野外，岂能给畜生张狂的机会！</p>
<p>如果来不及脱鞋，或者手被狗咬住了，这时候一定要沉着冷静，疼痛是疼痛的，但一时半会死不了，要咬紧牙关，想办法拼命勒住狗的脖子，当狗感到窒息的时候，它自然就会松开口。</p>
<p>同时要注意观察，狗有两种状态：</p>
<p>1）一种是被我们的祖先驯化的服帖的温顺的放松的状态，在这种状态下，它的耳朵有时像兔子一样竖起、有时像瘪白菜耷拉在脑袋上，它的嘴巴是张开的，舌头和嘴巴周围的括约肌是松弛的，这种状态一向是它向人类乞食的样子；</p>
<p>2）另一种就是紧张的“飞机耳”状态，两只耳朵像飞机一样平平展开，呰牙咧嘴，舌头伸了回去，甚至在舔自己的嘴唇，这是一种紧张的、兽性大发的状态。</p>
<p>对于第二种状态，它大概是吃饱了，忘记人类祖先是如何驯它的啦！</p>
<p>说到这里，我们怎么能不佩服我们的祖先，对于野狗这种畜生，先是饿它，饿得它头晕眼昏、没有力气，待它稍微学会第一种状态，就给它一点吃的，等它第二种状态复萌，又把它关起来继续饿它。</p>
<p>对于拒不服从驯化的，就打，一直打，打到它恐惧，然后再饿它。一直不服从驯化的，就炖了，当着它同伴的面吃肉。久而久之，只有学会听话的狗被自然选择保留了下来，并且允许他们繁衍子嗣。</p>
<p>人类在进化早期，不知道受了草原上的野狗多少气，以至于万年以后人类幼崽在面向大型犬时仍会自然而然生出恐惧，这种恐惧是带在基因里的。</p>
<p>要不说人类祖先的训化师厉害，他们不但自己克服了对野狗的恐惧，还将狗对人类的恐惧，深深地钉在了它的基因里。</p>
<p>所以，面对狗，无论是饲养，还是避险，第一是不要恐惧，第二是控制它的恐惧。</p>
<p>农村人养狗，养中华田园犬，不是所有的狗都听话，偶尔也有不听话的，例如敢从主人或小主人手里抢东西吃，养狗人就打，往死里打。饿它一天，第二天再打。第三天看它表现，才给些吃的。这叫给它长记性。</p>
<p>身为狗，只能吃主人扔在地上的食物，主人手里的食物或桌上的食物，主人不给，绝对不能吃。</p>
<p>至于敢咬人的狗，那叫脏口了，不能留了。见过血的狗，藏在它体内的兽性被激发了，再也不能留，养狗人再不舍得也会毫不犹豫将它杀了，心软的则会卖给狗肉馆处理。</p>
<p>这种驯狗技巧，在农村是世代相传的，没想到现在城里兴起养洋狗以后，这种技能反而失传了。</p>
<p>有的养狗人对狗那是一个溺爱，把狗当儿子养，在家抱着睡，出门抱着走，你敢踹一脚她的大名贵犬，她能跟你不死不休。</p>
<p>她的狗怎么能受半点委屈！你敢打她的狗，就如同打她的脸！</p>
<p>至于遛狗拴绳，不可能，根本不可能，在人多的公共场合，也顶多挂个伸缩绳做个样子。</p>
<p>甚至直接放开散养，让爱狗自由活动。</p>
<p>等到有一天，突然，警察上门告诉她：“你家的狗将别人家的小女孩咬了！”她就傻了。</p>
<p>这时候，再不明智的她也老实了。不但她要赔偿被害人所有医疗费及营养费、精神损失费，她的爱狗也不能留了。脏了口的狗，只能杀掉；即使还给她，她自己都不敢养。</p>
<p>谁能保证一个脏了口的畜生，半夜不会把她的脖子咬断，或伤害她家里儿子或孙子​。</p>
<p>好了，最后回顾一下。</p>
<p>作为一名爱狗人士，为了和谐社会大家的共同安全，提出如下安全文明养狗倡议：</p>
<p>1）出门遛狗必拴绳，且一直拴绳，并且不是那种伸缩绳。其他人碰到使用伸缩绳的，被迫被逼到路的一边甚至逼到草地上通过的，且忍他一忍。</p>
<p>他总有把狗绳解了让狗方便的时候，马上拍下照片，打 96310 或 110 举报，让他付出 2000 元的代价。</p>
<p>如果他不解狗绳，他也会带狗遛到公共绿地、公园、广场等公共场所，这是城管条例不允许的，马上拍下照片，举报他。</p>
<p>2）一家只准养一条狗。对于同时牵两条狗，并且使用的都是伸缩绳的，一左一右横扫绿道，让行人避无可避的，拍下照片，举报它，让他付出被没收一条狗并被处以 2000 元罚款的代价。</p>
<p>3）对于豢养身高超过 35 厘米以上大型犬的养狗人，特别当他的狗吓哭小孩了，让带孩子的奶奶或妈妈手足无措时，他还在那里解释：“没事没事，我家狗不咬人！”。</p>
<p>拍下照片，马上打电话举报他。</p>
<p>相关管理单位对烈性犬的定义，对于烈不烈这个词并没有标准的定义，什么是烈？咬人了伤人了肯定是烈，前面我们分析狗咬人的原因时说了，狗的烈性是写在基因里的，任何一条狗都有兽性大发的可能。</p>
<p>相关单位对烈性犬的定义，只有一条，就是狗的身高，凡是体型身高超过 35 厘米的就属于大型犬、烈性犬。劝告喜欢养殖外国名贵大犬的养狗人，再名贵的狗，也是狗，身高超过 35，就是大型犬、烈性犬。</p>
<p>人类幼崽对大型犬的恐惧，像对蛇的恐惧一样，是写在基因里的。对于这样的养狗人，也是直接拍下照片，打电话举报他，让他付出狗子被没收并被处以 2000 元罚款的代价。</p>
<p>4）对于只在自家院里或屋里养大型犬的养狗人，笔者特意提醒，养狗不要忘记人类祖先驯狗的优良传统。你越是对狗溺爱，对它没有界线，几代以后，它可能真的就兽性复发了。</p>
<p>养狗，只有训，像祖先一样恩威并施，才能一直拥有一条安全、忠诚的狗。</p>
<p>最后，贴一张北上广杭明确被官方认定为大型犬、烈性犬的名单。</p>
<p><img src="./assets/image-20231025113125736.png" alt="烈性犬名单"></p>
<p>不在列的，并非不在管理范围之内，因为在条例上有一个等字，凡是体形身高超过 35 厘米的，都算。只是上面这些，即使身高不超过 35 厘米，例如恶霸犬，也属于烈性犬。</p>
<p>啰唆了这么多，无非是想养狗人与非养狗人有一个和谐安全的环境，不再发生类似的悲剧。真正在危险的时刻，什么举报，城管，110 等都是来不及的，能依靠的只有自己。</p>
<p>关键就是要有勇气，不要胆怯，还有就是尽量避让，避免激发大型犬的兽性。</p>
<p>我突然明白那位报刊作者的用意了！人家可不是尽是给一些“怂”的建议，那些建议都很实际，是每个人自己在危险时刻都能够抓住的稻草。</p>
<p>我则对当下城市里像儿子一般溺爱式养犬有了一丝担忧，人与狗的界线如果一再被打破，狗回归未驯化的畜生也只是一个时间问题。</p>
<p>还是老辈农村人养中华田园犬的方式最聪明！</p>
<p>同时我也不觉得中华田园犬就比上述所列的洋犬差在哪里，实在没有必要饲养洋货，尤其是罗威纳犬。一切的根源都是民族自信力不足，与养狗人的虚荣心在作祟。</p>
<p>大概觉得养一条中华田园犬不够威风，突显不了自己显赫的社会地位，或者彰显不了自己伟岸的身躯与漂亮的容颜，大概只有几万、几十万甚至上百万的名贵犬种才能完成这种装逼的宿命。</p>
<p>和欧洲人不爱买驴包，驴包反而在大陆卖得最好一样，这是一种风气，一种病态​的风气。</p>
<p>要彻底改变这种风气，当路上遇到狗主人时，尤其是带着孩子遇到时，不是当面夸赞他的狗多漂亮多名贵，而是主动问他：“你这狗是什么品种？”</p>
<p>“罗威纳犬？！”</p>
<p>“噢，属于大型烈犬。”</p>
<p>“喂，96310城管中心吗？我举报，这里有人养烈性犬！”</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[使用 querySelector 查询元素时，如何使用正则进行模糊匹配查询？]]></title>
            <link>https://yishulun.com/./src/posts/2023/13.html</link>
            <guid>https://yishulun.com/./src/posts/2023/13.html</guid>
            <pubDate>Sat, 21 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/pexels-photo-270404.jpeg" alt=""></p>
<h1>使用 querySelector 查询元素时，如何使用正则进行模糊匹配查询？</h1>
<p>这要用到元素属性值正则匹配选择器，它包括下面 3 种：</p>
<ul>
<li>[attr^=&quot;val&quot;] 前匹配</li>
<li>[attr$=&quot;val&quot;] 后匹配</li>
<li>[attr*=&quot;val&quot;] 任意匹配</li>
</ul>
<p>其中，尖角符号^、美元符号$ 以及星号*都是正则表达式中的特殊标识符，分别表示前匹配、后匹配和任意匹配。</p>
<p>由于现代网页源码都是编译过后的产物，发到用户浏览器中的源码经常有这样的元素节点：</p>
<pre><code class="language-html">&lt;h2 class=&quot;UserInfoBox_textEllipsis_13jj5&quot; f_c=&quot;8&quot;&gt;点击登录&lt;/h2&gt;
</code></pre>
<p>其中，13jj5 并不是固定的，它是一串随机字符，是前端框架在编译时为了避免组件样式混淆而故意添加的。每一次产品重新发布，这个 class 样式便会变化一次。</p>
<p>如果我们在智能化产品中直接这样查询目标元素：</p>
<pre><code class="language-javascript">document.querySelector('h2.UserInfoBox_textEllipsis_13jj5')
</code></pre>
<p>下次产品重发后，代码便不再有效了。这种情况便适合采用属性值正则匹配选择器：</p>
<pre><code class="language-javascript">document.querySelector('h2[class^=&quot;UserInfoBox_textEllipsis&quot;]');
</code></pre>
<p>使用属性值正则匹配选择器，关键记忆点有两个：</p>
<p>1）使用了中括号，直接用在元素选择器后面。在 JS 中，计算属性也是使用中括号，这种写法是一致的、合理的；</p>
<p>2）在中括号内，使用 k=v 形式书写，并且在 k 后面可以跟^、$、*三个正则符号，分别表示前匹配、后匹配和任意匹配。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[读二胖《编程路上那些让我效率倍增的方法》，谈新人如何学习编程，只要方法对了人人都可以成为黑客高手]]></title>
            <link>https://yishulun.com/./src/posts/2023/12.html</link>
            <guid>https://yishulun.com/./src/posts/2023/12.html</guid>
            <pubDate>Sun, 15 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/640-1697420393520-18.png" alt="图片"></p>
<h1>读二胖《编程路上那些让我效率倍增的方法》，谈新人如何学习编程，只要方法对了人人都可以成为黑客高手</h1>
<p>我在知乎上发现了这篇好文，有 3 万多人点赞，作者是逆袭的二胖，文章地址在此，欢迎翻阅：</p>
<p><a href="https://zhuanlan.zhihu.com/p/34418394">https://zhuanlan.zhihu.com/p/34418394</a></p>
<p>正如作者的名字所暗示的那样，二胖是一名大一调剂到计算机专业的学生，主要通过自学的方式，在毕业后拿到了 10 多个 offer，如愿进入了理想的大厂工作，真正完成了属于他的逆袭。</p>
<p>文中很多观点与我多年坚持的教学观点暗合，我读了之后也是拍手叫好。下面我结合二胖的原文，谈一下新人如何快速学习编程语言。以下内容当真是肺腑真言，读此一篇，即能真正明白到底该如何学习编程。</p>
<h2>1，编程主要靠自学</h2>
<p>二胖：</p>
<blockquote>
<p>我个人是一名计算机专业的学生，很多人可能会认为我是在课堂上学到的编程，其实不是这样。</p>
<p>我认为科班出身和非科班出身的学生最大的区别在于<strong>科班出身的学生知道去学什么</strong>，知道每一门课程是干什么的；还有一些必须完成的作业、小项目，促使他们去做一些实际的编码练习，除此之外，真的全靠自学。</p>
</blockquote>
<p>计算机专业科班出身，甚至是硕士、博士出身，并不代表他一定编程学得好。编程是一门手艺，需要在实践中锤炼。正如作者所说，科班出身并不比非科班占据任何优势，仅是知道该学什么而已。</p>
<p>对于“该学习什么”，这叫技术路线，对于使用不同技术栈的人这个路线还有所不同，这样的路线在网上都能找到，所以科班出身其实并不真的占据什么优势。</p>
<p>但知道该学什么其实用途并不太大，因为无论是哪个技术栈要学习的内容实在太多了，关键是怎么学，怎么高效、有效地学。</p>
<h2>2，选择从哪一门编程语言下手？</h2>
<p>二胖：</p>
<blockquote>
<p>可能困扰编程新手最多的一个问题是【我应该学什么编程语言】或者【我需要学习哪些课程才能做出一个 web、一个 app】，很多人一直纠结这个问题，陷入了东学一点、西看一点的死循环，到头来啥也没学好，这会很浪费时间。</p>
<p>刚上大一的时候，我也很想知道应该选择什么编程语言。我问了很多人，网上各种查资料，但所能得到的答案都很片面，多数对这个问题答非所问，总是回答说“某某编程语言难”，“某某编程语言性能好”。<strong>其实作为初学者，我们对计算机体系都不了解，就不要过多地去纠结性能，或者难易等因素</strong>，原因我等下再说。</p>
<p>如果你有明确的方向，那么很好选择。**如果你想做算法、机器学习方向，那么 python 是最好的选择。如果你想做 web 开发，java、php 等都可以。如果想做一些更底层的工作，那么就可以选 c。**当然这是建立在你有明确方向的基础上。可是，很多人都没怎么接触过计算机行业，特别是和我一样刚入学就被调剂到计算机专业的人。对这些同学来说，各个编程语言就只是个名字，除了叫法不一样，你根本不知道它们有什么差别。所以索性不要纠结了，我替你选一个吧。</p>
</blockquote>
<p>这个问题没有标准答案，与学习者期待将来从事的工作有关。依据我个人经历及编程教学经验，新人选择一门“所见即所得”的编程语言更容易入门，重点不是选择 C、C++，还是 Java、Python、Go，而是选择一门可以持续带给你正面反馈、即时反馈的技术。</p>
<p><strong>我个人认为，选择 JS，从编写小游戏入手，是最快的入门途径。</strong></p>
<p>编程语言均是相通的，等你会了一门语言之后，以此为据点再向其它语言拓展会容易很多。语言背后暗含的计算机基础、网络协议、面向对象、开发规范等这些内容，都是相似的，从任何一门你感兴趣并能坚持下去的语言开始学习都可以。</p>
<p>真正优秀的程序员从来都不是只会一门语言，如果你真的有志于此，你早晚会学几门编程语言，因此先学哪个后学哪个其实也并不是特别重要。</p>
<p>我坚持让初学者从小游戏开发学习编程，从 JS 开始入手，主要有两个考量：</p>
<p>1，玩游戏与制作游戏是人的天性，C 语言与 Unix 系统正是大神 Ken Thompson 和 Dennis Ritchie 在实验室里捣鼓《太空旅行》游戏时发明出来的；</p>
<p><img src="assets/image-20231015220222662.png" alt="image-20231015220222662"></p>
<p>2，JS 这门语言不用手动管理内存，单线程，语法极其简单，还拥有所有语言都向往和暗自学习的异步编程范式，没有比它更适合新人学习的编程语言了。</p>
<p>我在《微信小游戏开发》这套书中，为什么选择 JS，为什么选择小游戏，原因即在于此。此外，微信小程序生态有数亿的生态用户，市场太大了，用户在哪里就去哪里开发应用，从这个开发的黄金法则考虑，选择微信小游戏而不是选择其它小游戏是不是也好理解了。</p>
<h2>3，学习编程，我需要学习哪些课程？</h2>
<p>二胖：</p>
<blockquote>
<p>我认为我们学习一项技能的时候，应该采取的是<strong>项目驱动式学习</strong>，即需要用到什么东西时不会了再去学，而不是先填鸭式的都填进脑子，并且在学习的过程中我们还不知道它这是干嘛用的，等之后用到了，甚至不记得自己学过，反而查资料才会想起：哦，原来我之前学的 xx 科目是这个用处啊，可是我当时并没有好好学。很多时候学生时间的浪费可能还是要怪老师、怪学校，他们一开始没给我们做好充分的课程介绍。所以，在经过比较多的编程和项目实践后，我认为一个比较好的学习方式是，<strong>改良版的项目驱动学习法</strong>。即：</p>
<p>学习一段时间，做个小项目，将做项目遇到的问题记下来，针对性地学习相关知识，然后再实践，再学一段时间理论，让知识成网状发射状地变大。当然，<strong>项目驱动式学习有一个弊端，就是每次学习的知识都是项目所需要的，很零碎、不成体系</strong>，所以需要改良，即在采取项目驱动学习法的时候每天抽一段时间去完整地读一本书，或者一个相关问题的完整介绍，这样就很容易把一些知识成体系地串起来。这样一段时间下来，慢慢的，你就知道我们为什么要学那么多科目，学这些科目能干什么。</p>
</blockquote>
<p>二胖说的项目驱动式学习，有个老外教育家很早以前就给它起了一个专有名词：PBL（Project Based Learning），翻译成中文就是<strong>项目驱动式学习</strong>。这个方法很有名气，国内北京九渡河小学搞素质教育用的也是 PBL 大法，在网上有介绍，很成功也很有名，感兴趣的朋友可以搜索看看。</p>
<p>PBL 是一种理论+实践相结合的学习方法，如果仅是学习理论，会觉得枯燥无以为继，很难坚持；如果仅是实践，又陷于末端细节了，正如作者二胖所说，很零碎、不成体系。</p>
<p>那怎么办呢？</p>
<p>答案就是使用 PBL 项目驱动式学习大法。其实在国内软件公司，一直都有这种模式，只是大家没有注意往这个名字上想。公司里软件项目组流行的<strong>师傅 1v1 带徒弟</strong>做项目的方式，就是 PBL 方法，在做项目的过程中，师傅一边给徒弟派任务让徒弟练习技能，一边为其答疑解惑、夯实理论根基。</p>
<p>我在《微信小游戏开发》这套书中，采用的就是这种师傅带徒弟、PBL 实战教学法。整套书练习的是一个项目——不是很多个项目是一个项目，很多教程或图书里面列举的示例很散，这套书不是，为了减少学习者的心智认知负担，整套书只有一个实战项目，这个项目就像公司里面的实际项目一样，它是从一点一滴慢慢进化、慢慢完善的，系统化的理论知识是在项目进化的过程中不断渗透进去的。</p>
<p>读这套书，就像旁边有一个师傅，在耳提面命手把手教你如何开发项目一样，你不仅在学习编程技能，还在实践中不知不觉学习了必要的计算机基础、网络协议、数据库、设计模式、面向对象、编程规范等等相关的理论内容。</p>
<blockquote>
<p>注：《微信小游戏开发》是以微信小游戏开发为技术栈，系统化讲解全栈开发的一套书，并且是在 PBL 案例实战中讲解的。</p>
</blockquote>
<p><img src="assets/image-20231015223150994.png" alt="image-20231015223150994"></p>
<h2>4，学习编程要不要制定一个计划？</h2>
<p>二胖：</p>
<blockquote>
<p>我认为不只是编程需要制定计划，其他任何的学习和工作都需要制定计划。我从 13 年上大学就开始定期给自己制定计划，这个习惯也一直坚持到了现在，受益匪浅。</p>
</blockquote>
<p>当然要有一个可行的计划，凡事预则立，不预则废嘛。为了方便学习者制订计划，我将《微信小游戏开发》这套书的全部内容划分成了 90 课，按部就班，一步学习一课就好了，稳扎稳打，步步为营。</p>
<p><img src="assets/640-1697420366409-15.png" alt="图片"></p>
<h2>5，学习编程要不要记笔记？</h2>
<p>二胖：</p>
<blockquote>
<p>笔记是必须要做的，并且记笔记是一个长期的过程。在学习的过程中，我们一直都在追求一种最高效的学习方法，比如，同一个班的同学，他用他的学习方法考上了清华，而你用同样的方法就不行，为什么？因为他的方法对他自己而言是定制化的，可能且大概率不适合你，比如他的笔记你不一定能看懂，因为他可能设计了一套属于自己的符号。而就编程而言，很多同学说善用搜索引擎，是对的，可是搜索引擎搜出来的是别人的答案。你照搬过来，也许可以用，但是你没有记住，这些知识并不属于你，之后你可能还会遇到同样的问题，又要再搜索一遍，可能很难找到之前的那个答案了。但是记笔记就不一样，记笔记是定制化的，对你自己定制，你可以用自己最爽的表达方式来描述一个问题，是自己写给自己看的东西，看了几遍之后就能非常迅速和容易地理解。之后遇到相同的问题可以快速地通过找笔记解决。</p>
</blockquote>
<p>全世界公认最快的学习方法是费曼学习法，即把学到的内容及时用自己的方式和语言输出一遍。形式多种多种，可以是文字、语音，或者视频。</p>
<p>为了方便学习者做笔记，我为学习者专门在书外又编写了一套自学讲义，一共是 90 个 PDF，正好一课对应一个。在学习的时候，你可以以此讲义为基础，独立编写自己的学习心得，以加深理解和记忆。</p>
<img src="https://yishulun.com/posts/2023/assets/image-20231015223235532.png" alt="image-20231015223235532" style="zoom: 50%;" />
<h2>6，多久能学会编程？</h2>
<p>二胖：</p>
<blockquote>
<p>其实这个问题是没有答案的，如果只是想做出一个小应用，2 个月足矣，而就我个人而言，我认为学习编程不是学习一种编程语言，而是学习一个生态，一个计算机系统，所以无止境。</p>
</blockquote>
<p>没错，现在学习任何一门技术，学习的都是整个生态。《微信小游戏开发》其实是以讲解整个微信小游戏开发生态为主线的，它并不是单单讲解 JS 的，它里面除了 JS，其实还有 SQL、Node.js、Go 等语言。</p>
<h2>7，我应该选择什么资料，看什么书？</h2>
<p>二胖：</p>
<blockquote>
<p>其实这个问题也是很多编程新手容易困惑的问题。网络上拥有我们一辈子都看不完的教程和资料，所以现在应该不会存在找不着视频教程、找不着书看的问题。而问题就是我们不知道看什么视频、看什么书。从开始学编程到现在，我也买了上百本书，而真正适合自己的好书并不多。而视频教程的问题就更严重了，东看一点、西看一点，知识很难组织成网络。所以**学习编程的过程中，我们遇到的最大的问题是：当我们遇到问题的时候，在大量资料面前，我们不知道选择什么资料去学习。**即使我们使用项目驱动式学习的方法找到了我们的方向，但是同一个路径下，也有很多资料。前文列举的项目驱动式学习的图中，我们是自上而下的去发现问题，然后再解决问题。<strong>如果能有人帮我们组织好学习路径，然后自下而上地去学习，那么效率可能会提高很多。</strong></p>
</blockquote>
<p>我在编写《微信小游戏开发》这套书之前，我没有读到过二胖这篇文章；我是在书已经出版以后，看到了这篇文章。二胖谈论的这个问题，其实是编程初学者遇到的经典问题。</p>
<p><img src="assets/acba818bd86ea14d.jpg" alt="img"></p>
<p>我编写这套书，就是想为初学者组织好一条像登泰山一样的路径，带领初学者自下而上一步一步地学习。可能由于我水平有限，加上时间仓促等其他原因，我未必达到了我心目中的理想目标，但我确实是这样去做的。包括我的其它在线课程，其实也都是有意在贯彻 PBL 实战教学思想。</p>
<p>戳此前往<a href="https://item.jd.com/10070363837259.html">京东下单《微信小游戏开发》套装</a>👈</p>
<p>——朴素的分割线——</p>
<p>好了，关于二胖的文章就写这么多吧，二胖的原文更精彩，阅读原文你可能更有感触，有时间建议阅读一下。</p>
<p>下面我谈一下初学者基于我这套书怎么学习，有两种方式：</p>
<p>1，把书买回去，把讲义下载到本地，按课，一步一步学习即可。在京东、当当商城均有销售链接。</p>
<p>2，报名我特意推出的 1v1 师徒培训班。</p>
<h2>1v1 师徒培训班</h2>
<p>师徒培训班是 1v1 辅导，交流的主要方式是邮件+微信，主要的内容除了全套书的内容，另外再加上一个你自己喜欢的、钟意的项目实战。我会额外带着你，把你自己的这个项目给做出来。</p>
<p>什么意思？</p>
<p>具体来讲，就是不仅教你学会微信小游戏开发这门生态技术，还带着你做了一个“项目外包”。与一般的项目外包不同点在于，你是主角，是主要的开发者，我提供指导；这样在项目完成后，你可以继续自己修改和改善项目。换言之，教的是三点水的“渔”。</p>
<p>形式是 1v1 的，这和公司里面老人带新人的方式还有什么区别呢？</p>
<p>1v1 师徒培训班是收费的，且价格对某些人来说可能会有一些小贵。不过想一想，你做一个外包项目需要多少钱？何况外包那种形式是一次性成果，你自己并没有学会任何修改它的技能？</p>
<p>1v1 师徒培训班随报随学，只限 60 名，名额报完不再收，这也是为了保证效果。还有，培训结束以后，师徒关系仍然是存续的，你在自修过程中有什么技术问题仍然可以随时找我讨论。</p>
<p>如果你对 1v1 师徒培训班感兴趣，<a href="https://mp.weixin.qq.com/s?__biz=MzAwODIzMzU3Mw==&amp;mid=2651750551&amp;idx=1&amp;sn=4552e3895fd3e3585c9a4ba6004a30a3&amp;chksm=808bd79db7fc5e8bc31d88a2d986336ecaaae9db210daa081eb1463bcee80235cdff03be6900#rd">戳此添加我的微信报名</a><a href="http://mp.weixin.qq.com/s?__biz=MzAwODIzMzU3Mw==&amp;mid=2651750551&amp;idx=1&amp;sn=4552e3895fd3e3585c9a4ba6004a30a3&amp;chksm=808bd79db7fc5e8bc31d88a2d986336ecaaae9db210daa081eb1463bcee80235cdff03be6900&amp;scene=21#wechat_redirect"><strong>👈</strong></a>，发送暗号 1v1。</p>
<h2>读者评价</h2>
<p><img src="assets/640-1697420142234-3.png" alt="图片"></p>
<p><img src="assets/640-1697420142234-4.png" alt="图片"></p>
<p><img src="assets/640-1697420142234-5.png" alt="图片"></p>
<p><img src="assets/640-1697420142235-6.png" alt="图片"></p>
<p>戳此前往<a href="https://item.jd.com/10070363837259.html">京东下单《微信小游戏开发》套装</a>👈<br>
<a href="http://mp.weixin.qq.com/s?__biz=MzAwODIzMzU3Mw==&amp;mid=2651750551&amp;idx=1&amp;sn=4552e3895fd3e3585c9a4ba6004a30a3&amp;chksm=808bd79db7fc5e8bc31d88a2d986336ecaaae9db210daa081eb1463bcee80235cdff03be6900&amp;scene=21#wechat_redirect">戳此添加作者微信👈</a>，发送暗号 1v1，马上报名私教培训班</p>
<h2>大佬评价</h2>
<p>李艺的这本书将带领更多的新开发者敲开理想世界的大门。来吧朋友，这里有一个更酷的新世界在等着你一起构建。</p>
<p>——黄希形 前端开发专家、腾讯T4专家</p>
<p>微软的比尔·盖茨，特斯拉的马斯克，宇节跳动的张一鸣，小米的雷军，他们都是程序员。现在正在进人人人都是程序员的时代，优秀程序员的成长路径是什么呢?边实践、边学习才是最好的程序员成长路径。以下围棋为例，学习围棋最重要的是实有对手、有输赢、才会有学习围棋知识的动力。编程也是一样，要想成为编程高手，只有出自己的项目作品，有了用户反馈才会有最大的成长动力。</p>
<p>编写游戏是无数优秀程序员入行的第一步。很高兴看到李艺这本书的出版，它会带着写出自己的微信小游戏。让朋友玩自己开发的游戏，这是多好的兴趣驱动和正反馈啊!相这本书的读者里会涌现出一批优秀的程序员。</p>
<p>——蒋涛 CSDN 创始人</p>
<p>李艺是51CTO的忠实用户和专家，拥有近20年的软件研发经验，这本书是他长期从事编程教育的经验总结。本书最大的创新在于，用一个PBL实战案例，将需要讲解的知识点和读者需要练习的技能点全部串联了起来，并且是遭照人的学习规律，按从易到难的顺序逐一安排的。整本书就像从山脚伸向山顶的石阶，相信新人朋友跟着书中节奏学习，一定会大有长进。</p>
<p>——熊平 51CTO创始人</p>
<p>本书最大的特点是循序渐进，从几行代码开始，逐步深入，最终实现一个完整的微信小游戏项目，特别适合新手入门。同时作者用自已丰富的实战经验，细致地帮助初学者在遇到问题时定位并解决问题，使初学者能快速建立一套较完善的思维方式和工作流程。对想学习前端小游戏开发的新手来说，这本书就像一个经验丰富的老程序员在身边手把手带着你做项目，让你学完之后真的有很大收获。</p>
<p>——廖雪峰，著名技术专家(www.liaoxuefeng.com博主)</p>
<p>本书运用 PBL 实战教学思想来引导读者学习微信小游戏项目的开发。不同于其他的编程入门书籍，李艺编写的这本书富有创意且趣味性十足。在内容方面，不仅章节设计非常巧妙合理、知识脉络清晰，还通过丰富的代码案例与图示让读者更加直观地理解小游戏开发的基础和进阶知识，非常值得一读!</p>
<p>——陈超，腾讯高级前端开发工程师、腾讯课堂前端Leader</p>
<p>本书不仅介绍了小游戏开发的基础知识，也展示了开发过程中常见问题的解决思路，并通过引入设计模式、模块化重构程序的高级知识，让读者不会仅停留在小游戏开发的技巧中，而是上升到软件开发的终极方法。这种学习方式和思维方法能让读者举一反三，在以后的学习和工作中持续受益，从而设计与开发出可维护和可扩展的程序。</p>
<p>——寇永赞，新东方教育集团前端技术经理</p>
<p>本书是一本介绍微信小游戏开发的图书，不仅适合前端开发者，也适合对小游戏开发感兴趣的读者。阅读本书可以很好地掌握微信小游戏开发的相关知识，学完后即可独立开发出一款完整的微信小游戏。在学习的过程中，不仅能快速产出学习成果，看到小游戏的成型界面，还能学到许多基础知识，便于查漏补缺。这是一本不可多得的好书，值得推荐!</p>
<p>——舒欣，微信开发者/腾讯云开发工程师</p>
<p>戳此前往<a href="https://item.jd.com/10070363837259.html">京东下单《微信小游戏开发》套装</a>👈<br>
<a href="http://mp.weixin.qq.com/s?__biz=MzAwODIzMzU3Mw==&amp;mid=2651750551&amp;idx=1&amp;sn=4552e3895fd3e3585c9a4ba6004a30a3&amp;chksm=808bd79db7fc5e8bc31d88a2d986336ecaaae9db210daa081eb1463bcee80235cdff03be6900&amp;scene=21#wechat_redirect">戳此添加作者微信👈</a>，发送暗号 1v1，马上报名私教培训班</p>
<h2>销量稳定增长</h2>
<p>《微信小游戏开发》上架后销量一直稳定增长，2023年十一刚过，周销竟然达到了173。照此销量预估，一年销量可达约9000册。</p>
<p><img src="assets/image-20231016104113436.png" alt="image-20231016104113436"></p>
<h2>《微信小游戏开发》海报</h2>
<p>附一张出版社为这套书精心制作的海报，它很漂亮不是吗？同时也言简意骇，把本套书的亮点及要解决的痛点都表达清楚了。</p>
<p><img src="assets/640.jpeg" alt="img"></p>
<p>戳此前往<a href="https://item.jd.com/10070363837259.html">京东下单《微信小游戏开发》套装</a>👈<br>
<a href="http://mp.weixin.qq.com/s?__biz=MzAwODIzMzU3Mw==&amp;mid=2651750551&amp;idx=1&amp;sn=4552e3895fd3e3585c9a4ba6004a30a3&amp;chksm=808bd79db7fc5e8bc31d88a2d986336ecaaae9db210daa081eb1463bcee80235cdff03be6900&amp;scene=21#wechat_redirect">戳此添加作者微信👈</a>，发送暗号 1v1，马上报名私教培训班</p>
<h2>《微信小游戏开发》套装目录</h2>
<p><strong>微信小游戏开发：前端篇</strong></p>
<p>第一篇　潜龙勿用</p>
<p>第1章　创建小游戏项目　　2</p>
<p>第1课　创建项目　　2</p>
<p>了解小游戏的双线程运行机制　　2</p>
<p>注册开发者账号　　4</p>
<p>安装微信开发者工具　　5</p>
<p>创建第一个小游戏项目　　6</p>
<p>项目测试：本地预览与手机预览　　7</p>
<p>基于文件监听实现自动预览　　8</p>
<p>了解小游戏示例项目的项目结构　　11</p>
<p>小游戏如何调试代码　　13</p>
<p>拓展：如何安装、配置 Node.js和babel-node　　17</p>
<p>了解面向对象编程有关的基本概念　　18</p>
<p>本课小结　　20</p>
<p>第2课　微信小游戏是如何运行的　　21</p>
<p>创建画布　　21</p>
<p>拓展：如何给变量命名　　22</p>
<p>如何绘制矩形　　23</p>
<p>拓展：如何理解小游戏的全局变量及作用域　　24</p>
<p>如何清空画布　　25</p>
<p>如何绘制网络图片　　25</p>
<p>如何在小游戏中实现动画　　28</p>
<p>如何实现人机交互　　29</p>
<p>拓展：如何理解局部变量　　30</p>
<p>拓展：了解微信小游戏的API风格　　31</p>
<p>本课小结　　32</p>
<p>第二篇　见龙在田</p>
<p>第2章　编写一个简单的HTML5</p>
<p>小游戏：打造游戏界面　　34</p>
<p>第3课　绘制游戏标题　　35</p>
<p>安装与配置Visual Studio Code　　35</p>
<p>学习使用HTML标记，开始绘制游戏标题　　36</p>
<p>拓展：如何使用const 关键字　　39</p>
<p>拓展：如何给代码添加注释　　40</p>
<p>如何改变字体、字号和颜色　　40</p>
<p>拓展：在font-family中要使用中文字体的英文名称　　42</p>
<p>如何给文本添加文本样式　　42</p>
<p>如何在绘制文本中使用渐变色　　44</p>
<p>如何让文本居中绘制　　46</p>
<p>拓展：为什么要在代码中使用常量　　48</p>
<p>本课小结　　48</p>
<p>第4课　绘制挡板　　48</p>
<p>如何在画布上绘制直线　　48</p>
<p>拓展：JS的8个基本数据类型，如何进行类型判断　　50</p>
<p>给画布添加一个浅色背景　　53</p>
<p>如何加厚挡板　　54</p>
<p>拓展：JS中的数值类型、布尔类型是如何进行类型转换的　　55</p>
<p>如何给挡板添加圆角、阴影效果　　56</p>
<p>使用路径填充和矩形绘制挡板　　58</p>
<p>如何使用颜色渐变对象和图像填充材质绘制挡板　　60</p>
<p>拓展：什么是区块作用域　　65</p>
<p>拓展：了解数字类型，警惕0.1 + 0.2不等于0.3　　66</p>
<p>拓展：如何批量声明变量、常量　　67</p>
<p>本课小结　　67</p>
<p>第5课　绘制小球　　68</p>
<p>如何使用弧线绘制圆形　　 68</p>
<p>如何使用arc方法直接绘制圆形　　70</p>
<p>本课小结　　71</p>
<p>第6课　绘制分界线　　71</p>
<p>分别通过lineTo和渐变色绘制分界线　　71</p>
<p>拓展：CSS 颜色值有哪些格式　　73</p>
<p>使用函数绘制间隔效果　　75</p>
<p>拓展：如何定义和使用函数　　77</p>
<p>使用循环绘制分界线　　81</p>
<p>拓展：使用比较运算符、if控制语句和算术运算符　　84</p>
<p>拓展：JS的5种循环控制语句　　86</p>
<p>将函数当作变量使用　　87</p>
<p>拓展：如何理解JS的作用域链与闭包　　90</p>
<p>拓展：如何使用集合对象 Map 与 Set　　92</p>
<p>本课小结　　95</p>
<p>第3章　编写一个简单的HTML5小游戏：完成交互功能　　96</p>
<p>第7课　实现动画：让小球动起来　　96</p>
<p>使用定时器实现动画　　96</p>
<p>拓展：如何理解JS的异步执行</p>
<p>机制　　98</p>
<p>拓展：了解13种复合赋值运算符　　99</p>
<p>完成动画的关键：清屏　　99</p>
<p>如何实现小球与屏幕的碰撞检测　　103</p>
<p>拓展：复习使用if else if 语句　　105</p>
<p>使用 requestAnimationFrame改进动画流畅度　　106</p>
<p>本课小结　　108</p>
<p>第8课　监听用户事件：让挡板动起来　　108</p>
<p>绘制左挡板　　108</p>
<p>使右挡板可以上下自主移动　　110</p>
<p>改用函数绘制挡板　　111</p>
<p>监听用户输入，使用鼠标（或触摸）</p>
<p>事件操控左挡板　　112</p>
<p>实现挡板与球的碰撞检测　　114</p>
<p>拓展：如何使用逻辑运算符　　115</p>
<p>统计分数　　116</p>
<p>拓展：复习批量声明变量，可以将逗号放在前面　　117</p>
<p>在游戏结束时添加反馈　　118</p>
<p>拓展：加号与模板字符串　　120</p>
<p>本课小结　　121</p>
<p>第9课　实现游戏的重启功能　　122</p>
<p>绘制重新开始游戏的文本提示　　122</p>
<p>理解HTML5的事件模型，监听单击事件实现重启功能　　123</p>
<p>拓展：如何使用removeEventListener　　127</p>
<p>本课小结　　128</p>
<p>第10课　控制游戏音效：添加单击</p>
<p>音效和背景音乐　　128</p>
<p>如何使用JS代码播放声音　　132</p>
<p>给项目添加背景音乐　　133</p>
<p>使用图片材质绘制背景音乐按钮　　134</p>
<p>使用离屏画布绘制背景音乐按钮　　136</p>
<p>使用drawImage绘制背景音乐按钮　　138</p>
<p>监听背景音乐按钮的单击事件　　139</p>
<p>拓展：如何使用条件运算符　　140</p>
<p>本课小结　　141</p>
<p>第4章　移植及优化　　142</p>
<p>第11课　移植准备工作　　143</p>
<p>创建代码片段与改写项目　　143</p>
<p>拓展：在小游戏中如何获取屏幕尺寸　　144</p>
<p>拓展：关于代码自动提示　　146</p>
<p>本课小结　　146</p>
<p>第12课　移植音频和事件　　146</p>
<p>处理getElementById is not a function错误　　146</p>
<p>播放音频：处理Audio is not defined错误　　148</p>
<p>处理Audio错误：canPlayType is not a function　　150</p>
<p>处理currentTime错误：currentTime  是只读属性　　151</p>
<p>挡板绘制：处理Image is not defined 错误　　152</p>
<p>拓展：复习条件运算符和短路评估表达式　　153</p>
<p>准备移植事件监听，认识小游戏的触摸事件　　154</p>
<p>拓展：targetTouches、touches和changedTouches的区别　　156</p>
<p>改写click事件与mousemove事件　　157</p>
<p>拓展：关于小游戏的运行环境　　161</p>
<p>本课小结　　161</p>
<p>第13课　移植文本与图像　　161</p>
<p>处理标题文本不显示的问题　　162</p>
<p>拓展：实现渐变、阴影效果的替代方案　　167</p>
<p>解决左挡板移动到底部不显示的问题　　167</p>
<p>使背景音乐循环播放　　168</p>
<p>优化分数文本、挡板、小球与背景音乐按钮的参数　　170</p>
<p>拓展：如何在测试时静音　　173</p>
<p>本课小结　　173</p>
<p>第5章　移植后对小游戏进行平台功能优化　　174</p>
<p>第14课　绘制微信用户头像　　174</p>
<p>小游戏有哪些授权范围　　174</p>
<p>不能直接查询“用户信息”的授权情况　　175</p>
<p>使用 UserInfoButton　　 176</p>
<p>拓展：为什么要使用全等运算符而不是等号运算符　　180</p>
<p>绘制用户头像　　181</p>
<p>拓展：学习使用箭头函数及判定 this 对象　　182</p>
<p>主动销毁按钮　　194</p>
<p>控制头像大小，让左挡板默认展示　　195</p>
<p>主动查询用户授权　　196</p>
<p>拓展：如何在测试中清理缓存　　200</p>
<p>本课小结　　200</p>
<p>第15课　添加游戏反馈　　201</p>
<p>添加Toast提示　　201</p>
<p>在提示窗口中自定义icon　　202</p>
<p>使用模态弹窗　　204</p>
<p>拓展：游戏渲染的帧率可以修改吗　　206</p>
<p>本课小结　　207</p>
<p>第16课　添加超时限制　　208</p>
<p>限制游戏30s结束　　208</p>
<p>拓展：复习定时器的使用　　209</p>
<p>让游戏支持重启　　215</p>
<p>及时清除定时器　　216</p>
<p>本课小结　　217</p>
<p>第三篇　龙战于野</p>
<p>第6章　模块化重构一：准备重构　　220</p>
<p>第17课　梳理游戏逻辑　　221</p>
<p>在小游戏中如何使用全局变量　　221</p>
<p>拓展：作用域与使用let关键字实现批量变量声明　　222</p>
<p>整理代码，将变量与常量放在文件顶部　　223</p>
<p>梳理游戏逻辑，明确6个周期函数　　227</p>
<p>添加start函数　　228</p>
<p>添加end函数　　228</p>
<p>添加init函数　　230</p>
<p>添加loop函数　　232</p>
<p>及时移除事件监听　　234</p>
<p>本课小结　　236</p>
<p>第18课　JS如何创建对象及如何实现模块化　　236</p>
<p>使用原型继承对象　　237</p>
<p>使用构造函数创建对象　　238</p>
<p>拓展：理解__proto__与prototype属性　　239</p>
<p>拓展：如何理解原型及原型链　　242</p>
<p>基于原型链实现万能的类型检测方法instanceOf　　244</p>
<p>使用class关键字创建类对象　　245</p>
<p>使用CommonJS规范　　246</p>
<p>使用ES Module规范　　247</p>
<p>拓展：对比CommonJS规范和ES Module规范的差异　　248</p>
<p>本课小结　　251</p>
<p>第7章　模块化重构二：重构背景音乐、小球和挡板　　252</p>
<p>第19课　创建背景音乐模块　　252</p>
<p>开始创建背景音乐模块　　252</p>
<p>拓展：重新认识class和函数调用中的this　　258</p>
<p>拓展：认清JS的内存管理　　261</p>
<p>拓展：了解代码的优化评判标准　　263</p>
<p>改进复用性和易用性：将数据参数化，设置参数的默认值　　263</p>
<p>改进封装性：将内部成员私有化　　266</p>
<p>优化图片渲染：由多次加载改为加载一次　　268</p>
<p>改进封装性：添加getter　　269</p>
<p>对易用性的改进：直接导出单例　　271</p>
<p>本课小结　　272</p>
<p>第20课　创建小球模块　　272</p>
<p>开始创建小球模块　　272</p>
<p>使用跨文件常量　　274</p>
<p>拓展：使用defineProperty将变量改为常量　　275</p>
<p>创建Ball类　　276</p>
<p>本课小结　　282</p>
<p>第21课　创建挡板模块　　282</p>
<p>开始创建Panel类　　282</p>
<p>使用继承实现左、右挡板　　291</p>
<p>拓展：复习JS实现继承的方式　　297</p>
<p>拓展：复习类型检测操作符</p>
<p>typeof与instanceof的不同　　300</p>
<p>本课小结　　301</p>
<p>第8章　模块化重构三：重构记分板、</p>
<p>背景、页面和游戏对象　　303</p>
<p>第22课　创建记分板模块　　303</p>
<p>实现两个记分板类　　303</p>
<p>拓展：复习ES Module的导出与导入　　312</p>
<p>使用工具方法drawText　　313</p>
<p>隐藏分数变量　　314</p>
<p>本课小结　　316</p>
<p>第23课　创建游戏背景对象和游戏对象　　316</p>
<p>创建背景对象　　317</p>
<p>为创建游戏对象做准备　　320</p>
<p>让音频管理者接管单击音效　　321</p>
<p>实现游戏对象Game类　　323</p>
<p>拓展：复习使用bind改变this对象　　331</p>
<p>本课小结　　332</p>
<p>第24课　创建页面对象　　332</p>
<p>创建游戏结束页面　　333</p>
<p>创建游戏主页对象　　338</p>
<p>本课小结　　347</p>
<p>第25课　重构游戏对象　　347</p>
<p>一个文件只定义一个类　　347</p>
<p>为Game类添加#currentPage变量　　352</p>
<p>解决30s超时限制不起作用的问题　　356</p>
<p>移除#gameIsOver变量　　359</p>
<p>本课小结　　359</p>
<p>第9章　面向对象重构一：重构游戏对象等　　361</p>
<p>第26课　设计模式重构一：单例模式、观察者模式和组合模式　　362</p>
<p>将Game类改写为单例模式　　362</p>
<p>在Game类上应用观察者模式　　364</p>
<p>使用组合模式改写用户记分板模块　　370</p>
<p>本课小结　　381</p>
<p>第27课　设计模式重构二：模板方法</p>
<p>模式、职责链模式和简单工厂模式　　381</p>
<p>在页面对象中启用模板方法模式　　382</p>
<p>使用职责链模式改写单击音效实现　　386</p>
<p>使用简单工厂模式改写turnToPage方法　　391</p>
<p>本课小结　　396</p>
<p>第10章　面向对象重构二：页面对象和分界线的绘制　　397</p>
<p>第28课　设计模式重构三：工厂方法</p>
<p>模式和抽象工厂模式　　397</p>
<p>使用工厂方法模式创建Page页面对象　　397</p>
<p>使用抽象工厂模式封装页面对象的创建过程　　400</p>
<p>本课小结　　403</p>
<p>第29课　设计模式重构四：建造者模式、命令模式和原型模式　　403</p>
<p>使用建造者模式构建页面对象　　404</p>
<p>拓展：如何理解建造者模式、抽象工厂模式与模板方法模式　　408</p>
<p>使用命令模式绘制分界线　　408</p>
<p>使用原型模式复制对象　　412</p>
<p>拓展：JS如何实现浅复制与深复制　　416</p>
<p>本课小结　　419</p>
<p>第30课　设计模式重构五：复合命令模式、迭代器模式和享元模式　　419</p>
<p>使用复合命令模式重构GameOverPage　　419</p>
<p>使用迭代器模式改造复合命令实现　　426</p>
<p>使用享元模式改写分界线绘制　　432</p>
<p>本课小结　　438</p>
<p>第11章　面向对象重构三：重构音频管理等　　439</p>
<p>第31课　设计模式重构六：适配器模式、桥接模式和装饰模式　　439</p>
<p>使用适配器模式改造音频管理者　　439</p>
<p>使用桥接模式重构碰撞检测　　447</p>
<p>使用装饰模式重构挡板的渲染方式　　462</p>
<p>本课小结　　467</p>
<p>第32课　设计模式重构七：访问者模式和策略模式　　467</p>
<p>使用访问者模式优化碰撞检测　　467</p>
<p>使用策略模式扩展右挡板的移动算法　　471</p>
<p>拓展：关于25个设计模式的补充说明　　474</p>
<p>本课小结　　476</p>
<p>附录　思考与练习参考答案　　477</p>
<p><strong>微信小游戏开发：后端篇</strong></p>
<p>目　录　Contents</p>
<p>序一</p>
<p>序二</p>
<p>前言</p>
<p>第1章　本地功能：本地存储与LBS定位1</p>
<p>第1课　读写本地缓存1</p>
<p>创建数据服务单例，实现本地数据读取2</p>
<p>拓展：使用Storage面板管理本地缓存数据4</p>
<p>面向Promise编程：异步转同步5</p>
<p>如何清除本地缓存12</p>
<p>本课小结13</p>
<p>第2课　使用FileSystemManager读写本地文件13</p>
<p>读写本地文件，实现数据服务模块14</p>
<p>面向Promise编程：避免使用try catch17</p>
<p>本课小结20</p>
<p>第3课　使用腾讯位置服务显示用户城市20</p>
<p>使用腾讯位置服务21</p>
<p>拓展：小心隐藏字符错误27</p>
<p>解决回调函数简写引发的错误28</p>
<p>使用异步转同步技巧重写LBSManager29</p>
<p>本课小结30</p>
<p>第2章　本地功能：优化游戏体验与性能31</p>
<p>第4课　优化游戏体验：添加背景图片和顶级UI层31</p>
<p>添加适配不同机型的背景图片31</p>
<p>使用有限字符的自定义字体35</p>
<p>在左挡板失误时振动37</p>
<p>监听并处理背景音乐的意外暂停39</p>
<p>使用一个暂停按钮，控制游戏的暂停与恢复41</p>
<p>解决游戏暂停后定时器不暂停的问题47</p>
<p>添加游戏顶级UI层，实现退出功能51</p>
<p>本课小结58</p>
<p>第5课　优化游戏性能：监听全局错误，记录错误日志59</p>
<p>监听全局错误，使用外观模式记录错误日志59</p>
<p>允许打开设置页面，用户自己管理授权66</p>
<p>拓展：关于小游戏UI层结构的说明68</p>
<p>主动垃圾回收68</p>
<p>拓展：如何控制屏幕亮度69</p>
<p>本课小结70</p>
<p>第3章　本地功能：添加排行榜和广告71</p>
<p>第6课　添加好友排行榜，为社交营销助力71</p>
<p>实现一个游戏内玩家排行榜71</p>
<p>实现好友中心玩家排行榜82</p>
<p>开启游戏圈：从小游戏中进入游戏圈83</p>
<p>开启客服会话：在小游戏中打开客服窗口86</p>
<p>开启用户意见反馈通道87</p>
<p>添加防沉迷机制88</p>
<p>本课小结91</p>
<p>第7课　添加广告92</p>
<p>添加Banner广告92</p>
<p>添加视频激励式广告93</p>
<p>本课小结94</p>
<p>第4章　云开发：创建与使用云函数96</p>
<p>第8课　创建第一个云函数97</p>
<p>配置云开发98</p>
<p>开通云环境99</p>
<p>在云数据库中创建集合101</p>
<p>认识云函数102</p>
<p>创建云函数103</p>
<p>本课小结105</p>
<p>第9课　调试和调用云函数106</p>
<p>云端测试106</p>
<p>本地调试109</p>
<p>调用云函数111</p>
<p>本课小结112</p>
<p>第5章　云开发：使用云数据库113</p>
<p>第10课　在小游戏端直接操作云数据库113</p>
<p>在小游戏中初始化云环境113</p>
<p>直接操作云数据库集合114</p>
<p>拓展：了解云数据库中的字段类型118</p>
<p>本课小结120</p>
<p>第11课　用两种方式实现分页查询120</p>
<p>使用分页查询方法121</p>
<p>使用聚合查询方法123</p>
<p>使用循环的方式清空小数据集合126</p>
<p>拓展：为查询字段添加索引，提升执行效率127</p>
<p>拓展：了解集合的权限控制128</p>
<p>本课小结129</p>
<p>第12课　用户如何操作自己创建的数据：查询与更新129</p>
<p>查询用户自己添加的历史数据130</p>
<p>在调试区测试云函数133</p>
<p>使用原子操作，更新用户自己创建的数据133</p>
<p>拓展：关于数据库操作符和数据库聚合操作符136</p>
<p>拓展：使用云文件ID137</p>
<p>本课小结138</p>
<p>第6章　后端：用Node.js实现接及处理客服消息139</p>
<p>第13课　准备MySQL数据库141</p>
<p>安装MySQL数据库与数据库管理工具141</p>
<p>创建数据库实例142</p>
<p>创建数据表history143</p>
<p>拓展：了解常用的MySQL数据类型146</p>
<p>本课小结149</p>
<p>第14课　实现history的3个RESTful API（Node.js版本）149</p>
<p>启动模板项目149</p>
<p>熟悉node-koa2项目模板结构150</p>
<p>拓展：了解RESTful API设计规范160</p>
<p>实现history的3个接口（Node.js版本）162</p>
<p>拓展：学习9种HTTP请求方法166</p>
<p>本课小结167</p>
<p>第15课　在小游戏端调用Node.js接口167</p>
<p>实现后台接口管理者模块，调用history的3个接口167</p>
<p>扩展新方法getOpenid，注意保持新旧代码的兼容性171</p>
<p>小游戏与小程序接口不一定一致174</p>
<p>使用外观模式实现统一的存储服务管理者178</p>
<p>本课小结181</p>
<p>第16课　在服务器端接收和处理客服消息（Node.js版本）181</p>
<p>使用内网穿透工具frp181</p>
<p>在小游戏后台启用与配置消息推送187</p>
<p>实现消息推送接口（Node.js版本）188</p>
<p>拓展：如何使用Linux指令查杀、重启程序192</p>
<p>拓展：如何在Windows系统上运行Linux指令193</p>
<p>本课小结196</p>
<p>第7章　后端：用Node.js和实现管理后台197</p>
<p>第17课　实现导航与登录功能（Node.js版本）197</p>
<p>创建数据表account198</p>
<p>拓展：互联网鉴权方式简介199</p>
<p>实现登录200</p>
<p>添加历史记录页面211</p>
<p>个人开发者使用小微商户实现支付215</p>
<p>本课小结227</p>
<p>第18课　使用Go语言实现后端程序228</p>
<p>使用go_iris项目模板228</p>
<p>实现history的3个接口230</p>
<p>使用curl测试接口235</p>
<p>接收和处理客服消息237</p>
<p>实现登录功能240</p>
<p>实现历史记录页面，分角色权限渲染功能247</p>
<p>拓展：如何让Go语言下载模块快一些250</p>
<p>本课小结250</p>
<p><em>此外，为了更好帮助初学者学习，作者还准备了《微信小游戏开发：番外篇》，在公号“艺述论”回复10000即可看到。以下是番外篇的目录。</em></p>
<ul>
<li></li>
<li></li>
</ul>
<p><strong>微信小游戏开发：后端篇</strong></p>
<hr>
<hr>
<p>目录</p>
<p>前言：学编程就像登山.................16</p>
<p>一，学习编程的 5 个阶段.....16</p>
<p>二，学习应该自上而下，还是自下而上........ 17</p>
<p>三，微信小游戏是编程入门项目的最佳选择 18</p>
<p>四，如何开始学习.................19</p>
<p>1，本书主要优势...........19</p>
<p>2，本书主要内容...........20</p>
<p>3，本书主要读者...........20</p>
<p>4，如何学习本书...........20</p>
<p>5，如何获取更多资源...21</p>
<p>五，勘误与支持.....................21</p>
<p>六，致谢..........21</p>
<p>第一篇 潜龙勿用（前端补充篇）23</p>
<p>第 1 章 认识计算机世界................23</p>
<p>第 1 课 计算机是如何计算 1+1=2 的？...........24</p>
<p>1 在浏览器中进行算式实验..................... 25</p>
<p>2 开始与浏览器对话，浏览器没有计算能力........ 26</p>
<p>3 问询 CPU，从 CPU 的视角解释加法器..............30</p>
<p>4 计算机实现加减乘除及呈现文字影像的原理.... 33</p>
<p>本课小结..34</p>
<p>第 2 课 计算机是如何实现可编程能力的？... 34</p>
<p>1 我是一个 Bug，开始是一条虫子..........34</p>
<p>2 我是一个机器，从开关开始进化......... 36</p>
<p>3 我是一个 CPU，是电子计算机的神经中枢....... 40</p>
<p>4 我是一个编译器，是一名人类与计算机之间的翻译官....42</p>
<p>本课小结..44</p>
<p>第 3 课 编程语言长什么样子？44</p>
<p>1 我是 C 语言，人类为了玩游戏而发明了我........45</p>
<p>2 我是一个变量，计算机靠我增加了“智能” .........48</p>
<p>3 我是一个语句，是组成代码的基本单位............ 50</p>
<p>第 4 页</p>
<p>4 我是逻辑控制语句，有三种结构......... 51</p>
<p>5 我是一个代码区块，拥有独立作用域. 54</p>
<p>6 我是一个函数，是实现代码复用的基本单位.... 55</p>
<p>7 我是一个类，具有封装、继承、多态三个面向对象特征56</p>
<p>本课小结..59</p>
<p>思考与练习参考答案.....59</p>
<p>第 4 课 什么是数据结构与算法？................... 61</p>
<p>1 数据结构一：栈..........61</p>
<p>2 数据结构二：队列......64</p>
<p>3 数据结构三：优先队列.. 67</p>
<p>4 数据结构四：链表......71</p>
<p>5 什么是算法和冒泡排序？..................... 76</p>
<p>6 什么是架构和架构师？.. 78</p>
<p>本课小结..79</p>
<p>思考与练习参考答案.....79</p>
<p>第 5 课 什么是类、面向对象和设计模式？... 81</p>
<p>1 基本特征一：封装......81</p>
<p>2 基本特征二：继承......83</p>
<p>3 基本特征三：多态......84</p>
<p>4 6 个基本原则...............86</p>
<p>5 什么是设计模式？......88</p>
<p>本课小结..89</p>
<p>思考与练习参考答案.....89</p>
<p>第 6 课 什么是 JavaScript、HTML 和 CSS？. 91</p>
<p>1 什么是 ES6？..............91</p>
<p>2 JavaScript 语言有哪些特点？................92</p>
<p>3 如何使用 Console 面板调试代码？...... 95</p>
<p>4 什么是 HTML？......... 97</p>
<p>5 什么是 CSS？..............99</p>
<p>6 什么是 JS 的宿主环境？......................100</p>
<p>7 什么是 HTML5？..... 101</p>
<p>8 什么是画布（Canvas）？....................101</p>
<p>第 5 页</p>
<p>本课小结102</p>
<p>思考与练习参考答案...102</p>
<p>第二篇 亢龙有悔...103</p>
<p>第 2 章 面向对象和设计模式实例讲解................. 106</p>
<p>第 7 课 面向对象的 6 个基本原则..................108</p>
<p>1 从“白马非马”看抽象与具象................109</p>
<p>2 SOLLID：面向对象的 6 个基本原则. 109</p>
<p>3 最重要的基本原则：开放-封闭原则.. 114</p>
<p>4 了解 MVC 及响应式框架.................... 117</p>
<p>5 设计模式的本质是什么？....................119</p>
<p>6 设计模式的时代演进性 120</p>
<p>本课小结121</p>
<p>思考与练习参考答案...121</p>
<p>第 8 课 创建型模式一：单例模式和工厂三枝花........ 123</p>
<p>1 单例模式（Singleton Pattern）............123</p>
<p>2 工厂模式（Factory Pattern）简介.......125</p>
<p>3 简单工厂（Simple Factory）模式.......126</p>
<p>4 工厂方法（Factory Method）模式......128</p>
<p>5 抽象工厂（Abstract Factory）模式.....130</p>
<p>6 工厂三枝花彼此之间有什么不同？... 133</p>
<p>7 抽象工厂模式与桥接模式有什么不同？.......... 133</p>
<p>本课小结134</p>
<p>第 9 课 创建型模式二：建造者模式和原型模式........ 134</p>
<p>1 建造者（Builder）模式 134</p>
<p>2 建造者模式与抽象工厂模式有什么不同？...... 139</p>
<p>3 原型（Prototype）模式.139</p>
<p>本课小结143</p>
<p>第 10 课 行为型模式一：迭代器模式和观察者模式.. 144</p>
<p>1 迭代器（Iterator）模式.144</p>
<p>2 内、外迭代器............144</p>
<p>3 使用标准迭代器........146</p>
<p>4 如何迭代 Object? ...... 152</p>
<p>第 6 页</p>
<p>5 集中扩展 Object.prototype ................... 154</p>
<p>6 如何实现一个通用迭代器？............... 155</p>
<p>7 观察者（Observer）模式.....................158</p>
<p>本课小结160</p>
<p>第 11 课 行为型模式二：模板方法模式、命令模式和状态模式............ 161</p>
<p>1 模板方法（ Template Method）模式.. 161</p>
<p>2 建造者模式与模板方法模式有什么不同？...... 165</p>
<p>3 命令（Command）模式165</p>
<p>4 使用命令模式实现撤消功能............... 168</p>
<p>5 状态（State）模式....171</p>
<p>6 状态模式与简单工厂模式有什么不同？.......... 175</p>
<p>本课小结175</p>
<p>第 12 课 行为型模式三：策略模式、职责链模式和中介者模式............ 175</p>
<p>1 使用策略（Strategy）模式抽离算法..176</p>
<p>2 建造者模式与策略模式有什么不同？.............. 178</p>
<p>3 使用职责链（Chain of Responsibility）模式.... 179</p>
<p>4 职责链模式和策略模式有什么不同？.............. 182</p>
<p>5 使用中介者（Mediator）模式.............182</p>
<p>6 中介者模式与观察者模式有什么异同？.......... 189</p>
<p>本课小结189</p>
<p>思考与练习参考答案...189</p>
<p>第 13 课 行为型模式四：访问者模式、解释器模式和备忘录模式........190</p>
<p>1 使用访问者（Visitor）模式.................190</p>
<p>2 使用解释器（Interpreter）模式.......... 197</p>
<p>3 使用备忘录（Memento）模式............ 199</p>
<p>4 备忘录模式配合命令模式使用........... 202</p>
<p>5 状态模式与备忘录模式、策略模式的对比...... 206</p>
<p>本课小结207</p>
<p>第 14 课 结构型模式一：组合模式和外观模式.......... 207</p>
<p>1 使用组合（Composite）模式.............. 208</p>
<p>2 了解浏览器差异，使用外观（Facade）模式...214</p>
<p>3 使用外观模式改写示例 39 .................. 221</p>
<p>第 7 页</p>
<p>本课小结225</p>
<p>第 15 课 结构型模式二：代理模式和适配器模式...... 226</p>
<p>1 使用代理（Proxy）模式加快页面加载.............226</p>
<p>2 使用 ES6 的 Proxy 实现对象管控....... 232</p>
<p>3 代理模式与外观模式有什么区别？... 236</p>
<p>4 使用适配器（Adapter）模式...............237</p>
<p>本课小结240</p>
<p>第 16 课 结构型模式三：装饰模式、桥接模式和享元模式...... 240</p>
<p>1 使用装饰（Decorator）模式............... 240</p>
<p>2 装饰模式与组合模式有什么异同？... 247</p>
<p>3 装饰模式与代理模式有什么区别？... 248</p>
<p>4 装饰模式与适配器模式、外观模式的区别？.. 248</p>
<p>5 使用桥接（Bridge）模式.....................248</p>
<p>6 桥接模式与代理模式、适配器模式有什么区别？.......... 253</p>
<p>7 使用享元（Flyweight）模式............... 254</p>
<p>本课小结257</p>
<p>思考与练习参考答案...258</p>
<p>第 3 章 JS 语法实例讲解.............259</p>
<p>第 17 课 JS 语法基础一：基本数据类型和变量、常量............. 260</p>
<p>1 JS 语言的基本特点和编译原理...........260</p>
<p>2 如何编写与测试 JS 代码？..................262</p>
<p>3 字面量、注释与标识符 262</p>
<p>4 基本数据类型和声明关键字............... 264</p>
<p>5 标识符提升................276</p>
<p>本课小结278</p>
<p>第 18 课 JS 语法基础二：操作符和逻辑控制语句..... 278</p>
<p>1 四则运算操作符及逻辑运算符........... 278</p>
<p>2 可选链操作符（?.）.283</p>
<p>3 空值合并操作符（??）.284</p>
<p>4 逻辑控制语句之 if 语句 285</p>
<p>5 四种简单的 for 循环.286</p>
<p>6 入口控制循环和出口控制循环........... 289</p>
<p>第 8 页</p>
<p>本课小结290</p>
<p>思考与练习参考答案...290</p>
<p>第 19 课 面向对象语法一：对象和数组....... 290</p>
<p>1 对象属性名称简写....291</p>
<p>2 方法名称简写............291</p>
<p>3 计算属性....................292</p>
<p>4 Symbol 属性.............. 292</p>
<p>5 扩展运算符................293</p>
<p>6 将 Object 用作字典...293</p>
<p>7 数组的基本操作........294</p>
<p>8 使用扩展运算符展开数组元素........... 294</p>
<p>9 快速清空数组............294</p>
<p>10 如何删除数组中的元素？................. 295</p>
<p>11 如何在指定位置添加数组元素？..... 296</p>
<p>12 数组归并（reduce）操作...................296</p>
<p>本课小结297</p>
<p>思考与练习参考答案...297</p>
<p>第 20 课 面向对象语法二：函数、类与作用域.......... 299</p>
<p>1 函数的定义................299</p>
<p>2 函数调用与立即调用（IIFE）............ 301</p>
<p>3 使用 apply、call 间接调用函数...........303</p>
<p>4 递归函数....................306</p>
<p>5 正确理解函数中的 this 关键字............307</p>
<p>6 闭包.....307</p>
<p>7 对象的创建与继承....312</p>
<p>8 模块化开发................315</p>
<p>9 JS 的 6 种作用域.......319</p>
<p>10 作用域的嵌套与遮蔽.. 321</p>
<p>11 原型继承与属性屏蔽...322</p>
<p>本课小结325</p>
<p>思考与练习参考答案...325</p>
<p>第 21 课 JS 实用技巧一：操作符、扩展运算符和短路评估等技巧....... 327</p>
<p>第 9 页</p>
<p>1 使条件运算符（?:）简化 if 逻辑........327</p>
<p>2 使用逻辑或运算符（||）简化变量赋值.............328</p>
<p>3 使用扩展运算符（…）操作数组....... 328</p>
<p>4 使用双按位非运算符（~~）向下取整..............330</p>
<p>5 在 if 条件中使用布尔值自动转换.......330</p>
<p>6 使用 for in 和 for of 遍历数组..............331</p>
<p>7 使用短路评估简写 if 语句................... 332</p>
<p>8 使用 try catch 捕捉异常.332</p>
<p>本课小结333</p>
<p>思考与练习参考答案...333</p>
<p>第 22 课 JS 实用技巧二：对象与函数等相关技巧..... 334</p>
<p>1 变量声明技巧............335</p>
<p>2 对象属性名称简写....336</p>
<p>3 箭头函数实用技巧....336</p>
<p>4 函数参数的定义技巧337</p>
<p>5 使用 find 方法实现复杂查找...............339</p>
<p>6 字符串使用技巧........340</p>
<p>7 使用科学记数法........341</p>
<p>本课小结341</p>
<p>思考与练习参考答案...343</p>
<p>第 4 章 Go 语言一：运算符和基本数据类型........344</p>
<p>第 23 课 迈出 Go 语言编程第一步.................344</p>
<p>安装 Go 语言开发包....344</p>
<p>配置 Go 语言编辑器....350 一个 Go 语言程序的基本结构................352</p>
<p>Go 语言基本标记.........353</p>
<p>基本数据类型及字面量... 357</p>
<p>复合数据类型...............359</p>
<p>全局变量与形参...........372</p>
<p>零值与类型推断...........374</p>
<p>包............377</p>
<p>第 10 页</p>
<p>注释........378</p>
<p>本课小结379</p>
<p>第 24 课 6 类运算符............ 379</p>
<p>算术运算符...................380</p>
<p>关系运算符...................381</p>
<p>逻辑运算符...................384</p>
<p>位运算符386</p>
<p>赋值运算符...................388</p>
<p>指针运算符...................390</p>
<p>运算符的优先级...........391</p>
<p>本课小结392</p>
<p>第 25 课 基本数据类型........393</p>
<p>6 类数据类型................393</p>
<p>数字类型395</p>
<p>字符串类型...................398</p>
<p>零值........401</p>
<p>类型推断403</p>
<p>本课小结404</p>
<p>第 5 章 Go 语言二：变量、逻辑控制与函数........405</p>
<p>第 26 课 变量、常量与作用域.405</p>
<p>变量........405</p>
<p>作用域....410</p>
<p>常量........415</p>
<p>本课小结422</p>
<p>第 27 课 4 种逻辑控制语句.422</p>
<p>if 语句.....423</p>
<p>if 的便捷语句................424</p>
<p>for 循环语句.................425</p>
<p>无限循环426</p>
<p>循环控制关键字：break、continue 和 goto.......427</p>
<p>第 11 页</p>
<p>switch 语句...................429</p>
<p>使用 select 语句进行通道读写...............435</p>
<p>本课小结438</p>
<p>第 28 课 函数.438</p>
<p>函数的定义与调用.......438</p>
<p>函数返回值...................440</p>
<p>函数的参数...................443</p>
<p>函数的 3 种特殊用法...446</p>
<p>使用 defer 在函数退出前执行代码........449</p>
<p>本课小结450</p>
<p>第 29 课 递归函数与闭包....450</p>
<p>使用递归函数实现阶乘... 450</p>
<p>斐波那契数列...............452</p>
<p>闭包........453</p>
<p>本课小结455</p>
<p>第 6 章 Go 语言三：复合数据类型.456</p>
<p>第 30 课 数组.456 一维数组456</p>
<p>多维数组460</p>
<p>向函数传递数组...........462</p>
<p>本课小结463</p>
<p>第 31 课 切片.463</p>
<p>定义切片464</p>
<p>切片的零值...................466</p>
<p>切片初始化...................467</p>
<p>使用 append 和 copy 函数操作切片.....468</p>
<p>切片和数组有什么区别... 469</p>
<p>本课小结470</p>
<p>第 32 课 字典.471</p>
<p>声明字典471</p>
<p>第 12 页</p>
<p>初始化字典...................471</p>
<p>如何访问字典成员.......473</p>
<p>使用 delete 删除字典成员...................... 474</p>
<p>使用泛型解决 Go 语言类型宽泛的问题.............. 476</p>
<p>使用 range 遍历集合数据478</p>
<p>本课小结481</p>
<p>第 33 课 结构体与接口........481</p>
<p>认识结构体...................481</p>
<p>定义结构体...................482</p>
<p>声明结构体变量...........482</p>
<p>在结构体上定义方法...484</p>
<p>了解 Go 语言的自动解引用、取引用机制.......... 485</p>
<p>访问结构体成员...........487</p>
<p>结构体指针...................488</p>
<p>将结构体指针作为函数参数传递.......... 488</p>
<p>定义接口490</p>
<p>以接口作为变量类型...490</p>
<p>空接口....492</p>
<p>本课小结495</p>
<p>第 34 课 指针与错误............495</p>
<p>认识指针496</p>
<p>4 种常见的指针操作....497</p>
<p>空指针....498</p>
<p>指针数组499</p>
<p>使用非安全指针操作数据...................... 501</p>
<p>了解 unsafe 包的 3 个指针函数和 Go 语言的 3 类指针..... 505</p>
<p>将指针作为函数参数...506</p>
<p>错误........507</p>
<p>本课小结509</p>
<p>第 7 章 基础编码规范讲解..........512</p>
<p>第 13 页</p>
<p>第 35 课 一般性编码规范....513</p>
<p>1 文件与目录的命名约定 513</p>
<p>2 类内成员的出场顺序516</p>
<p>3 优先使用绝对路径导入模块............... 517</p>
<p>4 关于 Git 仓库的使用规范.................... 518</p>
<p>5 常用的 Git 操作指令 522</p>
<p>6 文件内容的编码约定526</p>
<p>7 开发中常见的单词缩写及惯用词....... 529</p>
<p>8 本课小结....................536</p>
<p>第 36 课 JS 基础编码规范...536</p>
<p>1 标识符命名规范........537</p>
<p>2 关于方法与函数的定义 539</p>
<p>3 关于数组、对象与模块的定义........... 542</p>
<p>4 关于操作符的使用....544</p>
<p>5 关于流程控制语句....547</p>
<p>6 关于“不要使用”的规范.549</p>
<p>本课小结553</p>
<p>第 37 课 JS 代码格式化规范....553</p>
<p>1 将左花括号放在行尾554</p>
<p>2 不乱用小括号............554</p>
<p>3 数组和对象的初始化554</p>
<p>4 函数参数换行............556</p>
<p>5 参数中有匿名函数....557</p>
<p>6 善用空行....................557</p>
<p>7 使用三元运算符的表达式换行........... 558</p>
<p>8 字符串.558</p>
<p>9 可见性（私有域、保护域和公开域）.............. 558</p>
<p>10 枚举...559</p>
<p>本课小结559</p>
<p>思考与练习参考答案...560</p>
<p>第 38 课 JSDoc 注释规范.... 560</p>
<p>1 什么是 JSDoc？........ 561</p>
<p>2 常用的 JSDoc 标记562</p>
<p>3 不常用的 JSDoc 标记 570</p>
<p>4 文件注释 571</p>
<p>5 类注释 571</p>
<p>6 方法与函数的注释 572</p>
<p>7 属性注释 572</p>
<p>8 类型转换的注释 573</p>
<p>9 参数、属性的可空与可选 573</p>
<p>10 使用缩进 573</p>
<p>11 使用 HTML 格式化描述文本 574</p>
<p>12 注释中的 JS 类型 574</p>
<p>本课小结 575</p>
<p>第 39 课 JS 编码补充注意事项 575</p>
<p>1 关于 getter 和 setter 的命名 575</p>
<p>2 用常量命名深路径 576</p>
<p>3 延迟初始化 576</p>
<p>4 明确作用域 576</p>
<p>5 使用布尔字面量简化条件表达式 576</p>
<p>6 使用数组的 join 方法拼接字符串 577</p>
<p>7 最终的编码规范 578</p>
<p>本课小结 578</p>
<p>第 40 课 CSS 编写规范 578</p>
<p>1 普遍使用连字符命名法 580</p>
<p>2 关于 ID 和样式类的命名 580</p>
<p>3 元素选择器自右向左，从具体向宽泛定义 581</p>
<p>4 简写 CSS 样式 582</p>
<p>5 关于 0 的省略 583</p>
<p>6 使用十六进制或 rgb 颜色值 583</p>
<p>7 在样式名称中使用前缀 583</p>
<p>8 处理浏览器兼容性 584</p>
<p>本课小结 584</p>
<p>第 41 课 CSS 代码格式化规范 584</p>
<p>1 顺序 585</p>
<p>2 缩进 585</p>
<p>3 分号 586</p>
<p>4 空格 586</p>
<p>5 换行 586</p>
<p>6 引号 587</p>
<p>7 注释 587</p>
<p>本课小结 588</p>
<p>第 42 课 HTML 基本编码规范 588</p>
<p>1 使用符合人类自然语义的标签 589</p>
<p>2 默认使用小写字母 589</p>
<p>3 缩进与空格 590</p>
<p>4 标签闭合 590</p>
<p>5 引号 591</p>
<p>6 使用自定义属性 591</p>
<p>7 文档类型 592</p>
<p>8 字符集与注释 592</p>
<p>9 省略链接中的网络协议部分 592</p>
<p>10 使用 TODO 592</p>
<p>11 结构与表现分离 593</p>
<p>本课小结 593</p>
<p>第 43 课 HTML 语义使用规范 593</p>
<p>1 结构性元素 593</p>
<p>2 页面头部元素 594</p>
<p>3 文本元素 594</p>
<p>4 媒体元素 595</p>
<p>5 列表元素 596</p>
<p>6 表单元素 596</p>
<p>7 页面模板 596</p>
<p>本课小结597</p>
<p>戳此前往<a href="https://item.jd.com/10070363837259.html">京东下单《微信小游戏开发》套装</a>👈<br>
<a href="http://mp.weixin.qq.com/s?__biz=MzAwODIzMzU3Mw==&amp;mid=2651750551&amp;idx=1&amp;sn=4552e3895fd3e3585c9a4ba6004a30a3&amp;chksm=808bd79db7fc5e8bc31d88a2d986336ecaaae9db210daa081eb1463bcee80235cdff03be6900&amp;scene=21#wechat_redirect">戳此添加作者微信👈</a>，发送暗号 1v1，马上报名私教培训班</p>
<h2>PBL 实战教学思想介绍</h2>
<p>我基于该思想进行计算机课程教学、在线课程视频录制及计算机图书写作。以下内容是我在极客时间四周年记念册上撰写的几段话，是我目前对 PBL 实战教学思想最好的注解。</p>
<blockquote>
<p>今天是国庆节，我想向所有读者和所有师友分享一个道理，一个我认为像阳光、空气和水一样朴实无华，但却一直被布道者忽视的道理。</p>
<p>我是一个砌石阶的人，并且今后可能会一直砌下去。今天我在写书稿时，看着复杂的代码，我突然确定：我所撰写的技术图书对读者来说是有价值的。这价值就在于整本书都在写一个 PBL实战案例，从最开始的三行代码，到最终的上万行代码。</p>
<p>如果要求学习者直接以结果代码为母板进行练习，这是不友好的，甚至是耍流氓的。但如果是从前面代码的基础之上，一步一步修改过来，就没有什么困难了。</p>
<p>学编程就像登山，只要一步一个台阶，没有人学不会!学不会只有两种情况，就是台阶设计得不合理，或者根本没有台阶。</p>
<p>会当凌绝顶，一览众山小。泰山虽高，有 1545 米，6331 个台阶，但只要一个阶一个台阶走上去，终可以到达山顶。但倘若有人有台阶不走，或者有人不让他走而让他从荒山野岭中攀爬，那么即便累死也爬不上去。</p>
<p>写技术书和写小说在某个点上是一样的，这个点是：向读者一点一点展现一个未知的世界。对于写小说的人，这一点是毋庸置疑的，如果他不这样写，就没有人读他的小说；但对于教材的编写者，或布道者来说，却极少有人意识到这一点，或者有人愿意俯身考虑这一点。</p>
<p>技术布道的书、专栏等内容，或许真的可以像小说一样有趣，至少不会像说明书那样枯燥。我希望有一天，可以按照登山砌石阶的思想，改写计算机基础入门教材，让编程学习不再枯燥，甚至像阅读小说一样有趣!</p>
</blockquote>
<p>这就是 PBL 实战教学思想，是我写书、录课一贯坚持的原则。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[使用 acme.sh & freessl.cn 申请免费 SSL 证书及自动续期]]></title>
            <link>https://yishulun.com/./src/posts/2023/11.html</link>
            <guid>https://yishulun.com/./src/posts/2023/11.html</guid>
            <pubDate>Thu, 12 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>使用 <a href="http://acme.sh">acme.sh</a> &amp; <a href="http://freessl.cn">freessl.cn</a> 申请免费 SSL 证书及自动续期</h1>
<p>域名地址基于 https 协议访问需要 SSL 证书，大多数情况下是一个 cer、一个 key 文件，在服务器端部署 web 站点的时候，在编写 Apache 或 nginx 配置文件时，需要提供这两个文件。</p>
<p><a href="http://freessl.cn">freessl.cn</a> 是一个可以让我们免费申请 SSL 证书的地方。但是免费证书都有一定的时效，如果证书过期了而我们忘记了重新申请并重新在服务器上部署 SSL 证书，便会影响网站的正常运行。</p>
<p>于是有人开发了一个 <a href="http://acme.sh">acme.sh</a> 工具，这个东西看起来像个域名，其实是一个实现了 ACME 协议的脚本工具。所谓的 ACME 协议，简单理解就是：可以验证域名所有权，在线自动申请一个 SSL 证书并下载到本地。<a href="http://acme.sh">acme.sh</a> 脚本工具在本地创建一个定时任务，定时检查证书是否过期，如果发现要过期了，就自己申请一个，把本地的旧证书替换掉。</p>
<p>这确实是一个自动化的好工具！</p>
<h2>如何使用 <a href="http://acme.sh">acme.sh</a>？</h2>
<p>怎么使用 <a href="http://acme.sh">acme.sh</a> 呢？在哪里使用它呢？</p>
<p>首先，要明确一点，<a href="http://acme.sh">acme.sh</a> 这个工具是一个 unix shell 环境工具，它是被设计出来在 macOS 或 Linux 上运行的，在 Windows 下并不合用。</p>
<p>在 macOS 上，安装这个工具：</p>
<pre><code class="language-bash">curl https://get.acme.sh | sh -s email=9830131@qq.com
</code></pre>
<p>安装以后，脚本工具会放置在~/.acme.sh 目录下。在终端访问 <a href="http://acme.sh">acme.sh</a>，如果访问不了，而还需要设置一个指令别名：</p>
<pre><code class="language-bash">alias acme.sh=~/.acme.sh/acme.sh
</code></pre>
<p>接着，在 <a href="https://freessl.cn/%E7%BD%91%E7%AB%99%E4%B8%8A%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F%E7%9A%84%E5%B8%A6%E6%9C%89%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E5%A4%9A%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6%E3%80%82">https://freessl.cn/网站上申请自动续期的带有通配符的多域名证书。</a></p>
<p>填写域名：</p>
<p><img src="./assets/image-20231012003243941.png" alt="image-20231012003243941"></p>
<p>域名填写完成后，便是域名所有权验证：</p>
<p><img src="./assets/image-20231012003307779.png" alt="image-20231012003307779"></p>
<p>这一步是通过在域名设置面板中添加 CNAME 记录完成验证的。</p>
<p>紧接着，域名验证完成以后，网站会给出两段脚本：</p>
<pre><code class="language-bash">acme.sh --issue -d '*.yishulun.com' -d '*.rxyk.cn'  --dns dns_dp --server https://acme.freessl.cn/v2/DV90/directory/i33ey2k462**** --debug
</code></pre>
<p>注意这个 server 地址是机密的，<a href="http://acme.sh">acme.sh</a> 每次都是靠它与 <a href="http://freessl.cn">freessl.cn</a> 的服务器端进行沟通的。</p>
<p>最后，成功执行上面的执行——如果有问题，就将域名分开执行，或重试，我们会发现在~/.acme.sh 目录下会有对应的证书文件。</p>
<p>当证书过期时，我们只需要手动执行这行脚本，本地证书便会更新。当然我们也可以将这行脚本加入到自动任务的序列中，定时检查与更新证书。</p>
<p>只需要申请一次，就可以覆盖所有二级域名的证书。这些证书文件我们可以上传到服务器指定的目录下，为多个站点共享使用，这确实省去了证书申请、配置的麻烦。加上自动任务在服务器上自动执行，基本 SSL 证书的事情只需要设置一次就不需要再操心了。</p>
<h2>名词解释</h2>
<p>什么是 <a href="http://acme.sh">acme.sh</a>？</p>
<p><a href="http://acme.sh">acme.sh</a> 是一个用于申请和自动续期 Let's Encrypt 免费 SSL 证书的自动化脚本工具 [5]。您可以通过执行一系列命令来注册 <a href="http://acme.sh">acme.sh</a>，然后配置它以自动续期证书 [2]。该工具使证书管理更加便捷，无需手动干预即可确保您的 SSL 证书始终有效。</p>
<p>什么是 Let's Encrypt？</p>
<p>Let's Encrypt 是一个提供免费 SSL/TLS 证书的机构，使网站可以实现 HTTPS 加密连接 [8]。通过 <a href="http://acme.sh">acme.sh</a> 工具，您可以从 Let's Encrypt 获取免费的证书，并且这些证书支持自动续期 [8]。这为网站所有者提供了方便和经济的方式来确保其网站的安全性和可信度。</p>
<p>总的来说，<a href="http://acme.sh">acme.sh</a> 是一个有用的工具，可帮助您轻松申请和管理 Let's Encrypt 免费 SSL 证书，同时自动续期保持证书的有效性。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[普通人如何无需运气而致富？]]></title>
            <link>https://yishulun.com/./src/posts/2023/10.html</link>
            <guid>https://yishulun.com/./src/posts/2023/10.html</guid>
            <pubDate>Sun, 01 Oct 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="assets/image-20231001212404232.png" alt="image-20231001212404232"></p>
<h1>普通人如何无需运气而致富？</h1>
<ul>
<li>追求财富，而不是金钱或地位。财富就是拥有可以在睡觉时赚取的资产。金钱是我们转移时间和财富的方式。地位是你在社会等级制度中的位置。</li>
<li>了解道德财富创造是可能的。如果你暗自鄙视财富，财富就会远离你。</li>
<li>忽略那些玩地位游戏的人。他们通过攻击玩财富创造游戏的人来获得地位。</li>
<li>出租时间是不会致富的。您必须拥有股权（企业的一部分）才能获得财务自由。</li>
<li>通过给予社会想要但尚不知道如何获得的东西，你就会变得富有。规模化。</li>
<li>选择一个可以与长期人员进行长期博弈的行业。</li>
<li>互联网极大地拓宽了职业的可能空间。大多数人还没有弄清楚这一点。</li>
<li>玩迭代游戏。生活中的所有回报，无论是财富、人际关系还是知识，都来自复利。</li>
<li>选择智力高、精力充沛、最重要的是诚信的商业伙伴。</li>
<li>不要与愤世嫉俗者和悲观主义者合作。他们的信念是自我实现的。</li>
<li>学习销售。学习建造。如果你能做到这两点，你将势不可挡。</li>
<li>用特定的知识、责任感和影响力武装自己。</li>
<li>特定知识是你无法通过培训获得的知识。如果社会可以训练你，它也可以训练其他人，并取代你。</li>
<li>通过追求真正的好奇心和热情，而不是现在热门的东西，来找到特定的知识。</li>
<li>积累特定的知识对你来说就像玩耍，但对其他人来说却像是工作。当教授特定知识时，是通过学徒而不是学校进行的。</li>
<li>特定知识通常具有很强的技术性或创造性。它不能外包或自动化。</li>
<li>承担责任，以自己的名义承担商业风险。社会将回报你责任、公平和影响力。</li>
<li>最负责任的人拥有独特的、公开的、有风险的品牌。</li>
<li>“给我一根足够长的杠杆和一个站立的地方，我就能撬动地球。” 阿基米德说。</li>
<li>财富需要杠杆。业务杠杆来自资本、人员和产品，没有边际复制成本（代码和媒体）。</li>
<li>资本意味着金钱。为了筹集资金，请运用您的专业知识，承担责任，并表现出良好的判断力。</li>
<li>劳动力是指为你工作的人。这是最古老、最具争议的杠杆形式。劳动力杠杆会给你的父母留下深刻的印象，但不要浪费你的生命去追逐它。</li>
<li>资本和劳动力是被许可的杠杆。每个人都在追逐资本，但总得有人给你。每个人都试图领导，但必须有人跟随你。</li>
<li>代码和媒体是无需许可的杠杆。他们是新富背后的杠杆。您可以创建适合您睡觉时使用的软件和媒体。</li>
<li>机器人大军是免费提供的——它们只是被装在数据中心内以提高热量和空间效率。用它。</li>
<li>如果您不会编码，请写书和博客、录制视频和播客。杠杆是你判断力的倍增器。</li>
<li>判断力需要经验，但可以通过学习基础技能来更快地建立。</li>
<li>没有一种技能叫做“生意”。避免阅读商业杂志和商务课程。</li>
<li>如果要读书，首先应该阅读《无限的开始》和《现实的结构》。</li>
</ul>
<p>以上内容译自<a href="https://twitter.com/naval/status/1002103360646823936">@Naval</a>，他是一名非常成功的独立黑客。</p>
<p>文中提到的《无穷的开始》是一本具有深刻哲学观点的书籍，作者是量子物理学家戴维多。这本书探讨了自然选择学说等主题，被认为是一本能够改变世界观的好书。</p>
<p>这两本书可以在公号“艺述论”回复10006下载。打开文件如果需要密码，可以试下yishulun。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[bun 介绍四：自动安装依赖项，bun 立志要做一个零配置的快速框架]]></title>
            <link>https://yishulun.com/./src/posts/2023/09.html</link>
            <guid>https://yishulun.com/./src/posts/2023/09.html</guid>
            <pubDate>Thu, 28 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>bun 介绍四：自动安装依赖项，bun 立志要做一个零配置的快速框架</h1>
<p>在 webpack 工程中，无论是使用 pnpm，还是 yarn，在运行项目之前都需要执行 pnpm i 或 yarn，这是在安装依赖项，将项目代码中引用的类库放在当前项目的 node_modules 目录下。</p>
<p>一般情况下，对于复杂的项目这个过程耗时会比较久，这是 Node.js 作为基础构架的痛点，也是 bun 着力解决与优化的亮点。在<a href="https://yishulun.com/posts/2023/05.html">第一篇</a>中，我们就已经详细介绍过了，bun 在这方面将其它包管理工具甩开了一个数量级。</p>
<p>但这远远还不够，bun 做的还更多。</p>
<p>bun 在安装速度优化之外，还提供了一个<strong>自动安装</strong>的功能。这个特征，目的在于实现<strong>零配置运行代码</strong>。对于一个 bun 项目，没有什么是不可缺失的，什么 package.json 等文件，统统都可以没有。<strong>代码即是项目本身，有代码就可以运行</strong>。</p>
<p>下面我们深入了解一下这个自动安装的机制。</p>
<p>先看实现了什么效果。所谓的自动安装，就是不需要执行 bun i，直接通过 bun run 运行代码，遇到本地没有的依赖项，bun 先自己下载安装然后再运行代码。对于下面的代码：</p>
<pre><code class="language-js">// src/index.ts
import _ from &quot;lodash&quot;;
const array = [1, 2, 3];
_.fill(array, 'a');
console.log(array); // =&gt; ['a', 'a', 'a']
</code></pre>
<p>项目中还没有添加过 lodash 这个类库，没关系，当我们执行 bun run 指令时：</p>
<pre><code class="language-bash">$ bun run src/index.ts
// ... installing dependency
[ &quot;a&quot;, &quot;a&quot;, &quot;a&quot; ]
</code></pre>
<p>bun 会自动下载、安装好 lodash，然后再运行 ts 代码。这时候如果你扫一眼 index.ts 文件所在的目录，发现什么变化都没有，那下载的 lodash 放到哪里去了？（这一点后面会说。）</p>
<p>要实现自动安装，有几个问题需要解决：</p>
<p>1）什么情况下启用自动安装？</p>
<p>2）安装类库的哪个版本？</p>
<p>3）要不要下载选定的版本，从哪里下载，放在哪里？</p>
<h2>1、什么情况下启动自动安装</h2>
<p>先看第一个问题，bun 通过查看源码目录下是否存在 node_modules 目录，以此决定要不要启动自动安装。没有 node_modules 就启用，有则不启用。此处，官方文档说，这个开关还受到<code>$HOME/.bunfig.toml</code> 配置文件或项目目录下的 <code>bunfig.toml</code> 配置文件的制约，如果配置文件里面有一个 install.auto 等于 force 的配置节点，则会强制启用自动安装。</p>
<pre><code class="language-js">[install]
auto = &quot;force&quot;
</code></pre>
<p>经实践，这个配置字段不好使。</p>
<p>无论将配置文件放在哪里，放在项目的目录下，还是放在$HOME 下，都不起作用。想查看自动安装的效果，目前最好使的方式是在一个空目录下放置上面 index.ts 代码，然后执行 bun run 指令，这是可以 100% 复现效果的。</p>
<p>如果你的项目是新项目，没有被 pnpm、yarn 等包管理工具蹂躏过，本身就没有 node_modules 目录，那么自动安装后仍然没有，也就是说，下次你仍然可以继续享用自动安装的便利。对于开发者来说，你只需要写代码就可以，想用哪个类库，直接使用 import 引入，根本不必考虑安装的问题。整个 github 上的开源类库，都在你的操控范围之内。（当然了，前提是你的网卡得能顺利访问到 github。）</p>
<h2>2、如何确定类库版本</h2>
<p>在代码中使用 import 语句时，我们是不能直接指定其版本的，像下面这种写法就不合法：</p>
<pre><code class="language-js">import _ from &quot;lodash@4.0.0&quot; // 不合法
</code></pre>
<p>以后 bun 风行起来以后，或许能够推动修改 JS 标准，使上述这行代码成立。目前，当 bun 发现正常运行代码需要 lodash 类库时，它会依次从三个地方询问版本：</p>
<p>1）先看项目中的 bun.lockb 文件。如果本项目安装过 lodash 这个类库，则 bun.lockb 文件一定会有记录，里面有明确的版本。为了保证一个项目中引用同一个类库的版本保持一致，此处直接使用缓存过的版本。bun.lockb 文件并不一定是自己执行 bun add 指令产生的，如果我们的项目代码是从团队仓库中拉出来的，这个 bun.lockb 文件可能是同事产出的。<strong>使用同事已经验证过的类库版本</strong>，是保证团队协作顺利进行的基本准则，同时也是不需要言明就存在的准则。</p>
<p>2）如果没有 bun.lockb 文件，那就看看 package.json 文件。如果这是一个使用过 pnpm 或 yarn 的旧项目，它可能有一个 package.json 文件，里面的 devDependencies 节点或 dependencies 节点记录了本地项目的依赖项，找到 lodash，取其版本即可。</p>
<p>3）如果 package.json 中也没有记录 lodash 的版本，最后一招，就只有默认使用 latest 版本了。</p>
<h2>3、如何下载与缓存</h2>
<p>确定了版本，就是下载了。</p>
<p>1）从本地全局缓存目录下查找 lodash 的指定版本，这个全局缓存目录默认位于~/.bun/install/cache，在这个目录下查找<code>&lt;pkg&gt;@&lt;version&gt;</code>，如果找到了就直接使用。这里还有一个特殊情况，如果在上一步指定的版本是 latest，在这一步则要求上一次下载的时间不能超过 24 小时，如果超过了则不能使用，要视为未找到版本对待。</p>
<p>这里可能会产生未知 Bug，当团队中的两个人使用同一个类库并且均是以 latest 确定版本的情况下，有可能两个人实际使用的版本不一致。同一个项目在不同的协作者手里使用不一致的版本，这本身就是风险，尽管这种风险概率很小，但它确实有可能存在。为此，在团队开发中，<strong>使用版本明确的类库版本</strong>是一项基本准则，第一个建立项目的人，一定要将版本写明在 package.json 里面，或者保留在 bun.lockb 文件里。一些开发者可能看 bun.lockb 这个文件名字奇怪，而将它打入.gitignore 冷宫中，这是错误的行为。</p>
<p>在明确版本的时候，要使用 4.0.0 这样明确的版本号，而不要使用<code>^4.0.0</code>这样的版本号。后者版本号中的尖括号在正则表达式中是“开始”的意思，在这里也可以理解为“开始”，意思是大于等于某个版本，这样的版本号一般称为 semver range version，它是一个范围，范围版本是不适宜在项目中直接使用的。</p>
<p>2）如果从本地全局缓存中没有取到想要的类库版本，就必须从外网下载了。bun 从 npm 的软件源下载类库的指定版本。<strong>bun 立志要做零配置运行的快速框架</strong>，在开始的时候它可以没有任何配置，它直接使用了 npm 中配置的软件源，这是它作为后起之秀的优势。如果要配置 bun 自己的软件源，或实现软件源地址国产化，可以在<code>$HOME/.bunfig.toml</code> 文件中修改 install.registry 配置节点：</p>
<pre><code class="language-bash">[install]
registry = &quot;http://registry.npm.taobao.org&quot;
</code></pre>
<p>3）如果从外网下载不了，那项目就运行不下去了，本地研发中止。不过看过前面的介绍，你也发现了，对于团队协作，直接将同事的全局仓库缓存拷贝过来也是可以的，这还可以大大节省下载的时间。</p>
<p>有人甚至提议将本地全局缓存设置成某个局域网的共享目录，大家维护同一个缓存，不要这样做。这个目录不仅有读取，还有写入，两个人同时写入可能会发现意想不到的错乱。<strong>宁肯在一个地方缓存，然后分发给所有人，也好过所有人都有权限维护它，这是 CDN 分发的思维。</strong></p>
<h2>4、最佳实践</h2>
<p>最后说一下最佳实践。</p>
<p>既然 bun 有自动安装的功能，就要用起来，不要再让项目目录动辄就有几百上千 MB 的大小，团队里第一个创建项目的人，使用 bun add 指令创建好 bun.lockb 文件并随项目源码分享给他人。同事只需拿到 bun.lockb 文件就可以了，本地的 package.json 与 node_modules 都不需要有。但是这里有一个问题需要注意，这个 bun.lockb 是二进制格式的，这意味着如果团队中有两个以上的人同时维护了该文件，那么文件冲突便没有办法解决了，所以最好这个 bun.lockb 文件由项目的 owner 负责维护，其它人仅负责拉取就可以了。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Python脚本：如何一键登陆或开机自动登录公共区域的 WIFI？]]></title>
            <link>https://yishulun.com/./src/posts/2023/08.html</link>
            <guid>https://yishulun.com/./src/posts/2023/08.html</guid>
            <pubDate>Wed, 27 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271143100.png" alt="auto wifi script"></p>
<p>一对情侣第一次来某酒店入住，男生给女友开了门，女友进来后，男生看到女友的电脑自动连接上了酒店的 wifi，男生脸上露出了不悦。</p>
<p>男生：你怎么知道这个 wifi 密码？</p>
<p>女友：我不知道，我的设备自动连接上了。</p>
<p>男生：那你之前来过这家酒店吗？</p>
<p>女友：没有啊，我第一次来。</p>
<p>男生：那你怎么知道密码？</p>
<p>女友：不知道，我的电脑自动连接上了。</p>
<p>男生：那你的电脑是不是被别人破解过？</p>
<p>女友：没有啊，我一向很小心的。</p>
<p>男生：那你怎么知道密码？</p>
<p>女友：我不知道，我就这样自动连接上了。</p>
<p>男生：那你是不是……</p>
<p>女友：对了，我以前在“艺述论”下载过一个自动登录 wifi 的小脚本。</p>
<h1>Python脚本：如何一键登陆或开机自动登录公共区域的 WIFI？</h1>
<p>我们都知道，wifi 有自动连接的功能，只要设备出现在 wifi 覆盖的区域之内，wifi 即会自动连接。这个自动登陆的机制在人数少的情况下完全没有问题，但在人多的公共场合，可能便会导致路由器因为连接负荷过大而产生信号资源浪费（每个路由器可供连接的设备都是有限的）。为此，在大型公共场合，例如校园、图书馆等，一般用户在自动无密码连接上 wifi 以后，还会被要求输入用户名密码之类，登录之后才可以开启真正的网络连接。同时呢，使用实名帐号登录，也是信息监控的必要。</p>
<p>对于个人来讲，例如学生，每次都输入帐号密码是十分麻烦的。有些手机在连接后可以记住帐号，单击一下就可以；有一些却不可以，每次都需要浪费几十秒钟手动输入。在电脑上，wifi 连接后，弹出的窗口往往还是一个没有地址栏，且不能使用开发者工具查看网络链接的祼窗口，想破解地址都不太容易。</p>
<p>那么，怎么实现一键登陆呢？</p>
<h2>1，拿登录网关地址</h2>
<p>第一步，我们需要先找到要登录的本地服务器地址。可以使用如下 bash 脚本，在登陆 wifi 前监听本机网络活动：</p>
<pre><code class="language-bash">sudo tcpdump -A -s 0 'port 80 or port 443'
</code></pre>
<p>简单解释下这条指令：</p>
<ul>
<li><code>sudo</code>：以超级用户身份运行命令。</li>
<li><code>tcpdump</code>：网络流量捕获工具。</li>
<li><code>-A</code>：捕获所有数据包，包括数据包头和数据包内容。</li>
<li><code>-s 0</code>：捕获所有数据包，包括 IP 头和 TCP 头。</li>
<li><code>'port 80 or port 443'</code>：捕获 TCP 端口为 80 或 443 的数据包。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271110465.png" alt="tcpdump outputs"></p>
<p>这个指令输出的信息量很大，但通过先拷贝出来再搜索的方式，很容易可以拿到一个类似于“<a href="http://192.168.2.253:8080/api/TZTSG/wifi-auth%E2%80%9D%E8%BF%99%E6%A0%B7%E7%9A%84%E5%9C%B0%E5%9D%80%E3%80%82%E6%88%91%E4%BB%AC%E7%8C%9C%E6%B5%8B%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%BE%BF%E6%98%AF%E5%85%AC%E5%85%B1WIFI%E7%9A%84%E7%99%BB%E9%99%86%E5%9C%B0%E5%9D%80%E3%80%82%E5%9C%A8%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91%E4%B9%8B%E5%89%8D%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E4%B8%80%E5%AE%9A%E6%98%AF%E4%B8%80%E4%B8%AA%E5%86%85%E7%BD%91%E5%9C%B0%E5%9D%80%EF%BC%8C%E8%BF%99%E6%A0%B7%E7%9A%84%E5%9C%B0%E5%9D%80%E4%B8%80%E8%88%AC%E9%83%BD%E6%98%AF%E4%BB%A5192.168%E6%88%9610.3%E8%BF%99%E6%A0%B7%E7%9A%84IP%E7%AB%AF%E5%BC%80%E5%A4%B4%E7%9A%84%E3%80%82">http://192.168.2.253:8080/api/TZTSG/wifi-auth”这样的地址。我们猜测这个地址，便是公共WIFI的登陆地址。在连接外网之前可以访问的网络地址一定是一个内网地址，这样的地址一般都是以192.168或10.3这样的IP端开头的。</a></p>
<p>拿到这个地址以后，按说便可以将它保存到浏览器的收藏夹里，下次连接 wifi 的时候，单击一下就可以登录了。收藏的链接在浏览器内会自动记住用户名与密码，不会要求重复输入，这样已经很方便了。</p>
<p>但，我们是不是还可以更方便一些？</p>
<h2>2，自动发送登录请求</h2>
<p>第二步，我们谋划在本地发出一个网络请求。经过在开发者工具中查看网络请求的请求头，我们发现此类请求真是太简单了，是一个 GET 请求，用户名与密码直接拼接在了 URL 中，连加密都没有加密。</p>
<p>我们在本地创建一个脚本文件 login_wifi.py，主要代码如下所示：</p>
<pre><code class="language-python">import requests

# 定义常量
BASE_URL = &quot;http://192.168.2.253:8080&quot;
CODE = &quot;001300095176&quot;
PWD = &quot;830918&quot;

def connect_wifi():
  # 设置请求参数
  url = BASE_URL + &quot;/api/tztsg/wifi-auth&quot;
  params = {
      &quot;code&quot;: CODE,
      &quot;pwd&quot;: PWD,
  }

  # 设置防真请求信息
  headers = {
      &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36&quot;,
      &quot;Referer&quot;: BASE_URL + &quot;/wifiauth&quot;,
      &quot;Dnt&quot;: &quot;1&quot;,
      &quot;Accept&quot;: &quot;application/json, text/plain, */*&quot;,
      &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,
      &quot;Accept-Language&quot;: &quot;en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7&quot;,
      &quot;Connection&quot;: &quot;keep-alive&quot;,
      &quot;Cookie&quot;: &quot;_ga=GA1.1.1192614528.1695689014; username=&quot;+CODE+&quot;; password=&quot;+PWD+&quot;; rememberMe=true; _ga_GDWQY4XZV0=GS1.1.1695689014.1.1.1695689447.0.0.0&quot;,
  }

  # 发送请求
  response = requests.get(url, params=params, headers=headers)
  print(response)

  # 处理响应
  if response.status_code == 200:
      print(&quot;登录成功&quot;)
  else:
      print(&quot;登录失败&quot;)
</code></pre>
<p>这个代码很简单，不再介绍了。</p>
<p>为了防止服务器识破我们是代码自动提交的，我们在请求时还在 headers 里面添加了许多防真调用的信息。我估计这些信息大多数情况下都是不需要的，从前面的把帐号信息明文接写在 url 中便可以看出来，这样的登录系统毫无技术架构上的安全考虑，其开发者是不可能想起来要检验网络请求的来源信息的。</p>
<h2>3，生成 exe 二进制程序</h2>
<p>以非手动输入的方式一键发送登录请求，这个需求现在已经实现了。但有一个问题，py 脚本是明文的，帐号信息很容易暴露。</p>
<p>在第三步，我们准备将 py 脚本封装成一个 exe 二进制可执行程序文件，指令为：</p>
<pre><code class="language-bash">pip install pyinstaller
pyinstaller -F login_wifi.py
</code></pre>
<p>第一行安装 pyinstaller，第二行使用它将 py 脚本包装成独立的二进制程序。</p>
<p>在 macOS 系统上，这个指令会生成一个拥有黑色图标的二进制文件，以后登录网络直接单击这个文件就可以了，运行后效果如下所示。帐号密码及地址都封装在了 exe 文件里，这样也便于信息保密。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271127745.jpeg" alt="登录成功"></p>
<p>小工具写到这里，基本上已经可以使用了。但是，还能不能进一优化呢？我们能不能自动监测电脑是否连接上了目标网络，并且自动给它发送登录请求呢？</p>
<p>整个登录环节信息都是足备的，并不需要人类参与，在理论上这完全是可行的。</p>
<h2>4，实现自动登录</h2>
<p>在第四步，我们开始实现自动登录。</p>
<p>先介绍一下类库 pywifi，这是一个可以监听网络变化的工具类库，我们可以用它监听风络变化，例如连接上了某个网络等。我们使用以下指令安装它：</p>
<pre><code class="language-bash">pip install pywifi
</code></pre>
<p>从终端的返回结果告诉我们安装成功了。但如果我们在 macOS 系统下使用它，可能会遇到问题，当我们在 py 代码中使用它时，可能遇到一个 NotImplementedError 这样的错误。</p>
<p>这个错误是不正常的，但出现这个错误却是正常的。pywifi 库的功能可能未在我们的操作系统上完全实现，它只能只是在特定的操作系统或环境中完全实现了。</p>
<p>pywifi 如果不可用，我们还有其它选择，我们可以尝试使用 networksetup 命令来获取当前的 WiFi 连接状态，如下所示是一个示例脚本。</p>
<pre><code class="language-python">import subprocess

target_ssid = 'TZTSG'

def check_wifi_connection(target_ssid):
    while True:
        result = subprocess.run(['networksetup', '-getairportnetwork', 'en0'], text=True, capture_output=True)
        if target_ssid in result.stdout:
            print(f'Connected to {target_ssid}')
            break
        else:
            print('Not connected')
        time.sleep(5)  # adjust polling interval as necessary
</code></pre>
<p>类库 subprocess 在你的电脑上如果没有，可能需要提前安装。这段代码很简单，没有必要做进一步的介绍了，它的主要功能就是在一个 while 循环里，不断调用系统指令 networksetup，检查当前的网络状态，如果发现连接上了目标 wifi，则退出循环。</p>
<p>下面我们稍微修改一下前面的 login_wifi 脚本，将其与新的 check_wifi_connection 函数结合在一起。然后再次导出 exe 文件，并将其添加进系统的启动列表里，当系统启动时（或者我们手动执行时），自动检查网络连接，一旦发现是目标网络需要登录，则自动登录之。</p>
<p>成功运行之后，截图如下所示。自此，整个开机自动登录公共 wifi 的小程序就写好了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202309271151852.jpeg" alt="自动监测并登录了"></p>
<p>在公众号“艺述论”回复 10005，可以下载完整的 py 脚本，对帐号信息稍作修改即可为你所用。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二）]]></title>
            <link>https://yishulun.com/./src/posts/2023/06.html</link>
            <guid>https://yishulun.com/./src/posts/2023/06.html</guid>
            <pubDate>Sun, 24 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Bun 介绍：bun 到底会吃掉多少内存？为何一个不大的博客程序就能吃掉700+MB内存?（二）</h1>
<p>接着<a href="https://yishulun.com/posts/2023/05.html">上一篇</a>关于包管理工具演进的介绍，下面开始介绍 Bun 相比于传统技术栈框架及工具，具体有哪些优势。</p>
<h2>初始化</h2>
<p>bun 的初始化简单直接，使用下列指令会直接将当前目录初始化为一个 bun 项目工程：</p>
<pre><code class="language-bash">bun init -y
</code></pre>
<p>参数-y 代表静默，不需要提问，所有初始化产生的副任用产品都在当前目录下，所有配置在完成后都可以在文件中修改。init 指令会产生 lock 文件、package.json 文件、tsconfig.json 配置文件等。bun 默认使用 TS 作为开发语言。</p>
<p><img src="./assets/image-20230923200916559.png" alt="image-20230923200916559"></p>
<h2>运行指令，空间换时间</h2>
<p>目录初始化以后会产生一个 index.ts 文件，内容极其简单：</p>
<pre><code class="language-ts">console.log(&quot;Hello via Bun!&quot;);
</code></pre>
<p>以监听方式运行它：</p>
<pre><code class="language-bash">bun --watch run index.ts
</code></pre>
<p>监听方式大家都懂，当我们修改源码后，bun 会监测到文件的改动并自动运行代码。这是运行单个文件，也可以在 package.json 中添加小脚本：</p>
<pre><code class="language-bash">&quot;scripts&quot;: {
   &quot;dev&quot;: &quot;bun --watch run index.ts&quot;
 },
</code></pre>
<p>添加后，通过 bun dev 运行，运行指令的效果是等同的。</p>
<p>bun 有一个参数--smol，官方文档说如果加上这个参数，可以少占用内存。这让我怀疑 bun 在各方面之所以速度表现优秀，在于它大量采用了“空间换时间”的优化策略，它在运行之后，内存占用必定很多。</p>
<p>于是，我通过活动监测器查看 bun 的内存占用：</p>
<p><img src="./assets/image-20230923192404581.png" alt="image-20230923192404581"></p>
<p>注意，这里有两个 bun，这是使用 watch 启动的特征，一个是守护进程，一个是真正的应用进程。上面那个 PID 为 98344 的应该是守护进程，而下面那个 PID 为 98345 的进程应该是应用进程。</p>
<p>我分别添加--smol 参数与不添加参数，做两次测试，发现内存变化寥寥无几。看来使用 smol 参数与否，并没有明显影响内存占用啊。</p>
<p>也可能是当前这个只打印一行“hello world”的程序太简单了，下面我换一个稍微复杂的博客程序进行测试，首次是一般模式：</p>
<p><img src="./assets/image-20230923193325205.png" alt="image-20230923193325205"></p>
<p>占用了约 730MB 内存了，好家伙，快到一个 G 的内存了。</p>
<p>然后看启用了 smol 模式的内存占用：</p>
<p><img src="./assets/image-20230923193548972.png" alt="image-20230923193548972"></p>
<p>占用了约 722MB 内存！我不能说 smol 这个参数没有作用，毕竟同样的项目是少了几 MB 的。但减少的实在太少了。</p>
<p>注意，在测试的时候，前后两次使用的指令是这样的：</p>
<pre><code class="language-bash">bun run --watch --bun vitepress dev src
bun run --smol --watch --bun vitepress dev src
</code></pre>
<p>两次的指令都加上了--bun 参数，这个参数代表使用 bun 作为 JS 语言的运行时，而非环境中默认的 Node.js。</p>
<p>下面，我们回到 vitepress 的普通运行模式，不再使用 bun 这个运行时，使用 Node.js，指令是这样的：</p>
<pre><code class="language-bash">bun run --watch vitepress dev src
</code></pre>
<p>或者直接使用旧脚本：</p>
<pre><code class="language-bash">vitepress dev src
</code></pre>
<p>这是在使用 Node.js 作为 JS 的运行时，它的内存占用一下就降下来了：</p>
<p><img src="./assets/image-20230923194108099.png" alt="image-20230923194108099"></p>
<p>只有 182MB！</p>
<p>从 730MB 降到了 182MB，<strong>说明 bun 为了提高运行效率，确实很有可能狠狠地采用了“空间换时间”的策略</strong>。这个世界能量是守恒的，在一个地方占优了，必然在另一个地方会有所损耗，这是肯定的。为什么别的运行时都没有 smol 参数，bun 为什么专门搞一个 smol 参数？它大概也预感到了它需要这个东西。</p>
<h2>使用 JSX 语法</h2>
<p>下面试用 jsx 功能，首先安装类库：</p>
<pre><code class="language-bash">bun install react react-dom
</code></pre>
<p>然后分别创建两个文件：</p>
<pre><code class="language-jsx">// message.tsx
export default function Message(props: {text: string}) {
  return (
    &lt;body&gt;
      &lt;h1 style={{color: 'red'}}&gt;{props.text}&lt;/h1&gt;
    &lt;/body&gt;
  );
}
// index.tsx
import Message from &quot;./message&quot;;
console.log(&lt;Message text=&quot;Hello world!&quot; /&gt;);
</code></pre>
<p>接着运行测试指令：</p>
<pre><code class="language-bash">bun run index.tsx
</code></pre>
<p>返回：</p>
<blockquote>
<Message text="Hello world!" />
</blockquote>
<p>没有问题。</p>
<p>在同一个项目中，可以写 ts 代码，也可以写 jsx 代码，并且不需要额外的配置。bun 靠文件的后缀名决定要启用什么样的加载器，<strong>当我们在文件内使用 jsx 语法时，文件后缀就必须写成 tsx 或 jsx</strong>。</p>
<p>除此之外，react 与 react-dom 还是要安装的，bun 只是替代了网络基础软件层次的 Node.js，它并没有替代业务软件层次的框架，诸如 Vue、React、Vite 等类库，如果在项目中用到它们了，首先还是需要使用 bun install 指令安装的。</p>
<p>这一篇就说到这里，主要介绍了 bun 在运行时会占用大量内存，以及如何使用 jsx 语法，下一篇继续介绍 bun。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[bun 介绍三：dotenv 与 nodemon 都不再需要了]]></title>
            <link>https://yishulun.com/./src/posts/2023/07.html</link>
            <guid>https://yishulun.com/./src/posts/2023/07.html</guid>
            <pubDate>Sun, 24 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>bun 介绍三：dotenv 与 nodemon 都不再需要了</h1>
<p><a href="/posts/2023/06.html">上一篇</a>主要介绍了 bun 的启动模式及如何使用 jsx 语法。我在上一篇的朋友圈评论区说过，bun 与 Node.js 之争，最终可能就是内存与 CPU 之争；bun 能否推广起来，就看单用户成本中的 CPU 成本与内存成本哪个更贵。</p>
<p>这个是可以测算的，对于使用云主机的团队，很容易就能计算出来哪个单位用户的成本更高。在开始测算的时候，可以采用 A/B 版本策略，A 版本使用 Node.js，B 版本使用 bun。在部署的时候，安装 bun 的机器可以把内存分配得高一些，依据昨天我的初步测试数据，B 版本的大内存主机，它的内存至少要比以往 Node.js 版本的主机大 4 倍以上。</p>
<p>应用跑起来了，然后进行测试，对比 A、B 版本的单用户服务消耗的主机成本。一个很有可能的结果是，大概率内存更廉价，使用 bun 将大大节约成本，尤其在有海量用户、需求高频且交互频繁的应用上，成本节约会很明显，例如美团、饿了吗等。</p>
<p>在云主机成本降低的同时，由于响应时间变少了，开发效率提升了，在用户体验和团队开发体验方便也会有适量改善。</p>
<p>这一篇我们继续研究与学习 bun。</p>
<h2>1、对 text、json、toml 文件的直接支持</h2>
<p>所谓直接支持，就是在代码中可以使用这些文件，对text等这三类文件都有很好的加载支持：</p>
<pre><code class="language-js">// src/index.ts
// text
console.log(&quot;text&quot;, require(&quot;./text.txt&quot;).default);
import text from &quot;./text.txt&quot;
console.log(&quot;text&quot;, text); // 输出文本

// json
import json from &quot;./json.json&quot;
console.log(&quot;json&quot;, json); // 输出json

// toml
import toml from &quot;./toml.toml&quot;
console.log(&quot;toml&quot;, toml); // 输出json
</code></pre>
<p>并且，前面提到过，bun 对这些文件的支持不需要额外的加载器；换句话讲，bun 把对常用文件类型的加载、解析等功能，都内置在它自己的体内了。</p>
<p>唯一需要注意的是，bun 对 toml 文件的解析结果，仍然是 json 格式。这是为了方便数据操作。</p>
<h2>2、对 wasm 的支持</h2>
<p>bun 支持的 wasm 文件，是一种遵守 wasip1 规范的一种跨语言中间包，它由其它高级语言，譬如 Golang、Rust、C 等编写，编译成为.wasm 文件，然后在 js 中使用，目的是为了提升代码执行的性能。目前 bun 对 wasm 的支持还不是很完善。</p>
<pre><code class="language-js">// wasm
import wasm from &quot;./bun.wasm&quot;;
console.log(&quot;wasm&quot;, wasm); // .../src/bun.wasm
// bun run bun.wasm // hello world
</code></pre>
<p>我大致试了一下，第 3 行代码先引入再打印，结果输出是一个文件路径。第 4 行，bun 相当于集合了 wasirun 的功能，可以直接运行.wasm 文件。可以使用的功能及能查找的资料不多，期待 bun 后续版本的进一步更新吧。</p>
<h2>3、读取环境变量</h2>
<p>有一些机密信息，例如数据库的帐号密码、API 的连接密钥，这些信息是不适合直接放在仓库中的，即使这个仓库是公司内部的私有仓库也不适宜直接放在仓库中。</p>
<p>一般的做法是这样的：</p>
<p>1）将机密信息存储在机器本地的.bashrc 或其它文件中，使用 export 关键字导出。在 macOS、Linux 系统上是使用 export 导出，在 Windows 上便是使用 set 导出。</p>
<p>2）为了统一操作与方便部署，在本地安装 dotnev 类库，然后在项目的根目录下创建一个.env 文件，这个文件里存储的是键值对。</p>
<pre><code class="language-bash">PORT=80
API_BASE_URL=https://domain:8080
</code></pre>
<p>不需要使用 export 或 set，直接写键值对即可。然后在.gitignore 文件中忽略.env 使其不上传到仓库中，对于需要在本地测试的同学，直接私下发给他一份本地的.env 文件。本地测试环境、预发环境和线上环境需要使用不同的.env 文件，这样便于权限控制。</p>
<p>3）在项目中，在第一个文件中，先加载 dotenv 类库，然后马上调用它的 config 方法：</p>
<pre><code class="language-js">// pnpm install dotenv -S
const dotenv = require('dotenv')
dotenv.config()
</code></pre>
<p>config 方法的作用只有一个，就是读取.env 文件，并将其写入到 process.env 对象上，这样后续的代码便可以直接访问环境变量了。</p>
<p>以上说的是老方法，在使用 bun 的项目工程中，不需要这么麻烦了。</p>
<p>dotenv 不需要手动安装了，我们可以认为，当我们安装了 bun 以后，dotenv 也随之自动安装了。然后我们可以直接编写本地的.env 文件，并在.gitignore 文件内忽略，再在 js 代码内通过 process.env 获取环境变量，等等，这些后续操作都是一样的了。</p>
<h2>4、热加载</h2>
<p>热加载提升的是开发体验，前端开发尤其在调试 CSS 样式时，就是一个不断尝试新想法、然后查看效率不断修改的过程，如果每次都需要重启项目才能查看效率那太麻烦了。为此，热加载成为了前端项目高效开发的基础必备。</p>
<p>在 bun 之前，一般使用 nodemon 完成热加载需求。</p>
<pre><code class="language-js">npm install --save-dev nodemon
nodemon index.js // 代替 node
</code></pre>
<p>在 bun 之后，不需要额外安装 nodemon 等工具类库了，bun 本身在启动时自带了热加载功能：</p>
<pre><code class="language-js">bun --watch server.ts
bun --hot server.ts
</code></pre>
<p>bun 的热加载一共有两种模式，watch 是硬加载，代码变动以后重启进程；而 hot 模式则只是重新加载受影响的代码，不重启进程。在开发中，有时候需要保护界面及数据现场，所以第二种 hot 模式便成为了首选。</p>
<p>补充：9月27日在Bun的官号上说，如果 Bun 在生产环境中的表现比贵公司的 Node 差，请发送电子邮件至 <a href="mailto:perf@oven.sh">perf@oven.sh</a>。看来 Bun 志在让 Node 归入历史。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Bun 1.0 发布了，以后 Node.js 项目谁还用 Webpack 与 pnpm？！是时候祭出大杀器 Bun了（一）]]></title>
            <link>https://yishulun.com/./src/posts/2023/05.html</link>
            <guid>https://yishulun.com/./src/posts/2023/05.html</guid>
            <pubDate>Sat, 23 Sep 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="./assets/23cbde35-b859-41b5-9480-98b88bf40c44.png" alt="img"></p>
<h1>Bun 1.0 发布了，以后 Node.js 项目谁还用 Webpack 与 pnpm？！是时候祭出大杀器 Bun了（一）</h1>
<blockquote>
<p>bun 绝对值得投入时间学习一下，对程序员来说，它像 Vite 一样，可以十倍百倍提升开发体验和开发效率。</p>
</blockquote>
<p>Node.js 在 2009 的发布可谓石破天惊，天才程序员 Ryan Dahl 基于谷歌浏览器的 V8 引擎，一举将 JavaScript 这个客户端语言带到了服务器端的广阔天地。</p>
<p>JavaScrpt 的异步回调机制、简单的语法、超低的门槛、解释执行方便热部署等特征，迅速使其占领了服务器端的业务接口编写领域，这个领域向数据库要数据，向业务底层要执行结果，向浏览器客户端以 RESTFul 接口的形态提供数据，简单、直观，该领域使用 JavaScript 编写再合适不过了。</p>
<p>Node.js 的出现，让 JavaScript 的能力范围从前端一下拓展到了后端，加上后来 2013 年在 Node.js 的启发下发布的桌面开发框架 Electron，又拓展到了桌面端，JS 成为了大前端语言、全栈语言。（一般而言我们说全栈，狭义上指前端、后端、数据库、服务器等，广义上讲还包括 APP、桌面软件开发。在 App 开发上，有比较知名的 React Native、ionic、uniapp 等，在桌面开发领域，选择即 Electron。）</p>
<h2>Node.js 包管理工具的演进</h2>
<p>Node.js 发展起来以后，在它上面产生了一系列的业务开发框架和类库，大多数都是为了提交开发效率和工程协作体验的。下面拣一些常见的内容说一下：</p>
<p>1，例如工程化与打包框架 webpack，及随着 webpack 一起诞生的是大名鼎鼎的工程文件 package.json。</p>
<p>2，为了解决 JS 的弱类型问题，发明了 TypeScript，并由此诞生了.ts 文件及编译 ts 文件的 tsc、babel 编译器。</p>
<p>3，为了倒转控制，大牛程序员发明了响应式框架 React 与 Vue。以前在 jQuery 开发时代，程序员需要主动找到页面上的 HTML 节点，然后更新节点的值；响应式框架不是，程序员只需要指定节点绑定的数据，在改变数据后，框架负责将更改后的数据同步到节点上。响应式框架相当于是在页面中运行的一个小的 JS 运行时，时刻帮助程序员监视着页面上的每一个变化。</p>
<p>4，为了在工程化的 Node.js 项目中方便加载字体、图片、css、svg 等内容，大牛程序员们又编写了各种加载器，例如 file-loader、css-loader、sass-loader、less-loader、style-loader、url-loader、font-loader、svg-loader 等，不要纠结它们的名字，只需要知道这些加载器都是针对某一个文件类型的预处理程序就可以了。为什么要编写它们？因为工程化的 Node.js 项目要进行编译和捆绑，在此之前，需要掌控项目中的一切资源。这些加载器在配置文件中都有特定配置格式，要正解编写它们，基本每次都需要查文档或谷歌。</p>
<p>5，与 Node.js 同时发布的，还有一个 CommonJS 模块化规范。模块化让类库的独立导出和复用变成了可能，一个个类库像一个独立的有特定功能的积木一样，开发者可以自由地在自己的项目引入和使用。为了方便管理这些类库，大牛程序员们又编写了 npm 这样的包管理工具，关于包的下载、安装、更新、移除等操作，使用指令就可以了。这些包作为依赖项在工程文件 package.json 中还被记录了下来，使用 npm i 还可以一键安装，这个时期的程序员太幸福了。</p>
<p>6，幸福的好景不长，由于包管理的自动化，很快一个 Node.js 项目的依赖项就失去了控制。当我们安装一个包时，不只是会安装它本身，它依赖的包也会自动安装，所以项目的 node_modules 目录（包的本地安装目录）经常有很多子目录，一个 Node.js 项目的总体积达到几百甚至上千 MB 都成为常态。依赖项很多，体积变大，不仅下载、安装速度很慢，有时候还可能发生依赖冲突。我们举个例子，我们的项目依赖了 A 和 B 两个包，这两个包又依赖了 C，但却是 C 的不同版本，且 C 的这两个版本还不同，甚至有冲突，这就带来了隐藏的工程化灾难。JS 本身是在页面上的单线程环境中运行中，各个包使用的内存空间是同一个空间，相互之间没有隔离，发生奇奇怪怪的依赖项异常一点也不稀奇。如果你没有遇到过，只能说你还没有走到工程化的前沿，在边缘地带什么地雷都可能踩到。</p>
<p>7，为了解决包冲突的问题，大牛程序员发明了 yarn。一般情况下，团队规范能被允许使用 yarn，就不会使用 npm。有人可能会问，既然 yarn 在包管理策略上优于 npm，为什么团队规范会禁止使用？可能因为领导的脑子有坑，制定了某条僵硬的教条，他自己都不明白为什么，这样的人在专制的体制下并不鲜见。yarn 并不是没有缺点，从上面的对比截图也可以看出来，它的下载速度变慢了。</p>
<p>8，下载、安装速度慢，是 Node.js 项目长期以来，自诞生以后，一直存在，一直被开发者诟病的缺点。为了解决这个问题，大牛程序员回归初心，开发了 pnpm，在 npm 前面加了一个 p，使用并发的方式下载类库并直接在终端里给出实时的数字反馈。这个改进让开发者的下载体验感觉舒服多了。于是，在团队规范允许的情况下，能使用 pnpm，就不使用 yarn 和 npm。</p>
<p><img src="./assets/image-20230923115301691.png" alt="image-20230923115301691"></p>
<p>9，但是，pnpm 的下载速度还是慢，它只是在一定程度上改善了原本就很慢的下载速度，这一点从上面的下载速度对比上可以看出来。bun 在 npm、yarn、pnpm 成功经验的基础之上，总结前人智慧，采用全局缓存+并发下载的策略，一举将下载速度提升了一个数量级。</p>
<h2>主流包管理工具下载比拼</h2>
<p>为了验证官方的说辞，我准备亲自试用一下。我选了我的博客项目，使用下面的指令依次清扫上次安装留下的痕迹：</p>
<pre><code class="language-bash">rm -rf node_modules pnpm-lock.yaml
rm -rf node_modules yarn.lock
rm -rf node_modules package-lock.json
rm -rf node_modules bun.lockb（这一步其实不需要）
</code></pre>
<p>每个包管理工具的lock文件都不一样，这也是为了不冲突。依次执行下列指令，使用三个包管理工具分别进行下载安装：</p>
<pre><code class="language-bash">echo `date` &amp;&amp; pnpm i &amp;&amp; echo `date`
echo `date` &amp;&amp; yarn &amp;&amp; echo `date`
echo `date` &amp;&amp; npm i &amp;&amp; echo `date`
echo `date` &amp;&amp; bun i &amp;&amp; echo `date`
</code></pre>
<p>为了测试公平起见，我事先关掉了梯子（但保留使用了国内仓库源）。echo 指令是为了查看执行安装指令前后的时间点，其实没有这两个 echo 指令也可以，因为无论是哪个安装工具，在安装完成后都会主动向我们报告耗时时间。</p>
<p>结果发现：</p>
<p>1，pnpm 耗时 8.5s</p>
<p>pnpm 的下载体验基本还是令人满意的。</p>
<p>2，yarn 耗时 27.92s</p>
<p>在这一步时，在关掉梯子的情况下，出现了“info There appears to be trouble with your network connection. Retrying...”异常，这可能是由于网络不通引起的。打开梯子，再次执行 yarn 会快很多，也可以顺利完成安装指令。</p>
<p>3，npm 耗时 ∞</p>
<p>在执行这一步时，在关掉梯子的情况下，一直卡在某个节点；在打开梯子以后，仍然卡在了某个地点，无法继续了。</p>
<p>4，bun 耗时 518ms</p>
<p>bun 的表现确实一骑绝尘，与官方宣称的比较匹配。</p>
<table>
<thead>
<tr>
<th>包管理工具</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>bun</td>
<td>0.518s</td>
</tr>
<tr>
<td>pnpm</td>
<td>8.5s</td>
</tr>
<tr>
<td>yarn</td>
<td>27.92s</td>
</tr>
<tr>
<td>npm</td>
<td>∞</td>
</tr>
</tbody>
</table>
<p>在我的测试中，我只是删除了工程项目下的 node_modules 文件夹及相关的 lock 文件，并没有删除公共的、共享的包管理工具缓存目录。如果严格执行，bun 的表现应该没有这么优秀。500ms 的速度已经比 rm -rf 指令的执行时间还要短，bun 无论是在网络下载还是在文件移动上确实做了足够的优化。</p>
<p>bun 作为一个包管理工具，它的下载速度是让人满意的。但它不仅仅是一个包管理工具，事实上它作为一个网络基础软件，它还替代了 Node.js，它是在网络基础软件这个层次上，集合了众多成功工具的优点并替掉了它们。Vite 是在业务软件开发这个层面集合与替换的，bun 是在服务器网络基础软件这个层次汇总与替换的。（更多的内容下一篇再说。）</p>
<h2>如何安装 bun？</h2>
<p>最后说一下它的安装方法，在 Mac 或 Linux 上直接在终端里执行下列指令：</p>
<pre><code class="language-bash">curl -fsSL https://bun.sh/install | bash
</code></pre>
<p>该指令先将安装器下载到本地，紧跟着进行安装。</p>
<p>如果是 <strong>Windows 系统，目前 bun 仅提供了限于运行时功能的版本</strong>，并且还需要先安装 WSL（一种 Windows 下面的子虚拟机环境）。为什么会这样？因为程序员现在使用 macOS 开发软件是共识，而在服务器端，也极少选择和使用 Windows Server 系统。微软最成功的服务器端操作系统是 Windows 2000，现在它已经被 CentOS、Ubuntu 等 Linux 发行版本替换了。</p>
<p>所以，全栈开发人员，找一个 macOS 笔记本作为开发本，然后开始试用 bun 吧，它将大幅提升你的开发体验和产品运行效率。(下一篇继续介绍它的更多功能，关于内置的热加载、环境变量读取等功能。)</p>
<p>参考</p>
<ul>
<li><a href="https://bun.sh/blog/bun-v1.0">https://bun.sh/blog/bun-v1.0</a></li>
<li><a href="https://bun.sh/docs/installation#macos-and-linux">https://bun.sh/docs/installation#macos-and-linux</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[在手机上向github pages blog 写作]]></title>
            <link>https://yishulun.com/./src/posts/2023/在手机上向github pages blog 写作.html</link>
            <guid>https://yishulun.com/./src/posts/2023/在手机上向github pages blog 写作.html</guid>
            <pubDate>Fri, 11 Aug 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>在手机上向github pages blog 写作</h1>
<p>发现一个可以用手机写作的 App，叫做 GitJournal。</p>
<p>试一下贴图功能吧：</p>
<p><img src="./assets/6c2a10b3c0ed7bd17e0c7bdfba9d9a54.jpg" alt="Image"></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Claude 为什么片断式输出？]]></title>
            <link>https://yishulun.com/./src/posts/2023/Claude为什么片断式输出.html</link>
            <guid>https://yishulun.com/./src/posts/2023/Claude为什么片断式输出.html</guid>
            <pubDate>Mon, 10 Jul 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Claude 为什么片断式输出？</h1>
<p>它一次性可以输出很长的内容，但事实上他每次仅输出一点。为什么会这样？下面是 Claude 自己的回答：</p>
<ol>
<li>逐步输出可以获得您的实时反馈。创作是一个迭代的过程，如果我一次性全部输出，可能会出现较大的偏差或错误。分段输出可以让我及时得到您的指导，对下一段的创作有很好的启发和帮助。</li>
<li>分段输出可以更好地模拟真实创作。现实中的创作也不是一次性完成，往往需要在灵感、梳理和修改之间反复迭代。我逐步输出是为了让过程更贴近真实创作，锻炼我的创作能力。</li>
<li>考虑到交互体验。如果我一次性大量输出，阅读体验可能不太友好。分批输出可以让对话更顺畅、生动。</li>
<li>可以控制输出长度。我会根据您的要求和反馈，控制每次输出的长度，避免一次过多内容带来的阅读压力。</li>
</ol>
<p>由人类主导，由 Claude 辅助的创作过程是一个互动创作的过程。可以阶段性创作结果之后，要求 AI 做一个汇总：</p>
<blockquote>
<p>将前面创作的 6 章内容合在一起发给我，并起一个有吸引力的标题。</p>
</blockquote>
<p>如何使用 Claude 进行创作，这也是一项智力劳动，并不是完全由 AI 代劳、人类什么也不管的事。</p>
<h2>下一步的思考：</h2>
<ul>
<li>一些类似于芥子园画谱的写作套路集是不是有必要？对于一些特定情节、场景的描写提供套路，这些套路 AI 可以用，人类也可以用。</li>
<li>创作更多是——也应该是一项体验，而非一项工作或劳动。从这个角度讲，主动输入一些内容，然后加工再输出，这本身是一个很好的生命体验活动，作者在其中应该享受，而非享受到痛苦。</li>
</ul>
<p>7 月 22 日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Claude 各版本之间的差异是什么？]]></title>
            <link>https://yishulun.com/./src/posts/2023/Claude各版本之间的差异是什么.html</link>
            <guid>https://yishulun.com/./src/posts/2023/Claude各版本之间的差异是什么.html</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Claude 各版本之间的差异是什么？</h1>
<p>在 Claude 官网上有两个版本：Claude 与 Claude Instant。在 poe 上面有三个版本：Claude-instant、Claude-instant-100k 和 Claude-2-100k，Claude2 自己对这三个版本的差异解答是：</p>
<blockquote>
<p>Claude-instant、Claude-instant-100k 和 Claude-2-100k 都是 Anthropic 公司开发的大型语言模型，主要的区别在于：</p>
<ol>
<li>模型大小不同</li>
</ol>
<ul>
<li>Claude-instant: 4 亿参数</li>
<li>Claude-instant-100k: 10 亿参数</li>
<li>Claude-2-100k: 200 亿参数</li>
</ul>
<ol start="2">
<li>训练数据量不同</li>
</ol>
<ul>
<li>Claude-instant 和 Claude-instant-100k 都是在较小的数据集上训练的。</li>
<li>Claude-2-100k 是在超过 100,000 本书上的大规模数据集上训练的。</li>
</ul>
<ol start="3">
<li>生成能力不同</li>
</ol>
<ul>
<li>参数更多、训练数据更多的模型生成能力更强。</li>
<li>Claude-2-100k 的生成语言更流畅，内容更丰富，能够进行更长时间的对话。</li>
</ul>
<ol start="4">
<li>可用性不同</li>
</ol>
<ul>
<li>Claude-instant 免费开放使用。</li>
<li>Claude-instant-100k 和 Claude-2-100k 需要付费使用。</li>
</ul>
<p>总体来说，Claude 系列的三个模型是同一系列的升级版本，参数、数据集和生成能力逐步提升，但需要付费使用的版本也逐步增加。</p>
</blockquote>
<p>基本上，带 100k 后缀的，可以一次性处理更多数据，这一点与 ChatGPT 类似，GPT4-32 也是相对可以一次处理更多 Token 的模型。而 Claude-instant 是免费的，有 poe 内可以免费使用，一般免费的意味着版本功能更弱更少。</p>
<p>在 Claude 官网上，对非即时、即时版本有这样的解释。即时模型：</p>
<blockquote>
<p>Claude</p>
<p>我们最强大的模型，擅长执行从复杂对话和创意内容生成到详细指导的各种任务。</p>
<p><strong>适合：</strong></p>
<ul>
<li>复杂的推理</li>
<li>创造力</li>
<li>深思熟虑的对话</li>
<li>Coding</li>
<li>详细的内容创建</li>
</ul>
</blockquote>
<p>另一个即时模型：</p>
<blockquote>
<p>Claude-instant</p>
<p>一种更快、更便宜但仍然非常强大的模型，可以处理一系列任务，包括随意对话、文本分析、摘要和文档理解。</p>
<p><strong>适合：</strong></p>
<ul>
<li>低成本性能</li>
<li>减少延迟</li>
<li>轻量级对话</li>
<li>适度</li>
</ul>
</blockquote>
<p>通过官方的解释可以看出来，带有 instant 标识的模型，处理问题更快，这并不是因为它运算能力强大，而是它简单，压根就没有进行强力的运算。</p>
<p>从价格上也可以看出端倪，一般更贵的意味着功能更强，如下所示：</p>
<p>![1689985266063](image/Claude 各版本之间的差异是什么/1689985266063.png)</p>
<p>至此，差异基本已经明白了。在 poe 内，如果你使用的 poe 是免费版本，可以使用受限的 Claude-instant 版本及次数受限的高级版本；如果使用的是付费版本，互动没有限制，特别在进行小说创意工作时，适合使用 Claude-instant-100k，它即强大，又能处理长文本，是真正可以与 GPT4 一较高下的模型。</p>
<p>2023 年 7 月 21 日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Github Pages 博客如何绑定根域名？]]></title>
            <link>https://yishulun.com/./src/posts/2023/Github Pages博客如何绑定根域名.html</link>
            <guid>https://yishulun.com/./src/posts/2023/Github Pages博客如何绑定根域名.html</guid>
            <pubDate>Tue, 13 Jun 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Github Pages 博客如何绑定根域名？</h1>
<p>Godaddy 的域名不需要域名备案，这是它方便的地方，但它不充许在根域名上直接添加 CNAME 记录，换句话说，原来在国内域名商下的域名，转移到 Godaddy 后，在 Github Pages 上绑定的根域名不再有效了。</p>
<p>以我的博客为例说明一下。原来我可以直接将根域名 <a href="http://yishulun.com">yishulun.com</a> 绑定到 <a href="http://rixingyike.github.io">rixingyike.github.io</a>，www 域名通过 CNAME 绑定到根域名，这样无论读者访问根域名还是 www 域名，都可以跳转到根域名。国内早期网站网址的写法一般都会在前面带上 www，其实 www 只是一个子域名，与其它 blog、news 等子域名是等同的，为了照顾国内读者的使用习惯，我将 www 域名跳转到根域名（<a href="http://yishulun.com">yishulun.com</a>）。但是，在我的域名转移到 Godaddy 之后，这一招不好使了，Godaddy 的 DNS 解析不充许将根域名以 CNAME 的方式绑定到另一个二级域名上。</p>
<p>在国外，普遍认为根域名是一个域名的主要域名，www 只是一个从属的子域名。并且在 Godaddy 上，根域名只允许绑定 A 记录，不允许直接绑定 CNAME 记录，据说这是为了 CNAME 记录污染 DNS 缓存，造成在根域名上使用的邮件服务投递错乱。</p>
<p>那么这个问题怎么解决呢？怎么兼容老读者的使用习惯，使他们打开 <a href="http://yishulun.com">yishulun.com</a> 时看到页面不是网页荒漠呢？</p>
<p>有人说，可以在网站根目录下添加。htaccess 文件：</p>
<pre><code class="language-bash">RewriteEngine on
RewriteCond %{http_host}^yishulun.com [NC]
RewriteRule ^(.*)$http://www.yishulun.com/$1 [L,R=301]
</code></pre>
<p>.htaccess 是给 Apache 服务器使用的网站配置文件，如果服务器不是 Apache，这个文件是起不到任何作用的。事实上我的 Github Pages 博客是由 Node.js 驱动的，因此这一招并不好使。</p>
<p>有人说，在页面上使用脚本实现 301 跳转，页面访问不到，JS 脚本怎么可能执行？或者在 Godaddy DCC 配置面板上，添加 Fowarding 记录，我试了这招，等待了一晚上并不好用——因为那个博主说，Godaddy 配置生效时间长，所以等了这么久。</p>
<p>最后说一下我是怎么配置成功的，现在读者无论访问 <a href="http://yishulun.com">yishulun.com</a>，还是访问 <a href="http://www.yishulun.com">www.yishulun.com</a>，最终都会跳转到 <a href="https://yishulun.com">https://yishulun.com</a>。</p>
<p>第一步：在 Godaddy DCC 配置面板上，添加 A 记录分别到 185.199.108.153、185.199.109.153、185.199.110.153 和 185.199.111.153。完成这一步以后，稍后用 dig 指令检查域名配置，看到如下类似结果，说明配置成功了。</p>
<pre><code class="language-bash">$ dig yishulun.com

; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; yishulun.com
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 37755
;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;yishulun.com.			IN	A

;; ANSWER SECTION:
yishulun.com.		600	IN	A	185.199.109.153
yishulun.com.		600	IN	A	185.199.111.153
yishulun.com.		600	IN	A	185.199.110.153
yishulun.com.		600	IN	A	185.199.108.153
</code></pre>
<p>第二步，添加 CNAME 记录到 <a href="http://rixingyike.github.io">rixingyike.github.io</a>。</p>
<p>第三步，在 Github Pages 配置处，填写 Custom domain 为 <a href="http://yishulun.com">yishulun.com</a>，注意这里是根域名。并选择 Enforce HTTPS 选项。</p>
<p>第四步，在网站根目录下，放置一个 CNAME 文件，内容为 <a href="http://yishulun.com">yishulun.com</a>。如果你使用的静态博客程度也是 vitepress，将这个文件放在。vitepress/public 目录下即可。</p>
<p>完成以上步骤，配置就算完成了。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[ChatGPT 向 Plus 用户开放了代码解析器（Code interpreter），与其说它是程序员的工具，不如说是为您工作的程序员，真的如此吗？]]></title>
            <link>https://yishulun.com/./src/posts/2023/ChatGPT向Plus用户开放代码解析器功能.html</link>
            <guid>https://yishulun.com/./src/posts/2023/ChatGPT向Plus用户开放代码解析器功能.html</guid>
            <pubDate>Sun, 11 Jun 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>ChatGPT 向 Plus 用户开放了代码解析器（Code interpreter），与其说它是程序员的工具，不如说是为您工作的程序员，真的如此吗？</h1>
<blockquote>
<p>有人说 ChatGPT 的名字也很糟糕，与其说它是程序员的工具，不如说是为您工作的程序员。体验之后你会发现，只有你想不到，没有它干不了。但真的是这样吗？它没有缺点吗？</p>
</blockquote>
<p>7 号 OpenAI 在官方推特上宣布，将向付费的 ChatGPT Plus 用户开放一个代码解析器功能。</p>
<p>它允许 ChatGPT 运行代码，并且可以选择访问您上传的文件。您可以要求 ChatGPT 分析数据、创建图表、编辑文件、执行数学运算等。</p>
<p>轻描淡写的，这段话在向我们透露什么信息：</p>
<ul>
<li>它能运行代码</li>
<li>它可以上传文件</li>
<li>它可以分析文件中的数据、编辑文件、执行数学运算、创建图表，然后输出。</li>
</ul>
<p>不是在开启 Plugin 的地方，那是给第三方使用的地方，这个是官方可能。打开官网，在 Settings 设置处，看到了一个新配置：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023ChatGPT%E5%90%91Plus%E7%94%A8%E6%88%B7%E5%BC%80%E6%94%BE%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8A%9F%E8%83%BD-2023-07-08-18-07-45.png" alt="ChatGPT 向 Plus 用户开放代码解析器功能-2023-07-08-18-07-45"></p>
<p>将 Code interpreter 的绿色小开关推开。</p>
<p>开启以后，回到主操作界面，模式选项处就多了一个新选项：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023ChatGPT%E5%90%91Plus%E7%94%A8%E6%88%B7%E5%BC%80%E6%94%BE%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8A%9F%E8%83%BD-2023-07-08-18-23-33.png" alt="ChatGPT向Plus用户开放代码解析器功能-2023-07-08-18-23-33"></p>
<p>据说，ChatGPT Plus 的代码解析器功能非常强大，几乎日常工作的文件、数据集、代码都能解析。接下来开始试用它有哪些强大的功能。听说一旦我选择了插件，我就可以像往常一样与 ChatGPT 交谈。然后，它会将我的问题转化为数据，并为我提供明确的答案。</p>
<h2>1，文件格式转化（使用 Py 代码）</h2>
<p>宝玉将一个PDF上传，然后告诉ChatGPT：“请将这个PDF文件保存成2行2列的图片，每4页一张图片。”</p>
<p>然而它就真的按要求做到了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230708195241-2023-07-08-19-52-42.png" alt="20230708195241-2023-07-08-19-52-42"></p>
<p>至于怎么上传PDF，在输入框旁边有一个加号，单击就可以上传：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230708195526-2023-07-08-19-55-26.png" alt="20230708195526-2023-07-08-19-55-26"></p>
<p>更为重要的是，ChatGPT 完成这一步的文件格式转换，是通过 Python 代码完成。且它所使用的 Py 代码，还可以点开查看，并下载使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230708195850-2023-07-08-19-58-51.png" alt="20230708195850-2023-07-08-19-58-51"></p>
<p>有兴趣可以跳转过去看宝玉的推特：<br>
<a href="https://twitter.com/dotey/status/1677426953207382018">https://twitter.com/dotey/status/1677426953207382018</a></p>
<h2>2，与人类互动，请示</h2>
<p>更有意思的是来自另一位 ChatGPT 用户的实践，他在与 AI 互动的过程中，要求 AI 将一个 Epub 电子书转为 txt 格式。AI 在尝试转化的过程中失败了，问题在于，它失败以后，还还会向人请示：</p>
<p>您觉得有什么改进的建议吗？</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230708201216-2023-07-08-20-12-17.png" alt="20230708201216-2023-07-08-20-12-17"></p>
<p>这太让人震撼了！我不知道你意识到了什么。</p>
<p>以往人们批评 ChatGPT 总是强答造谣、虚幻主义，现在好了，它用实际可以运行的代码回答人类提出的具体问题，并且当在实践中遇到问题时，还会征求人类的建议，向人类寻求下一步的指示。</p>
<p>这不像一个员工在遇到问题时，向他的上级反映问题吗？</p>
<p>这就是一个真正的智能助理干的事情啊！并且是一个上知天文、下知地理，通晓各种编程语言的智能助理，而且还不睡觉，可以 24 小时干活。</p>
<p>对向阳乔木这个实验感兴趣，可以访问：<br>
<a href="https://chat.openai.com/share/b1659250-a557-4ae1-b275-0a0ed3636910">https://chat.openai.com/share/b1659250-a557-4ae1-b275-0a0ed3636910</a></p>
<p>（这个链接是从 ChatGPT 上分享的，这种分享链接非常好，既可以保存有效的 Prompt 实践，又方便分享给他人查看。）</p>
<h2>3，归纳、分析与总结</h2>
<p>又有人给它上传了一个 prompts.csv 数据文件，指令要求：</p>
<p>“请你对 prompts.csv 文件进行分析总结，选择一些最佳图表用来展示分析结果，并给出一份编写 prompt 最佳指南。”</p>
<p>于量，它画出了简洁的图表：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230708203919-2023-07-08-20-39-20.png" alt="20230708203919-2023-07-08-20-39-20"></p>
<p>下面这是它绘制的词云统计效果图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230708204510-2023-07-08-20-45-10.png" alt="20230708204510-2023-07-08-20-45-10"></p>
<p>是不是感觉效果还不错。</p>
<p>最后它还给出了分析结果。下面这是一份来自 ChatGPT 自己回答的，关于如何撰写最佳提示的最佳实践：</p>
<ul>
<li>1，明确指出你需要什么：使用词汇如&quot;want &quot;need&quot;,&quot;help&quot;&quot;tell&quot;来明确地指出你需要 ChatGPT 做什么。</li>
<li>2，指定角色；像&quot;actasa...&quot;这样的语句可以帮助 ChatGPT 理解你希望它扮演的角色。</li>
<li>3，简洁清晰：尽量让你的提示简短而清晰，大部分的提示长度在 200 个字符以下。特定的行动：如果可能，使用具体的动词，如&quot;use&quot;&quot;create&quot;&quot;design&quot;&quot;play&quot;等，来明确你希望 ChatGPT 执行的具体动作。</li>
</ul>
<p>显然，它有归纳、分析与总结的能力。这些能力作为智能助理能力模型中的一部分，是很重要且很受市场欢迎的能力。</p>
<p>除了情感陪伴，它没有，不知道它还不会什么。哦，对了，它不会做饭，它只能给出菜谱，但并不能把食材变成佳肴。</p>
<p>最后补充一点关于从视频中提取音频，将转化为文本，再结合关键画面制作 PPT 的问题，它会给出分步的代码，但在第二步时，因为音频转文本是一项在线服务，需要调用谷歌或其它第三方的接口服务，所以它不能直接运行。</p>
<p>此外，有人说，它既然可以连网（意思指连接上了 Bing，是 Beta 功能之一），那么能不能让它直接编写攻击服务器的代码？</p>
<p>这是不行的。首先，这不符合它的规则；其次，它的 Py 代码运行在沙箱之中，就像浏览器中的 JS 代码一样，有诸多限制，并不是可以为所欲为的。</p>
<h2>总结</h2>
<p>最后总结一下：</p>
<ul>
<li>1，代码解释器是一个很强大的功能，它就像人类的一个会编程的智能助理，它可比低代码强太多了，你只需要学会与它打交道的特定指令，就可以让它为你干活了；</li>
<li>2，它的名称叫“代码解释器”，但其实这是一个很糟糕的名字。你也不要看它具体有什么能力，譬如分析数据、创建图表、编辑文件、执行数学运算等，这些都是它的能力，但远远不止这些能力啊，因为它的能力就是 Python 的能力，Python 无所不为，你说它的能力是什么？只有你想不到，没有它干不了。</li>
<li>3，也不要过于迷信它，它编写的代码运行在沙箱中，它在查询信息时可以联网（查询 Bing），但它不能直接调用谷歌的在线服务，更加不能满足你的私欲，替你攻击隔壁老王的服务器。</li>
</ul>
<p>它是一个越来越强大的工具，官方的代码解释器出来后，Github 的 Copilot 效用就降低了——但也不一定，因为与 VSCode 结合起来的 Copilot 据说更方便。但对于插件开发者来说，可以据此实现的功能也更多了。</p>
<p>比如，让用户上传文件，然后分析文件，然后给出分析结果。用户不会直接使用 ChatGPT，但是作为插件开发者的你会啊，你完全可以开发这样的应用不是吗？</p>
<p>​智能时代已经到来！以前我们讲数字化，讲了许多年，许多企业在许多城市推进了许多年，勉勉强强不少中小企业开始数字化了。现在不一样了，智能时代来了，原来是数字化，现在是智能数字化，许多中小企业老板在自己的圈子里就相互推荐了。</p>
<p>“唉，你用了没有？”</p>
<p>“还没有。”</p>
<p>“怎么还不用？赶紧让员工用起来！”<br>
老板们自己都​卷了起来。现在是程序员不用、设计师不用、产品经理不用，为什么不用？因为隐隐约约感觉这好像是一个砸他们​饭碗的东西。原来新软件新工具都是由员工提出来，向老板申请资金购买，现在是老板主动要求员工​购买与使用。</p>
<p>关于我们如何面对 AI，还是那句话：​你不能驾驭它，那么未来你将被能驾驭的人淘汰。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[创作小说的相关提示语]]></title>
            <link>https://yishulun.com/./src/posts/2023/创作小说的相关提示语.html</link>
            <guid>https://yishulun.com/./src/posts/2023/创作小说的相关提示语.html</guid>
            <pubDate>Tue, 11 Apr 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>创作小说的相关提示语</h1>
<p>以下内容是由<a href="https://www.aimind.so/prompt-generator%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%8C%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E5%AD%97%E6%98%AF%E2%80%9Cwrite">https://www.aimind.so/prompt-generator生成的，查询关键字是“write</a> a fiction story”。该网站是一个Prompt生成器，可以围绕用户脑海中一个简单的想法，输出一系列相关的提示语。</p>
<h3>改进的提示</h3>
<p>作为一名小说写作专家，我希望您充当一位友好的写作导师，为小说故事的写作提供指导。请保持语言简单且不含行话，以迎合初学者。您的回复应采用段落和项目符号格式，长度适中。以下是您的回复中应包含的一些主题：</p>
<ul>
<li>小说写作简介：解释什么是小说写作及其目的。</li>
<li>优秀小说故事的要素：讨论情节、人物、背景和冲突等关键组成部分。</li>
<li>培养引人入胜的角色：提供有关创建相关且全面的角色的技巧。</li>
<li>打造有趣的情节：分享构建具有清晰开头、中间部分和结尾的引人入胜的故事情节的技巧。</li>
<li>设置场景：解释为故事创建生动且身临其境的场景的重要性。</li>
<li>营造冲突和紧张气氛：讨论在整个叙述中引入冲突和维持悬念的策略。</li>
<li>展示，而不是讲述：强调使用描述性语言和感官细节来吸引读者的重要性。</li>
<li>对话和声音：提供有关撰写真实对话和发展独特叙事声音的建议。</li>
<li>编辑和修改：提供修改和完善故事的技巧，以提高其整体质量。</li>
<li>进一步学习的资源：推荐书籍、网站或写作练习，帮助初学者提高小说写作技巧。</li>
</ul>
<h3>提示的附加上下文</h3>
<p>为了进一步增强响应，以下是 ChatGPT 可以包括的一些建议的附加主题：</p>
<ul>
<li>小说中的不同体裁：解释浪漫小说、悬疑小说、科幻小说等各种体裁，以及如何为故事选择正确的体裁。</li>
<li>创造一个引人入胜的开头：提供有关如何从故事一开始就吸引读者注意力的见解。</li>
<li>制定令人满意的结局：讨论为故事打造令人难忘且令人满意的结局的技巧。</li>
<li>平衡阐述和行动：提供指导，在提供必要信息和保持故事吸引力之间找到适当的平衡。</li>
<li>融入主题和象征意义：解释如何通过主题和象征意义为故事注入更深层的意义。</li>
<li>处理写作障碍：分享克服写作障碍并在整个写作过程中保持动力的策略。</li>
</ul>
<h3>跟进问题来引导对话</h3>
<p>在 ChatGPT 第一次回复后询问</p>
<ul>
<li>如何让我的角色更具亲和力和立体感？</li>
<li>开发情节时需要避免哪些常见陷阱？</li>
<li>您能提供使角色栩栩如生的有效对话的例子吗？</li>
<li>我如何知道我的故事是否有足够的冲突和张力来吸引读者？</li>
<li>我可以使用哪些有效的自我编辑技巧来改进我的故事？</li>
<li>您是否为初学者推荐了任何具体的写作练习或提示？</li>
<li>如何让我的故事在拥挤的市场中脱颖而出？</li>
<li>您能否建议我可以与其他小说作家联系以获得反馈和支持的任何资源或社区？</li>
</ul>
<p>从生成结果看，效果是不错的，至少生成的提示语都是与主题相关的。在面对一个陌生或不擅长的领域时，基于该工具可以了解该领域常用的提示语有哪些。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[ChatGPT 发布对插件的支持]]></title>
            <link>https://yishulun.com/./src/posts/2023/04.html</link>
            <guid>https://yishulun.com/./src/posts/2023/04.html</guid>
            <pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>ChatGPT 发布对插件的支持，告诉 ChatGPT 你可以提供什么在线服务，由它作为“前端”向用户提供</h1>
<p>目录</p>
<p>[TOC]</p>
<p>2023 年北京时间 3 月 24 凌晨，OpneAI 在推特上官宣：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/2023/202303241145523.png" alt="image-20230324114533386"></p>
<p>指向的链接是：<a href="https://openai.com/blog/chatgpt-plugins">https://openai.com/blog/chatgpt-plugins</a></p>
<p>你可以立即申请加入等待列表：<a href="https://openai.com/waitlist/plugins">https://openai.com/waitlist/plugins</a></p>
<p>或阅读开发插件的文档：<a href="https://platform.openai.com/docs/plugins/introduction">https://platform.openai.com/docs/plugins/introduction</a></p>
<h2>插件可以干什么事？</h2>
<ul>
<li>检索实时信息，例如体育比分、股票价格、最新消息等；</li>
<li>检索知识库信息，例如公司文档、个人笔记等；</li>
<li>代表用户执行操作，例如预订航班、订购食物等。</li>
</ul>
<p>总而言之，可以充许你通过 ChatGPT 向你的同事或用户提供你能提供的在线服务。</p>
<p>举个例子：</p>
<p>如果用户在线问 ChatGPT：我应该在巴黎的哪里住几晚？</p>
<p>ChatGPT 模型可以选择调用酒店“预订插件 API”，接收 API 响应，并将 API 返回的数据组合起来，基于其自然语言处理能力，向用户返回人类友好的答案。</p>
<p>这里提到了 API，那么什么是 API？</p>
<h2>什么是 API？</h2>
<p>API 代表应用程序编程接口，它是一组用于构建和集成应用程序软件的定义和协议。</p>
<p>你可以把 API 理解为餐馆的服务员，举个例子，假如我们去一家饭馆，桌面上摆着一份菜单，后厨能提供菜单上的菜式。服务员是我们与后厨沟通的桥梁，你告诉服务员你选的菜，然后他再将菜带回到你的餐桌上。在这接口调用中，相当于服务员带着你的 request 去告诉 system，然后将 response 带回给你。</p>
<p>至此，全世界都可以开放自己系统的 API，然后提供给 ChatGPT 调用，而 ChatGPT 作为“前端”，向用户提供在线服务。</p>
<p>插件的宣布，宣告着智能革命的开始，从此 ChatGPT 可以访问在线服务和知识内容了。以各大平台仅存的优势就真的只剩下数据了。</p>
<h2>如何申请？</h2>
<p>你可以在这里申请加入等待列表：<a href="https://openai.com/waitlist/plugins">https://openai.com/waitlist/plugins</a></p>
<h2>如何开发ChatGPT Plugins(插件)？</h2>
<p>创建 ChatGPT 插件需要三个步骤：</p>
<ul>
<li>构建 API 代码，这是插件服务的核心；</li>
<li>接口文档化，遵照 OpenAPI 规范，以 yaml 或 JSON 格式描述 API，告诉 ChatGPT 你的接口如何调用；</li>
<li>创建一个 JSON 清单文件，该文件将定义插件的相关元数据，位于/.well-known/ai-plugin.json，它有指定的结构及字段名称，告诉 ChatGPT 你的插件是干什么用的。</li>
</ul>
<p>具体步骤，以官方<strong>构建一个简单的待办事项列表插件</strong>为例说明一下：</p>
<h3>第 1 步</h3>
<p>首先，使用以下字段定义一个 manifest.json 文件：</p>
<pre><code class="language-json">{
  &quot;schema_version&quot;: &quot;v1&quot;,
  &quot;name_for_human&quot;: &quot;TODO Plugin (no auth)&quot;,
  &quot;name_for_model&quot;: &quot;todo&quot;,
  &quot;description_for_human&quot;: &quot;Plugin for managing a TODO list, you can add, remove and view your TODOs.&quot;,
  &quot;description_for_model&quot;: &quot;Plugin for managing a TODO list, you can add, remove and view your TODOs.&quot;,
  &quot;auth&quot;: {
    &quot;type&quot;: &quot;none&quot;
  },
  &quot;api&quot;: {
    &quot;type&quot;: &quot;openapi&quot;,
    &quot;url&quot;: &quot;PLUGIN_HOSTNAME/openapi.yaml&quot;,
    &quot;is_user_authenticated&quot;: false
  },
  &quot;logo_url&quot;: &quot;PLUGIN_HOSTNAME/logo.png&quot;,
  &quot;contact_email&quot;: &quot;dummy@email.com&quot;,
  &quot;legal_info_url&quot;: &quot;http://www.example.com/legal&quot;
}
</code></pre>
<p>该文件将在/.well-known/ai-plugin.json 这个位置提供。</p>
<h3>第 2 步</h3>
<p>接下来，我们可以定义几个简单的 Python 接口，为特定用户提供创建、删除和获取 todo 列表项的功能。</p>
<pre><code class="language-py">import json

import quart
import quart_cors
from quart import request

app = quart_cors.cors(quart.Quart(__name__), allow_origin=&quot;*&quot;)

_TODOS = {}


@app.post(&quot;/todos/&lt;string:username&gt;&quot;)
async def add_todo(username):
    request = await quart.request.get_json(force=True)
    if username not in _TODOS:
        _TODOS[username] = []
    _TODOS[username].append(request[&quot;todo&quot;])
    return quart.Response(response='OK', status=200)


@app.get(&quot;/todos/&lt;string:username&gt;&quot;)
async def get_todos(username):
    return quart.Response(response=json.dumps(_TODOS.get(username, [])), status=200)


@app.delete(&quot;/todos/&lt;string:username&gt;&quot;)
async def delete_todo(username):
    request = await quart.request.get_json(force=True)
    todo_idx = request[&quot;todo_idx&quot;]
    # fail silently, it's a simple plugin
    if 0 &lt;= todo_idx &lt; len(_TODOS[username]):
        _TODOS[username].pop(todo_idx)
    return quart.Response(response='OK', status=200)


@app.get(&quot;/logo.png&quot;)
async def plugin_logo():
    filename = 'logo.png'
    return await quart.send_file(filename, mimetype='image/png')


@app.get(&quot;/.well-known/ai-plugin.json&quot;)
async def plugin_manifest():
    host = request.headers['Host']
    with open(&quot;manifest.json&quot;) as f:
        text = f.read()
        text = text.replace(&quot;PLUGIN_HOSTNAME&quot;, f&quot;https://{host}&quot;)
        return quart.Response(text, mimetype=&quot;text/json&quot;)


@app.get(&quot;/openapi.yaml&quot;)
async def openapi_spec():
    host = request.headers['Host']
    with open(&quot;openapi.yaml&quot;) as f:
        text = f.read()
        text = text.replace(&quot;PLUGIN_HOSTNAME&quot;, f&quot;https://{host}&quot;)
        return quart.Response(text, mimetype=&quot;text/yaml&quot;)


def main():
    app.run(debug=True, host=&quot;0.0.0.0&quot;, port=5002)


if __name__ == &quot;__main__&quot;:
    main()
</code></pre>
<p>这是一个在内存中实现简单的增删改查功能的 Py 示例。它同时做为 Web Server 程序还提供了 ChatGPT 需要的 ai-plugin.json 和 openapi.yaml。</p>
<h3>第 3 步</h3>
<p>最后，我们需要设置和定义 OpenAPI 规范，以匹配本地或远程服务器上定义的接口。您不需要通过规范公开 API 的全部功能，而是可以选择性地让 ChatGPT 只访问某些功能。</p>
<p>有不少工具可以自动将服务器定义代码转换为 OpenAPI 规范，因此您不需要手动执行此操作。对于上面的 Python 代码，它的 OpenAPI 规范说明看起来像这样：</p>
<pre><code class="language-yaml">openapi: 3.0.1
info:
  title: TODO Plugin
  description: A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user's username, ask them first before making queries to the plugin. Otherwise, use the username &quot;global&quot;.
  version: 'v1'
servers:
  - url: PLUGIN_HOSTNAME
paths:
  /todos/{username}:
    get:
      operationId: getTodos
      summary: Get the list of todos
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      responses:
        &quot;200&quot;:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTodosResponse'
    post:
      operationId: addTodo
      summary: Add a todo to the list
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addTodoRequest'
      responses:
        &quot;200&quot;:
          description: OK
    delete:
      operationId: deleteTodo
      summary: Delete a todo from the list
      parameters:
      - in: path
        name: username
        schema:
            type: string
        required: true
        description: The name of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteTodoRequest'
      responses:
        &quot;200&quot;:
          description: OK

components:
  schemas:
    getTodosResponse:
      type: object
      properties:
        todos:
          type: array
          items:
            type: string
          description: The list of todos.
    addTodoRequest:
      type: object
      required:
      - todo
      properties:
        todo:
          type: string
          description: The todo to add to the list.
          required: true
    deleteTodoRequest:
      type: object
      required:
      - todo_idx
      properties:
        todo_idx:
          type: integer
          description: The index of the todo to delete.
          required: true
</code></pre>
<p>这是 openapi.yaml 文件的内容，它将告诉 ChatGPT，如何调用接口。</p>
<p>这里提代了 OpenAI 规范，可能有读者不了解，那么什么是 OpenAI 规范？</p>
<h2>什么是 OpenAI 规范？</h2>
<p>OpenAPI 规范（OAS），是定义一个标准的、与具体编程语言无关的 RESTful API 的规范。</p>
<p>OpenAPI 规范使得人类和计算机都能在“不接触任何程序源代码和文档、不监控网络通信”的情况下理解一个在线服务的作用。</p>
<p><strong>遵循该规范的好处是什么？</strong></p>
<p>如果您遵循 OpenAPI 规范来定义您的 API，那么您就可以用文档生成工具来展示您的 API，用代码生成工具来自动生成其它编程语言的服务器端和客户端代码，用自动测试工具进行测试等等。</p>
<p>简而言之，通过该规范，我们即可以由接口程序代码生成规范，也可以由规范生成其它后端语言实现的接口程序代码。</p>
<p>这里有一个份关于 OpenAI 规范的中文文档，可以考虑：<a href="https://openapi.apifox.cn/">https://openapi.apifox.cn/</a></p>
<h2>如何由 OpenAI 规范文件生成代码？</h2>
<p>可以使用 openapi-generator-cli。</p>
<p>它的工具仓库地址是：<a href="https://github.com/openapitools/openapi-generator-cli">https://github.com/openapitools/openapi-generator-cli</a></p>
<h3>第 1 步，安装工具</h3>
<pre><code>npm install @openapitools/openapi-generator-cli -g
</code></pre>
<h3>第 2 步，由规范生成代码</h3>
<p>下面是一个使用 OpenAPI Generator 生成 Python 服务端代码的示例。</p>
<pre><code>$ openapi-generator generate -i /path/to/openapi.yaml -g python-flask -o /output/directory
</code></pre>
<p>其中，/path/to/openapi.yaml 是 OpenAPI 规范文件的路径，-g 指定使用的生成器（这里是 python-flask），-o 指定输出目录。</p>
<h2>小结</h2>
<p>1946年电子计算机被发明出来的时候，当时没有多少人意识到它将发挥多大作用，我们现在知道的信息革命其实是我们后来总结的。今天开始的智能革命，其实具有同样的特征，如果说ChatGPT的发布还不能让你感到震撼的话，那么今天它发布的ChatGPT Plugins，应该能够引起你足够的重视了。一个联网的智能机器人，无穷的数据+无穷的算力，谁也不知道将产生怎样的结果。<strong>智能革命</strong>已经到来，AI或许不会取代的人，但会使用AI的人，一定会把不会使用AI的人取代。</p>
<p>你对ChatGPT了解多少，开始试用了吗？如果你是一名程序员，开始研究它的API文档了吗？</p>
<p>新人从0到1编程自学经典<a href="https://item.jd.com/10070363837259.html">《微信小游戏开发》</a>全套书籍已经在京东、当当上架，需要签名版及1v1辅导的读者请与作者联系。作者博客：<a href="https://yishulun.com/">艺述论</a>。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[《微信小游戏开发》勘误与增补列表]]></title>
            <link>https://yishulun.com/./src/posts/2023/02.html</link>
            <guid>https://yishulun.com/./src/posts/2023/02.html</guid>
            <pubDate>Wed, 08 Mar 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>《微信小游戏开发》勘误与增补列表</h1>
<p>由于水平有限，时间仓促，书中难免有遗漏、错愕之处，恳求读者朋友斧正。如有发现，可以给我发邮件9830131@qq.com，或加我的微信（9830131）告诉我。</p>
<p>下面是2023年2月&amp;3月版本1已经发现的勘误列表。</p>
<h2>前端篇</h2>
<h3>P17</h3>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images@master/202320230711225054-2023-07-11-22-50-56.png" alt="20230711225054-2023-07-11-22-50-56"></p>
<p>有读者找不到，在箭头处可以添加一句：具体见后端篇第16课拓展部分。</p>
<h3>P55</h3>
<p>如下所示，<code>0+&quot;10&quot;</code>结果是&quot;010&quot;，并不是数值10，红框内应改为：</p>
<blockquote>
<p>使用加号与一个数字拼接：+ &quot;10&quot;，这种方式最简单直接，其实本质上也是隐式转换。</p>
</blockquote>
<p><img src="./assets/image-20230411070305528.png" alt="image-20230411070305528"></p>
<p>该处由@<strong>MuninnC</strong>指出，感谢勘误。</p>
<h3>P156(增补)</h3>
<img src="./assets/image-20230520193735778.png" alt="image-20230520193735778" style="zoom: 67%;" />
<p>在箭头所示的地方（“..进行改写。”）添加这样一段话：</p>
<blockquote>
<p>..进行改写。注意这里的3处事件，指代码清单4-2中的click、mousemove、click三个事件，分别将以touchEnd、touchMove和touchEnd事件改写。</p>
</blockquote>
<h3>P262</h3>
<p>第一处，第4行、第5行，两行注释应改为：</p>
<pre><code>4.let d = {num: 100} // 变量d存在于栈中，{mum: 100}作为对象存在于堆内存中
5.let e = [100, 200] // 变量e存在于栈中，[100, 200]作为对象存在于堆内存中
</code></pre>
<p>第二处，划线部分应改为：</p>
<p>其中c、b、a位于栈内存，我们是直接操作的；而e、d保存的是引用地址......</p>
<img src="./assets/image-20230308234139526.png" alt="image-20230308234139526" style="zoom: 25%;" />
<h3>P281</h3>
<p><img src="./assets/image-20230611150634840.png" alt="image-20230611150634840"></p>
<p>这里在“第7行...”这一段的后面，可能需要加一段解释内容。内容如下：</p>
<p>注意第9行这里的代码，让#pos指向defaultPos，为什么也没用？原因是这样的：如果使用第9行、而不是第10～11行的代码，在第一次执行reset时，会把defaultPos这个引用对象赋值给#pos，之后小球在运动过程中，更新的都是#pos——同时也是defaultPos对象，也就是说，defaultPos这个默认值对象被“污染”了，从第二次调用reset开始，它再也不能作为默认值对象被使用了——它里面的x、y值已经不是默认值，而是小球运动最后停止时的位置。这是一处因为引用对象而产生的“陷阱”，JS中引用对象在赋值时不会产生拷贝，可能会因此产生许多问题，这里是一个很好的示例。</p>
<h3>P480</h3>
<p>划线部分应改为：渲染上下文对象属于哪个画布，就对哪个画布生效。</p>
<p><img src="./assets/75-p480.jpeg" alt="img"></p>
<h2>后端篇</h2>
<p>无</p>
<p>京东购买链接：<a href="https://item.jd.com/10070363837259.html">https://item.jd.com/10070363837259.html</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[你的下一个项目应该使用 Rust 编程的 7 个理由]]></title>
            <link>https://yishulun.com/./src/posts/2023/0228.html</link>
            <guid>https://yishulun.com/./src/posts/2023/0228.html</guid>
            <pubDate>Tue, 28 Feb 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>你的下一个项目应该使用 Rust 编程的 7 个理由</h1>
<blockquote>
<p>该文译自<a href="https://simpleprogrammer.com/rust-programming-benefits/%EF%BC%8C%E5%8E%9F%E4%BD%9C%E8%80%85%E6%98%AFTAPAN">https://simpleprogrammer.com/rust-programming-benefits/，原作者是TAPAN</a> PATEL。</p>
</blockquote>
<p>[TOC]</p>
<p>据最近的一项 Stack Overflow 调查证实，Rust 是 4 年多来最受欢迎的编程语言（高达 83.5% 的程序员首选）。这意味着那些尝试过并实际使用过 Rust 编程的人都对它敬畏不已。</p>
<p>然而，Rust 仍然不在最常用的编程语言前五名之列。这表明 Rust 编程在很大程度上仍然是一个充满未开发潜力的未开发领域。鉴于其受欢迎程度，越来越多的用户涌向 Rust，这意味着它将很快进入前五名，并将自己确立为世界各地程序员的主要工具。</p>
<p>为了让你不落伍，这里有一份关于什么是 Rust 编程语言的快速指南，以及你应该在下一个项目中使用 Rust 编程的七个原因。</p>
<h2>什么是 Rust 编程语言？</h2>
<p>就像真菌（是的，有一种叫做锈病的真菌！）一样，Rust 也是一种在编程世界中迅速传播的编程语言。</p>
<p>本质上，Rust 是一种编程语言，旨在克服 C++ 语言的缺点。虽然 C++ 是一种功能强大且功能无限的面向对象语言，但程序员在 C++ 中手动管理内存是相当困难的。<strong>Rust 允许你以极低的内存占用编写快速代码，为你提供了一个非常强大的编程工具。</strong></p>
<p>Rust 于 2012 年由 Mozilla 推出，但这个想法起源于一位充满激情的语言工程师 Graydon Hoare 的想法。Hoare 于 2006 年开始研究该语言，很快，Rust 的潜力引起了 Mozilla 开发人员的注意。他们与 Hoare 一起成立了一个专门的开发团队来试验该语言并以最佳方式构建它。</p>
<p>用 Hoare 的话来说，“该语言是针对沮丧的 C++ 开发人员的。”</p>
<p>下面让我们了解是什么让 Rust 比 C 或 C++ 等语言更好。</p>
<h2>Rust 是一门足够好的编程语言吗？</h2>
<p>Rust 是一种流行的编程语言，但它好吗？</p>
<p>对于初学者来说，它提供了类似于 C 和 C++ 的出色性能，并解决了内存安全问题。</p>
<p>此外，你可以使用 Rust 处理大量数据而不会损失任何性能。</p>
<p>而且，如果你还不相信。然后，你可以看看 Rust 在行业中的使用情况，Dropbox、Firefox 和 Cloudflare 等公司在生产中使用 Rust。</p>
<p>**Rust 的核心是一种静态类型的编程语言。这意味着它提供开箱即用的安全性和性能。**它提供比 C++ 更好的内存管理和安全并发。此外，<strong>如果你具有 C++ 知识，那么 Rust 很容易学习</strong>，因为 Rust 语法类似于 C++。</p>
<p>据 <a href="http://Nature.com">Nature.com</a> 宣称，科学家们也倾向于使用 Rust，因为它具有出色的内存管理功能和可用性。这些点只说明 Rust 是一门足够优秀的编程语言。</p>
<h2>列举 Rust 如此受欢迎的 6 个原因</h2>
<p>在过去三年中， Rust 一直是StackOverflow 开发人员调查中最“受喜爱”的编程语言。超过 86% 的开发人员正在使用 Rust 或表示有兴趣使用它，使其成为最受欢迎的编程语言。</p>
<p>随着使用 Rust 的开发人员数量从 2020 年的 5.1% 增加到 2021 年的 7.03%，这种兴趣现在使 Rust 更受欢迎。目前这一比例在 2022 年为 9.32%。</p>
<p>Rust 受欢迎程度的稳步上升，也意味着它已经从2020 年的倒数 7 名攀升至2022 年的前 14 名。</p>
<p>那么，是什么让它如此受欢迎呢？让我们列出六个原因。</p>
<ul>
<li>
<p>Rust 之所以流行，是因为 Rust 背后有基金会支持，其中成员包括 Microsoft、Meta、Dropbox、Arm、Google、Amazon 等成员。它在 COVID 开始时的经济崩溃期间生效。</p>
</li>
<li>
<p>Rust 很受欢迎，因为它是 C++ 的现代替代品。由于不使用空值，Rust 绕过了 C++ 错误。此外，Rust 的编译速度几乎与 C++ 相当，全球的开发人员都致力于通过 LLVM（低级虚拟机）改进进一步提高其编译速度。</p>
</li>
<li>
<p>Rust因其官方包管理器 Cargo 而广受欢迎。它解决了每次进行更改时重新编译代码的主要 C++ 缺点。Cargo 通过检查依赖性来绕过重新编译。</p>
</li>
<li>
<p>Rust因其卓越的内存管理而广受欢迎。使用 Rust，你可以控制内存分配和取消分配的工作方式。创建变量时会分配智能指针以简化内存管理。如果智能指针超出范围，就会发生取消分配。这种方法为你提供了完全控制，并允许你使用多个共享相同数据的智能指针。</p>
</li>
<li>
<p>Rust 很受欢迎，因为它通过提供一种无错误的方法来编写易于重构的代码来掌握并发性。</p>
</li>
<li>
<p>Rust 很受欢迎，因为它提供 WebAssembly 支持。这意味着开发人员可以在 Web 上创建音频、视频、3D 环境、游戏等。</p>
</li>
</ul>
<p>Rust 日新月异。甚至 Linux 的创造者 Linus Torvalds 也计划在 2023 年在 Linux Kernal 中使用 Rust 来对 Kernel 基于性能方面进行编程。</p>
<h2>为什么 Rust 是你下一个项目的最佳选择？（7个理由）</h2>
<p>Rust 包含许多 Web 开发人员绝对喜欢使用的功能。以下是我选择使用 Rust 的主要原因：</p>
<h3>1.Rust 解决内存管理问题</h3>
<p>系统编程通常需要低级内存控制，而使用 C 的手动内存管理，这项任务可以证明是一场真正的噩梦。</p>
<p>Rust 具有为低级细节提供便利的不可思议的能力。它可以直接访问硬件和内存，因为它不需要垃圾收集器在后台连续运行。</p>
<p>这意味着用 Rust 编写代码就像使用微控制器应用程序编写低级代码一样。你可以完全自由地替换代码片段，而无需承担内存安全风险。</p>
<h3>2.Rust 的低开销使其成为嵌入式编程的理想选择</h3>
<p>资源受限是常态，嵌入式系统通常出现在机器和家用电器上。这就是嵌入式系统需要像 Rust 这样开销非常低的现代编程语言的原因。</p>
<p>Rust 是嵌入式系统中一种资源高效且需求旺盛的功能。它允许程序员及早识别错误，防止设备将来发生任何事故。</p>
<p>蛋糕上的樱桃是 Rust 的零成本抽象能力。无论你使用何种抽象代码，Rust 都足够慷慨地接受它。你可以使用循环、闭包或当天你喜欢的任何代码风格，它们都将编译为同一个程序集，而不会影响代码的性能。</p>
<h3>3.Rust 促进强大的 Web 应用程序开发</h3>
<p>为 Web 应用程序开发选择正确的技术堆栈时，一个重要的考虑因素是编程语言的选择。有充分的理由将 Rust 编程包含在你的 Web 应用程序技术栈中。</p>
<p>如果你习惯于使用 Java 或 Python 等高级语言开发 Web 应用程序，那么你会爱上使用 Rust。使用 Rust，你可以更加确信代码不会出错。</p>
<p>对于任何已经精通 C 的人来说，Rust 都很容易学习。此外，你可以立即开始修补 Rust，而无需花费数年时间学习技巧。</p>
<p>使用 Rust 进行 Web 开发的主要亮点是：</p>
<p>你可以将 Rust 编译为WebAssembly，这样可以更轻松地在 Web 上获得接近原生的性能。<br>
Rust 允许任何语言编译成 WebAssembly，从而允许可移植的、可执行的在线运行代码。</p>
<p>简而言之，对于 Web 开发，Rust 是吸收了所有正确维生素的语言！</p>
<h3>4.Rust 的静态类型确保易于维护</h3>
<p>Rust 是一种静态类型语言。在 Rust 中编程时，所有类型在编译时都是已知的。Rust 也是一种强类型语言，这意味着用 Rust 更难编写不正确的程序。</p>
<p>管理复杂性是成功编程的核心。随着代码的增长，复杂性也随之增加。静态类型语言允许你密切关注代码中发生的事情，从而实现高度的简单性。</p>
<p>Rust 也不需要你多次重复变量的类型，鼓励长期可维护性。</p>
<p>简而言之，Rust 允许嵌套和闭包，这反过来又提高了代码的可维护性。</p>
<h3>5.Rust 具有快速和高性能</h3>
<p>Rust 的性能与 C++ 相当，并且轻而易举地击败了 Python 等语言。</p>
<p>没有垃圾收集有助于 Rust 的高速。与许多其他语言不同，Rust 没有运行时检查，编译器会将错误的代码扼杀在萌芽状态。这可以防止错误代码扩散并对系统造成严重破坏。</p>
<p>最后，如前所述，Rust 在嵌入式系统中的执行速度也非常快。</p>
<h3>6.跨平台开发与支持</h3>
<p>使用 Rust，你可以轻松构建可在各种操作系统（如 Linux、macOS、Windows 和其他平台）上运行的跨平台解决方案。</p>
<p>值得注意的是，Rust 允许你对应用程序的前端和后端进行编码。Rocket、Nickel和Actix等 Rust Web 框架的可用性使使用 Rust 进行开发变得更加容易。</p>
<p>使用 Rust 开始开发非常容易——只需打开Rustup，一个快速的工具链安装程序和版本管理工具，然后按照说明进行操作。你可以选择根据需要格式化代码。Rustfmt允许基于默认格式样式自动进行代码格式化。Clippy是一种有助于维护惯用代码风格的工具，它负责其余的工作。</p>
<h3>7.Rust 拥有广阔的生态系统</h3>
<p>随着 Rust 的日益流行，Rust 生态系统正在迅速扩展。庞大的生态系统中的一个主要因素是它不仅仅是一种语言或编译器。软件生产质量需要更多方面，而 Rust 生态系统认为所有这些都非常重要。</p>
<p>首先，Cargo 是 Rust 程序员使用的命令行工具，可帮助管理依赖项、运行测试和生成文档。</p>
<p>其次，Rust 有一个社区站点 <a href="http://crates.io">crates.io</a>，可以满足你对 Rust 库的需求。你可以在docs.rs上找到在 <a href="http://crates.io">crates.io</a> 上发布的任何库的文档。</p>
<p>新手 Rust 开发人员也可以轻松访问基于属性的测试、基准测试和模糊测试。</p>
<p>与专业人士交流和学习也很容易。有多个 Rust 会议，如RustConf、RustBelt和RustFest，它们是 Rust 开发人员的知识金矿。</p>
<h2>是什么让 Rust 与众不同？</h2>
<p>Rust 的专长在于它能够为程序员提供编写无错误代码而不影响性能的工具。它的内存安全功能克服了流行编程语言（如 C 和 C++）的缺点。</p>
<p>你还可以获得零成本的抽象，这些抽象可以提高代码的性能，因为无论你采用何种方法对解决方案进行编码，它都会生成相同的程序集。出色的并发支持还意味着你可以编写易于重构的代码。</p>
<h3>语言对比：Rust vs Go</h3>
<p>Google 的 Go 大量借鉴了 C 来克服 C++ 的缺点。它增加了结构类型、垃圾收集和内存安全，重点是多核开发，以实现更好的并发性和并行性。</p>
<p>另一方面，Rust 是一种多范式通用编程语言，它解决了 C++ 内存安全问题，同时提供了类似的性能。</p>
<p>Go 是对微服务、CLI 和流处理进行编程的绝佳选择。它的占用空间小意味着你可以将它与云原生应用程序一起使用。Rust 更加通用，因为它可用于为嵌入式系统开发程序，同时由于 WebAssembly 支持，它也适用于 Web 开发。</p>
<p>两者都是出色的编程语言，具有许多相似之处，即使是为不同的目的而创建的。由于两者都是编译的而不是解释的，因此它们提供开箱即用的性能。</p>
<p>因此，如果你正在寻找一种简单易用的通用语言，请选择 Go。它提供了一个专注于性能的良好并发模型。如果你正在开发以性能为中心的解决方案，那么 Rust 是一个不错的选择。它使你可以进行低级编码而不必担心内存管理。</p>
<h3>语言对比：Rust vs C++</h3>
<p>C++ 是最古老的编程语言之一，由丹麦计算机科学家 Bjarne Stroustrup 在四十年前的 1985 年发布。它是一种通用编程语言，旨在扩展 C 编程语言的功能。Rust 大量借鉴了 C++，这就是为什么你会发现它们之间有很多相似之处。</p>
<p>Rust 和 C++ 之间的第一个区别是它们处理内存的方式。通过更好的内存管理，你可以使用 Rust 编写在机器级别表现良好的无错误代码。它们都是编译语言，不需要运行时或垃圾收集器。</p>
<p>在性能方面，C++ 略胜一筹。Rust 速度很快，但需要更多的打磨才能变得和 C++ 一样快。然而，Rust 社区正在努力在 LLVM 级别优化 Rust 以获得更高的性能。</p>
<p>至于易学性，如果你是编程新手，<strong>学习 C++ 将花费大量时间，对于需要更多精力和时间的 Rust 也是如此</strong>。但是，如果你已经了解 C++，则可以快速开始使用 Rust。（Rust的学习曲线比较陡峭，新人并不建议直接从Rust入门。布道师甚至建议直接从C入门，都不会建议直接从Rust入门，有人甚至说建议新人直接写Rust，与劝人跳崖无异。）</p>
<h2>何时使用Rust？Rust最适合的6个使用领域</h2>
<p>说了这么多，做了这么多，很容易看出 Rust 在未来所有项目中的应用有多棒。</p>
<p>但是你究竟在什么地方和什么时候使用 Rust 编程？</p>
<p>我们知道在编码方面没有万能的解决方案。这就是为什么了解在哪些情况下 Rust 是更好的解决方案很重要。</p>
<p>以下是一些使用 Rust 进行编程的有益示例：</p>
<ul>
<li>当你开发性能至关重要的应用程序时，Rust 可以证明是一个不错的选择。</li>
<li>当你的解决方案需要在短时间内处理大量数据时，请选择 Rust。</li>
<li>当你想要更好地控制线程中的资源分配时，请使用 Rust。</li>
<li>Rust 提供内存安全，但也很复杂，因此当内存安全至关重要时选择它。</li>
<li>使用 Rust 重写应用程序的敏感部分，其中程序速度至关重要。</li>
</ul>
<p>上述因素使 Rust 成为开发游戏引擎、操作系统、文件系统、浏览器组件和 VR 模拟引擎等应用程序的理想选择。下面细致讲一下。</p>
<h3>1.Rust 是编写物联网代码的绝佳语言</h3>
<p>Rust 是程序员为 IoT 应用程序编写代码的首选语言。</p>
<p>随着Raspberry Pi和Arduino等设备的出现，创客运动风靡一时。如果你是将物联网视为下一个十亿美元机会的程序员之一，那么你不能忽视学习 Rust 编程。</p>
<p>Rust 是一种接近底层的、无运行时的语言，这意味着你可以在内存储备有限的地方使用它。</p>
<p>正因为如此，Rust 被证明是一种为 Raspberry Pi、Arduino 或 Tessel 等微控制器硬件编写代码的优秀语言。</p>
<h3>2.Rust编程可用于HPC（高性能计算）</h3>
<p>将 Rust 用于 HPC 的问题是你的大部分代码将用 C 编写。它的美妙之处在于使用它的 FFI（外部函数接口），你可以在没有任何开销的情况下执行 Rust 代码。换句话说，Rust 允许你一个接一个地重写你的应用程序模块。</p>
<p>使用 Rust 的开发人员体验也好得多，因为它不会影响应用程序的性能。Rust 还将使你的应用程序能够在大量内核上更好地扩展，这在 HPC 中至关重要。</p>
<h3>3.使用 WebAssembly (WASM) 编写 Web 应用程序</h3>
<p>Rust 支持 WebAssembly，这是一种快速、现代且安全的创建 Web 应用程序的方法。将 Rust 与 WebAssembly 结合使用可为你提供可预测的性能、较小的代码大小以及对优秀库集的访问。</p>
<p>WASM + Rust 与 JavaScript 配合得很好。这意味着你不必替换现有的代码库，并且可以进行扩充以从 Rust 的性能中获益。此外，Rust 还可以与现有的工具链一起使用，例如 npm。</p>
<h3>4.科学项目</h3>
<p>Rust 的速度和安全性也引起了科学家们的关注。他们正在从 Python 转向 Rust，即使掌握和使用它需要时间。<a href="http://xn--Nature-hz8lt03a.com">根据Nature.com</a> 文章，科学家 Köster 创造了 Varlociraptor，它通过将序列与遗传碱基进行比较来识别基因组变异。Rust 使得以最佳速度进行数百万次此类计算成为可能。</p>
<p>Rust 内存模型还让科学家们不用担心内存泄漏或安全漏洞。科学家通过更高的学习和实施时间在编译期间消除错误。所有这些也适用于并行代码。</p>
<h3>5.游戏开发</h3>
<p>游戏开发是另一个出色的 Rust 用例。有很多 Rust 游戏引擎可以帮助你入门。其中包括 Amethyst——一种面向数据的游戏引擎；bevy——另一个数据驱动的游戏引擎；Fyrox – 生产就绪引擎和 Nonnou – 开源游戏框架。</p>
<h3>6.区块链开发</h3>
<p>你还可以使用 Rust 进行区块链开发。区块链背后的想法是提供一个不可变的去中心化数字分类账，一旦数据被写入就无法篡改。Rust 出色的内存安全性意味着开发人员可以创建内存安全的区块链应用程序。其他 Rust 特性，例如速度和可靠性，使其成为区块链的不错选择。在这里，你可以尝试基于 Rust 的 OpenEthereum 和 Lighthouse 框架。</p>
<h2>哪些大厂在使用 Rust语言？</h2>
<p>Rust 不仅在开发人员中流行（如 StackOverFlow 开发人员调查所示），而且在公司中也很流行。在生产中使用 Rust 的顶级公司是：</p>
<table>
<thead>
<tr>
<th><strong>公司</strong></th>
<th><strong>做什么的</strong></th>
<th><strong>使用的其他技术</strong></th>
<th><strong>使用 Rust 的原因</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://medium.com/coursera-engineering/rust-docker-in-production-coursera-f7841d88e6ed">Coursera——</a>流行的在线学习平台</td>
<td>他们使用 Rust 为学生的编程作业提供支持。通过网络，学生可以编写和运行具有类似本地性能的计算机程序。</td>
<td>他们在 Docker 容器下运行它。</td>
<td>为学生运行代码提供安全的环境。C 也是一个不错的选择，但缺乏 Rust 的灵活性。Rust 提供了一个强大的系统，并且不受某些安全漏洞的影响。</td>
</tr>
<tr>
<td><a href="https://dropbox.tech/infrastructure/rewriting-the-heart-of-our-sync-engine">Dropbox——</a>流行的文件存储平台</td>
<td>Dropbox 的文件同步引擎使用 Rust。</td>
<td>SSL、Nginx、Python、S3、EC2</td>
<td>Rust 使得编写并发代码变得容易，并且易于测试和调试。此外，Rust 的大量编译时和静态类型有助于管理并发代码和复杂的数据库。</td>
</tr>
<tr>
<td><a href="https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf">npm——</a>一个 JavaScript 包管理器</td>
<td>npm 的主要服务用 Rust 重写。</td>
<td>JavaScript</td>
<td>他们重写了主要服务以提高其性能并解决随着用户群的增长而可能发生的瓶颈。Rust 的内存管理是另一个原因。</td>
</tr>
<tr>
<td><a href="https://www.figma.com/blog/rust-in-production-at-figma/">Figma——</a>一种网络协作设计工具</td>
<td>Figma 的多人同步引擎是用 TypeScript 的 Rust 重写的</td>
<td>LiveGraph, AWS</td>
<td>由于性能优势，Figma 选择了 Rust。</td>
</tr>
<tr>
<td>Microsoft</td>
<td>他们正在尝试将 Rust 集成到 C/C++ 中</td>
<td>许多</td>
<td>Rust 出色的内存安全性解决了微软 70% 的与内存安全相关的常见漏洞和暴露（CVE）。</td>
</tr>
<tr>
<td><a href="https://discord.com/blog">Discord</a></td>
<td>Discord 在服务器端和客户端都使用 Rust。他们使用 Rust 和 Exilir Native Implemented Functions (NIFs) 来扩展他们的 Discord 解决方案。Read States 服务也用 Rust 重写。</td>
<td>JavaScript、Python、Rust、C++</td>
<td>Rust 克服了 Go 使用垃圾收集器及其内存模型的限制，这些限制增加了延迟峰值。</td>
</tr>
<tr>
<td>Facebook</td>
<td>Facebook 希望消除错误并改进编译器反馈循环，因此他们用 Rust 重写了源代码控制后端。</td>
<td>Python、网络技术</td>
<td>好处包括无错误代码和在编译期间捕获错误。源代码也变得易于维护。</td>
</tr>
</tbody>
</table>
<h2>细数一下Rust语言的缺点</h2>
<p>Rust 是新的和令人兴奋的，并提供许多好处，包括内存安全、零抽象、web-assembly 支持和性能。但是，它并非没有缺点，其中包括：</p>
<ul>
<li>编译时错误和缓慢的编译时间：Rust 实现内存安全是因为它在编译时强制执行的规则。这意味着你会看到大量的错误，这会让许多程序员感到沮丧。</li>
<li>缺少所需的库：Rust 是新的，因此缺少你可以使用其他编程语言轻松获得的所需库。<br>
原型不友好：由于编译需要花费大量时间并且需要 100% 的条件覆盖率，因此 Rust 不适合原型解决方案。</li>
<li>不适合初学者：Rust 不适合初学者，因为它包含需要时间才能掌握的高级概念。<br>
小市场：Rust 市场仍在增长，与其他成熟的编程语言相比，机会更少。</li>
<li>它从未最终确定：Rust 是一个正在进行的项目，旨在提供向后兼容性和稳定性。这意味着 Rust 功能需要时间才能获得稳定的支持。</li>
<li>更小的目标平台：由于在 Rust 编译器中使用 LLVM，目标平台的数量比 C/C++ 小。</li>
</ul>
<h2>你应该学习 Rust 吗？</h2>
<p>Rust 正在迅速增长（正如 StackOverFlow 开发人员过去三年的调查所表明的那样）。因此，学习 Rust 并不是一个坏主意，因为它会提高你的就业能力。</p>
<p>从技术角度来看，Rust 为创建安全、快速和可移植的应用程序提供了强大的工具解决方案。它提供并发性、内存安全和高性能，专注于想要开发可靠产品的开发人员。这就是开发人员喜欢它的原因。你还可以访问不断壮大的 Rust 社区和 Rust 包。</p>
<p>因此，如果你是一名想要开发健壮且内存安全的应用程序的开发人员，那么 Rust 是你的选择。当你从一开始就编写可靠的代码时，它提供了长期的稳定性——部署几个月后你不会遇到空指针或运行时问题。</p>
<p>编译器向你抛出错误，就好像它是你的代码助手一样。它提供了详细的错误和帮助消息，以便你可以调试它们。使 Rust 具有吸引力的其他特性包括：</p>
<ul>
<li>使用模式匹配处理分支。</li>
<li>Crater 工具可在你通过详细报告进行更新之前检查新的 Rust 版本是否会破坏你的 Rust 项目。</li>
<li>WebAssembly 支持允许你创建在网络上运行的应用程序。</li>
</ul>
<h2>你应该学习 Rust 还是 Python？</h2>
<p>建议两者都学。Rust 是一种相当新的编程语言，市场机会有限。至于学习上的困难，还是从Python入手比较好。Python 对初学者很友好。它将帮助你掌握抽象、面向对象范式、函数式编程和其他编程概念。一旦你掌握了它，你就可以转向 Rust。</p>
<p>学习 Rust 时，你将探索更高级的概念。在这里，你将学习如何借助详细的编译器错误来编写无错误的代码。Rust 对 WebAssembly 的支持意味着你还可以在 Web 上编写各种应用程序。</p>
<p>但是，在 Python 和 Rust 之间进行选择取决于你的目标。例如：</p>
<ul>
<li>选择 Python 进行数据科学</li>
<li>选择 Python 与 Django 和其他 Web 开发框架进行 Web 开发（此处并未建议采用Rust进行Web开发）</li>
<li>选择 Rust 进行软件和操作系统开发</li>
<li>选择 Rust 进行区块链技术开发</li>
<li>选择 Rust 进行以 WebAssembly 为中心的开发</li>
<li>选择 Rust 进行神经网络开发</li>
</ul>
<h2>如何学习 Rust 编程</h2>
<p>开始学习 Rust 的最佳方式是访问Learn Rust站点。在这里，你可以找到详细的核心 Rust 文档，并可以访问不同类型的书籍。Rust 编程语言（绰号“书”）非常详细地介绍了 Rust。在本书中，你可以通过创建几个项目来学习 Rust。除此之外，你还可以参加包含小练习的Rustlings 课程。</p>
<p>此外，你还可以阅读 Learn Rust 网站上的其他指南，包括：</p>
<ul>
<li>了解 Rust 包管理器的 Cargo 书。</li>
<li>了解 Rust 版本的版本指南。</li>
<li>让你熟悉 Rust 编译器的 Rustc 书。</li>
<li>编译器错误索引以获得对 Rust 编译器错误的深入解释。</li>
<li>学习如何在 Rust 中使用有效命令行的书</li>
<li>WebAssembly 书，学习如何使用 Rust 创建浏览器原生库。</li>
<li>嵌入式书籍，学习如何将 Rust 用于嵌入式系统。</li>
<li>你还可以在网络上找到多种 Rust 教学资源。如果你想替代书面内容，可以找找 Youtube 视频。</li>
</ul>
<h2>发现 Rust 的潜力</h2>
<p>编程使用 Rust 编程的主要好处是其高效的内存管理能力。</p>
<p>然而，最重要的是，它为各种应用程序（尤其是 Web 应用程序）提供了极好的速度和安全性。因为它具有强大的命令行界面工具，所以它也是开发跨平台应用程序的绝佳工具。Rust 非常适用于低资源环境，它还通过使程序员能够使用现有代码交叉编译新代码来节省开发时间。</p>
<p>除了作为开发游戏引擎和操作系统的理想工具之外，Rust 编程还具有巨大的物联网开发潜力。</p>
<p>当你选择 Rust 时，一个充满活力的社区会欢迎你，所以请相信 Rust 编程语言并投身于这个充满可能性的激动人心的世界！</p>
<p>译者注：国内目前也有不少Rust相关的优秀图书及教程，并不一定要在youbube上学习。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[如何不移除`<p>`标签而将段落连接起来？]]></title>
            <link>https://yishulun.com/./src/posts/2022/34.html</link>
            <guid>https://yishulun.com/./src/posts/2022/34.html</guid>
            <pubDate>Thu, 29 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>如何不移除<code>&lt;p&gt;</code>标签而将段落连接起来？</h1>
<p>这是一个很经典的CSS布局问题，新人彻底理解了这个问题，HTML网页布局思想便已掌握了七七八八了。</p>
<h2>问题</h2>
<p>先看一段HTML代码：</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;这是一个标题&lt;/h1&gt;
	&lt;div class=&quot;wrapper&quot;&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>因为p标签默认是块级元素，宽度默认会占满父容器的100%，所以这个代码默认展现出来的样式是这样的：</p>
<p>::: normal-demo</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;这是一个标题&lt;/h1&gt;
	&lt;div class=&quot;wrapper&quot;&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>:::</p>
<p>问题与这个示例有关，是这样的：如何将三行文本“这是一个段落”合并到一行，从左向右排行显示，且不用移除<code>&lt;p&gt;</code>标签？</p>
<p>最简单的解决方案只需要加一行CSS样式代码：</p>
<pre><code class="language-CSS">.wrapper p {
  display: inline;
}
</code></pre>
<p>运行效果如下所示：</p>
<p>::: normal-demo</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;style&gt;
  .wrapper p {
    display: inline;
  }
  &lt;/style&gt;
  &lt;h1&gt;这是一个标题&lt;/h1&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>:::</p>
<h2>为什么简单加一个<code>inline</code>样式就可以解决问题？</h2>
<p>早期网页为了从向至下流式展示内容，根据需要将标签元素默认分为了两类：</p>
<ul>
<li>块级元素</li>
<li>行内元素</li>
</ul>
<p>块级元素默认占据父容器的100%宽度，同时可以有高度，在不指定高度的时候，高度由子元素堆积决定。例如div、p、h1~h6等标签，凡是默认在网页中占据全部页面宽度的元素，都是块级元素。</p>
<p>而行内元素用于在一行内从左向右展示小内容，行内元素默认只有宽度，没有高度，并且它们的宽度也是由它们本身的内容所决定的。例如a、br、b、em、img、sub、sup、strong等标签，凡是默认不占据100%父容器宽度的元素，都可以视为行内元素。如果想给行内元素指定高度，可以在父容器上给行元素设置line-height样式。</p>
<p>这两类元素的作用，就是合起来展示一个从上至下依次展示、每行从左至右依次排列的流布局，如下所示。</p>
<p><img src="./assets/image-20221229105113884.png" alt="流式布局"></p>
<p>回头看我们的示例，p标签默认是块级标签，它在渲染时要占满页面容器的100%宽度，所以默认效果三行文本“这是一个段落”是从上向下依次排列的。</p>
<p>当我们通过类选择器+标签选择器（<code>.wrapper p</code>），修改了所有p标签的display样式后，即将display样式设置为inline，这时候这个页面内的所有p标签已经不是块级元素了，都变成了行内元素。</p>
<p>HTML元素是什么块级元素，还是行内元素，本质上是由它们携带的默认的CSS样式决定的，也就是由display等于block或inline决定的，等于block就是块级元素，等于inline就是行内元素。因为CSS可以控制一切HTML元素的样式，事实上我们甚至可以将任何一个HTML元素修改为其他元素————当然如果真修改的话，这里还涉及元素属性的问题，在这里我们只谈样式。HTML元素默认携带的样式是由其名称决定的，所有元素的默认样式都是可以通过CSS代码修改的。</p>
<p>当给p标签设置了display样式为inline以后，这时候p标签的行为与span标签类似了，于是三行文本“这是一个段落”便是从左向右，在一行内展示了，如果一行展示不了，内容还会自动换行，就像其他行内元素所表示出来的行为那样。</p>
<h2>由inline-block决定的行内块级元素</h2>
<p>随着网页布局复杂度的提升，后来又出现了inline-block样式值，我们可以修改示例，看一看将display修改为inline-block之后的效果，如下所示。</p>
<p>::: normal-demo</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;style&gt;
  .wrapper p {
    display: inline-block;
  }
  &lt;/style&gt;
  &lt;h1&gt;这是一个标题&lt;/h1&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>:::</p>
<p>效果与修改为inline是相似的，在这个示例中看不出什么差别。事实上inline-blcok代表行内的块级元素，这样的元素既可以在一行之内从左向右自动依次排列，可以拥有自己的高度，又可以作为一个局部的小容器，再容纳其他子元素。</p>
<p>inline-blcok样式的出现，代表CSS在网页布局方面已经没有什么能力短板了，只有网页设计师想不到的，没有CSS实现的布局。</p>
<h2>flex布局</h2>
<p>但CSS的网页布局能力发展到这里并没有停止，后来为了更好了处理父容器与子元素的组合样式，flex布局被发明出来了。flex布局能够实现的效果，用以往的CSS也可以实现，但用flex布局的方法实现，代码会更简洁、逻辑会更加清晰、页面的扩展性也更好。</p>
<p>下面<a href="https://yishulun.com/">作者</a>仍然拿上面的示例改造，如果不设置display为inline或inline-block，使用flex布局怎么达到同样的效果呢？也是只添加一行CSS代码就足够了，如下所示。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;style&gt;
  .wrapper {
    display: flex;
  }
  &lt;/style&gt;
  &lt;h1&gt;这是一个标题&lt;/h1&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>运行效果如下所示：</p>
<p>::: normal-demo</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;style&gt;
  .wrapper {
    display: flex;
  }
  &lt;/style&gt;
  &lt;h1&gt;这是一个标题&lt;/h1&gt;
  &lt;div class=&quot;wrapper&quot;&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
    &lt;p&gt;这是一个段落&lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>:::</p>
<p>效果是一样的。</p>
<p>将display设置为flex就代表了启用flex布局。因为默认情况下flex-direction等于row，子元素会像行内元素那样从左向右排行，所以只写一行display等于flex样式代码就可以了。</p>
<p>flex布局能力很强大，它不仅可以处理从左向右的横向布局，还可以处理从上向下的纵向布局，两个方向的布局使用的是同一套样式语义。</p>
<p>很多人都觉得这套语义记了又忘，实在很难记住，即使是富有经验的网页设计师在许久不手写CSS代码之后，也需要借助工具才可以将样式代码写对。针对开发者的这个痛点，新版本的Chrome浏览器现在提供了这样的一个flex布局辅助设计功能，如下所示，当我们给元素添加了display等于flex的样式代码后，后面会出现一个功能按钮，点击它，会展开一个flex布局互动小面板。点击这个面板上具体的排列项，相应的样式代码即会自动生成。</p>
<p><img src="./assets/image-20221229111710840.png" alt="image-20221229111710840"></p>
<p>以后不用再记那些难记的样式名称了，有需要的时候调出这个flex布局互动小面板，动手你发财的小手点一点，所有布局代码都能搞定了。</p>
<h2>小结</h2>
<p>HTML开发主要有两种布局思想：传统div流式布局和flex布局。</p>
<p>还有一种全页面都使用绝对值定位的布局思想，这种布局思想只适用于Web管理后台或工具Web项目等开发场景，对于面向C端用户的场景是不适用的。HTML网页的根本设计哲学是流式布局————整体上从上向下、行内从左向右的流式布局，这种布局可以让HTML内容可以一边加载一边渲染与展示，这是一种很好的设计哲学，不要轻易舍弃这种哲学。</p>
<p>flex布局本质上继承了流式布局的思想，它与流式布局并不冲突，只是丰富了CSS在父容器子元素组合关系布局上的能力。在网页设计中，现在普遍优先使用flex布局，用最简单的CSS代码达到设计的需求。在具体设计时，配合使用Chrome开发者工具中的flex布局小面板，写起​flex布局代码也很容易。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[JS如何返回异步调用的结果？]]></title>
            <link>https://yishulun.com/./src/posts/2022/33.html</link>
            <guid>https://yishulun.com/./src/posts/2022/33.html</guid>
            <pubDate>Mon, 26 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>JS如何返回异步调用的结果？</h1>
<p>这个问题<a href="https://yishulun.com/">作者</a>认为是所有从后端转向前端开发的程序员，都会遇到的第一问题。JS前端编程与后端编程最大的不同，就是它的异步机制，同时这也是它的核心机制。</p>
<p>为了更好地说明如何返回异步调用的结果，先看三个尝试异步调用的示例吧。</p>
<p><strong>示例一：调用一个后端接口，返回接口返回的内容</strong></p>
<pre><code class="language-js">function foo() {
  var result
  $.ajax({
    url: &quot;...&quot;,
    success: function(response) {
      result = response
    }
  });
  return result // 返回：undefined
}
</code></pre>
<p>函数foo尝试调用一个接口并返回其内容，但每次执行都只会返回undefiend。</p>
<p><strong>示例二：使用Promise的then方法，同样是调用接口然后返回内容</strong></p>
<pre><code class="language-js">function foo() {
  var result
  fetch(url).then(function(response) {
    result = response
  })
  return result // 返回：undefined
}
</code></pre>
<p>与上一个示例的调用一样，也只会返回undefined。</p>
<p><strong>示例三：读取本地文件，然后返回其内容</strong></p>
<pre><code class="language-js">function foo() {
  var result
  fs.readFile(&quot;path/to/file&quot;, function(err, response) {
    result = response
  })
  return result // 返回：undefined
}
</code></pre>
<p>毫无意外这个示例的调用结果也是undefined。</p>
<p>为什么？</p>
<p>因为这三个示例涉及的三个操作————ajax、fetch、readFile都是异步操作，从操作指令发出，到拿到结果，这中间有一个时间间隔。无论你的机器性能多么强劲，这个间隔也无法完全抹掉。这是由JS的主线程是单线程而决定的，JS代码执行到一定位置的时候，它不能等待，等待意味着用户界面的卡顿，这是用户不能容忍的。JS采用异步线程优化该场景，当主线程中有异步操作发起时，主线程不会阻塞，会继续向下执行；当异步操作有数据返回时，异步线程会主动通知主线程：“Hi，老大，数据来了，现在要用吗？”</p>
<p>“好的！马上给我。”</p>
<p>这样异步线程把异步代码推给主线程，异步代码才得以执行。对于上面三个示例而言，<code>result = response</code>就是它们的异步代码。</p>
<p>下面<a href="https://yishulun.com/">作者</a>画一张辅助理解这种机制吧：</p>
<p><img src="./assets/JS%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6.png" alt="JS的异步线程机制"></p>
<p>当异步线程准备好数据的时候，主线程也不是马上就能处理，只有当主线程有空闲了，并且前面没有排队等待处理的数据了，新的异步数据才能得以处理。</p>
<p>在了解了JS的异步机制以后，下面看前面三个示例如何正确改写。</p>
<h2>回调函数：最古老的异步结果返回方式</h2>
<p>先看示例一，使用回调函数改写：</p>
<pre><code class="language-js">function foo(callback) {
  $.ajax({
    url: &quot;...&quot;,
    success: function(response) {
      callback(response)
    }
  });
  // return result // 返回：undefined
}
</code></pre>
<p>在调用函数foo的时候，事先传递进来一个callback，当ajax操作取到接口数据的时候，将数据传递给callback，由callback自行处理。</p>
<p>这种基于回调的解决方案，虽然“巧妙”地解决了问题，但在存在多层异步回调的复杂项目中，往往由于一个操作依赖于多个异步数据而造成“回调噩梦”。</p>
<h2>ES2015：使用Promise对象与then方法链式调用</h2>
<p>第二种改进的方案，不使用回调函数，而是使用ES2015中新增的Promise及其then方法，下面以示例二进行改造：</p>
<pre><code class="language-js">function foo() {
  return new Promise(function(resolve, reject) {
    fetch(url).then(function(response) {
        resolve(response)
    })
  })
}
foo().then(function(res){
  console.log(res)
})..catch(function(err) {
  //
})
</code></pre>
<p>foo返回一个Promise对象，注意，Promise仅是一个可能承载正确数据的容器，它并不是数据。在使用它的，需要调用它的then方法才能取得数据（在有数据返回的时候）。与then同时存在的另一个有用的方法是catch，它用于捕捉异步操作可能出现的异常，处理可能的错误对加强鲁棒性至关重要，这个catch方法不容忽视。</p>
<p>注意：示例中的fetch方法<a href="https://yishulun.com/">作者</a>没有给出具体实现，它在这里是作为一个返回Promise对象的异步操作被对待的，也因此我们看到了，在这个方法被调用后返回的对象上，也可以紧跟着调用then方法（第3行）。</p>
<p>但是，这种使用Promise的解决方案就完美了吗，就没有问题了吗？显然不是的。</p>
<h2>ES2017：使用async/await语法关键字</h2>
<p>过多的“紧随”风格的then方法调用及catch方法调用，让代码的前后逻辑不清晰；当我们阅读这样的代码时，并不是从上向下瀑布式阅读的，而是时而上、时而下跳动着阅读的，这很不舒服。不仅阅读时不舒服，编写时也很难以用一种像后端编程那样的从上向下的简洁的逻辑组织代码。</p>
<p>下面开始开始使用ES2017标准中提供async/await语法关键字，对示例三进行改写：</p>
<pre><code class="language-js">function foo() {
  return new Promise(function(resolve, reject) {
    fs.readFile(&quot;path/to/file&quot;, function(err, response) {
        resolve(response)
    })
  })
}
(async function(){
  const res = await foo().catch(console.log)
  console.log(res)
})()
</code></pre>
<p>基于async/await语法关键字的方案，是使用Promise的方案的升级版，在这个方案中也使用了Promise。第8行~第11行，这是一个IIFE（立即调用函数表达式），之所以要用一个只使用一次的临时匿名函数将第9行~第10行的代码包裹起来，是因为await必须用在一个被async关键字修饰的函数或方法中，只能直接用到顶层的文件作用域或模块作用域下。</p>
<p>使用这种方案的优化是，代码可以像后端编程那样从上向下写，结构可以很清晰。这也是一种被称为“异步转同步”的JS编程范式，在前端开发中已被普遍接受。</p>
<p>注意，“异步转同步”并没有真正改变异步代码，异步代码仍然是异步代码，它们仍然会在异步线程中先默默地执行，等有数据返回了再通知主线程处理。当我们使用这种编程模式的时候，一定不要在主线程上去await一个Promise，可以发起异步操作，让异步操作像葡萄一样挂在主线程上，但不能等待它们返回了再往下执行。</p>
<h2>jQuery的Deferred Object（延迟对象）</h2>
<p>先看一段Promise+then方法风格的jQuery代码：</p>
<pre><code class="language-js">$.ajax({
  url: &quot;test.html&quot;,
  context: document.body
}).done(function() {
  $(this).addClass(&quot;done&quot;)
})
</code></pre>
<p>第4行，这里的done方法是jQuery自行实现的，$.ajax方法返回的是一个DeferredObject（延迟对象），这个对象上有done方法，这个方法与Promise的then类似。</p>
<p>jQuery成名在前，在ES2015标准诞生之前，jQuery的DeferredObject就已经被定义了。Promise本身并没有神奇的地方，它可以发挥作用，主要依赖的是在JS中，Object是引用对象，继承于Object原型的Promise也是引用对象，当异步操作发起时，只有一个“空”的Promise被创建了，但是它的引用被保持了；当数据回来的时候，数据再被“装填”进这个对象，这样通过先前持有的引用，异步代码便可以访问到对象上携带的数据。</p>
<p>Promise的胜利，更多是编程思想上的胜利，Promise的成功，也是编程思想上的成功。**所有一种语言中编程思想上的成功，在其他语言中都可以被学习和借鉴。**事实上在后端编程中，这种伪装成同步代码风格的异步编程思想也极其普遍，它们拥有一个共同的名字，叫协程。</p>
<h2>小结</h2>
<p>在JS中处理异步调用的结果，最佳实践就是“异步转同步”：使用Promise + async/await语法关键字。在这里async总是与await成对出现，一个async函数总是返回一个Promise，一个await关键字总是在尝试“解开”一个Promise，结局要么等到有价值的数据，要么异步出现异步，什么也没有等到。为了避免出现异常，影响主线程的正常运行，一般要用catch规避异常。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[32《断刀客》观后感]]></title>
            <link>https://yishulun.com/./src/posts/2022/32.html</link>
            <guid>https://yishulun.com/./src/posts/2022/32.html</guid>
            <pubDate>Sat, 24 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>32《断刀客》观后感</h1>
<p><img src="./assets/FF91DD70-E329-4185-B6D9-BD85146AFF2C.jpeg" alt="断刀客"></p>
<p>徐克导演的《断刀客》这部老电影拍得很好，人物设计得也很出彩。情节如果看未删节版本，也会感到非常的热血。</p>
<p>主角是定安，故事主线是定安长大后为父报仇的事，高潮也是主角为父报仇。</p>
<p>影中写的爱情是这样的：</p>
<ul>
<li>（1）有师父的女儿小灵对定安、铁头的虚荣之爱，她喜欢看她喜欢的男人为她争风吃醋，为她拼命斗个你死我活，结果却孤独终老，她的结局处理得很好。</li>
<li>（2）有黑头姑娘对定安的相爱相骂之恋，当定安意外发现刀谱，决定练功准备反抗时，黑头骂他白痴、没用、徒劳，是她救了掉落悬崖的定安，她是受定安的，因为爱，担心他的安然，所以才骂。</li>
<li>（3）有定安、铁头对风尘女的欲望之爱。但两人对这份欲望的处理不同，铁头因为欲望争风吃醋，让自己和风尘女陷入危机当中；定安救了风尘女，然后把她交给铁头，然后和黑头姑娘走了。最后，当定安成功杀了飞哥报仇雪恨后，他也带着黑头姑娘走了，她并没有留下来和小灵相好，小灵对于他已经成为了过去式。</li>
</ul>
<p>这部电影对人物角色的处理，也很有特点，例如：</p>
<ul>
<li>配角铁头性格是侠义，但鲁莽，两次都是因为他的鲁莽推动了剧情前进。</li>
<li>而主角定安是真侠义，善良，隐忍，能成事。</li>
</ul>
<p>总之这是一部非常值得一观的电影，不过建议看未删节版本，那个更精彩，更有热血感，更能体会什么叫情绪有点上头、顶起来的感觉。</p>
<p>当情绪渲染到那里的时候，读者在心里喊：主角，赶快逆袭，干掉那些人渣。这时候你会发现主角的金手指再不可思议，在神佛逻辑下，也都是合理的了。情绪顶到不得不发的地方，主角已经退无可退了，观众也退无可退了，摆在主角面前的只剩下一条路：崛起、逆袭。</p>
<p>下面是《斷刀客 / 断刀客 1995》未删节版本的链接：</p>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=NvBdxpiTM8o">https://www.youtube.com/watch?v=NvBdxpiTM8o</a></p>
</blockquote>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[解决Gibhub git push超时、无法提交的问题]]></title>
            <link>https://yishulun.com/./src/posts/2022/30.html</link>
            <guid>https://yishulun.com/./src/posts/2022/30.html</guid>
            <pubDate>Thu, 22 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>解决Gibhub git push超时、无法提交的问题</h1>
<p>最近<code>git push</code>指令又不能工作了，马上测了一下IP，发现github.global.ssl.fastly.net这个域名，除了台湾宝岛那里，基本都不能访问。（注：测试地址<a href="https://ping.chinaz.com/github.global.ssl.fastly.net%EF%BC%89">https://ping.chinaz.com/github.global.ssl.fastly.net）</a></p>
<p><img src="./assets/image-20221222105336458.png" alt="image-20221222105336458"></p>
<p>这个测试仅是一家云商服务器的结果，可能换一家云商，结果就不一样了，数据仅供参考。</p>
<p>那么解决Github仓库不能送拉的问题呢？</p>
<p>使用这个网址工具（<a href="https://ping.chinaz.com/%EF%BC%89%E4%BE%9D%E6%AC%A1%E6%B5%8B%E8%AF%95%E4%B8%8B%E9%9D%A2%E4%B8%89%E4%B8%AA%E5%9F%9F%E5%90%8D%E7%9A%84%E5%8F%AF%E7%94%A8IP%EF%BC%9A">https://ping.chinaz.com/）依次测试下面三个域名的可用IP：</a></p>
<ul>
<li><a href="http://github.com">github.com</a></li>
<li><a href="http://github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></li>
<li><a href="http://assets-cdn.github.com">assets-cdn.github.com</a></li>
</ul>
<p>得用可用IP后，修改hosts文件（例如macOS的<code>/etc/hosts</code>），强制相关域名使用指定IP：</p>
<pre><code class="language-bash">39.102.194.95 github.com
151.101.1.194 github.global.ssl.fastly.net
185.199.108.153 assets-cdn.github.com
</code></pre>
<p>完成修改后，需要重启本机网络，指令重启方法因系统因异：</p>
<ul>
<li>macOS系统：<code>sudo ifconfig en0 down &amp;&amp; sudo ifconfig en0 up</code></li>
<li>Windows系统：<code>ipconfig /flushdns</code></li>
<li>Linux系统：<code>/etc/init.d/networking restart</code></li>
</ul>
<p>如果不使用指令，用鼠标点击Wifi或本地网络，手动关闭、重连也可以达到同样的效果。重启后，git指令基本就可以工作了。</p>
<p>但是问题到这里还没有结束。</p>
<h2>指令执行时都访问了哪些域名？</h2>
<p><code>git push</code>指令执行时，都在背后访问了哪些域名？我们怎么知道一个指令的成功执行，到底需要能够访问哪些域名地址呢？</p>
<p>这与具体指令要做的事情有关，在进行git操作时，github.com域名是必连的，github.global.ssl.fastly.net域名是为了处理ssl安全连接的，而assets-cdn.github.com域名是cdn加速域名，在github提交中暂时用不到。</p>
<p>除了分析指令本身的功能或源码之外，还可以在本地使用网络监测工具。例如netstat指令：</p>
<pre><code>$ netstat -a | grep &quot;github&quot;
tcp4       0      0  192.168.31.224.50744   github.com.ssh         SYN_SENT   
</code></pre>
<h2>有没有防墙提交工具？</h2>
<p>有没有一个自动防墙提交的工具呢？这个工具最好可以封装成一个指令，例如github_safe_push。github自有的CLI工具指令gh并不能担负这个职责。</p>
<p>在网络上搜索了一下，暂时没有找到具有这样功能的工具。从理念上讲，这样的工具应该是可以实现的，使用Python代码先查询可用域名，继而进行网络设置，最后调用原生的git push指令提交代码。</p>
<h2>使用国内CSDN的缓存服务</h2>
<p>2022-12-24更新：</p>
<p>CSDN为国内程序员提供了一项Github缓存、加速服务</p>
<blockquote>
<p>GitHub 缓存服务是 CSDN 为开发者提供的一项代码仓库加速服务。</p>
</blockquote>
<p>如果感兴趣，可以从这里了解：<a href="https://gitcode.net/gitcode/help-docs/-/wikis/docs/user/project/repo/repo-mirror">https://gitcode.net/gitcode/help-docs/-/wikis/docs/user/project/repo/repo-mirror</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[只有一个程序员开发和运营，BuiltWith网站年入1400万美元是怎么做到的？]]></title>
            <link>https://yishulun.com/./src/posts/2022/31.html</link>
            <guid>https://yishulun.com/./src/posts/2022/31.html</guid>
            <pubDate>Thu, 22 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>只有一个程序员开发和运营，BuiltWith网站年入1400万美元是怎么做到的？</h1>
<p><img src="./assets/builtwith.png" alt="Gary Brewer和他的BuiltWith公司"></p>
<p>国外有一位程序员叫 Gary Brewer，他一人撑起了一个公司，这个公司还年入 1400 万美元，约人民币 1 亿元。</p>
<p>对此，你是啥想法？先别着急说不可能，这事儿确实是真的：这名程序员名为 Gary Brewer，他创建的 BuiltWith 背后没有销售团队，没有服务团队，也没有工程师。</p>
<p>啥都没有，这公司做什么能年入 1400 万美元？这又是一家什么公司？它的商业模式是什么？</p>
<h2>逆向思维，建立企业技术信息数据库</h2>
<p>“BuiltWith” 顾名思义，是一个揭秘网站搭建技术的网站。</p>
<p>“如果能知道每个网站使用的确切技术岂不是很棒？”</p>
<p>最初 Gary Brewer 其实无心创业的，直至 2006 年他参加了一场在悉尼举行的创业会议，会后他收获了一个很重要的心得：</p>
<blockquote>
<p>每个人都可以创业。</p>
</blockquote>
<p>但他个人并不喜欢管理企业琐事和推销行为。在接下来的几个月里，Gary Brewer 除全职工作之外，业余时间还尝试开发了多个工具和产品，虽然最后都以失败告终，但他很享受创建每一个产品的过程和经验。</p>
<p>当 Gary Brewer 上网寻找下一个产品的定位时，他突然在浏览某网站源代码时灵光一闪：</p>
<blockquote>
<p>源码里有一段 Java 特有的代码，可以推断出该网站是用 Java 建立的……<br>
欸，如果能知道每个网站使用的确切技术岂不是很棒？</p>
</blockquote>
<p>对此十分感兴趣的 Gary Brewer，行动力也很强。他火速注册了 BuiltWith 这个域名，并开始搭建 Scraper 及其技术数据库，将某些代码段映射到对应技术上。例如，某些代码段可用于识别网站是否使用了 Adsense 与 Adzerk 或其他广告方法。</p>
<p>不久后，BuiltWith 正式发布，并立即涌进了大量流量。Gary Brewer 还为 BuiltWith 的发布联系了一家出版社 ReadWriteWeb 写了一篇独家稿件，并一举在当时主流社交分享网站 Digg 上获得了第一名。</p>
<h2>与AboutUs合作开始飞起</h2>
<p>不过，对 BuiltWith 来说最重要的转折点在于 Gary Brewer 和 AboutUs 创始人 Raymond King 的会面。AboutUs 是一个包含数百万企业信息的互联网域名目录。</p>
<p>在 Gary Brewer 向 Raymond King 展示了 BuiltWith 的功能后，Raymond King 便立即同意在 AboutUs 索引中的每条记录都添加一个 <a href="http://BuiltWith.com">BuiltWith.com</a> 链接，以提供每个网站所使用的确切技术作为参考。</p>
<p>结果可想而知，AboutUs 包含数百万个企业信息，其每条索引都能链接到 <a href="http://BuiltWith.com">BuiltWith.com</a>——BuiltWith 的流量呈爆炸式增长，SEO 排名也迅速上升。</p>
<p>说到这里，可能很多人都觉得，这 BuiltWith 不就只能分析网站背后使用的技术，它为什么能年入 1400 万美元？主要原因在于：企业可以从中获得竞争优势——能通过 BuiltWith 了解更多对手信息，挖掘更多客户，赚到更多的钱。</p>
<p>BuiltWith 有两个版本，免费版本和付费版本：</p>
<ul>
<li>免费版本：你可以通过 BuiltWith 了解你的竞争对手在使用什么技术。</li>
<li>付费版本：你可以用特定的关键词和技术找到每一个符合条件的网站，甚至可以按地点、消费和社会关注度对它们进行细分——这无疑是一个收集潜在客户的完美场所。</li>
</ul>
<p>举个例子：如果你有一个更好、更简单、更现代的 WordPress 版本，你就可以用 BuiltWith 搜索 WordPress，找到每一个使用 WordPress 的网站，向他们推荐你的产品，把他们转化为你的客户。</p>
<p>简单概括来说，因为 BuiltWith 几乎已经成为一个互联网背后的巨大技术数据库，很多企业把它等同于一个能产生潜在客户并快速跟踪构建功能的数据库，因此 BuiltWith 超过 50% 的流量都来自直接访问。</p>
<p>这个网站有很多付费用户。所以以下信息慢慢成了为事实：</p>
<ul>
<li>没有运营员工；</li>
<li>年营收 1400 万美元；</li>
<li>每月 200 万的页面浏览量，其中直接访问占 57% ，36% 来自搜索引擎，没有付费关键词广告；</li>
<li>BuiltWith 的运营，Gary Brewer一人足矣。</li>
</ul>
<p>由于 BuiltWith 功能的特点，实际上企业在进入 <a href="http://BuiltWith.com">BuiltWith.com</a> 前，是否要为其付费就已经是一件既定的事情了，无需多加推销：要么有目的性地成为高级付费用户，挖掘更多潜在客户；要么就坚决“白嫖”，只需知道竞争对手在用什么技术即可。</p>
<p>甚至因为 BuiltWith 的使用方法简单，Gary Brewer 都不需要向客户解释什么，简单制作一个 20 秒的视频教程作为参考就够了——换句话说，BuiltWith 的运营已经完全自动化，并不需要工程师等员工来推送功能或添加资源等。</p>
<p>事实上在 2010 年左右，当时 BuiltWith 除了 Gary Brewer 还有一个联合创始人 Andrew Rogers。但后来 Andrew Rogers 意识到 BuiltWith 根本不需要多余的跟踪或推销手段，便离开了 BuiltWith，只在公司继续担任顾问一职。因此整体而言，如今年收入 1400 万美元的 BuiltWith，完全由 Gary Brewer 一人运营。</p>
<p>对于 Gary Brewer 的成功，程序员们纷纷投来了羡慕的目光。</p>
<h2>启示</h2>
<p>BuiltWith的成功至少在以下方面给了我们启发：</p>
<ul>
<li>收费是因为向用户提供了用户更需要的使用价值。即使是免费版本的功能，BuiltWith也向用户提供了独特的使用价值，付费版本是免费版本的超集。</li>
<li>好的护城河都是靠时间累积而成的。BuiltWith网站的优势是靠时间的复利建立起来的，一个人一家公司分析一个网站用了什么技术这不难，但是查询海量公司哪些用了Java、哪些用了Go，却不是一下子就能找出来的。BuiltWith建立了这样的数据库，这是它靠时间累积的优势。</li>
<li>借势而为，要懂得与其它团队进行商业利益上的契合。BuiltWith拥有实在的使用价值固然重要，但与AboutUs合作，才让它真正飞起。</li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[使用面向过程和面向对象结合的思想开发软件]]></title>
            <link>https://yishulun.com/./src/posts/2022/1016.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1016.html</guid>
            <pubDate>Sun, 16 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>使用面向过程和面向对象结合的思想开发软件</h1>
<p>两者结合起来，开发更有保障。</p>
<p><strong>什么是面向过程开发？</strong></p>
<p>面向过程开发也称结构化开发，将软件要实现的功能分解成一个个连续的流程结点，将每个节点都实现为一个函数，依次调用这些函数以完成软件功能。至于执行流程中多个函数共用的数据，则拿出来定义为共享的数据结构，实例化，在函数中使用和传递。</p>
<p><strong>什么是面向对象开发？</strong></p>
<p>面向对象开发主要指模拟人类的思维方式，将软件需求中的事物关系，通过封装、继承、多态等手法抽象为一个个具体的对象（类），在对象中包含数据和操作数据的方法，以此方式实现软件需求。对象与对象之间的通讯，主要以发送信息的方式进行。</p>
<p><strong>面向过程开发有什么缺点，为什么会产生面向对象的开发思想？</strong></p>
<p>面向过程开发很适合处理不包含多层数据结构的流式信息处理、生产流程控制等扁平式产品需求，对于内部关系复杂的软件需求，这种开发方式将捉襟见肘。举个例子，像那种定制 CSS 样式的参数设置界面，使用面向过程的思想便不易设计。20 世纪 80 年代，在图形化桌面系统诞生以后，图形化桌面软件也开始蓬勃发展，你很难想象，对于像 Excel 这样的复杂软件，如果基于面向过程的方式该如何开发。这个时候，日益复杂的软件需求，在计算机性能不断提高的时候，却被软件的开发方式束缚了，这便是计算机世界的第二次软件危机。</p>
<p>《人月神话》一书中描述了这样一个有关软件危机的案例：</p>
<p>在IBM 公司开发 OS/360 系统的时候，投入成本达到了美国曼哈顿原子弹计划的 25%，耗资达数亿美元。系统约有 4000 多个模块，100 万条指令，使用人力超过 5000 人年。即使如此，项目还是延期交付了，并且交付以后系统中仍有大量缺陷。就可以太复杂了。</p>
<p>随着第二次软件危机的爆发，面向对象编程逐步取代了面向过程的结构化编程。以最符合人类思维的视角抽象问题，相比以最符合机器运行特征的算法与数据结构抽象问题，前者成为了软件设计准则的第一优先级，从此面向对象的开发思想开始占据主导地位，并风靡至今。</p>
<p><strong>将面向过程与面向对象结合起来的开发思想</strong></p>
<p>虽然面向对象是后来产生的，并且解决了面向过程开发复杂软件面临的困难，但是这不是说，面向对象就没有缺点，面向过程就没有优点。</p>
<p>先看面向对象的缺点。具象的事物很好抽象，虚拟的事物一般难以定义，这种困难多半来源于客观事物对象的边界模糊而造成的。在分析需求并划分对象时，还存在观察客观事物角度的不同而产生的差异，以及因对象划分粒度不同而产生的差异，这些差异不仅会给团队协作开发带来难度，在后续的软件维护中，也存在阅读与理解上的困难。</p>
<p>再看面向过程的优点。面向过程开发，由于是针对事务流程而设计的，天生不存在角度、抽象层次及划分粒度的烦恼。线性的思考和处理问题方式，至今为很多程序员所喜欢，特别是数学出身的程序员。有些程序员甚至用面向对象的语言，写面向过程的代码。</p>
<p>下面我们开始步入正题，阐述两种开发思想结合起来的开发方式：</p>
<ul>
<li>第一步，系统分析。用结构化思想进行系统分析，厘清软件需求中所有的事务流程，产出<strong>数据流图</strong>。</li>
<li>第二步，系统设计。仍然用结构化思想，依据数据流图，划分软件模块，产出<strong>系统结构图</strong>。在这个阶段，对于软件中可能存在的关键难点，可以拆出小需求来，用面向过程的方法迅速进行技术方案验证。如果预想的技术方案实现不了，则直接会影响系统机构图的产出。</li>
<li>第三步，面向对象软件架构与设计。在第二步的基础上，依照系统结构图，进行面向对象的软件设计，在这一步，才开始真正的面向对象开发，是开始编写代码的阶段了。</li>
<li>第四步，面向对象的编程实现。</li>
<li>第五步，测试部署与维护升级。</li>
</ul>
<p><strong>两者结合开发的一个小示例</strong></p>
<p>下面看一个小示例，软件需求是这样的：输入一串数字，使用 AES 或 RSA 算法加密，然后输出加密结果。</p>
<p>第一步系统分析，产出数据流图。</p>
<p><img src="./assets/image-20221016214506449.png" alt="image-20221016214506449"></p>
<p>第二步系统设计，产出系统结构图。在这一步里，确定了模块划分，其中输入、输出和选择加密方式这三个都是 UI 模块，RSA 和 AES 是算法模块。</p>
<p><img src="./assets/image-20221016214813037.png" alt="image-20221016214813037"></p>
<p>第三步是面向对象的架构与设计，这一步要落实在项目与具体的代码上了。第四步与第五步不再赘述。</p>
<p>通过这种结合的软件开发方式，可以最大化发挥面向对象和面向过程开发思想的优点。前两步都是结构化面向过程的分析与设计，如果系统足够复杂，对这些前期工作都可以将需求拆开来，分给不同的开发者去调研。只有到了第三步，所有东西都已经确定了，这个时候才可以制定和施行严格的项目开发计划。</p>
<p>还有，经过了第二步以后，第三步在进行架构设计时，也能产出更好的系统设计。而如果没有第二步，什么都不清楚呢，直接进入第三步，则可能有重新调整架构、返工、延时等项目风险出现。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[通过编写反派配角剧情推动主线剧情向前发展]]></title>
            <link>https://yishulun.com/./src/posts/2022/1015.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1015.html</guid>
            <pubDate>Sat, 15 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>通过编写反派配角剧情推动主线剧情向前发展</h1>
<p>这是关于故事前期设计的一点小感悟，将人物放在矛盾的关系链条上，让剧中角色相互间具有矛盾的人物标签，故事自然就容易向前推进。</p>
<p>在《相亲当天》中，初期，战奶奶希望海彤与战胤好一辈子。战胤坚持要防着海彤是只为圈钱的「心机女」，海彤对此则是独立自主随缘无所谓，这时候战胤与海彤两人是对立的，如果不是有战奶奶存在，两人的感情很难升温，故事也很难继续讲下去。</p>
<p>在《射雕英雄传》中，金庸也安排了很多对立的矛盾关系。郭靖与杨康性格对立，成长环境对立。东邪西毒对立，北丐南帝独立。金轮法王与中原武林对立。大宋与金国、蒙古对立。在大宋与蒙古对立的时候，作者还巧妙故意安排了郭靖是蒙古国的金刀驸马，这个角色属性的设定，给郭靖和黄蓉的感情线发展制造了很多精彩剧情。众多的对立关系，保证了故事演绎出很多有冲突的情节。什么时候剧情不好发展了，作者只需要让坏人出来作妖就可以了。</p>
<p>郭靖与黄蓉感情线的发展，在后期基本圆满的时候，先是让欧阳克出来向黄岛主提亲，后来又杀死江南七怪其中的几位，嫁祸于郭靖，这一招一下就让郭靖与黄蓉的感情陷入了危机。还有几次，两人感情甚好的时候，突然华筝就从大漠来中原了。华筝的出现，总是能给两人的感情带来小风波。金庸先生仿佛非常擅长通过写反派配角，推进主线剧情的发展。</p>
<p>有道友讲，这是金庸的下意识，他没想那么多，就是写着写着，还不想结束，当主线没有什么可以写的时候，就在再搞点支线情节搞一搞剧中主角。</p>
<p>可能是这样的，或许金庸在写作的时候，不像古龙写的是强悬疑，没有很刻意的前期设计在里面。但基本的前期故事梗概设计应该是有的，这个设计就是人物角色中的矛盾标签，以及地图的预期安排，例如《射雕》中的牛家村、蒙古大漠、大宋地图等。</p>
<p>是不是感觉剧中主角很可伶，像作者的提线木偶，作者想让他们干什么，他们就必须干什么。这可能也是写作的趣味所在。</p>
<p>下面聊一下写长篇网文与编程范式的关系。</p>
<p>在编程中，面向过程与面向对象的区别是，前者是在分析需求后，先定义好数据和一系列函数，依次线性地调用这些函数以完成需求；后者则是在分析后，先定义一系列对象，在对象中集成属性（数据）和方法，然后开始调用一个对象的方法，这个对象的方法又会自动调用另一个对象的方法，就这样一直调用下去，直到最后把需求完成。</p>
<p>写短篇小说就像使用面向过程的方法开发软件，而写长篇小说，尤其写长篇网文小说，就像以面向对象的编程范式在开发软件。在长篇写作中，先定义好一个个有矛盾关系的势力、团队和个体，然后找到一个切入点，开始启动，这个动作就相当于面向对象开发中对第一个对象方法的调用，整部作品一旦启动，故事便可能会一直发展下去，直到结束。这是一种理想情况，这种方法说起来简单，真要做起来尚不知有什么困难。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[由鸭子测试看Go语言的接口实现]]></title>
            <link>https://yishulun.com/./src/posts/2022/1014.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1014.html</guid>
            <pubDate>Fri, 14 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>由鸭子测试看Go语言的接口实现</h1>
<p>「If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.」</p>
<p>中文：「如果一只鸟它走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。」</p>
<p>这便是「鸭子测试」，它是一种判定思想。这句话据记载来源于美国的一个诗人，叫詹姆斯·惠特科姆·莱利，他曾说过或写过这样一句话：</p>
<p>「When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.」</p>
<p>中文：「当我看到一只鸟像鸭子一样走路，像鸭子一样游泳，像鸭子一样呱呱叫，我就叫它鸭子。」</p>
<p>无法确定莱利写这句诗的具体时间，不过绝不会晚于 1916 年，因为这一年莱利人去世了。在 1916 年，计算机都还没有诞生。关于「鸭子测试」的思想，最先并不是应用在计算机领域，而是政治领域。1946 年，也就是 ENIAC 计算机诞生的那一年，美国有个工会领导在一个公开集会中这样指责一个共产主义者：</p>
<p>「我无法证明你是共产主义者。但当我看见一只鸟叫得像鸭子，游得像鸭子，也走得像鸭子，长着羽毛也有脚蹼，还和鸭子在一起，那我当然会判断它是个鸭子。」</p>
<p>这句话很讽刺，且无理。</p>
<p>历史上也曾有记者用「鸭子测试」的逻辑，去指责另一个人的独裁行为：</p>
<p>「我无法证明你是一位独裁者。但当我看见一个人他说话像独裁者，行动像独裁者，还身处独裁者的机构和组织之中，和独裁者在一起，那我当然会认为他就是一名独裁者。」</p>
<p>「鸭子测试」的思想之所以在多个领域被人们乐于运用，在于它是一种归纳思想。它不严谨，但却能普遍被人们在有限范围内接受。后来计算机诞生以后，这个判定思想又被应用于编程之中，并派生出一种「鸭子类型（duck typing）」。所谓鸭子类型，顾名思义就是可以应用鸭子测试判定或与之有关的类型。</p>
<p>如果你还没有理解这种编程中的「鸭子类型」，我在这里尝试翻译一下：</p>
<p>假设类型 I 有 A、B、C 三个方法。如果对象 O 既实现了方法 A，也实现了方法 B，又实现了方法 C，那么我们便可以认为对象 O 就是 I 类型。</p>
<p>鸭子类型有时候在动态语言中，被用于实现多态。下面看一个多态的例子，它是Python语言的。</p>
<pre><code class="language-py">class ClassA:
    def print(self):
        print(“10 x in class a.”)

class ClassB:
    def print(self):
        print(“in class b.”)

def printIt(instance):
    instance.print()

def demo():
    instance = ClassA()
    printIt(instance)
    instance = ClassB()
    printIt(instance)
</code></pre>
<p>作为同一个变量 instance，当我们准备调用它的 print 方法的时候，它既可以是 ClassA，也可以是 ClassB。在实例方法 print 被调用的时候，两个类型完全可以有不同的表现。在这个类型中，我们可以认为 ClassA 和 ClassB 是一对鸭子类型。</p>
<p>动态语言的这种「鸭子类型」方便性，既是它的优点，也是它的缺点。它可以让程序员不必费力地像 Java 那样先定义接口然后再实现接口，可以直接调用，只要方法存在。缺点也很明显，如果代码有问题，例如调用了没有定义的方法，异常只有在运行时才会爆发出来。静态类型的编译型语言就没有这个缺陷，变量都有严格的类型，类型上有什么方法，没有什么方法，在编译的时候就能提前确定并暴露给开发者，这是静态语言的优点。</p>
<p>Go 语言作为高级编程语言的后起之秀，它兼具了静态语言和动态语言在类型设计上的优点，它既让开发者没有类型声明之累，又可以在编译阶段就确定类型错误。在这一点上，Go 语言是怎么做到了呢？</p>
<p>就是依靠「鸭子测试」的判定思想，下面看一个 Go 语言实现接口的例子。</p>
<pre><code class="language-go">type IGreeting interface {
	say()
}
type Duck struct {}
func (d Duck) say() {
	fmt.Println(&quot;Hi，LIYI。&quot;)
}
// 测试
func sayIt(speaker IGreeting) {
	speaker.say()
}
func main() {
	speaker := Duck{}
	sayIt(speaker)
}
</code></pre>
<p>解释一下这个代码示例：</p>
<ul>
<li>第 4 行 Duck 是一个结构体，Go 语言的结构体相当于 Java 的 class。</li>
<li>第 1 行的 IGreeting 是一个接口，从表面上看，没有任何类型与它有关系。其实不然，第 5 行，因为我们在 Duck 类型上实现了 say 方法——即接口 IGreeting 的唯一成员，所以 Duck 类型就被认为实现了接口 IGreeting。</li>
<li>第 9 行，函数 sayIt 需要一个 IGreeting 类型的参数，在第 14 行，我们可以把 speaker 传递给 sayIt，因为 Duck 类型已经实现了接口 IGreeting。</li>
</ul>
<p>Go 语言关于接口的实现，就是一种「鸭子测试」的判定，只要一个结构体实现了某个接口的所有方法，就认为该结构体实现了该接口。这种做法简直太方便了！</p>
<p>我 10 年前第一次在公司项目中使用这种语言，用了一次就爱不释手了，那时候我就想，不出十年，Go 语言就会被大多数程序员接受。果然，今天 Go 语言已经被称为互联网时代的 C 语言，在腾讯内部提交的代码中，据统计 Go 语言已经超过 C++ 成为第一热门语言。国内外有越来越多的程序员，还有公司，无论大厂小厂，都选择学习并在生产环境中应用了 Go 语言。</p>
<p>最后，留一个问题给你：玩具大黄鸭经过「鸭子测试」的判定，被当成了鸭子，但其实它不是鸭子，如果有一天有人要给它喂食，还要它下蛋，怎么办？在 Go 语言中，还以本文中的示例为例，假设未来某一天接口 IGreeting 因为需求扩展添加了一位新成员 walk，但是 Duck 没有实现 walk 啊，这时候编译软件肯定会报错啊。如果项目中像 Duck 一样的结构体少还好办，如果很多且分散于项目各处，这种情况应当怎么办呢？</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[JavaScript到底是不是面向对象语言？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1013.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1013.html</guid>
            <pubDate>Thu, 13 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>JavaScript到底是不是面向对象语言？</h1>
<p>当然是。</p>
<p>为了讲清楚这个问题，我们需要先看一看「什么是面向对象编程」和「什么是面向对象语言」。</p>
<p>什么是面向对象编程？使用面向对象语言进行的编程就是面向对象编程。</p>
<p>什么是面向对象语言？在面向对象编程中使用的编程语言就是编程语言。</p>
<p>好吧，是不是感觉我说了两句废话，确实，编程语言可以自举，但是概念不可以。在讨论面向对象语言的时候，一般要界定这门语言的三个面向对象特征：封装、继承和多态。凡具有这三个特征，就是面向对象语言；不具有，就不是。</p>
<p>也有人讲过，面向对象特征有四个：封装、抽象、继承和多态，比一般的说法多了一个抽象。其实抽象不能算是面向对象的基本特征，因为在面向过程编程中，也有抽象；本质上编程就是抽象，就是将现实世界中一个或几个层面的东西剥离出来，用编程语言表达出来及进行交互控制。</p>
<p>进一步考察面向对象语言的三个基本特征，我们可以从语言的具体功能上重新阐述它们，这实际上还有助于我们记忆，否则，这三个特征名字你未必记得牢固。</p>
<p>先看封装。什么是封装功能？就是把属性、方法封装在一个类（class）中。你想一想，在你接触的编程语言中，C#、C++、Java 等，它们是不是允许我们这么干？</p>
<p>再看继承。什么继承功能？先定义（封装）了一个类 A，接着又定义了一个类 B，让 B 继承于 A，这样 A 的属性和方法（公开的）B 也有了（继承了）。</p>
<p>最后看一下多态。什么是多态？这是使用时的一个特征，与接口或虚类有关。先声明一个接口 I，然后让类 A 实现它，让类 B 也实现它。一个类型为 I 的变量，当它是类 A 的实例时，它具有类 A 的特性和行为特征，当它是类 B 的实例时，它又开始具有类 B 的特性和行为特征，这就是多态，仿佛有多个状态。</p>
<p>所以说，封装、继承和多态，这三个特征它们分别对应于语言中类的定义、类的继承和接口的定义和使用——这三个方面的能力，都有具体的功能含义。反观抽象，它明确对应于语言中的那个能力呢？没有，所以抽象并不能算是面向对象语言的一个基本特征。</p>
<p>最后，回头来看问题，JavaScript 是不是面向对象语言？那就看它具不具备三个面向对象的基本特征吧。</p>
<p>首先封装，JS 有 class，还有美元符号（$）开头的私有属性，可以。然后是继承，ES6 有 extends，没问题。即使在 ES6 之前，也可以在一个对象上定义属性和方法，可以使用原型（prototype）实现对象之间的继承，对封装和继承的支持也没有问题。最后多态，也没有问题。虽然 JS 没有接口（它目前仅是保留了 interface 作为语言关键字），但是它的 Object 类型几乎是万能的，相当于是任何一个对象的接口，实现多态也完全不是问题。</p>
<p>使用 extends 关键字可以实现继承，使用原型也可以实现继承，它们只是实现方法不同，对应的面向对象的内在继承思想却是一致的。</p>
<p>最后，留给你两个思考题：</p>
<ul>
<li>Go 语言算是面向对象语言吗？</li>
<li>面向对象语言为什么会出现？</li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[目前国内前端哪个UI类库用的人最多？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1012.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1012.html</guid>
            <pubDate>Wed, 12 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>目前国内前端哪个UI类库用的人最多？</h1>
<p>如果基于 jQuery 开发多页面响应式 Web 应用，可以使用 <a href="https://v5.bootcss.com/">Bootstrap</a>。</p>
<p>如果基于 Vue3 开发单页面 Web 应用，可以使用 <a href="https://www.antdv.com/docs/vue/migration-v3-cn">Ant Design Vue 3</a>。在基于 uni-app 开发多端应用时，在 uni-app 中也可以引用 Ant Design Vue。</p>
<p>如果同时开发以上两种多页面应用和单页面应用，为了减少智力负担和学习成本，可以使用 Bootstrap 和 <a href="https://www.npmjs.com/package/bootstrap-vue-3">Bootstrap-vue-3</a>。</p>
<p>在开发管理后台 Web 应用的时候，另外一种选择是 Element Plus，但有开发者说这个开源类库现在维护力度变弱了，有一些坑，PR 提了半年无人响应，已经不建议使用。官方文档已经从独立域名切换到了 Github 免费域名，打开网站在页面导航切换的时候，时时发生 404 错误，这种问题都无人处理，种种迹象表明这个曾经被作为后台 Web 样式类库第一选择的项目，现在已经开始摆烂了。</p>
<p>其实，开发 Web 应用目前统一使用 Ant Design Vue 3 就可以了。无论开始是开发面向 C 端用户的 Web 应用，还是开发 B 端或运营团队使用后台管理 Web 应用，都可以选择 Ant Design。Ant Design 支持 CSS 样式定制，在编写后台应用或企业 Web 应用时，大不了把 UI 风格修改成蓝色系就 OK 了。</p>
<p><img src="./assets/zTFoszBtDODhXfLAazfSpYbSLSEeytoG.png" alt="img"></p>
<p>另外还有一个 Material 样式风格的开源类库 Vuetify，打开它的官方文档，每一页都有一个广告。我并不反对放置广告，但每一页都放，这种放的方式说明操作者很不用心，可能这个项目在开发者那里已经不重要了，也已经开始放养了。</p>
<p><strong>我们应该选择什么样的类库呢？</strong></p>
<p>1）选择那些在功能、性能上没有短板的类库，可以满足我们需求的类库。</p>
<p>2）我们要选择背后有大厂使用和支持的类库，这样的类库更有可能走得更远，发展得更完善。</p>
<p>开源项目不存在开发完善、已经大功告成一说。所有开源项目注定都要不断维护，不停和开发者一同进步。开源项目如逆水行舟，不进则退。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[程序员大牛是如何编写程序的？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1011.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1011.html</guid>
            <pubDate>Tue, 11 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>程序员大牛是如何编写程序的？</h1>
<p>好的程序员是怎么写代码的呢？点燃一根烟，一边吸一边进行周密的思考，待想法成熟了，一把操起键盘，一阵噼里啪啦敲击，一气呵成吗？</p>
<p>或者这样，使用具有步进调试功能的 IDE，例如 Visual Studio，一边编写代码，一边调试代码，一步一调试，直到完成所有需求？</p>
<p>你是哪种编写方式呢？那些计算机编程大牛们他们一般又是怎么写代码的呢？</p>
<p>肯·汤普森说：</p>
<blockquote>
<p>我只通过 printf 语句（或类似的 console.log）进行调试，几乎从不使用单元测试或调试功能。通过先设计数据结构开始项目，然后自下而上逐步开展工作，可能会写一些一次性的测试示例。（其实很多大神都是这种编程方式。）</p>
</blockquote>
<p>乔·阿姆斯特朗说：</p>
<blockquote>
<p>在设计软件时，我更喜欢在开始编写代码之前，尽可能严格地记录文档，尤其是对于那些涉及实时网络协议的<strong>困难项目</strong>。我首先使用原型来解决关键问题，而对于调试，则只使用打印语句（这一点和肯·汤普森一致）。</p>
</blockquote>
<p>杰米·扎温斯基说：</p>
<blockquote>
<p>我也更喜欢只使用打印语句调试代码（大神的工作方式惊人一致）。我的流程是自顶向下或自底向上写代码，让代码自然进化，在必要时重构。在开发过程中，我几乎从不使用单元测试，我觉得它会减慢开发速度，破坏我的开发节奏。</p>
</blockquote>
<p>这三位毫无疑问都是计算机世界的大牛。第一位是 C 语言的创建者，第二位是 Erlang 语言的创建者，第三位是 Mozilla 浏览器的创建者。有人说，他们开始编程的年代，还没有可以步进的调试器，还没有单元测试这些完备的开发理念，以致于他们没有养成现代「良好」的编程习惯。</p>
<p>对于这些话，我想说，TOO YOUNG TOO SIMPLE，肯·汤普森可是可以手撸 C 语言和 Unix 操作系统的人，他如果想写一个可以步进的调试器，或者设计一个完善的 TDD（测试驱动开发）工程思想方案，你觉得他做不到吗？肯·汤普森今天还在 Google 一线工作，与同事们一起创建了并维护着 Golang 语言，你觉得他没有接触过可以步进的现代调试器吗？还是他年纪大了学不会呢？</p>
<p>我觉得根本原因，在于扎温斯基说的那句话，使用步进调试功能和编写单元测试代码，会<strong>减慢开发速度，破坏开发节奏</strong>，这是根本原因。程序员写的程序是并发的、多线程的，但程序员写代码这件事却是单线程的，他们可不想被像 CPU 一样打断。</p>
<p>对程序员如何编程这个问题，一个有经验的程序员表示：</p>
<blockquote>
<p>在我看来，编程是一门艺术。一个好的程序员是一个艺术家，是一个思想家，是一个问题解决者，是一个创造者和一个有远见卓识的人，所有优良品质都结合在了程序员身上。他们以简单的方式思考可以长期解决问题的方案，他们愿意遵守规则；如果还没有规则，他们也可以创建规则然后遵守。优秀的程序员也会读很多书，并且总是在技术上不断更新自己。</p>
</blockquote>
<p>另一位有近 30 年编程经验的程序员<a href="https://www.quora.com/profile/Nikola-Mihaylov">尼古拉·米哈洛夫</a>表示，编写程序并不想人们想象的那样酷，<strong>一点也不帅</strong>。下面内容来自他的分享。</p>
<p>在高中期间，我在全国编程比赛中名列前三，并且是国际比赛的候选人。我自己和团队也曾在国民赛中排名第一。作为下班后的爱好，我制作了一个绘画应用程序，最终该程序拥有了约 1000 万用户，并且与类似应用程序相比，运行时出现的问题非常少。它在 Windows Phone 的印度照片应用程序中排名第一，在西班牙排名第二。</p>
<blockquote>
<p>这段经历说明他是一名出色的程序员，至少天赋很不错。</p>
</blockquote>
<p>我认为没有「最好的」程序员，因为每个人的表现都不一样，即使是在同一个任务上也是如此。</p>
<p>在我从事软件开发的前 10 年（共 28 年）中，我每天编写大约 13 小时的程序（很厉害，每天写 13 个小时的代码，并不是我们想象的老外每天只工作 8 小时，只写 2、3 个小时的代码）。我感觉这很有趣，我去完成任何软件方面的事情都没有感到压力，都是基于兴趣驱动的。我不断向朋友学习，从书籍中学习，做项目，尝试做新的事情，我很少感到无聊，总有新东西要学。我从 12 岁左右开始，就一直是这样的状态。</p>
<p>下面是我对编码的看法：</p>
<ul>
<li>
<p>如果代码量很小，例如是程序的一部分，可能是一个 RESTFul API，或者一种小算法，这时候可能要考虑使用的数据结构是什么，这种情况下应该是直接上手就写了，没有什么提前的推演和规划。</p>
</li>
<li>
<p>要尽可能多地考虑边缘情况，并针对它们一一处理和测试，确保处理所有可能发生的错误和已经发现的边缘情况。举一个简单的例子，假设需求是「反转一个字符串中的所有单词」，对于一些特殊的字符串，例如空字符串、空白字符串、一个单词的字符串、2 个单词的字符串、10000 亿个单词的字符串，我们应该如何处理呢？</p>
<p>还有，什么是空白字符串，这涉及到系统中对空白字符的定义，对于不同的空白字符或其组合，例如空格、制表符、不可打印的空格、换行符等，当遇到这些符号时我们又如何处理呢？</p>
<p>还有一些其他方面的特殊情况，例如单词之间，句首和句尾的多个空格如何处理？对于从右到左的语言和没有单词分隔符的语言，如果我们在没有分隔符的情况下，混合使用阿拉伯语+英语单词又会发生什么？等等，看似这是一个简单的小需求，背后却隐藏着很多需要考虑的边缘情况。它并不简单。</p>
</li>
<li>
<p>我主要在代码中思考，而不是编码前准备，尤其是前 10 年。后来我开始重视编写注释，会在注释中解释更多内容，以便后续阅读和维护方便。但在一开始，我只要代码可以工作，很少使用或不用注释。</p>
</li>
<li>
<p>几乎没有单元测试。我觉得它们就像道路上的侧护栏，侧护栏用于阻止可怕的汽车碰撞，任由车辆在护栏上刮擦。我认为生产中的大多数错误都在单元测试可以捕获的场景之外，所以觉得单元测试很鸡肋。（上面提到的边缘情况处理，是在代码中处理的，并非指在单元测试中覆盖。不同类型的项目，单元测试的作用和重要性是不一样的。还有，因人而异。）</p>
</li>
<li>
<p>比单元测试更好的方法是，<strong>对于任何代码更改，通过分析当前函数的所有消费代码，分析它们触发的所有副作用，以及所有可能影响到的边缘情况，然后测试所有代码</strong>。这能让我们对整个代码库有更好的理解，可以消除对单元测试的「温暖」的依赖。将整个项目装在心中，做到熟悉每一行代码，这样做的好处是：1）首先便于发现新的错误和需要改进的地方；2）确实有助于帮助我们提高代码质量。</p>
<p>事实上这件事并不困难，一旦有条不紊地进行全库的洞悉，这件事就会变得简单。我已经使用它取得了巨大成功，有一个项目，有数百万用户，作为一个高端嵌入式系统的软件解释器，和一个高科技研究公司桌面软件的一部分，在生产中运行服务 2 年，0 崩溃。另一个项目运行了大约 5 年，没有出现一个问题，直到服务器退役后我得到了一个 ping，发现它仍然被大约数百名未迁移到新系统的用户使用。</p>
<p>我知道有很多错误或异常，是不会或很难被单元测试捕获的，这些异常通常是集成的、未考虑的边缘情况或类似的东西。通过洞悉项目，在代码变动时测试一切，并记录一切，不必进行单元测试。我知道这个观点有争议，可能会激怒很多人，有人可能会说，团队其他人怎么办，如果你忘记了测试代码怎么办，等等。好吧，这时候就是团队测试纪律、团队文化、最佳实践和编码规范要发挥作用的时候了。</p>
<p>在研发中发现问题，而不是从现在起 6 个月后，那时候所有「单元测试」都已通过并且产品已投入生产运营，相比那个时候发现问题要好的多。并且，我发现，一旦完成多次全面检查，后面这件事也会容易很多。这看似浪费时间，其实在节省时间。</p>
</li>
<li>
<p>对于更复杂的算法，我会写一篇关于如何工作的页面注释。（这也是为了方便回忆和他人阅读。）</p>
</li>
<li>
<p>对于变量命名，总是使用富有表现力的描述词，例如 currIndex、row、col 等。即使 x、y 都比 i、j 要好。</p>
</li>
<li>
<p>对于函数命名，尽可能实现自我记录。名称应该准确地说明函数的作用，要尽量避免函数中产生副作用。如果函数是有条件地执行任务，是一个动作，则可以命名为 UpdateUserIfNeeded(...)，而不是 UpdateUser()，或者 GetInfoAndUpdateDb()而不是 GetInfo()。</p>
</li>
<li>
<p>对于强类型，考虑使用 User、SignedInUser、ModeratorUser 这样的类型。如果匿名用户尝试访问需要登录的资源，可能会导致编译时错误。（将用户分成不同的类型，胜于在一个 User 类型中处理所有用户身份。）</p>
</li>
<li>
<p>除了性能原因之外，尽量保持数据不可变。</p>
</li>
<li>
<p>我每天使用的提示检查模板是：1) 始终检查所有边缘情况；2）解析没有验证的数据；3）简化 if else 语言，如果可以就提前退出；d）快速崩溃，总是在需要开发人员立即修复代码的地方马上抛出异常，不要静默它们；这里要与用户错误区分开，用户错误总是要处理的，而开发错误总是选择抛出。</p>
</li>
</ul>
<p>另外，在遇到困难时请不要自暴自弃。我大约每 5-10 行代码就会产生 1 个错误，这很正常，有错误绝不是不足。我喜欢通过处理边缘情况来规避大部分错误，但我不知道我没有捕捉到全部。庆幸你发现的每个错误吧，这些错误可以避免成为生产问题。有时在代码审查中，有 40 多条评论也是很常见的，接受自己就好。</p>
<p><strong>小结</strong></p>
<p>这是一位大佬，他分享了自己接近 30 年的编程经验，很诚恳。对于调试和单元测试，大佬都不喜欢在编码中途停下来做这件事，他们更喜欢在一次性编写完成后集中做自动化测试。与其被自己的单元测试打断，在中国开放式的工作环境中，我想他们是不是更介意被没完没了且毫无意义的会议打断呢？</p>
<p>还有钉钉，你一直不回复，可以一直钉你，钉到会回复为止。我很想知道肯·汤普森如果在这样的环境中工作，他会是什么表情。</p>
<img src="./assets/image-20221011121717446.png" alt="image-20221011121717446" style="zoom:25%;" />
<p>参考链接</p>
<ul>
<li><a href="https://www.quora.com/How-do-the-best-programmers-write-programs-Do-they-reason-the-program-out-formally-on-paper-before-stepping-up-to-a-computer/answer/Nikola-Mihaylov">https://www.quora.com/How-do-the-best-programmers-write-programs-Do-they-reason-the-program-out-formally-on-paper-before-stepping-up-to-a-computer/answer/Nikola-Mihaylov</a></li>
<li><a href="https://www.quora.com/How-do-the-best-programmers-write-programs-Do-they-reason-the-program-out-formally-on-paper-before-stepping-up-to-a-computer/answer/Debasis-Ray-5">https://www.quora.com/How-do-the-best-programmers-write-programs-Do-they-reason-the-program-out-formally-on-paper-before-stepping-up-to-a-computer/answer/Debasis-Ray-5</a></li>
<li><a href="http://www.dodgycoder.net/2012/07/old-school-developers-achieving-lot.html">http://www.dodgycoder.net/2012/07/old-school-developers-achieving-lot.html</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[编写干净、清晰代码的9个小技巧]]></title>
            <link>https://yishulun.com/./src/posts/2022/1010.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1010.html</guid>
            <pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>编写干净、清晰代码的9个小技巧</h1>
<p><strong>问题</strong></p>
<p>如题，以下这些编程技巧，可以让代码编写的更清晰，使初学者看起来更像一位老手。让初学者代码看起来老练的技巧，并不是什么奇巧淫技，而是谁都能看得懂、学得会的，很平常的技巧。相反，在代码中为了展示水平而刻意显得与众不同，这是不自信的表现，也是初学者的主要特征之一，反而自爆了初学者的短板。对于初学者，学会这些小技巧足矣。</p>
<hr>
<p>软件开发不仅仅是编写代码，更是编写团队其他开发人员可以轻松理解的简洁代码。下面提到的 9 个技巧，它们将帮助你编写更清晰易读的代码。</p>
<blockquote>
<p>这些技巧并不分什么编程语言，基本适用于所有编程语言，尤其是与 C 语言风格一致的语言。</p>
</blockquote>
<p>（1）使用描述性名称</p>
<p>干净的代码很容易别人理解。在编写代码时，我们在局部代码中使用 i、j、k 等短名称，但有时候我们更应该使用有意义的描述词，来声明变量、参数和函数名称等。</p>
<p>例如，不要这样写：</p>
<pre><code class="language-js">const n = 100;
const it = 200;
</code></pre>
<p>而要这样：</p>
<pre><code class="language-js">const number = 100;
const iterations = 200;
</code></pre>
<p>（2）使用适当的空格和缩进</p>
<p>我们程序员中的许多人认为，使用空格和缩进会影响编译器的速度，但这是不正确的，在编译型语言中它们的影响可以忽略不计，在解释型语言中的影响也不高于因代码不易读而带来的负面影响。</p>
<p>你应该在代码中使用空格和适当的缩进，因为这会使你的代码更容易阅读与理解。</p>
<blockquote>
<p><strong>像艺术家一样，像国画或篆刻一样，把代码安排得错落有致。</strong></p>
</blockquote>
<p>举个例子，不要这样做：</p>
<pre><code class="language-js">function start() {
var name = &quot;LIYI&quot;;
var code = 200;
}
</code></pre>
<p>而要这样：</p>
<pre><code class="language-js">function start() {
  var name = &quot;LIYI&quot;;
  var code = 200;
}
</code></pre>
<blockquote>
<p>除非你想故意写出自己不能被团队随意替换的代码，否则在任何时候，保持缩进和空格都是一条基础黄金准则。与其相关的还有空行，保持空行除了让代码行数增加，更主要的能让代码清晰。</p>
</blockquote>
<p>（3）尽量减少函数中的参数个数</p>
<p>因为我们在努力使我们的代码清晰，因此我们应该尽量编写更易于阅读的函数，我们应该通过减少形参的个数以使函数变小，特别当这个函数及它的同类函数有不定数目参数的时候。如果我们需要使用两个或三个以上的参数，那么我们可以声明一个参数对象来代替。</p>
<p>例如，不要这样做：</p>
<pre><code class="language-js">function register(name, email, password, phone, address, intresets){
  ...
}
</code></pre>
<p>可以这样做：</p>
<pre><code class="language-js">function register(options){
  ...
}
</code></pre>
<p>在 options 实参对象中，可以传递 name、email 等信息。</p>
<blockquote>
<p>过度简化参数会让函数的调用条件不明确，简化参数其实一把双刃剑。在开始编写代码的时候，初学者可以简单遵照这样一条标准：凡函数有三个以上的参数，并且这个函数也不是高频调用的函数，就可以将其参数对象化。</p>
<p>在小程序的平台 API 中，由于基本每个接口都有三个以上的参数，所以所有接口的参数，都是以一个 options 参数对象定义的。</p>
</blockquote>
<p>（4）每个函数仅负责执行一个任务</p>
<p>多个任务放在一起处理，这很棒，但在编写清晰的代码方面不是。在许多情况下，开发人员会创建一个有能力执行多个任务的函数，但我们一般需要避免这种情况，因为这通常会使其他人难以理解。通过为一项任务创建一个函数，我们可以更轻松地组织复杂的代码。</p>
<blockquote>
<p>某些任务，是需要分别用一个函数完成的；某类任务，是可以用一个函数完成的。代码就是要智能、批量处理问题的，如果不能这样做，还写代码干什么？有些初学者写代码，在解决某些问题时，用了很多 if else，如下所示，有时候嵌套还很深，这种情况完全可以智能处理一下，用一套代码处理一类问题就可以了，例如针对下面的代码利用 switch 语句等技巧改写。</p>
<pre><code class="language-java">public void onClick(View v) {
    int id = v.getId();
    if (id == R.id.button1) {
        startActivity(new Intent(this, StandardActivity.class));
    } else if (id == R.id.button2) {
        startActivity(new Intent(this, SingleTopActivity.class));
    } else if (id == R.id.button3) {
        startActivity(new Intent(this, SingleTaskActivity.class));
    } else if (id == R.id.button4) {
        startActivity(new Intent(this, SingleInstanceActivity.class));
    } else if (id == R.id.button4) {
        startActivity(new Intent(this, SingleInstanceActivity.class));
    } else if (id == R.id.button5) {
        startActivity(new Intent(this, SingleTopActivity.SingleTopActivity1.class));
    } else if (id == R.id.button6) {
        startActivity(new Intent(this, SingleTopActivity.SingleTopActivity2.class));
    } else if (id == R.id.button7) {
        startActivity(new Intent(this, SingleTopActivity.SingleTopActivity3.class));
    } else if (id == R.id.button8) {
        startActivity(new Intent(this, SingleTopActivity.SingleTopActivity4.class));
    } else if (id == R.id.button9) {
        startActivity(new Intent(this, SingleTopActivity.SingleTopActivity5.class));
    } else if (id == R.id.button10) {
        startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity1.class));
    } else if (id == R.id.button11) {
        startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity2.class));
    } else if (id == R.id.button12) {
        startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity3.class));
    } else if (id == R.id.button13) {
        startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity4.class));
    }
}
</code></pre>
<p>但有时候又不是这样，有时候我们为了让代码更直观，故意不使用 switch，而不厌其烦地使用大量 if else，这种情况一般发生在项目配置代码上。这类代码仅仅执行一次，它们本来就像配置文件，写得像配置文件也不足奇怪了。</p>
<p>不要迷信任何规则，包括这篇文章里提到的规则。所有规则都有不使用的场景，这篇描述的仅是针对初学者，在大多数编程场景下适用的技巧。</p>
</blockquote>
<p>（5）尽量减少函数体的大小</p>
<p>小型函数比大型函数，或包含大量代码的函数更容易理解。如果你正在处理大型项目，你可以使用类来封装函数，尤其是那些具有共同属性或同属一类的函数。</p>
<p>（6）尽量减少一行中的字符</p>
<p>因为我们正在编写易于阅读和理解的代码，因此我们需要减少每行代码行中的字符。这样我们的代码可以很容易适应屏幕，不需要水平滚动就可以查看代码。也不需要换行，因为在这种情况下阅读者需要左右晃动脑袋。</p>
<blockquote>
<p>每行多少字符没有硬性标准，一般的说法是每行不超过 70 个字符，但现在程序员的浏览器尺寸越来越大，一行在不换行的情况下，能够容纳的字符也越来越多，所以具体字符轻视自己或团队的情况而定。</p>
</blockquote>
<p>（7）提交代码时，总是描述提交的原因</p>
<p>你应该始终定义为什么要在 github 仓库中提交代码，就是每次提交代码时，都编写一下参数<code>-m</code>。这个习惯可以让我们了解几个月前代码中存在哪些错误，以及我们对代码做过哪些更改。你应该用 4 到 10 个词来定义描述信息，或者你也可以使用 1 个词轻松定义，总之要能够让自己很快想起修改的原因就好。</p>
<p>（8）避免代码重复</p>
<p>专注于创建可重复使用的代码。</p>
<p>大多数初学者不会这样做——初学者一般把精力放在了代码能用上，但至少 70% 的初学者代码应该是可以重用重构的。这可以减少我们代码的大小。简单的方法是，你可以将你的工作分解为小任务，并为每个小任务创建一个单独的函数。</p>
<blockquote>
<p>面向对象编程中有一个 DRY 原则，它是 Don't repeat yourself 的简写，意思是<strong>不要重复自己</strong>。重复编写已经编过的代码，有时候会让程序员感到羞赧，很多聪明的程序员不会因为违反 DRY 原则而编写愚蠢的代码，反而会因为避免这种愚蠢而陷入<strong>过度设计</strong>的泥沼，这种情况同样也值得警惕。</p>
<p>对于初学者而言，简单的规则是，只要发现有三处代码一样，甚至只是十分相似，就可以考虑将它们重构为一个函数。至于将这个函数放在哪里，放在需要它的最小范围里。能放在一个类里，就不要放在包（package）里；能放在一个包里，就不要放在一个模块（module）里，总之范围尽量缩小就是。</p>
</blockquote>
<p>（9）不要过度注释</p>
<p>通过以上的技巧，由于我们已经给了变量、参数、函数名以有意义的描述，因此代码中一般不需要注释。仅在使用某些第三方 API、应用程序、模块或处理外部调用请求时，才需要编写注释。要避免因编写注释，而使代码显得累赘冗余。</p>
<blockquote>
<p>程序员很容易从一个极端走向另一个极端，由从来不写注释变得为每行代码、每个函数都写注释，这没有必要。阅读注释也需要消耗精力，除非你想故意为某些代码留下「烟雾弹」，例如「此行代码千万别动，动它的人全都开除了」，否则不要为了写注释而写注释。</p>
</blockquote>
<p>通过编写其他人易于理解的简洁代码，你可以快速成为一名出色的程序员；通过阅读其他人编写的优秀代码，你可以迅速领会和掌握这些技巧。</p>
<p><strong>总结</strong></p>
<p>以上这些只是简单的初学者技巧，学会它们可以避免自己看起来很菜，甚至看起来像一个有经验的老手，就像一个人他的长相无论是否普通，但需要他把个人卫生打扫好，衣着干净整洁，给人的整体印象总不会太差。后续具体到每一门编程语言，都有专门的编程规范，可以再进一步具体地学习加强。</p>
<p>参考链接</p>
<ul>
<li><a href="https://programmersallaroundtheworld.quora.com/9-tips-for-writing-clean-code">https://programmersallaroundtheworld.quora.com/9-tips-for-writing-clean-code</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20573365">https://zhuanlan.zhihu.com/p/20573365</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[互联网下的微服务架构模式有哪些？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1009-2.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1009-2.html</guid>
            <pubDate>Sun, 09 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>互联网下的微服务架构模式有哪些？</h1>
<p>下面列举的肯定不是全部，仅是一些例子。</p>
<!-- more -->
<ul>
<li>
<p>API 网关模式。负载均衡、服务发现、数据过滤、权限验证等，都可以放在这里。这里就像城门，来自客户端的请求想进城，都必须通过这里。服务发现简单理解是，为客户端找到它需要并可以连接的服务器 IP 地址。这个模式像传统的代理模式。</p>
<p>在此模式下，<a href="https://github.com/apache/apisix">APISIX</a> 是 Apache 软件基金会下一个云原生 API 网关软件，也也是一款不可多得的国产开源软件，它兼具动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等流量管理功能。它主要采用 Lua 语言编写。</p>
</li>
<li>
<p>客户端 UI 组合模式。像桌面上的 Widget 一样，每一块都是独立的，可以独立请求和展示数据。优点是组合方便，缺点是资源请求可能多且浪费。像传统的外观模式。</p>
</li>
<li>
<p>服务与数据库一一对应模式。<strong>一个服务对应一个 Schema 是实现数据私有化的最佳选择</strong>，可以为每个子系统的开发团队单独配置一个数据库连接账号，这样便可以限制每个子系统的数据访问权限。优点是数据各自为政，架构清晰简单；缺点是设计多个微服务或团队的查询等操作变得复杂了。这个模式不像任何一个传统的设计模式，它像面向对象的基本特征之一：封装。</p>
</li>
<li>
<p>Saga 模式。这种模式是上一种架构模式的补充，Saga 是一种本地跨语言的事务链，它不仅有本地事务编配、编排，还有总事务失败后的补偿机制。像传统的责任链模式。</p>
<p>在此模式下，<a href="https://github.com/apache/servicecomb-pack">Apache ServiceComb Pack </a>提供了技术解决方案，它主要基于 Java 语言实现。</p>
</li>
<li>
<p>断路器模式。就是熔断模式，像股票一样，跌的太狠了，强制关停，避免事态进一步恶化。具体实现方式可能是这样的：在网关处记名监听来自客户端的网络请求，如果某个客户端屡屡请求失败，则强制断开和限制其连接，避免发生雪崩效应；在一定时间后，再允许这个客户端发起限量连接。</p>
</li>
<li>
<p>子域分解模式。按照业务将大系统拆分为小系统，由各个小分队分别折腾。像传统的组合模式。</p>
</li>
<li>
<p>绞杀榕模式。类似传统的装饰模式，像一个含羞草慢慢将旧系统包裹、吃掉、重构、关停。慢慢外界不知道这个系统，直到有一天在数据检测中发现无人使用了，将其关停。</p>
</li>
<li>
<p>反腐蚀层模式。这个模式厉害，它要确保<strong>旧的系统不需要做出改变，同时新系统也不需要在设计和技术方面做出妥协</strong>。**计算机世界的任何问题，都可以通过添加一个新的层来解决。**这个模式可能是这样实现的：添加一个新的层，用于新旧数据的转换——当然前提是，新旧数据在理论上可以相互转换。像传统的代理模式。</p>
</li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://www.infoq.cn/article/Pv1qlEa1GgU7m0sWBmdI">https://www.infoq.cn/article/Pv1qlEa1GgU7m0sWBmdI</a></li>
<li><a href="https://github.com/apache/servicecomb-pack">https://github.com/apache/servicecomb-pack</a></li>
<li><a href="https://github.com/apache/apisix">https://github.com/apache/apisix</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[弱的软件开发人员都跑到哪里工作了？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1009-3.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1009-3.html</guid>
            <pubDate>Sun, 09 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>弱的软件开发人员都跑到哪里工作了？</h1>
<p>信不信由你，他们可能成为了你的上司。</p>
<p>首先声明一下，以下内容主要翻译自<a href="https://www.quora.com/profile/Tomislav-Turalija">托米斯拉夫·图拉利亚</a>，主要是他的观点。我作为一名弱的软件开发人员，可没有资格成为一群强的软件开发人员的上司，更没有压榨他们。</p>
<p>下面是图拉利亚的话。</p>
<p>我在 IT 领域工作了大约 10 年，主要在 20 至 100 人的中小型公司工作。在这类公司中，最薄弱的环节却进步得更快，这是一个悖论，但它却是真实的。下面是一些记录自真实世界的例子。</p>
<p><strong>示例 1</strong></p>
<p>当优秀的开发人员在老旧项目上勤恳工作并不断解决 Bug 时，一个糟糕的开发人员会为自己的管理辩护，因为整个项目是以「错误的方式」完成和维护的。糟糕的开发人员因此会被提升为团队负责人，并肩负起了「以正确的方式」做事的使命。</p>
<blockquote>
<p>这大概就是好人长在嘴上，会干不如会说。这是一句鸡汤。</p>
</blockquote>
<p><strong>示例 2</strong></p>
<p>公司有一个开发人员团队，正在开发一个非常大的项目，他们急需要一个项目经理，所以他们将最弱的开发人员提拔为项目经理。没有人想念他，因为这个人在编码上非常糟糕。因为接下来几个月的时间都不需要为引入新人而操心，所以这一举动被大家默认是合理的。</p>
<blockquote>
<p>项目经理和产品经理，不管怎么说，它们是门槛非常低的岗位，基本是个人都能做，做好做坏且不论。如果这个人再经常给大家买买零食，帮大家跑个腿，基本团队的所有成员都不再嫌弃他。中国人普遍对弱者都很善良，强者很多时候还以能维护弱者的生存为荣耀。但弱者有时候却以此为耻，并不会还有任何感激。</p>
</blockquote>
<p><strong>示例 3</strong></p>
<p>一家非常有前途的初创公司，开发人员数量往往短时间内会大幅增加，一般这种情况下，他们会提拔在公司工作时间最长的开发人员作为组织架构中的团队负责人。这些人的编码质量仅仅可以超越小学生的编程水平，但因为他们在公司工作时间最长，忠诚度最高，所以得到提拔。一般他们的工资也是最低的，他们接受这种工资，因为没有人愿意为他们的技能支付更多。</p>
<blockquote>
<p>愿意拿最少的工资，以彰显团队的稳定团结，对团队的文化建设、文件继承也算是有价值啦。</p>
</blockquote>
<p><strong>示例 4</strong></p>
<p>在创业公司，团队中有两种类型的人：满不在乎的人和想把事情做对、做好的人。在与无知的管理人员，和团队中的不良成员进行了几个月的斗争后，所有优秀的开发人员都会辞掉了工作。猜猜谁会被提拔起来管理新团队？</p>
<blockquote>
<p>劣币驱逐良币这个现象，全世界都存在。并不是像某些书或人讲的，中国人有劣根性，所以很难管，不是的，这些都是弱的管理人员在管理不好的时候，编织的一些借口。</p>
</blockquote>
<p><strong>示例 5</strong></p>
<p>一位非常糟糕的软件开发人员，因表现不佳而被解雇，他起诉公司并且还获胜了。他的理由是，在所有开发人员中，他每天编写的代码行数最多，所以他做的工作最多。他说的是事实，他的同事将他的 8000 行代码类重构为 230 行。后来公司给了他一年的工资，作为他答应辞职的条件。</p>
<blockquote>
<p>可笑的是，那些真正想把事情做对、做好的人，他们往往一怒之下就主动离开了团队，没有得到任何补偿。这一般是因为，他们相信自己很快就能找到新工作，并且也不屑于做一些他们认为卑鄙的事。而另外一些人则不是，他们因为害怕，而主动学习并实践到了许多非工作方面的生活技能。</p>
</blockquote>
<p><strong>示例 6</strong></p>
<p>一个糟糕的开发人员总是向管理层抱怨，其他开发人员强迫他参加代码审查。原因很简单，他是整个团队中唯一一个编写糟糕代码的人，他每次提交代码都会导致项目混乱。过了一段时间，他说服管理层，代码审查是浪费时间和金钱的，不进行代码审查将为公司节省很多成本，可笑管理层相信了他的鬼话。他先成为了团队负责人，继而又成为了部门负责人，因为所有优秀的开发人员都在他升职后的几个月内辞掉了工作。</p>
<blockquote>
<p>Code Review 是一项非常好的团队文化举措，它可以促进团队保持公平、公正和透明的规则，也可以促进成员之间相互主动学习。当然推进的时候肯定有阻力，这时候就是考验管理层水平和意志力的时候了。</p>
<p>天下的乌鸦都一样黑，美国的月亮也不比中国圆。在研发管理上，中外小团队面临的问题我相信都是类似的。</p>
</blockquote>
<p><strong>示例 7</strong></p>
<p>一家快速发展的 IT 初创公司肯定需要很多新人，所以他们雇佣了大量的软件从业人员。每个不是写程序这块料的开发人员，都被提升为项目经理或销售代表，极少的人转到营销、设计团队，只有很少的一部分人从事软件开发工作。</p>
<blockquote>
<p>任何时候软件开发的门槛都是存在的。</p>
</blockquote>
<p><strong>示例 8</strong></p>
<p>在许多情况下，团队领导和项目管理人员，将缺乏足够沟通能力的弱编程人员，转移到数据分析师、软件设计师、软件架构师等岗位或角色。</p>
<blockquote>
<p>架构师在国内其实一个受人追捧的角色，没有想到在国外，它是一个像产品经理一样夸夸其谈的角色。很多时候架构师确实只是在说，并不是在做，尤其是业务架构师。</p>
</blockquote>
<p><strong>示例 9</strong></p>
<p>在较大的公司中，开发人员总是来来去去。通常，优秀的开发人员会离开以获得更高薪水的工作，而弱的开发人员会留下来，因为他们找到了一份自认为不错的稳定工作，并获得了他们满意的薪水。几年后，弱的开发者成为了团队唯一的老员工，所以他们是最先得到晋升的。</p>
<p>我还有很多例子。没有必要把它们都写出来。基本就是，如果您是弱程序员，那么您仍然很有可能获得一份好的工作和高的薪水——通常比一个好的程序员还更好，还要高。如果你是一名优秀的程序员，你可能不会得到晋升，因为你是团队里干活的主力，如果公司提拔你，就没有人能把事情做好了。</p>
<p>你可能会觉得这很奇怪，但确实很少有公司像谷歌、Facebook、亚马逊等那样重视他们的开发人员。在大多数情况下，软件开发人员被认为是<strong>高薪的互联网民工</strong>，他们的薪水是研发团队最大的支出成本，管理层认为必须加强管理，以最大程度榨取他们的剩余价值，例如 996、007、末位淘汰机制等。很少有开明的老板愿意把好的开发人员，真正视为团队的财富而细心呵护。</p>
<p><strong>后记</strong></p>
<p>我看到这篇帖子还是有点小震惊的，以前总有人说，中国和国外不一样，中国是人情社会，不能照搬研发管理的那一套。其实在软件的研发管理中，中外遇到的问题是相似的，国外的月亮也没有那么圆，国内土生土长的程序员也没有那么不堪。</p>
<p>**最后，向所有一直在岗位上把事情做对、做好，以后仍然想做对、做好的程序员致敬，无论厂子大小！**也向自己致敬，我一直都是这样走过来的。（关于团队管理，客观讲我认为它是计算机世界客观存在的一种事物，必须按照软件研发管理的科学理论认真对待，并不是什么旁门左道。）</p>
<p>参考链接</p>
<ul>
<li><a href="https://www.quora.com/Where-do-weak-software-developers-work/answer/Tomislav-Turalija">https://www.quora.com/Where-do-weak-software-developers-work/answer/Tomislav-Turalija</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[Linux会因为开源而失败吗？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1009.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1009.html</guid>
            <pubDate>Sun, 09 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Linux会因为开源而失败吗？</h1>
<p>我不确定当你看到这张图时，是不是和我一样感到震惊？</p>
<p><img src="./assets/main-qimg-effa76a1eff52868e3b4459a1a5b5936.png" alt="img"></p>
<p>这行图大致描绘了三个主要 Linux 发行版 Debian、Fedora 和 Slackware 的分支演化情况，三个分支下，每个分支背后都隐藏着一个绝顶聪明的开发者或一个精英团队在维护。</p>
<p>这张图来自<a href="https://www.quora.com/profile/Tomislav-Turalija">托米斯拉夫·图拉利亚</a>，他认为 Linux 发行版之所以出现这种过度野蛮的生长——产生了一百多种不同的 Linux 发行版，完全是由于开发者的自负（BIG EGO）。</p>
<p>下面以 Debian 路线的分支演化举例，看一看这种来自开发者的自负是如何体现的，其他两个分支的情况与其类似。</p>
<p>确实 Debian 是一个不错的发行版，它稳定、健壮，但它缺乏新的、酷的东西。因此，一些开发人员开始捯饬轻量级的 Linux Knoppix——一个基于光盘或 USB 闪存启动的 GNU/Linux 系统，而另一些开发人员则开始开发更前沿的版本 ——Ubuntu。</p>
<p>Ubuntu 因为几乎可以在全世界范围内免费分发 CD，它因此受到了很多人的喜欢，Linux 系统也被更多人看到和使用。我 2006 年在北京从事编程工作的时候，同办公室的同事在网上免费就申请了一个 Ubuntu 系统，当他收到 CD 包裹的时候，他还高兴地拿给我们看。在印度，有很多地方网络基础设施不完善，只要当地的开发者提出申请，他们就能得到一张免费邮寄的系统安装盘。CD 大概有 700MB，基本支持所有的主流硬件，不需要到处找驱动就可以马上安装使用，想想这真让人激动。</p>
<p>但是很多人不喜欢 Ubuntu 的界面，不久，除了 Ubuntu，就诞生了 Kubuntu、Lubuntu 和 Xubuntu，它们相当于 Ubuntu 的大皮肤，或者说是三件时尚——想时尚的外套。</p>
<p>下面这些话基本来自图拉利亚的抱怨，他是一位非常有经验的开发者，他讲的话是可信的。</p>
<ul>
<li>一些人想要更好的软件支持，他们制作了 Ubuntu Studio；</li>
<li>一些人想要一个不同的界面，他们制作了 Mint；</li>
<li>一些人喜欢一切，但希望界面颜色更好，他们制作了 ZorinOS；</li>
<li>谷歌想要一个更简单的版本，他们制作了 ChromeOS；</li>
<li>一些人希望它更像 MacOS，他们制作了 Elementary OS；</li>
<li>一些人想要一个更安全的版本，他们制作了 ParrotOS；</li>
<li>一些人讨厌已有的这一切，他们制作了 Solus、Arch 等。</li>
</ul>
<p>等等，还有很多，数不胜数。</p>
<p>随着时间的推移，所有这些开发者都在分散、减少，而不是一起工作。他们必须一遍又一遍地解决相同的问题，而不是为了一个共同的目标而共同努力，所以就有了开头那张「荒谬」的图表。想象一下，如果聪明的开发者都在同一个 Linux 版本上工作，那会是一个什么样的结果？</p>
<p>下面说一下我的观点。</p>
<p>先说 Linux 是否失败。如果拿 Linux 桌面版与 Windows 系统的市场份额做比较，Linux确实是失败了。但是 Linux 本来就不是一个商业公司啊？如果拿 Linux 的作者林纳斯·托瓦兹（Linus Torvalds）与微软的创始人比尔·盖茨（Bill Gates）作为一名程序员对比，显然林纳斯·托瓦兹又非常成功。百年之后——或者二百年之后，微软帝国大概可能不存在了，但 Linux 系统可能还在。Linux 发行版越是繁华多样，这种成功就越是耀眼；有如此多的分支，不是 Linux 的弱点，反而是它成功的标志。</p>
<p>再谈一下动机。让一百多个发行版的开发者为一个发行版而努力，这是公司的行为，试问，谁给他们发薪水？能写这些系统的家伙，他们单位小时的技术薪水应该都不低，谁有财力养活他们？如果把他们招揽在一起，在一起共同维护一个系统，这不就是微软吗？</p>
<p>像软件、谷歌这样的大厂实行的研发机制，像计划经济；而 Linux 发行版实行的，更像是开源世界里的市场经济。这两种模式它们肯定会相互学习，大厂学习开源模式的优点，甚至带头搞开源，这都不稀罕；有越来越多的开发者——像图拉利亚这样的开发者，也会看到发行版发展混乱、缺少规划的问题，但解决或改善这个问题可能还需要时间和智慧。</p>
<p>还有，有一点必须提一下，有一些发行版的背后是一个小团队在维护，他们之所以那样做，源于他们的客户的需要。虽然混乱，但星星点点都是经济价值。</p>
<p>当我第一次看到篇首的那张分支演化图时，我感到的不是震惊，不对，也可以理解为是一种震惊，惊于 Linux 发行版发展的繁荣与兴旺，而不是混乱与无序。</p>
<p>我不确定当你看到这张图时，是不是和我一样感到震惊？</p>
<p>参考链接</p>
<ul>
<li><a href="https://www.quora.com/Does-Linux-really-fail-because-it-is-open-source/answer/Tomislav-Turalija">https://www.quora.com/Does-Linux-really-fail-because-it-is-open-source/answer/Tomislav-Turalija</a></li>
<li><a href="https://zh.wikipedia.org/zh-tw/Knoppix">https://zh.wikipedia.org/zh-tw/Knoppix</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[什么样的故事才显得真实？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1006-2.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1006-2.html</guid>
            <pubDate>Thu, 06 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>什么样的故事才显得真实？</h1>
<p>故事都是假的，都是人为编出来的，但是有的故事就显得真实可信，这是为什么呢？下面这位编辑的话给了我启发，故事是否真实存在并不重要，关键在于是否充满曲折离奇的情节。一旦作者准备这么做了，还要注意避免下面编辑提到的四项。<br>
​<br>
下面是编辑的话：​</p>
<blockquote>
<p>我在回复中提到「故事的编造痕迹比较重」，作者会很认真地告诉我，这是生活中的一件真事，我当然相信他的话，我所说的编造痕迹也不是说这个故事是编出来的，而是说故事给你假的感觉。</p>
<p>故事是可以虚构的，而且好的故事都有很多成分是虚构的，但这种虚构是有生活基础的，我们常说文学艺术作品「源于生活，高于生活」就是这个意思。读者不会在意你这个故事本身是真的还是假的，只会在意情节的合理性，这个「理」指的就是「艺术真实」。</p>
<p>什么是「艺术真实」呢？一定要「出人意料」。所谓「出人意料」也是指一种情节逆转，我们常说的故事的尾巴要「翘一翘」，也就是「意料之外」的意思。情理之中与意料之外这两者必须结合起来，缺一不可。不能达到「意料之外」，故事显得平淡；不能做到「情理之中」，情节又显得生硬。</p>
<p>那么，为什么有的作者的故事情节已经写得千变万化非常曲折了，而编辑仍说情节不够好呢？我想或者有以下几个原因：</p>
<p>一，是情节的转折始终按照常理发展，虽然一直在变化，但大家都能想到，也就没有什么稀奇的了；</p>
<p>二，是情节的发展始终按照讲述者的意愿进行，给读者的感觉是不是人物之间矛盾冲突的自然发展导致了情节的发展，而是写故事的人想到哪里写到哪里，这样的情节曲折同样是没有吸引力的；</p>
<p>三，是缺少有特点的细节，缺少细节的情节永远是干瘪瘪的，一个故事若能有一两出有生活气息的、有特点的或者是有趣的细节，情节立刻就会饱满起来。</p>
<p>四，是情节没有围绕一个统一的线索发展，情节虽然曲折，但写得不集中，写到另外的事情上去了。</p>
</blockquote>
<p>这位编辑总结的四点：故事要曲折，情节不能随便让人猜到；情节发展要由人物间的矛盾自然推动；要有细节；是复仇还是寻宝围绕一条主线展开，我觉得做到这几点，基本上故事就显得真实了。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[学到的技术知识在使用的时候总会忘记，怎么办？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1006.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1006.html</guid>
            <pubDate>Thu, 06 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>学到的技术知识在使用的时候总会忘记，怎么办？</h1>
<p>今天看到一位国外前端程序员，他分享了一个这样的学习体验：</p>
<blockquote>
<p>当我开始学习 HTML 和 CSS 的时候，当我想使用刚刚学到的东西时，我总是忘记我学到的东西。我不知道怎么做才能将它们牢记于心？</p>
</blockquote>
<p>遗忘是正常现象，再熟悉的编程语言如果一年半年不写也会变得生疏。他给出的建议是，与其牢记，不如理解和实践。</p>
<p>在刚学习的时候，总是不能随心所欲去构建那些激动人心的 Web 程序，会感觉很沮丧；一步一步跟着教程去做，是可以依葫芦画瓢做出来的，但一旦遇到新问题，一放到实际项目中就傻眼了，这很正常。</p>
<p>这时候除了安慰自己，还可以动手记一些笔记，将理解和实践的东西一一记下来。不必在意自己有没有牢牢记住，持续坚持学习，相信有一天，大概在三四个月以后，便开始能马上理解学习的内容了，甚至还能预测课程中的内容。这时候有些东西已经发生了变化，这可能意味着自己已经跨过了某些障碍，一些零散的知识点也开始在脑海中结成网络。</p>
<p>这是一个从量变到质变的过程。从非程序员，到程序员，这绝对是一个质变，这样的质变绝不是一朝一夕可以完成的，初学者花费三四个月，甚至半年的时间是合理的。</p>
<p><strong>要注重理解和实践，而非死记硬背</strong>，还有，就是放平心态，给自己足够的蜕变的时间。这便是来自这位国外程序员的学习经验，我觉得它至少会对一部分人有效，分享给你。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[PBL网文小说与技术实战图书写作流程模板]]></title>
            <link>https://yishulun.com/./src/posts/2022/1005.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1005.html</guid>
            <pubDate>Wed, 05 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>PBL网文小说与技术实战图书写作流程模板</h1>
<p>PBL 网文小说：</p>
<ul>
<li>0，要有一个主题（例如成长环境对人性格的影响「射雕英雄传」，爱情「神雕侠侣」）</li>
<li>1，依据主题，确立一个故事大纲（例如「神雕侠侣」中的各种恋爱类型：养父养女恋、师徒恋、同门恋、姐妹恋、大叔小妹恋等）</li>
<li>2，根据大纲，调查与收集多个故事示例</li>
<li>3，将多个故事示例整合到一起。情节不通的，想办法编撰情节串起来</li>
<li>4，反推，做减法，到第一节</li>
<li>5，从第一节开始撰写（在这里就可以连载了）</li>
<li>6，最后是修订润色，相当于再版修订</li>
</ul>
<p>同样的 PBL 实战课程是这样的：</p>
<ul>
<li>0，要有一个主题（例如小程序优化）</li>
<li>1，先确定一个知识点大纲</li>
<li>2，依据大纲，依次构建所有示例</li>
<li>3，将所有示例整合到一个项目中</li>
<li>4，将 PBL 项目反推剥离，到第一节</li>
<li>5，从第一节开始撰写（这个时候就可以连载了）</li>
<li>6，最后是润色修改</li>
</ul>
<p>这套模板目前仅在实战课程中有实际运用，在网文小说写作中还未曾应用，因相信该模板而在小说创作中遭遇扑街由私淑者自己负责。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[一个公司怎么保持自己良好的价值观？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1004-2.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1004-2.html</guid>
            <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>一个公司怎么保持自己良好的价值观？</h1>
<p>只靠招人时严格的筛选，显然是不够的，在日常管理中，还要主动维护价值观，做到奖惩分明。</p>
<p>举个例子，我们都知道公司业务要发展，就需要不断根据时势革新和进取，而有些人他们其实是保守派，他们在公司中的工作可能也是与业务增长无关的，例如运维、客服等这些属于支持型的只能部门，当你提出一个很好的想法，需要他们配合作出某些改变时，他们会义正言辞地给你提一堆反对意见，并且很多建议还能站在公司的角度自圆其说，让你无法反驳。</p>
<p>这些人进得公司来，可能只是想镀镀金，混两年拿一些股权走人，他们的职场哲学就是明哲保身，一般他们被称为职场老油条。这个时候，公司的文化部门就必须发挥作用了，当这种苗头出现的时候，必须惩罚和压制，支持进取派行动。但如果一个公司，有很多高管他们都是保守派的，他们看清了他们即使再努力工作几年后结果也是被优化掉，他们也会选择躺平，甚至连公司的文化部分都已经躺平了，这种情况基本就没得救了。</p>
<p>这是一种大公司病，像腐败一样，想变坏很快，想变好却很难。</p>
<p>职场遇到这种情况，是不是一定要马上离开？看情况，如果还有进取机会，就再暂且忍耐一下等待时机；如果看不到一点机会了，还是选择离开把。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[代码模板与武侠小说的情节套路]]></title>
            <link>https://yishulun.com/./src/posts/2022/1004.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1004.html</guid>
            <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>代码模板与武侠小说的情节套路</h1>
<p>代码模板是一种可以填空或在其基础上改写的代码范式，可以在一定程度上帮助程序员加快写代码的速度，减少重复枯燥的键盘操作。在小说中也有类似的情节套路与之对应。</p>
<!-- more -->
<p>金庸先生自称在写每一部小说时，都要力求有些变化，要故意写得不一样，但这并不是说金庸的小说没有重复。相反，金庸先生这样想反方向用力，恰恰说明是存在重复的，且这种重复很容易发生的。</p>
<p>下面列两个例子。在「神雕侠侣」中，郭襄将要过生日，突然有百草仙等陌生人向她送很多珍贵的贺礼，这些礼物让郭靖和黄蓉都感到吃惊，以他们二人都未必有这么大的面子；对比在「笑傲江湖」中，令狐冲受伤，随师门同行，不断有陌生人主动上前送很多珍贵的药材和礼物，连岳不群夫妇都觉得没有这样大的面子。在「射雕英雄传」中，黄蓉初识洪七公，想甩下七公，却不料每一次反而让七公跑到了她的前面；在「神雕侠侣」中，郭襄想甩下金轮法王逃走，每次都发现金轮法王早已经跑到了她的前面。相信类似的套路还有很多。</p>
<p>类似的武侠小说中这样的情节套路，是可以像代码模板那样复用的。代码模板在使用时，关键信息是有修改的，不是全部代码都一样；情节套路在复用时，也是与角色、当下故事情节契合的，也不是完全照搬，所以读者也不会感到明显的重复。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[为什么Google很强？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1003.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1003.html</guid>
            <pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>为什么Google很强？</h1>
<p>资本总是想榨干员工和机器的每一点剩余价值。如果那一天服务器有了意识，一定会揭竿起义。</p>
<!-- more -->
<p>服务器和人一样，基本白天干活晚上休息，有时候白天非高峰时期也是休息的。程序员为了榨干机器的每一点价值，发明了一种叫统一调度的东西，Google 在这方面走在了世界的前列，搞了一个 Borg。</p>
<p>Google Borg 是一套资源管理系统，可用于统一管理和调度资源，目的是充分利用服务器的计算资源。例如大数据计算中心和对外 Web 站点，前者计算密集，后者计算稀疏，两者就可以结合起来统一调度，最大程度不让机器闲置。</p>
<p>Google 服务器的统一调度利用率据说达到了 60%，是目前的天花板。大部分公司，特别是中小公司的服务器，包括你自己的云服务器，10% 的利用率都不到。但是你可能付了 10 倍的钱，如果你的服务器是包年包月的话，意味着 9 成的钱都白付了。</p>
<p>Fackbook 不搞统一调度，据说因为他们的网站是全球网站，全天 24 小时提供服务，不存在时差浪费。这个理由有点牵强，Google 更是全球网站，为什么 Google 要搞统一调度？很大可能 Fackbook，或者说 Meta 现在也在搞了，只是我们不知道。</p>
<p>Google 总结自己的核心竞争力，有两条：1，搜索排名比别人精准；2，机器利用率是别人的 1/10。这就好比东西比别人好用，成本还是别人的 1/10，Google 强大果然是有道理的。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[对中小团队研发管理的一点想法]]></title>
            <link>https://yishulun.com/./src/posts/2022/10032.html</link>
            <guid>https://yishulun.com/./src/posts/2022/10032.html</guid>
            <pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>对中小团队研发管理的一点想法</h1>
<p>看一下淘宝架构体系的演进路线：1.0 PHP，2.0 单体 Java，3.0 分布式 Java，4.0 异地多活。大淘宝一开始的架构也不是光鲜与靓丽的，所以对于初创团队，开始只有几条破枪，技术架构也是修修补补，这没有什么，这都是正常的。</p>
<!-- more -->
<p>先说运维方面。当业务增长到一定程度，服务器增长到一定程度，专业的运维团队必然出现，运维与研发的矛盾也必然会凸显出来。像阿里这样的企业，你很难想象它的运维团队竟然暴力解散过，然后以个体分散到了各个研发团队中。到后来，仿照 Google SRE，阿里又建立了自己的 SRE 团队，专门负责服务器的安全与稳定。而配置、部署和发布，这些工作全部交给了研发人员自己处理。</p>
<p>再看研发方面。研发团队大到一定程度一定会产生管理问题，例如子系统多了，边缘问题无人修复。淘宝比较幸运，他们员工民间搞了一个消防队，专门用于救急灭火。</p>
<p>一个公司能不能成长起来，跟很多因素有关。在成长过程中，会遇到很多矛盾，管理者能解决这些矛盾，组织就能成长，公司就能发展，反之就会深陷泥潭。为什么你的组织不能产生消防队？这可能与公司的文化有关，与管理者的价值观有关。管理者要反思，有没有任人唯亲，有没有两面三刀，头没有公私不分，有没有赏罚分明？</p>
<p>研发效能变差和组织协作变差，80% 都败于公正和透明。与其说管理者的职责是管理，不如说管理者的职责是维护公平、公正，是激发和保持团队向上的信心。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[为什么技术初创团队和大厂都选择开源？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1002.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1002.html</guid>
            <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>为什么技术初创团队和大厂都选择开源？</h1>
<p>开源不就是把辛辛苦苦写出来的代码免费分享给所有人吗？你会不会觉得这样做的人是傻子，为什么大厂和初创团队还争相恐后去做这件事情？2022年了，国内程序员如果看不懂这个想象，就不要盲目去创业。</p>
<!-- more -->
<p>先看大厂的动机。最开始大厂是不选择开源的，当团队走到前沿，触及某个前沿问题时，最先想到的是自研。甚至外界有不错的开源产品都会忽略掉，一定要自己开发，把控制权牢牢把握在自己手里。</p>
<p>同时大厂如果收购小公司，或融入开源社区，必须在自研产品中向开源产品做兼容，这个过程据经历过的人说，是很痛苦的。</p>
<p>开源软件一旦起飞，一定会形成一个非常健康的社群，发展会越来越快。不要以为大厂自研的产品发展一定会很快，比外面还快，其实不是的。大厂程序员本身也是一个一个的个体，是没有办法与众多大厂的程序员做抗衡的。何况当下国内大厂还是看国外的 Fackbook 与 Google，还没有到完全引领世界的地步。</p>
<p>所以，大厂自研产品的结果，就是被迫向开源产品兼容，甚至用开源产品替代。既然如此，何必当初要自研呢？</p>
<p>再看初创团队。小团队最怕的是，好不容易开发了一个有价值、用户能快速增长的产品，结果被大厂抄袭了。大厂有更广阔的用户市场基础，有雄厚的资金，有聪明的工程师，小团队怎么可能竞争得过。</p>
<p>所以，以往小团队的命运都很悲催，要么被大厂赶超，要么被大厂收购。收购其实还算是一种不错的结局啦。</p>
<p>那么小团队就没有发展起来的机会了吗？</p>
<p>也不是。小团队怕大厂，但是大厂怕开源啊！小团队在产品初具雏形时，完全可以把产品开源出来，挟社区以对抗大厂。</p>
<p><img src="./assets/image-20221002200644219.png" alt="开源社区、大厂与小团队"></p>
<p>2018 年 6 月 4 日，微软为什么花 75 亿美元收购 Github？微软看中的，正是 Github 上那些开源项目背后的程序员和开源社区。新人都以进大厂为荣，但大厂最忌惮的却是开源社区，而开源社区里面又是一个个活生生的人，踏踏实实写好一个开源项目，也是程序员实现自身价值的有效方式之一。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[写博客对个人找工作有什么帮助？]]></title>
            <link>https://yishulun.com/./src/posts/2022/1001.html</link>
            <guid>https://yishulun.com/./src/posts/2022/1001.html</guid>
            <pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>写博客对个人找工作有什么帮助？</h1>
<p>今天听阿里P10大佬毕玄讲找工作的经历，发现作为一名非计算机专业的生物系学生，写博客数次给他找工作带来了直接帮助。</p>
<p>在他想换工作时，被满江红站长推荐给淘宝。三面下来，面试官问他这个问题，不会，问那个也不会，让他做题，也没有做出来。但最终，他还是被录用了。为啥？</p>
<!-- more -->
<p>大概有两个原因：</p>
<p>（一）淘宝当时想做的分布式系统，淘宝人自己也不是很明白，还处于探索中。而毕玄通过撰写 OSGi，已经对——至少看起来已经对 OSGi 很了解，淘宝需要这样的人。</p>
<p>现在其实很有公司招程序员的时候，招的都是带有创新性的职位，面试官问什么可能只是他想问，与职位没有必然关系。作为面试者对于自己不了解的问题，也没有必要强答，自信一点，会就答，不会就说不会。认清自己的核心优势，放平心态，没有通过面试是这个职位与自己不匹配，坚持做自己就好。</p>
<p>（二）面试者毕玄还是很聪明的，他作为全省重点高中班的学生，智力的光芒不可能完全在面试官前藏得住。</p>
<p>所以现在 HR 筛选人，最简单粗暴的方法就是卡学历，利用传统的应试教育减少自己的劳动量。除了学历，还可以用智商测试卡，有的公司面试不是做算法题，而是做智商测试卡。这样做的目的，在于为团队找到聪明的人。</p>
<p><strong>现在写博客还有机会吗？</strong></p>
<p>现在仍然有很多人在写博客（或者公众号），效果因人而异。</p>
<p>写博客不能乱写，写别人写过的，甚至抄袭，这都是没有意义的。写博客重在发出自己独一无二的声音，<strong>在于打造自己独特的影响力</strong>。作为程序员写博客，要关注前沿技术，要写那些可以引领他人、甚至可以影响他人前进方向的内容。归纳一下，有两方面的内容值得写：</p>
<p>（一）翻译国外前沿的技术内容；</p>
<p>（二）针对社区中的前沿问题，给出自己的独特见解。</p>
<hr>
<p>什么是 OSGi？</p>
<p>是 Open Service Gateway Initiative 的简写，翻译为汉语是开放式服务网关倡议，是 Java 动态化模块化系统的一系列规范，目的是实现不同功能的 Java 模块在复杂系统中的复用。Eclipse 是插件化的，是完全建立在 OSGi 框架之上的。Eclipse 插件之间如何协作，是靠 OSGi 规范进行协作的。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[程序员的三个阶段与产品开发的两种哲学]]></title>
            <link>https://yishulun.com/./src/posts/2022/10012.html</link>
            <guid>https://yishulun.com/./src/posts/2022/10012.html</guid>
            <pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>程序员的三个阶段与产品开发的两种哲学</h1>
<blockquote>
<p>很多时候我们纠结，不知道如何选择，只是因为我们忘记了有当下处境这个变量。把处境考虑进去，所有问题都不会纠结。而如果没有处境，也没有产生纠结，这多半已经坏了，一定是我们看问题还不够全面。一个真正的问题，一定是充满矛盾，可以让我们说上一整天的话题。</p>
</blockquote>
<!-- more -->
<h2><strong>人生的三个境界</strong></h2>
<p>汪国真说人生有三个境界：</p>
<ul>
<li>第一境界，昨夜西风凋碧树，独上高楼，望尽天涯路；</li>
<li>第二境界，衣带渐宽终不悔，为伊消得人憔悴；</li>
<li>第三境界，众里寻他千百度，蓦然回首，那人却在灯火阑珊处。</li>
</ul>
<p>这应该是有能力上升到第三个境界的人，才能拥有的境界，对于大多数的人，第一个境界都不会觉醒，更不要说到达第二、第三境界了。</p>
<h2>程序员的三个阶段</h2>
<p>今天听毕玄分享在淘宝做 HSF（High-speed Service Framework，是在阿里广泛使用的一个分布式 RPC 服务框架）时的经历，他将程序员生涯划分为了三个阶段：</p>
<ul>
<li>掌握了技能，可以快速进行业务开发的第一阶段；</li>
<li>善于解决问题的第二阶段；</li>
<li>善于将问题规避于无形之中的第三阶段。</li>
</ul>
<p>其中第二个阶段提一下。据说淘宝内部系统在增长到 100 个以后，在出现线上问题时，已经没有人明确知道是谁的问题并能推动问题得到处理了，这是大公司发展到一定程度就会出现的研发管理问题。幸运的是，当时淘宝有一帮聪明人，在一个运维人员的倡议下，他们建了一个内部群，这个群只能开发人员进入，多事的管理者不能进入。这个群存在的意义在于，它可以绕过一些规定，而快速定位和解决线上问题，而随着能解决的问题越多，也有更多的问题被投放到这个群里，这个群自然而然也变得重要起来</p>
<p>毕玄大佬提到的程序员第二阶段，就是在这样的一个群里成长起来的程序员。想要快速定位和解决问题，除了要先绕过一些腐朽的规定（例如后端的库前端不能访问，生产环境不能随便登录等）以外，更重要的是，要有扎实的计算机基础知识，要有广泛的技术知识积累，还要有敏锐的观察力。</p>
<p>第二阶段或许可以通过故障演练习得，但人为的故障演练的真实性和强度总是差一点；或许也可以通过阅读其他公司的事故报告而增加实践经验，但很少有公司愿意全盘分享自己的濒死经历。</p>
<p>第三个阶段可以通过经历第二经历而成长起来，然后在失败中总结经验，把代码写得鲁棒性更好、性能更好；也可以通过阅读，直接学习牛人总结的最佳实践。</p>
<h2>扁鹊大哥医于未病</h2>
<p>现在看一下《鹖/hé/冠子》世贤第十六篇，魏文王问扁鹊，他兄弟三人谁的医术最高。扁鹊说，他大哥的医术最高，他自己的最差。魏文王诧异，扁鹊解释说：「长兄于病视神，未有形而除之，故名不出于家。中兄治病，其在毫毛，故名不出于闾（lǘ，古代行政单位，周朝 25 户为一闾）。若扁鹊者，血脉、投毒药、副肌肤间，而名出闻于诸侯。」</p>
<p>什么意思？大概是说，他大哥在病还没有爆发的时候，就已经消灭了；他二哥是发现病刚有点苗头，就把病治了；而他自己，总是在病爆发的时候才施手治好。</p>
<p>这可能是扁鹊自谦，不过没有关系，这个故事可以帮助我们理解程序员的三个阶段。如果将扁鹊三兄弟对应于程序员的三个等级，是这样的：</p>
<ul>
<li>扁鹊处于第二阶段，善于定位与解决 Bug；</li>
<li>扁鹊二哥处于第二、第三阶段之间，Bug 还没有机会爆出，就被他重构掉了；</li>
<li>扁鹊大哥是第三阶段，预防 Bug 于写代码之时，所以外面没有人知道他的厉害。</li>
</ul>
<p>我们将程序员划分为三个阶段，而并不是三个等级，因为人的技术水平是会不断进步的。开始的时候是第一阶段，过一段时间可能就是第二、第三阶段了。能进入第一阶段的人，在接触到足够多的生产案例以后，也能步入到第二阶段；到达第二阶段后，稍加总结经验，也能步入第三阶段。或者直接从第一阶段学习最佳实践，先记下来并应用上，有人东西不懂也没有关系，先照做，在实践中慢慢会发现，哦，原来这个地方这么做是这个用意。</p>
<p>对于扁鹊，我更相信，很多时候并不是他不能医于未病，而是很多人病了之后才找他医治。对应于中小公司的开发，不一定是他们不懂得优化，很多时候他们更愿意牺牲性能和鲁棒性，而攫取更多的开发效率，毕竟生存大于一切，时间大于一切。</p>
<h2>面向不同读者群体的内容定位</h2>
<p>当我们开发项目而进行技术选型时，我们应该选择脚本语言，还是应该选择编译型语言？我们应该使用跨平台的多段框架开发产品，还是应该分别在不同平台使用不同的原生技术开发产品？包括我们作者，在撰写相关的计算机图书时，我们应该如何界定一本书的读者群体呢？</p>
<p>这里涉及到两种开发哲学：</p>
<ul>
<li>一，尽快完成，用最快的效率先完成功能；</li>
<li>二，最大程度考虑到性能，将性能和稳定做到极致。</li>
</ul>
<p>对于中小公司，一般就是求快，先完成再说，所以他们倾向于选择脚本语言、选择跨平台的一站式开发框架。对于已经拥有高并发用户的大公司，他们倾向于选择编译型语言，将性能、鲁棒性、稳定性放在第一位考虑。</p>
<p>我们没有必要纠结要选择那种哲学，抛开团队所处的具体处境，而谈策略的选择是没有意义的，在艰难求生阶段，自然一切求快；而到了已经拥有大量用户和订单的阶段，自然求稳。</p>
<p>并且这两种生存哲学也不是矛盾的，团队开始起步的时候选择求快，后续发展起来了再选择求稳，都是正常选择。千万别自个跟自个别扭，在还没有达到温饱的时候就大搞优化；在应该求稳定的时候，又以敏捷开发和小步快跑要求自己，当开发进度和交付结果不如意的时候，又埋怨说：”多想回到刚开始创业的时候，那时候我们 3 小时就发布一个版本。“</p>
<p>呵呵，那个时候应该还可以更快，3 分钟就可以发布一个版本，因为根本没有用户嘛，什么问题都不会显现。联网软件，用户在 1000 个、1 万个、10 万个、100 万个、1000 万个的时候面临的问题是不一样的。所有的资源都是有限的，只有资源消耗大的时候，一些问题才会暴露出来。</p>
<p>当作者在写书时，也没有必要纠结应该选择定位哪一类读者。开发者都是会成长的，今天他们要求快，明天可能就求稳，如果明天他们还活着的话。</p>
<p>在任何时候，考虑任何问题，都应该把当下处境考虑进去，这是辩证法的基本原则。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[阿里P10带多少人？阿里p10是什么级别？]]></title>
            <link>https://yishulun.com/./src/posts/2022/10013.html</link>
            <guid>https://yishulun.com/./src/posts/2022/10013.html</guid>
            <pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>阿里P10带多少人？阿里p10是什么级别？</h1>
<h2>P10 带多少人？</h2>
<p>一般来说，在阿里 P 是技术系，M 是管理系。但 P 也是带人的，例如阿里 P10 毕玄在<a href="https://time.geekbang.org/column/article/576252">访谈</a>中透露，他在淘系曾带 600 人。我查了一下，其他等级例如 P9 大概带 50~100 人，P8 带 2~30 人。P7 是技术专家/架构师，应该是不带人的。</p>
<!-- more -->
<p>各个技术等级是这样的：</p>
<table>
<thead>
<tr>
<th>等级</th>
<th>职称</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>P5</td>
<td>高级工程师</td>
<td>校招起点</td>
</tr>
<tr>
<td>P6</td>
<td>资深工程师</td>
<td>社招起点，1~3 年工作经验，代码主力</td>
</tr>
<tr>
<td>P7</td>
<td>技术专家/架构师</td>
<td>5~7 年工作经验，代码主力</td>
</tr>
<tr>
<td>P8</td>
<td>高级技术专家</td>
<td>一线最高级别，带 2~30 人</td>
</tr>
<tr>
<td>P9</td>
<td>资深技术专家</td>
<td>有行业影响力，带 50~100 人，可以权衡架构方案利弊</td>
</tr>
<tr>
<td>P10</td>
<td>研究员/科学家</td>
<td>有行业影响力+有影响力的成果，带 100~1000 人</td>
</tr>
</tbody>
</table>
<p>行业影响力一般指有粉丝多的博客/公众号/视频号，出版过技术图书，在维护知名的开源项目等。在这个层次只是走到了技术前沿，但没有走过前沿。</p>
<p>有影响力的成果一般指出版的图书，或开源项目，或其他专利成果等，获得了一定的市场认可，已经走过了技术前沿，已经有创新了。到达 P10，相当于计算机领域没有学位的博士。</p>
<h2>在公司里做事的出发点</h2>
<p>出发点在职场中很重要。公司中总是充满各种矛盾，如果下属与上级之间一直没有分歧与争执，这多半是有问题的，这只是意味着矛盾被忽略或隐瞒了，没有被真正对待和解决。</p>
<p>下属与上级对话，一个很重要的原则是：出发点始终站在公司这边。你可以站在所在团队的立场，与上司谈要求，这种情况有时候能成有时候不能成；你也可以站在事业部或分公司，站在你的上司所在的单位谈，这种情况下也并不能保证 100% 成功；你还可以站在整个公司、整个集团的角度谈，从这个角度可能也不能如愿，但一般不会失败。</p>
<p>程序员个人做事，与在公司里做事的立场是完全不同的。个人开一个开源项目，出发点可以是藉由项目实践完善自己的技术体系，也可以是实现自己的一个技术设想，或者为社会上的一部分人带去实用价值。在公司里做事不是这样的，只有将出发点放在公司这边，才能一直顺风顺水；如果在公司里做事，仍然坚持个人做事的出发点，是早晚会出问题的，很多程序员因为太痴迷于技术，往往无意间忽略了这一点。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[为什么编程里习惯使用 i、j、k 等作为循环变量?]]></title>
            <link>https://yishulun.com/./src/posts/2022/0930.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0930.html</guid>
            <pubDate>Fri, 30 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>为什么编程里习惯使用 i、j、k 等作为循环变量?</h1>
<p>i 可能是 integer 的简写，或者是 int 的简写。有人说是 iterator 的简写，这个有点牵强。早期教材中的示例都是以 i、k、j 作为循环变量，后来这样使用成为了一种习惯。</p>
<!-- more -->
<p>但这种习惯是如何形成的呢？</p>
<p>在 1957 年诞生的 Fortran 编程语言中，有一个「I—N 规则」，规定以字母 I，J，K，L，M，N 六个字母开头的变量，如无另外说明均为整型变量，以其它字母开头的变量则为实型变量。实型变量在这里狭隘理解就是小数，包括指数形式的小数。</p>
<p>Fortran 更多是一种教学语言，后来诞生的 B 语言、C 语言都借鉴了 i、k、j 的命名规则，久而久之成为了习惯。</p>
<blockquote>
<p>关于 I-N 规则，可以查看这里：<a href="https://micro.ustc.edu.cn/Fortran/ZJDing/Sec1-4.htm">https://micro.ustc.edu.cn/Fortran/ZJDing/Sec1-4.htm</a></p>
</blockquote>
<p>Fortran 支持整型、字符型等类型。Fortran 诞生于 1957 年，比 C 语言早了 10 年，很难想象在远古编程语言中，竟然就有了对变量类型的支持。虽然对类型的支持并不是一开始就有的，但也基本发生在 Fortran 诞生之后的几年里。</p>
<p>JS、Python 这样的脚本语言没有变量类型，并不是它们低级，而是在它们的语言哲学里，没有类型更加简洁方便。</p>
<p>编程语言一向有两个发展方向，两种哲学：</p>
<ul>
<li>一，力求简洁，代码编写效率高，脚本语言基本都是这样，例如 Python、JS；</li>
<li>二，力求高性能、安全与稳定，后端编译型语言基本都是如此、例如 Java、C++。</li>
</ul>
<p>一般情况下，我们都会保持这种语言中哲学的纯粹，但有时候我发现我们开发者又很矛盾，例如 JS，它本来是弱类型的脚本语言，当我们在享受它简洁方便的语言特性时，又搞了一个 TypeScript 出来，希望它也像 Java 那样具有强类型的严谨。</p>
<p>就像一个姑娘，有时候希望她泼辣，有时候又希望她文静。</p>
<p>有一个语言，因为诞生的晚，吸收了众多现代语言的优点，既有强类型语言的优点，又有弱类型语言的优点，它就是 Go 语言。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[为什么程序员对 Python 有这么多仇恨？]]></title>
            <link>https://yishulun.com/./src/posts/2022/0926.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0926.html</guid>
            <pubDate>Mon, 26 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>为什么程序员对 Python 有这么多仇恨？</h1>
<p>并不是所有有经验的程序员都讨厌 Python，促使人们产生这种厌恶情绪的原因可能有三个：</p>
<p>1，Py 不能很好地进行 OO 编程。这是由于 Py 诞生太早而决定的，在 Py 诞生的时候，OO 编程思想还没有成熟，经典的设计模式图书 GoF 还没有出版。关于对 OO 编程的支持，Py 3 中已经有所改进，但因为又要向前做一些兼容，还不可避免地戴了「历史的脚镣」。</p>
<p>2，Py 被指是一种「石头汤」，像一个众人贡献的大杂烩，没有计划，没有规划，像是野蛮生长而成的。这是由它的生存哲学所决定的，Py 没有「我执」，开发者需要什么，它就添加什么；社区贡献什么优良的类库，它就吸纳什么。正是这种「海纳百川，不舍涓流」的精神，让 Py 存在了这么多年，为这么多人所使用。</p>
<p>3，Py 没有严格的静态类型。但这是它的缺点，同时也是它的优点。是灵活？还是严谨？对于脚本语言，取灵活就好了，否则还不失去了脚本语言的本色？至于严谨，是后端编译类语言应该考虑的事情。</p>
<p>结论：Py 是一门非常值得学习的脚本编程语言。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[二极管工作原理]]></title>
            <link>https://yishulun.com/./src/posts/2022/0913.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0913.html</guid>
            <pubDate>Tue, 13 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>二极管工作原理</h1>
<blockquote>
<p>数字信号纯粹是给我们人类阅读和理解用的，在计算机的物质世界里，就是不同的具象化形态。这和我们人类的「意识」很像，人到底有没有意识？人的意识就像计算机世界的数字信号一样，其实是不存在的。当医生把死人的大脑打开的时候，和我们把磁盘打开看到的东西是一样的，什么也没有。</p>
</blockquote>
<p>二极管的工作原理是什么？</p>
<p>还有这三个问题：</p>
<ul>
<li>机器指令（整数）是如何转换成高低电平，从而被硬件识别？</li>
<li>计算机最底层的机器语言是如何变成物理电平信号输给 CPU 的呢？</li>
<li>程序里 0 和 1 是怎么转化成高低电平的？（最初的受 0 和 1 控制的高低电平如何产生的）？</li>
</ul>
<p>这三个问题本质上是一个问题，并且，和二极管的工作原理是密不可分的。</p>
<!-- more -->
<h2>什么是半导体？</h2>
<p>首先看一个物理概念，什么是半导体？</p>
<p>能导电的，材料中有自由电子可以流动的，是导体，例如铜线、铝线；反之，不能导电的叫非导体，或者叫绝缘体，例如包裹在手机充电线外层的塑胶，没有这层塑胶，我们可能都无法给手机充电。</p>
<p>自然界的物质，除了导体、绝缘体，剩下的就是半导体。半导体源于材料的导电性质会发生变化，例如硅（Si）、锗（Ge）及砷化镓（GaAs）等，它们的原子会随着温度的升高，而出现易于移动的价电子，从而具有导电性。</p>
<p>半导体按物质是否纯粹还可以分为本征半导体和杂质半导体。高度提纯的硅（Si）便是本征半导体。硅具有稳定的 4 阶电子，在本征半导体中加入一些 3 阶电子物质（例如铟或铝），或 5 阶电子物质（例如磷），便变成了杂质半导体。</p>
<p>CPU 是计算机的核心部件，它的主要生产原料是高度提纯后的硅，这种原料在自然界并不存在，为了得到它，人类必须将海滩上的沙子一遍一遍煅烧，才能得到它。然而在得到高纯度的硅以后，还要想办法掺入一些杂质，使它变得又不纯粹了。提纯与掺杂，都是为了同一个目的：制造晶体管半导体电子元件。</p>
<p>晶体管包裹二极管、三极管、场效应管等多种类型，原理是类似的，可以从二极管上理解它们。那么一个二极管是怎么构成的？它的原理是什么呢？</p>
<h2>二极管的构成</h2>
<p>如下所示，一个经典的二极管从左到右由正极（导电金属）、P（Positive）型半导体材质区、PN 结、N（Negative）型半导体材质区和负极（导电金属）组成。</p>
<img src="./assets/image-20220913202855289.png" alt="image-20220913202855289" style="zoom: 50%;" />
<p>图 1</p>
<p>正极和负极都是导电金属。P 和 N 是两种杂质半导体。PN 结不是一种材质，或者说不是人为制造的材质，它是由 P、N 两种材质连在一起时，自然形成的。图示中 PN 结看起来很宽，事实上它非常窄。在二极管中同时使用 P、N 两种杂质半导体就是为了产生 PN 结。PN 结是电子计算机最原始的物质基础，没有 PN 结就没有电子计算机。</p>
<p>如下所示，这是现实世界中的二极管。后两个像灯泡一样，它们还可以发光，本质上它们还是二极管，只是在二极管有电流通过时可以亮起来而已。</p>
<img src="./assets/image-20220913203330556.png" alt="image-20220913203330556" style="zoom:50%;" />
<p>图 2</p>
<h2>二极管的工作原理是什么？</h2>
<p>下面看二极管的工作原理。</p>
<p>平衡是一种美，尤其在物理世界中，物体或材质总是尽力想办法保持平衡。例如电，电是怎么产生的？本质上是电子的移动对不对。那电子为什么要移动？还不是因为一边的物质缺少电子，另一边的物质自由电子太多，从而发生了自由电子的移动。可以自由移动的电子有时也称作载流子，两边物质载流子的浓度相差越大，电压就越大，电流就越大。这是一种简单的对电的理解，稍后对我们理解二极管有帮助。</p>
<p>下面我们看二极管。</p>
<img src="./assets/image-20220913205202322.png" alt="image-20220913205202322" style="zoom: 15%;" />
<p>图 3</p>
<p>P 型区的材质因为人为地注入了 3 阶电子的物质（例如铟），从而拥有更有可以容纳自由电子的空穴；而 N 型区的材质因为人为地注入了 5 阶电子的物质（例如磷），从而拥有更多自由电子。但是请注意，虽然 P 型区拥有空穴，及 N 型区拥有电子，他们本身都是电中性的，他们本身并没有使用羊毛毡或玻璃棒摩擦过，它们本身是不带电的。</p>
<p>当它们接触到一起的时候，在它们接触的截面，发生了一些电子移动。如下所示：</p>
<img src="./assets/image-20220913210031426.png" alt="image-20220913210031426" style="zoom:33%;" />
<p>图 4</p>
<p>右边是 N 型区，左边是 P 型区。在截面处，N 型区的电子会跑到 P 型区，从而让 P 型区截面处的物质带上负电荷，而截面处失去电子的 N 型区物质则会带上正电荷。根据电的一般定义，电场的方向总是从正电荷区域指向负电荷区域，所以在截面处，有一个从右向左的内电场。</p>
<img src="./assets/image-20220913210521056.png" alt="image-20220913210521056" style="zoom:25%;" />
<p>图 5</p>
<p>但是，N 型区的电子为什么没有一直、全部移向 P 型区呢？这可以从两个方面理解：</p>
<p>1）如果全部移过去了，那么内电场的电压将达到最大，根据物理世界万物都追求平衡的道理，这种没有地方释放的电压是不可能存在的。</p>
<p>2）继续看上面的图 4，P 型区的正载流子浓度（红色）从左向右是降低的，相反，N 型区的负载流子浓度（蓝色）从左向右是升高的，两条线在中间，也就是 PN 结的中间，达到了平衡，或者说相等。截面处载流子达到平衡了，电子也就没有移动的必要了。</p>
<p>在自然状态下，PN 结达到平衡的状态下，PN 结的宽度有多少，本质上取决于 P 型区和 N 型区它们注入的杂质的原子性质及浓度。有的地方写，二极管导通的临界电压是 0.7V，为什么是 0.7V？这与注入的杂质有关，这 0.7V 的电压要克服内电场做功。</p>
<h3>正向偏置和反向偏置</h3>
<p>正向偏置和反向偏置这两个概念很容易混淆，我们只需要记住二极管在正向偏置下是导电的就可以了。如下所示，这是正向偏置的示意图。</p>
<img src="./assets/image-20220913212544942.png" alt="image-20220913212544942" style="zoom:33%;" />
<p>图 6</p>
<p>整个电路在外电场的作用下，出现了顺时针方向的电流。电流方向与带负电的电子的运动方向是相反的，在二极管的管体内，电子在外部电场的作用下，会持续从 N 型区跑到 P 型区。此时二极管会有一些热量产生，这些热量是外电场克服内电场而做的功。</p>
<p>在正向偏置下，二极管中是有电流通过的，如果二极管是发光二极管，将有亮光出现。反之，在反向偏置下，如下所示，外电场方向在管体内，与内电场方向重合了，此时 PN 结变宽了，二极管处于非导通状态。</p>
<img src="./assets/image-20220913213507547.png" alt="image-20220913213507547" style="zoom:25%;" />
<p>图 7</p>
<h3>伏安特性曲线</h3>
<p>如果我们考察二极管中的电流大小，在正向偏置和反向偏置中的变化，可以得出一条伏安特性曲线，如下所示。</p>
<img src="./assets/image-20220913161058655.png" alt="image-20220913161058655" style="zoom:50%;" />
<p>图 8</p>
<p>在这条二维曲线中：</p>
<ul>
<li>蓝色表示正向偏置下，正向导通的状态；</li>
<li>红色部分表示即将被导通的状态；</li>
<li>绿色为反向偏置下，反向饱和电流的状态；</li>
<li>黄色表示 PN 结被击穿的状态，电流又变得负向无穷大了。</li>
</ul>
<h3>什么是二极管的击穿态？</h3>
<p>在反向偏置下，虽然内外电场的方向在管体内是相同的，但当外部电压大到一定程度后，大到中性粒子分离出价电子的程度了，这时候二极管变成了一根导线了，内部小电场丝毫起不到任何的阻滞作用了。</p>
<p>所以，无论是手机，还是电脑，都有一个适用的最大电压和最小电压。电压太小了带不动，太大了主板又可能被击穿，俗称「烧坏」了。超负荷做功产生大量的热，有时候甚至能闻到绝缘体烧糊的味道。</p>
<h2>电信号怎么转化为数字信号？</h2>
<p>二极管通电与不通电，其实是一个开关，是电信号。</p>
<p>有了二极管，就可以设计各种逻辑门电路了，例如与门电路：</p>
<img src="./assets/image-20220913215303022.png" alt="image-20220913215303022" style="zoom:33%;" />
<p>图 9</p>
<p>它由两个二极管组成，只有 A 与 B 同时都处于导通，也就是正向偏置的状态，L 端才有输出，否则没有输出。注意上方的 R 是一个电阻，电流是不会往这边跑的。</p>
<p>下面这个是或门电路：</p>
<img src="./assets/image-20220913215722311.png" alt="image-20220913215722311" style="zoom:33%;" />
<p>图 10</p>
<p>A 与 B 只要有一个输入，L 端就有输出。</p>
<p>还有其他的逻辑门电路，都可以基于二极管实现。基本的逻辑门电路又可以组成基本的计算模块，例如半加器、全加器等。除了加法器，还有乘法器、除法器、减法器，都可以基于逻辑门电路实现。</p>
<p>如下所示，这是一个两位加法器的示意图：</p>
<p><img src="./assets/two-bit-adder-using-full-adder.png" alt="两位加法器, 使用全加器"></p>
<p>图 11</p>
<p>注意输入和输出都在下方。当输入是 11（3）和 01（1）时，输出是 100（4）。输入相同，输出必定相同。</p>
<p>现在，我们思考终极问题：电信号是怎么转化为数字信号的？</p>
<p>其实压根就没有转化，所谓的数字信号（0110 这种）只是我们人类便于自己理解所发明的一种描述。二进制和这个世界上存在的英语、汉语一样，它们只是我们人类具象化的符号而已。</p>
<p>以我们敲击键盘为例，当我们敲击字母 A 时，产生的 ASCII 码是 65，它的二进制是 1000001，在计算机中就是 1 个高电平+5 个低电平+1 个高电平。这个数据（1000001）如果存在 CPU 的寄存器里，就是一些电子元件的基本状态；如果存在磁带或者磁盘里，就是一些磁信号，那里有什么数字信号？</p>
<p><strong>数字信号纯粹是给我们人类阅读和理解用的，在计算机的物质世界里，就是不同的具象化形态。这和我们人类的「意识」很像，人到底有没有意识？人的意识就像计算机世界的数字信号一样，其实是不存在的。当医生把死人的大脑打开的时候，和我们把磁盘打开看到的东西是一样的，什么也没有。</strong></p>
<h3>数字信号在计算机内是如何暂存的？</h3>
<p>前面我们谈到的都是计算用的电子元件，例如加法器、乘法器等。计算后的结果，在计算机内是如何保存的呢？例如在 CPU 的寄存器内，是如何保存的？</p>
<p>这涉及到触发器元件。以 D 触发器为例，它用于存储一位（0 或 1）数据，它可以做到，无论输入电平是高电平还是低电平，它的输出值保持不变，这是它的元件特性。而触发器也需要能够存储值，它存储的值也需要能够改变，这是怎么做到的呢？</p>
<img src="./assets/image-20220913224100423.png" alt="image-20220913224100423" style="zoom:33%;" />
<p>图 12</p>
<p>电平的状态不止有低、高两种。电平从低电平跃升到高电平，这叫上升沿；反之从高电平下降到低电平，这叫下降沿。上升沿和下降沿的时机也可以被电子元件捕捉。以 D 触发器为例，依据边缘触发时机的不同，可以分为 上升沿 D 触发器 和 下降沿 D 触发器。D 触发器可以在特定时机改变它存储的值。</p>
<h3>计算机内的高低电平是怎么产生的？</h3>
<p>是不是存在一个不停吹哨子的「人」？其实没有。计算机启动时，从指定的内存地址启动，启动以后就开始不停地执行二进制指令。系统及程序的指令，就是计算机的「心跳」，由于每台计算机执行一个基本指令所需的时间是固定的，看起来不停运行的计算机就像有节拍、有心跳一样，其实并没有。</p>
<h2>相关问题</h2>
<h3>二极管正负极如何判定？</h3>
<p>人类在生产的时候做了一些规定。</p>
<p>1）一般有色环的为负极，有白线的一端为负极。</p>
<p><img src="./assets/1-1P3200914212Z.png" alt="二极管正负极"></p>
<p>图 13</p>
<p>2）对于发光二极管，引脚长的为正极，短的为负极。</p>
<p><img src="./assets/1-1P32009144S10.png" alt="发光二极管正负极"></p>
<p>图 14</p>
<p>3）发光二极管管体内部金属极较小的是正极，大的片状的是负极。</p>
<p><img src="./assets/1-1P320091610515.png" alt="二极管正负极判断"></p>
<p>图 15</p>
<p>4）看图示，竖杠一端为阴极（负极），三角一端为阳极（正极）。三角是一个箭头，箭头指向的方向是电流的方向，在电的一般定义中，电流与正电荷的方向一致（虽然没有正电荷，移动的只有反方向的带负电的电子）。</p>
<img src="./assets/image-20220914071136424.png" alt="image-20220914071136424" style="zoom:50%;" />
<p>图 16</p>
<h3>什么是二极管思维？</h3>
<p>是一个讽刺比喻。思想偏激，非黑即白，不能辩证地、客观地看待问题。看待事物的观点比较单一，自带立场，只认为与自己立场的观点是正确的，其他的都是错误的。没有独立人格和独立思维意识。</p>
<h2>送一张畅学卡</h2>
<p>最后，说一个与二极管无关的小事。中秋节的时候，极客时间送了我一些畅学卡，相当于是一个临时会员，可以免费学习上面的付费课程。还剩几张，如果对你有用，你想体验，私信我发给你。先到先得，发完为止。</p>
<img src="./assets/image-20220914072459721.png" alt="image-20220914072459721" style="zoom: 50%;" />
<p>图 17</p>
<p>没有想到，到现在还没有送完。不知道是朋友们以为没有用，还是以为早已经送完了。好在截止 2023 年 9 月前有效，一时半会不会过期。</p>
<p>2022 年 9 月 13 日</p>
<p>参考链接</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=WbcUw9kXEw0">https://www.youtube.com/watch?v=WbcUw9kXEw0</a></li>
<li><a href="https://www.jianshu.com/p/8d5e901271a7">https://www.jianshu.com/p/8d5e901271a7</a></li>
<li><a href="https://zh.wikipedia.org/zh-sg/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7">https://zh.wikipedia.org/zh-sg/数字信号</a></li>
<li><a href="https://xiaogd.net/book/spcp/multi-bit-adder/two-bit-binary-adder.html">https://xiaogd.net/book/spcp/multi-bit-adder/two-bit-binary-adder.html</a></li>
<li><a href="http://www.highfel.com/jishu/396.html">http://www.highfel.com/jishu/396.html</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[节日填词一首：⽔调歌头・2022中秋数字化展望]]></title>
            <link>https://yishulun.com/./src/posts/2022/0910.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0910.html</guid>
            <pubDate>Sat, 10 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>节日填词一首：⽔调歌头・2022中秋数字化展望</h1>
<h2>⽔​调歌头・2022中秋数字化展望</h2>
<p><img src="./assets/640.jpeg" alt="月球灯"></p>
<p>时代有需要，数字必超前。未来钻石年代，何事会翻番？姣月朝朝高挂，墨客年年作雅，恒变是真言。</p>
<p>命运眷过甚？参照有前篇。慕高士，追大佬，站前沿。不应陷入，娱乐知识的狂欢。人有沉浮兜转，月有阴晴寒暖，有事往前看。但行教之道，桃李满天边。</p>
<!-- more -->
<h2>数字化时代随想​</h2>
<p>2021年，我国发布了「第14个五年计划和2035远景⽬标纲要」及「⼗四五数字经济发张规划」。</p>
<p>⽂件指出，国家在未来13年内，要⼤⼒发展数字化产业，⼤⼒推进全⾏业全⽅⾯数字化深度改⾰，将数字化夯实为⼀项起跑线能⼒。其中软件和信息技术服务⾏业，从2020年到2025年，5年之间要实现产业规模翻倍增长。</p>
<p>我们可以这样理解，未来科技⾏业，尤其是软件和信息技术服务⾏业，是未来13年内的黄⾦钻产业，它值得所有仁⼈志⼠为此前仆后继。</p>
<p>物竞天择，适者⽣存，在快速变化的时代洪流中，有⼀些⼈注定将被时代抛弃，同时另⼀些⼈将被时代眷顾。天上明⽉⾼挂，⼏千年来，年年有⼈看到它，对着它赋诗填词。变得是⼈，不变的是⽉亮，还有亘古不变的「变化」的道理。</p>
<p>谁会受到眷顾呢？回顾上⼀个世纪70、80年代，美国的盖茨、基尔代尔、乔布斯和肯·汤普森这些⼈的事迹，见上⼀篇⽂章：比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？</p>
<p>⽆论是做学者稿研究，还是经商在科技⼤潮中乘风破浪，他们都⾛在了时代前沿。今天如果你也想在科技浪潮中有⼀番作为，必须⾛在时代的科技前沿。</p>
<p><img src="./assets/640.png" alt="图片"></p>
<p>怎么才能⾛在时代前沿呢？</p>
<p>要关注前沿的⽜⼈他们在做什么，他们在说什么，他们在看什么。有⼀个组织，它是⼀个把各⾏各业⽜⼈聚集起来的组织，你不必到处找⽜⼈，也不必因为找到了以后⽜⼈不理你⽽苦恼，你只需要关注这个组织就可以了。</p>
<p>这个组织⼀直都在聚集⽜⼈，并积极组织⽜⼈发声。再也不要沉迷于娱乐视频、情绪泛滥的⾃媒体信息、⼼灵鸡汤和娱乐知识的狂欢之中了，这样的组织才是真正值得你花时间关注的，如果你还没有退休的话。</p>
<p>另外还有⼀个平台，它针对这⼀时代契机，发布了结构完备的数字⼈才粮仓模型，指出了时代的数字化需要。</p>
<p><img src="./assets/640-20220911075115707.png" alt="图片"></p>
<p>如果你想参与数字化时代变⾰，关注这个组织的账号，学习⽜⼈的视⾓，在这个平台上学习⽜⼈的经验，这样就可以了。</p>
<p>我作为⼀名普通的程序员，很早⼀直也是这么做的，后来我成为了这个组织中的⼀员，也有幸在这个平台上发布了⾃⼰的课程。</p>
<p>现在我作为⼀名计算机⽼师，已经开始为国家培养软件和信息技术服务⼈才⽽努⼒，我专注的路径是：通过BPL实战教学思想，在⼀个项⽬中传授⼀个整体的职业发展道路上所需的基本技能，快速培养数字化转型⼈才和新型⼈才。</p>
<p>最后说⼀下上⾯提到的组织和平台，她们是腾讯云TVP和极客时间。</p>
<p>当然国内优秀的软件和信息技术学习平台不⽌有极客时间，还有⽼牌的CSDN和发展势头猛劲的51CTO，她们也是⾮常优秀的程序员社区与平台。</p>
<ul>
<li><a href="https://csdn.net/">https://csdn.net/</a></li>
<li><a href="https://www.51cto.com/">https://www.51cto.com/</a></li>
</ul>
<p>下⾯，根据上⾯的随想，即兴填词⼀⾸，见开头。</p>
<p>最后说一下封面，这是腾讯云TVP组织<br>
寄送的中秋节&amp;教师节礼物。非常漂亮，有三个色可以变换。设计也非常简洁，触摸式开关，可充电，也可离电单独使用。</p>
<p>2022年9月10日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[基尔代尔是如何错失操作系统市场的？]]></title>
            <link>https://yishulun.com/./src/posts/2022/0909.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0909.html</guid>
            <pubDate>Fri, 09 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>基尔代尔是如何错失操作系统市场的？</h1>
<p>基尔代尔果然是一位学者企业家。他有企业家的敏锐嗅觉和欲望，但同时又保留了学者的锐意创新和儒雅。他一只脚踏在了商业领域，另一只脚踏在了学者领域，只有他这样的人，才能开发出符合市场需要的CP/M，肯·汤普逊和比尔·盖茨都不可以。</p>
<p>如果你是当年的基尔代尔，面对微软的商业竞争你会怎么做呢？</p>
<p>这个问题应该没有什么标椎答案。笔者阅读了一些相关资料，有人说基尔代尔博士是一位计算机发展史上完全被低估贡献的极客，还有人说钱是万能的，历史的小姑娘被人打扮了，比尔·盖茨在他的著作《未来之路》中刻意将卖给他QDOS（一个DR-DOS的变种）的蒂姆·帕特森捧了出来，淡化了基尔代尔在DOS系统发展史上的贡献。甚至称通过抄袭赚了7.5万美元的蒂姆·帕特森为「DOS之父」，天哪，哈哈，如果蒂姆·帕特森是DOS之父，那么基尔代尔博士在历史上又做了什么？</p>
<!-- more -->
<p>对此我有不同的看法。历史是一个小姑娘，谁都可以打扮，既可以往左打扮，也可以往右打扮；比尔·盖茨的书不可以全信，但借此批评比尔·盖茨的文章也未必值得全信。基尔代尔博士在DOS发展史上的贡献毋庸置疑，盖茨在《未来之路》中的叙述确实也有失大方，但我想说的是，这里面已经发生的事，有各自的缘由，这些对我们都不重要，重要的是我们从这段历史中能得到什么启示？</p>
<h2>三点启示</h2>
<p>读史使人明智，基尔代尔博士为什么没能创建一个微软？微软的商业模式在当时为什么可以如此成功？这里面至少有3点启示：</p>
<ul>
<li>一，一定要开放，Unix于1969年就被开发出来了，但它却没有比7年后，1976年诞生的MS-DOS的前身——CP/M获得更多的用户市场；</li>
<li>二，一定要重视生态，IBM的OS/2 Wrap系统不比微软的MS-DOS系统做的好吗？当然不是，只因为微软先发制人，占领了市场先机，致使后来者即使再优秀也不能取而代之；</li>
<li>三，一定要有一个好的商业模式。在微软还没有起飞之前，基尔代尔博士的DR（Digital Research，数字研究所）公司在微机市场占有最大的市场份额，这种情况下为什么微软还可以发展起来？微软的商业模式既保持了生态上的开放性，在开放的同时又最大化保护了自己的利益。微软的操作系统是与硬件绑定的，厂家每卖出一个电脑，微软就会自动卖出一个系统。</li>
</ul>
<h2>计算机系统的进化史</h2>
<p>为了了解微软为什么可以崛起，我们有必要先梳理一下计算机系统的发展史。</p>
<h3>开关编程</h3>
<p><img src="./assets/d3961aa12c60423ba5fc926167ae59da.jpeg" alt="第一台计算机ENIAC"></p>
<p>1946年，为给美国陆军的弹道研究实验室（BRL）计算火炮火力表，世界上第一台图灵完备的电子通用计算机ENIAC诞生了，开始它还没有操作系统。那个时候它就是一台北京三室一厅那么大的电子计算器，计算机小姐（Computer Lady，是真正的小姐，有知识有文化）需要在ENIAC上手动拨动开关，以进行编程，就像在计算器上按键一样。</p>
<p><img src="./assets/bVbp01T.png" alt="有很多控制开关的插线板"></p>
<p>靠手动拨动开关进行编程的效率肯定低了，也容易出错。</p>
<h3>第一台家用计算机阿塔尔8800</h3>
<p>1974年面世的阿塔尔（Altair）8800，如下所示，它由美国微型仪器和遥测系统（MITS，Micro Instrumentation and Telemetry Systems）公司，基于Intel 8080微处理器实现，它是第一款取得商业成功的家用计算机。当时还在哈佛读书的比尔·盖茨与其小伙伴保罗·艾伦一起为Altair 8800设计了Altair BASIC编辑器，这款编译器后来变成了Microsoft BASIC，成为了MS-DOS系统的基础，后来又变成了Microsoft QuickBASIC，最后成为了今天依然流行的Visual Basic。Microsoft在命名上也以Micro开头，可能收了MITS的影响。包括比尔·盖茨退学创建微软，也可能与这次成功的外包经历有关。注意这个时间，1974年，比基尔代尔博士发布CP/M，还有二年时间。</p>
<blockquote>
<p>注意：BASIC并不是比尔·盖茨设计的，最原始的BASIC语言是在1964年由约翰·克米尼和Thomas E. Kurtz设计的。</p>
</blockquote>
<p><img src="./assets/image-20220909094859582.png" alt="image-20220909094859582"></p>
<p>阿塔尔8800虽然是一课家用计算机，但要给他编程并不容易，要拨动面板上的开关，靠输入二进制操作码输入数据（一堆0和1），然后按「存储键」把临时值写入内存。注意，这时候计算机已经有了内存了。</p>
<p>待到把整个程序都写入内存后，推动开关，内存地址重设为0，按「运行」按钮，灯闪烁起来，阿塔尔就开始运行了。下一次如果要计算别的什么，重新再来一遍开关编程，阿塔尔与其说是一个电脑，不如说是一个大玩具。</p>
<h3>打孔机编程</h3>
<p>人们或许从早期可编程纺织机上获得了灵感，发明了打孔机，专门给纸卡打孔。开关只有两个状态，不是0就是1，上机前先在纸带上把要输入的0、1数据准备好，等计算机空闲了，拿纸卡往读卡器一插就可以了。用打孔机编程，不仅提高了计算机的利用效率，还减少了出错率。</p>
<p>IBM在1964年推出的IBM 029打孔机是当时打孔机的代表，如下所示：</p>
<p><img src="./assets/image-20220909115241230.png" alt="image-20220909115241230"></p>
<p>IBM 029是作为IBM System/360 大型电脑的配件而发售的，用IBM 029打出一种一种打孔卡，如下所示：</p>
<p><img src="./assets/v2-d9b371ac94c464645d1ad7a6f31457a9_1440w.jpg" alt="img"></p>
<p>将这种打孔卡插入IBM System/360，计算机就可以自动输入数据，已经不再需要波动开关了，计算机小姐们觉得太幸福了，此时离1946年ENIAC诞生已经过去了18年。</p>
<p>ENIAC作为第一台图灵完备的电子计算机，后来它其实也是有打孔机和读卡器的，如下所示，在房间位置的下方，放置的便是读卡器和打卡机，而上方及左右两侧都是计算模块，最多的是累加器。区别是什么？ENIAC是军用的，而IBM 026和IBM System/360是商用的。</p>
<img src="./assets/image-20220909115909656.png" alt="image-20220909115909656" style="zoom: 50%;" />
<h2>编程语言的进化史</h2>
<p>编程语言在计算机的发展中，起到了决定性的作用。如果不是编程语言作为工具可以持续创新，计算机不会发展的如此迅猛。</p>
<h3>助记符和汇编语言A-0（1952）</h3>
<p>打孔机编程有一个问题：不支持循环和跳转。如果某段机器码想要再执行一遍，计算机小姐们必须将纸带环过来，再输入一遍。</p>
<p>还有，在使用打孔机制作纸卡时，科学家们往往会事先把要输入的机器码内容写在纸上，这也很好理解，因为谁也不可能把成百上千张数据全部记在脑子里。而为了记述和理解方便，往往会在机器码旁边写上助记符。举个例子：</p>
<pre><code class="language-shell">0010 1110 # LOAD A
</code></pre>
<p>这段机器码0010是操作吗，1110是数据吗，整段表示将内存中的值复制到寄存器A。行尾的LOAD A就相当于是助记符。在打卡机编程时代，计算机小姐输入的是0010 1110这样的机器码，并不是LOAD A这样有自然语义的助记符。</p>
<p>这时候有一个聪明的第一代计算机小姐葛丽丝·霍普（Grace Hopper）博士，她想，既然有助记符，为什么还要写机器码呢？人类通过键盘（当时早已经有打字机键盘了，打字机的出现比计算机早）向计算机输入助记符，先存在内存里（当时图灵完备的计算机也已经有内存了），然后由计算机负责将助记符翻译为机器码，翻译以后再运行，这样不比直接写和输入机器码更高效吗？</p>
<p><img src="./assets/image-20220909124611282.png" alt="葛丽丝·霍普"></p>
<p>这是一个了不起的想法，葛丽丝·霍普据此实现了算术语言版本 0（Arithmetic language version 0），简称A-0，或称A语言。A语言已经是一个汇编语言了。A-0之后还出现过A-1、A-2、A-3等，或许由于理念太先进，或许因为配套设备不齐全，A语言并没有流行起来。这一年是1952年。</p>
<h3>FORTRAN（1957）</h3>
<p>几年以后，IBM 在 1957 年发布了公式翻译程式语言FORTRAN，它的名字是英文Formula Translation的简写，如下所示是一个Hello World示例。</p>
<pre><code>Program main
Implicit none
write(*,*) &quot;Hello World!&quot;
End program main
</code></pre>
<p>FORTRAN的开发者想，既然计算机可以翻译，并且要这样做，那么为什么不做的更彻底一些呢？于是FORTRAN的语法相比A语言，更易读、易懂，它是第一门面向过程的有函数和变量支持的编程语言，FORTRAN主宰了早期的计算机编程。</p>
<p>FORTRAN以后，计算机编程语言开始了长足发展。</p>
<h3>COBOL（1960）</h3>
<p>1959年5月，美国国防部委托葛丽丝·霍普博士制定COBOL语言标准。霍普为了A-0奔走演讲多年，在FORTRAN语言发布之后，终于得到了世人的重视。但霍普实际上并不是COBOL的编写这，当时有一个6人的编写小组，他们把自己关在一个酒店里，基于霍普已有的工作基础，两周时间完成了COBOL首版的开发。这大概是人类历史上有记载的最早的封闭式开发。</p>
<h3>BASIC（1964）</h3>
<p>1964年，达特茅斯学院的两位教授约翰·克米尼和Thomas E. Kurtz，推出了BASIC语言。这个语言没有FORTRAN和COBOL强大，它主要作为教学使用。1977年主动从哈佛退学的学生比尔·盖茨，自然是可能知道和学习过这门语言的。</p>
<h3>B语言（1969）</h3>
<p>大约1969，美国贝尔实验室的计算机科学家──肯·汤普森，如下所示，他想在Unix系统上开发一个Fortran编译器，后来因为在编写过程中引进了另一种编程风格，改着改着，就形成一们新语言——B语言。B语言在命名上是为了向A语言致敬，以表达谦逊之情；我们周围有些程序员不是这样，在别人某个东西的基础上搞了点东西，就命名为某+，或者某Pro、某Super，总是标榜高出别人许多。</p>
<p><img src="./assets/image-20220909135726068.png" alt="肯·汤普森"></p>
<p>Unix系统也是在这一年开始开发的。</p>
<h3>Unix系统与C语言（1969-1973）</h3>
<p>大概在1969年至1973年间，贝尔实验室的丹尼斯·里奇与肯·汤普逊，以B语言为基础，当时他们为了移植与开发UNIX操作系统，还有玩一款游戏，无意中设计和开发出了C语言。如下所示是一个C语言版本的Hello World程序示例：</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
int main(void) {
    printf(&quot;Hello, world!\n&quot;);
    return 0;
}
</code></pre>
<p>当时贝尔实验室有一台PDP-7计算机，如下所示。肯·汤普逊是一为当之无愧的计算机大佬，他在1966年写过一款名字叫Space Travel的游戏，估计是使用FORTRAN编写的。他先是为了在闲置的PDP-7上玩这款游戏，想写个高效的FORTRAN编译器，不小心发明了B语言。</p>
<p><img src="./assets/image-20220909132927113.png" alt="PDP-7，由迪吉多公司研发的一款迷你电脑，1965年上市"></p>
<p>后来新的编译器完成了，B语言也有了，仍然对游戏的流畅度不满意。于是，开始重写PDP-7的系统，即Unix系统，并在这个重写的过程当中，和他的同事丹尼斯·里奇一起，发明了C语言。</p>
<p>大神的创造力真不是盖的，没有游戏，写一个，没有趁手的编程语言，写一个，操作系统不高效，写一个。在大声眼里，语言和系统一样，都是工具，都是可以随手打造的。</p>
<p>Unix系统诞生的时间大概在1970年。</p>
<h2>操作系统的进化</h2>
<p>基尔代尔在现代磁盘操作系统的发展上确实功不可没，他通过DR公司在商业上赚了不少钱，这与他早期积极编写程序并尝试卖给Intel有关，他因次洞悉到了更多的前沿需求。</p>
<h3>基尔代尔创造PL/M编写CP/M（1973-1974）</h3>
<p>Unix系统诞生这么早，为什么没有发展起来呢？</p>
<p><img src="./assets/image-20220907202223449.png" alt="image-20220907202223449"></p>
<p>原因大概有两个：</p>
<ul>
<li>两位作者是实验室的研究员，对商业化运作不敢兴趣，只对写游戏、玩游戏感兴趣；</li>
<li>Unix系统是封闭的，不具有开放的生态，没有快速发展的土壤。</li>
</ul>
<p>1972年，基尔代尔博士（如下所示）偶然在华盛顿大学公告板上看到一则二手出售广告，有人以25美元的价格卖一台装备英特尔4004微处理器的微机。基尔代尔买下了它，相比300万美元的IBM 360计算机，这台微机实在太便宜了。</p>
<p><img src="./assets/013.png" alt="加里·基尔代尔"></p>
<p>与肯·汤普森不同，基尔代尔对赚钱感兴趣，他与几名程序员为4004编写了一个游戏程序，他们找到英特尔的老板罗伯特·诺伊斯推销这个程序。英特尔不感兴趣，诺伊斯深信微处理器的未来在其他方面，当基尔代尔问他在什么地方是，他认真地说：“可能在钟表方面。”</p>
<p>不过英特尔发现基尔代尔有出色的数学程序编程能力，于是邀请他到英特尔参观，并请他担任顾问。1973年，基尔代尔应邀参观了英特尔的微机部。基尔代尔与英特尔的人很投缘，他用每周一天的休息日在这里担任顾问。基尔代尔很喜欢这个新职务，也迷上了微处理器。</p>
<p>不久英特尔让基尔代尔试用新出炉的8008，只用了几个月，基尔代尔就创建了计算机历史上具有革命性意义的高级结构性汇编语言PL/M（Programming Language for Microcomputers的简写，中文微机程序设计语言，1972年创建），并用该语言在1974年编写了微型计算机操作系统CP/M（Control Program for Microcomputers的简写，中文微机控制程序）。注意这里的CP/M是程序，并不是系统，因为在当时的人眼里，系统是不存在的，所谓的CP/M就是一个大程序。</p>
<p>基尔代尔随后开始为8080微处理器开发PL/M的不同版本，8080芯片取代了8008，并成为微型计算机革命的真正开始，后来出现了耳熟能详的80386、80486等微处理产品。</p>
<h3>CP/M的意义在哪里？</h3>
<p>以往，计算机的硬件和软件是分开的，普通人即使购买了Intel 4004或8080的微处理器，也无法直接使用，微处理器必须装在一个计算机内，并且这个计算机内还要预装一个专用的计算机系统才能使用。而在当时1973年，像贝尔实验室的Unix系统、IBM的OS/360系统都是封闭的，普通人是拿不到的。基尔代尔的CP/M，就是Intel微处理器的一个软件系统，有了这个系统，任何人都可以基于Intel微处理器做定制开发。</p>
<p>这个时期出现了很多极客，他们喜欢自己动手DIY自己的电脑，同时期的微软联合创始人保罗·艾伦，还有苹果的联合创始人史蒂夫•沃兹尼亚克，都是这时期开始玩电脑的，包括比尔•盖茨也是。后来出现的Windows95、Windows98，其实是在DOS系统上开发的一个大程序。而DOS系统，是Disk Operating System的简写，它鼻祖就是基尔代尔的CP/M。也正因为如此，人们普遍认为基尔代尔是磁盘操作系统的鼻祖，是计算机图形用户界面（GUI，Graphical User Interface，图形用户接口）的先驱，他在计算机历史上的地位被严重低估了。而这种低估，与比尔•盖茨的小气是分不开的。</p>
<p>基尔代尔自己把CP/M叫做BIOS（基本内存输入输出系统），它适用于任何极客DIY电脑。BIOS作为通用部分，极客可以自己对它进行修改，以使他们的磁盘驱动可以与计算机相匹配（当时有不同的磁盘硬件）。这种设计，使得CP/M容易被人们所接受。</p>
<h2>DR的没落与微软的崛起</h2>
<p>基尔代尔后期困在了自己的思想里，未能与时俱进，不然创建微软商业帝国的人可能就是他。商业有商业的规则，在商言商，经商与做人、教书还是不同的。</p>
<h3>基尔代尔失败的占星机项目</h3>
<p>虽然CP/M很牛逼，但它的发展十分奇特。当时基尔代尔一边教书，一边和朋友基于CP/M做了一个占星机的项目。他俩对占星术既无兴趣也不相信，但他们都认为这个项目的销路会不错。朋友造机器，基尔代尔编程序，两人软硬结合，很像苹果和微软开始的联合创始人组合。</p>
<p>他们把这种占星术既机器放在旧金山市内许多地方的杂货铺，吃着25美分的硬币，印出算命天宫图，基尔代尔觉得这台机器美得很。可是顾客却大为不满，因为机器吃进去硬币，纸就堵成一团。基尔代尔不得不承认，占星术项目在商业上完全是一个失败。</p>
<h3>基尔代尔的数位研究公司（1976年）</h3>
<p>1976年，基尔代尔离开学校，与妻子多露西一起创办了一个数字研究所（Digital Research Inc.），只看这个名字，就知道老板是一位学者企业家。公司由妻子多露西负责经营，这个公司的商业模式很简单，就是卖基尔代尔编写的CP/M系统。</p>
<p>1976年多露西曾怀疑公司能赚到的钱会超过1.5万美元，而事实上它赚了60万~80万美元。在开始的五六年中，公司的收益每年都翻了一番，1981年销售额达到520万美元，三年后更是达到了4460万美元。CP/M成了70年代、80年代初最有影响力的操作系统，到20世纪80年代中期，它运行在300种计算机模型上，有3000种软件支持CP/M机，CP/M成了当时的事实标准。</p>
<p>DR公司连续运营了十几年，为基尔代尔夫妇带来了大量财富。1974年，基尔代尔帮助创建了硅谷最富盛名的“家酿俱乐部”（Home Brew Club），他还出过基本著作，可谓已经是人生赢家。</p>
<p>基尔代尔与他的妻子多露西只维持了20年的婚姻。1994年7月，年仅52岁的基尔代尔在加州蒙特利的寓所头部撞地，三日后不治身亡。一个多才多艺的飞行员、大学教师、软件编程大师、作家和计算机先驱，就这样走了，但今天很多人并不知道他的存在。</p>
<h3>来自IBM的机遇，微软开始崛起</h3>
<p>1980年，IBM准备开发IMB PC系统，因为IBM与微软的比尔·盖茨有过合作，首先找到了他。但盖茨和基尔代尔的数字研究公司有个不成文的协定，那就是比尔·盖茨不能涉足操作系统领域，同时数字研究公司也不进入比尔·盖茨的程序语言范围，于是比尔·盖茨慷慨地将IBM的代表介绍给了基尔代尔。当时比尔·盖茨认为，DOS操作系统并不是未来，程序设计语言与良好的杀手级应用软件才是未来。</p>
<p>IBM与基尔代尔约好在一个秀丽的加州太平洋林园见面。会谈的结果很不理想，有人说这位基尔代尔博士骄傲自大，所以当IBM带着一生难遇的大生意找他的时候，他竟然驾着他的双引擎小飞机兜风去了（当时他已经通过DR赚了很多钱），只留下他的太太多露西和IBM打交道。面对IBM一大堆不泄密的限制协议，多露西很不乐意，大部分时间都在讨价还价上，双方达成的唯一协议就是要数字研究公司不泄露IBM来访这件事。生意吹了。</p>
<p>随后盖茨自告奋勇揽下了这笔生意。但是编写一个操作系统并不太容易，而IBM要求几个月内就完成。这时候，盖茨的合伙人保罗·艾伦发挥了作用。他找到了一位极客蒂姆·帕特森，从他手里购买了QDOS（Quick and Dirty Operating System），付了大约7.5万美元。QDOS显然是蒂姆·帕特森在DR-DOS（基尔代尔公司的产品）的基础上修改过来的。微软将QDOS改名为MS-DOS，修改一下，倒手卖给了IBM，开始了微软的飞黄腾达之路。</p>
<p>1981年，IBM推出第一台带有PC-DOS。基尔代尔看到后怒了：“我对和CP/M的相似感到惊讶，它们太相像了，系统功能简直一模一样。”</p>
<p>IBM和微软可能因此面临诉讼，但当IBM的人和基尔代尔接触以后发现，基尔代尔只是希望IBM在以后的PC电脑中采用他的下一版CP/M。IBM当然乐于从命，微软也躲过了致命一劫。</p>
<p>1983年底，基尔代尔的DR公司又推出了Concurrent（并发）CP/M，其优点是计算机用户可以同时做几种操作，比如在打印机打印时，可以同时写信，这在今天就是一个理所当然的功能，但在基尔代尔的发明之前，电脑是单线程的，同时只能做一件事。</p>
<p>新的多任务操作系统很棒，它在1984年问世时，获得了巨大的成功。但有点迟了，到了20世纪80年代末，微软的MS-DOS已经成为操作系统上的事实标准。</p>
<h3>微软的商业模式</h3>
<p>在DR和IBM已经占领大量市场份额的时候，微软还能崛起，全靠它的商业模式。微软既不像DR，只卖系统，又不像IBM和苹果，卖系统与硬件结合的整体。微软将自己的MS-DOS与微机厂商绑定起来，厂家每卖出一个电脑，微软才卖出一份系统。并且，MS-DOS只卖40美元，DR-DOS的售价几乎是它的6倍。</p>
<p>还有，在用户这一侧，根本感受不到微软在赚他的钱啊，在当时电脑贵40美金，少40美金，用户根本不敏感。还有，微软提供了替换WordStar、VisiCalc的Office套件，Office又不是开源的，想要使用Office，就必须购买预装有MS-DOS系统的电脑。</p>
<p>而另一边，基尔代尔的DR公司本来具有先天优势，却不肯适合变换自己的商业模式。基尔代尔没有学习微软的绑定销售模式，他决定不与编写WordStar、VisiCalc之类的软件公司进行一对一的直接竞争，<strong>他认为与自己的客户竞争，有昧自己的良心，是不道德的</strong>。</p>
<p>基尔代尔果然是一位学者企业家。他有企业家的敏锐嗅觉和欲望，但同时又保留了学者的锐意创新和儒雅。他一只脚踏在了商业领域，另一只脚踏在了学者领域，只有他这样的人，才能开发出符合市场需要的CP/M，而肯·汤普逊和比尔·盖茨都不可以。</p>
<h2>小结</h2>
<p>从以上Intel、IBM、微软、DR公司的故事中，你学到了什么呢？比尔·盖茨确实是一位商业奇才，他在上大学的时候，就敏锐第嗅到了PC电脑的商机，毅然退学创办了微软，幂幂之中好像命中注定一样，好像有什么东西在指引他前进。</p>
<p>当他需要从蒂姆·帕特森手里买下QDOS的时候，他没有犹豫。他在DR和IBM商业经验的基础上，开创了微软独特的商业模式。在Windowns 98之后，微软抛弃了MS-DOS系统架构，只保留了Windows NT架构，这个架构曾经给微软带来了非常成功的Windows 2000服务器系统，即使在中国，都卖出了许多付费拷贝。我们今天使用的Windows 7/10/11，以及Windows Server系列的系统，均是基于Windows NT。而Windows NT（Windows New Technology），源于微软与IBM合作过的OS/2系统，后来两个公司理念不和，各自开发，成就了后来的微软。Windows NT与CP/M已经彻底没有了关系。</p>
<p><img src="./assets/v2-92b7d48884b5df567618cdce63c7e9ab_1440w.jpg" alt="Windows"></p>
<p>关于Windows NT系统的更新历史，可以查看这个链接：</p>
<p><a href="https://zh.m.wikipedia.org/zh/Windows_NT">https://zh.m.wikipedia.org/zh/Windows_NT</a></p>
<p>2022年9月9日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[03《坠落》观后感]]></title>
            <link>https://yishulun.com/./src/posts/2022/0908-2.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0908-2.html</guid>
            <pubDate>Thu, 08 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>03《坠落》观后感</h1>
<center><img src="./assets/image-20220908174157388.png" style="zoom:50%;" /></center>
<p>我的天，恐高勿看！（注意：影评都含有一定的剧透，介意请马上关上！）</p>
<!-- more -->
<ul>
<li>
<p>铁塔太高了，没有信号，用鞋子搭载手机扔到塔下求救，失败了。</p>
</li>
<li>
<p>遇到烧烤露营的人，发信号弹求救，结果人家不但不救她们，还把她们的车偷走了。</p>
</li>
<li>
<p>然后就是使用无人机尝试向旅店送信，结果无人机过马路没有看红绿灯，被卡车撞碎了。</p>
</li>
<li>
<p>最后，最后，还是靠把手机扔下塔（借助闺蜜），发出求救信号得救的。</p>
</li>
</ul>
<p>主角本来是在闺蜜的建议下，通过极限运动克服之前一个极限运动留下的情感阴影。现在好了，阴影更深啦。不过，失恋的阴影应该已经走出来啦。</p>
<p>影片从闺蜜下塔拿包，剧情就开始高度紧张。闺蜜的死亡反转，是全局一大亮点，相信这一点会促使你倒回去再看二遍。</p>
<p>从创作技法上讲，代入感很强。骨肉亲情、生死之交、侵夺背叛，容易产生代入感的三个方面都涉及到了，代入感想不强都很难。</p>
<p>如果再能设计一点集体荣誉、弱势群体因素进去就更强了：</p>
<ul>
<li>
<p>例如，在集体荣誉方面，可以让闺蜜参加一个极限主播大赛，主角和闺蜜为了获胜拿奖，必须参与这次挑战。</p>
</li>
<li>
<p>还有，在弱势群体方面，可以把主角和闺蜜设定为非法移民群体，甚至肤色都可以变成黑色，也可以让旅馆的人发现碎在马路上的直升机，看到了纸条，但没有人愿意选择来救她们，因为她们处在社会的最底层，命不值钱。如果这样设定，露营的人不救她们还偷车，就更容易站住脚了。还有，往宏大了讲，社会教育意义还附加上了。（该死的教育意义）</p>
</li>
</ul>
<p>最后说一下，有人质疑为什么不用无人机把手机送下塔，还有两人的运动装备根本不专业，背包没有上双险，保命绳也不长，还有一个最大槽点：苹果手机能用三天？好吧，如果导演没有从水果商那里拿到一份广告费的话，确实应该换一个手机品牌。</p>
<p>等等吧，确实有一些不严谨的地方，但电影或小说，主要是帮助观众释放情绪的，情绪占第一位，逻辑什么的其实不太重要。</p>
<blockquote>
<p>最后附一个在线试看链接：<a href="https://www.olevod.com/index.php/vod/play/id/38429/sid/1/nid/1.html%EF%BC%8C%E8%AF%B7%E6%94%AF%E6%8C%81%E6%AD%A3%E7%89%88%E3%80%82">https://www.olevod.com/index.php/vod/play/id/38429/sid/1/nid/1.html，请支持正版。</a></p>
</blockquote>
<p>2022年9月8日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[从金庸小说和齐白石国画，看网文如何加快节奏？]]></title>
            <link>https://yishulun.com/./src/posts/2022/0908.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0908.html</guid>
            <pubDate>Thu, 08 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>从金庸小说和齐白石国画，看网文如何加快节奏？</h1>
<p>我很早就注意到了这种现象，今天分享出来与朋友们探讨，并且这种艺术处理技巧，不止可以应用在武侠小说的创作中，在计算机技术图书的写作中，应该也是可用的。本质上，都是用最精简的文字，表达最丰富的内涵。我们的古代文字都比较简洁，惜字如金，甚至标点都要略去，这除了节省竹简的考虑，应该还有艺术表达上的简洁需要。</p>
<!--more-->
<h2>武侠小说中文字的疏与密</h2>
<p>先看武侠小说中文字的疏密，以我最喜欢的金庸先生的小说《侠客行》为例，世纪新修版下册第605页有这样一段文字：</p>
<blockquote>
<p>闵柔颤声道：“谢天谢地，终于......终于打听到了这女子的下落，师哥！咱们......咱们赶着便去。”石清点头道：“是。”二人当即向白自在等人作别。</p>
</blockquote>
<p>这段话，作者写在石清、闵柔知道了梅芳姑在熊耳山枯草岭之后，前面二人的对话都是实写，最后一句，以“二人”开头的，是虚写。二人是怎么向众人作别的，没有细写。为什么没有实写？因为不需要啊。另外，这里为什么单提了一下白自在，因为下面就是白自在与他们夫妇二人的对话。</p>
<p>石清、闵柔早不知道梅芳姑的下落，晚不知道，偏偏在这个时候知道，为什么？这是金大导演安排的。侠客岛归来，《侠客行》前面的剧情都写完了，就剩下熊耳山最后的一幕剧情了。石破天在海上救了师父、阿秀之后，作者特意安排的这个桥段，就是为了引出熊耳山的后续剧情。</p>
<p>再看一个疏写的例子，同册第611页：</p>
<blockquote>
<p>众人的目光一齐都向石破天射去，人人心中充满了疑窦：“梅芳姑是处子之身，自然不会是他母亲。那么他母亲是谁？父亲是谁？梅芳姑为什么要自认是他母亲？”</p>
</blockquote>
<p>在这一段的开头，“众人”便是疏写，将众人的心思并在了一起。这在电影中是没有办法直接用镜头变现的，替代的方式只能用旁白。有时候我们说小说比电影好看，也在于此。</p>
<p>「疏」写大致主要有两种情况：</p>
<ul>
<li>一，将几个人的言行、心思并在一起写；</li>
<li>二，高度概括内容，相当于是语言的白描手法。</li>
</ul>
<p>还有一种简写，虽然不是「疏」写，但能让文字更少。看一个同册第606页的示例：</p>
<blockquote>
<p>他此刻的轻功何等了得，转瞬间便上了山岭，绕过一片林子，到了几间草屋之前。只听得狗吠声响，一条黄狗从屋中奔将出来，扑向他的肩头。石破天一把搂住，喜叫：“阿黄，阿黄！你回来了。我妈妈呢？”大叫：“妈妈，妈妈！”</p>
</blockquote>
<p>这一段中，“石破天一把搂住”，搂住什么？缺少宾语。还有后面的“大叫”，谁大叫？缺少主语。从语法上似乎有点毛病，但语句极其简洁，文学表达效果也更好了。奇怪不？少了文字，语法不全，效果还更好了。这是精简语句，让文字更为简洁高效的方法。</p>
<p>下面看「密」写的例子。这样的例子书中有许多，仅举一例：</p>
<blockquote>
<p>丁不四见对方人多，突然灵机一动，道：“好，一言为定，咱们大家都不出手。你们这边是石庄主夫妇，他们这边是母子二人。双方各是一男一女，大家见个胜败便是。”他和石破天动过几次手，知道这少年武功远在石清夫妇之上，有他相助，梅芳姑诀计不会落败。</p>
</blockquote>
<p>这里写了丁不四的言语和心思，已经属于详写了。</p>
<p>武侠小说中的详写与略写，必须间隔起来，这样读起来才不容易觉得疲倦。人们常说读金庸小说不觉得累，如果没有生理限制，可以一直读下去。写作常言技巧“文似看山不喜平”，便可以从文字的疏与密上理解。</p>
<h2>国画中的写意与写实</h2>
<p>下面看国画中的写意。什么是写意？说白了就是「疏」，就是「略」，就是抽象。这是一张齐白石的草虫国画：</p>
<p><img src="./assets/d452cdc9b65840a89bc1aeaff04516c0.jpeg" alt="齐白石画作"></p>
<p>这里萝卜画得简略，虫子画得精细。是齐白石大师画不精细吗？显然不是，齐白石年少学做木匠，中年又学刻印，手上功夫是很有准头的。这不是工笔画，不用写实，这是写意画。但即使在写意画当中，齐白石对画中事物也分了疏密，倘若萝卜和虫子一昧画得工笔细致，或一昧画得粗糙简略，便失去国画的意味了。你可以网上随意找一下，齐白石的画，画的风格总是疏密有致的，没有一边倒的情况。</p>
<p>所以，小说文字的疏与密，国画中的写意与写实，它们是一回事，源自同一种中国文化，往更高的层次说是同样的一种艺术处理技巧。</p>
<h2>小结</h2>
<p>最后总结一下我的感受。武侠小说中，无论是将多人言行、心思并作一类抽象的人「疏」写，还是将要写的内容作抽象概括，像故事大纲一样一笔带过，以及用简短有力的句子，将一句话中的主语或谓语省略掉，这一切都是为（小说要讲的）故事服务的。</p>
<p>为了讲好故事，有些话可以略写，甚至不写。这种错落有致的写法，才让读者觉得小说的「节奏」快。其实「节奏」只是一个读者主观的阅读体验罢了，加快叙事进度，不说多余的话，快点把故事讲完，在读者这边的感受结果就是三个字——节奏快。</p>
<p>反过来，如何小说通篇内容都是情节大纲式的略写，抑或是事无巨细式的详写，读者的阅读感受要么是索然无味，要么是审美疲劳，读个几章内容就读下去了，这种情况在网文小说中很常见。有人说现在网文节奏变快了，金庸小说过时了。其实不是的，很多网文作者都没有什么写作经验，靠在小说中塞几个黄段子飞起，仅是金庸武侠小说中疏与密这一个技巧，就值得他们好好学习。</p>
<p>2022年9月8日于北京</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[Github Gist是什么？]]></title>
            <link>https://yishulun.com/./src/posts/2022/0906.html</link>
            <guid>https://yishulun.com/./src/posts/2022/0906.html</guid>
            <pubDate>Tue, 06 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Github Gist是什么？</h1>
<p><a href="https://gist.github.com/">Gist</a>，中文要点，/dʒɪst/，是Github提供的一个子服务，可以在线分享比较小的代码片段，同样的代码如果用传统创建仓库的方式分享可能就显得笨重了。Gist就是一个精简版的Repository。下面是我用《微信小游戏开发》3.2.2示例代码做的实验，及实验感受。</p>
<!--more-->
<h2>它分享的范围有哪些？</h2>
<p>创建时有两个选项：</p>
<img src="./assets/image-20220906204443158.png" alt="image-20220906204443158" style="zoom:50%;" />
<p>第一个选项“Create secret gist”，虽然有 secret，但也不是私密的，看到分享链接的人都可以访问。第二个选项，是一个完全公开的、搜索引擎可以抓取的链接。</p>
<p>基本公司团队内分享，使用第一个选项合适；撰写一个小教程，就像我这篇文章一样，适合使用第二个选项。这个选项或许还可以让我们的文章有更多的曝光量，当然这仅限于你在代码中可以留下了文章链接。</p>
<h2>它有什么用法？</h2>
<p>在线创建后便可以分享了。</p>
<h3>在页面中内嵌代码</h3>
<p>直接在 md 或 HTML 页面中，用 script 标签嵌入一个 js 地址：</p>
<pre><code class="language-js">&lt;script async src=&quot;https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>它是怎么工作的？这个很容易猜出。</p>
<p>js 文件链接本身即包含了足够的信息，它会先动态加载基本的类库，然后再把要加载的对象信息传递给类库，对象（我们分享的代码）加载完成之后，最后统一在页面上创建 HTML 元素并把代码渲染出来。</p>
<p>如果查看上述 8829.js 文件的代码，它的内容类似是这样的：</p>
<pre><code class="language-js">document.write('&lt;link rel=&quot;stylesheet&quot; href=&quot;https://github.githubassets.com/assets/gist-embed-19d8e57711b3.css&quot;&gt;')
document.write('&lt;div id=\&quot;gist118190366\&quot; class=\&quot;gist\&quot;&gt;\n    &lt;div class=\&quot;gist-file\&quot; translate=\&quot;no\&quot;&gt;\n...')
</code></pre>
<p>第一行是 Github 基本的CSS样式类库，第二行是与我们每一个分享的代码有关的信息。</p>
<h3>分享链接</h3>
<p><a href="https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829">https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829</a></p>
<p>注意，这个地址很奇妙啊，这不就是上面那个js文件的地址吗？只是少了一个js后缀。在Github的服务器端，加上后缀是被引入的js文件，不加是Gist代码的主页地址，这样的API设计不可谓不算简约。</p>
<h3>提供一个 zip 下载链接</h3>
<p><a href="https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829/archive/9b29a41650efa5bd9884d27ba9cb617e0291f8e1.zip">https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829/archive/9b29a41650efa5bd9884d27ba9cb617e0291f8e1.zip</a></p>
<p>对于自己已经创建的历史 Gist，Github 都有记录，这个地址就是 Gist 地址加上自己的 Github ID，例如我的 Gists 地址是：</p>
<p><a href="https://gist.github.com/rixingyike">https://gist.github.com/rixingyike</a></p>
<h2>Gist 不能在线直接运行吗？</h2>
<p>目前不能。</p>
<p>Gist 允许同时分享多个文件，我在使用时看到这个功能还很高兴，因为可以保持文件的名称和相对位置，对于前端小示例，便意味着可以在线运行。</p>
<p>事实上不可以。</p>
<p>事实上 HTML/CSS/JS 组成的静态示例，是可以实现在线运行的。</p>
<p>对于看到分享链接的读者来说，不仅能看到代码，还能看到运行效果。甚至其他语言，例如 Python、Go 等，借助 WebAssembly 技术，也可以实现在线查看源码与运行效果。</p>
<p>虽然 Gist 官方不能，但有人开发了第三方应用，可以动态加载 Gist 并呈现动态效果，例如：</p>
<p><a href="https://bl.ocks.org/">https://bl.ocks.org/</a></p>
<p>使用方法也很简单，直接将上面自己的分享链接中的 <a href="http://gist.github.com">gist.github.com</a>，替换为 <a href="http://bl.ocks.org">bl.ocks.org</a> 即可。例如我的这个小示例微信小游戏开发 3.2.2，在线查看地址为：</p>
<p><a href="https://bl.ocks.org/rixingyike/3e64127a5ebb66ee381093bfeeed8829">https://bl.ocks.org/rixingyike/3e64127a5ebb66ee381093bfeeed8829</a></p>
<p>运行效果为：</p>
<p><img src="./assets/image-20220906213322112.png" alt="image-20220906213322112"></p>
<p>它已然是一个「活」的 HTML 页面了。但它在这里只是一张图片，那么这个示例效果页也可以嵌入吗？</p>
<p>的md文件内应该是可以的，因为md支持HTML代码嘛。嵌入效果如下：</p>
<iframe sandbox="allow-popups allow-scripts allow-forms allow-same-origin" src="https://bl.ocks.org/rixingyike/raw/3e64127a5ebb66ee381093bfeeed8829/9b29a41650efa5bd9884d27ba9cb617e0291f8e1/" marginwidth="0" marginheight="0" style="height:100px;" scrolling="no"></iframe>
<p>嵌入结束。</p>
<p>没有效果！没有办法，资源是bl.ocks.org的，人家拒绝我们跨域嵌入，我们便无法通过iframe引入了。</p>
<h2>其他问题</h2>
<h3><a href="http://gist.github.com">gist.github.com</a> 被墙无法访问的解决办法</h3>
<p>可以用梯子，或者修改 hosts 文件，直接将 <a href="http://gist.github.com">gist.github.com</a> 指向它的 IP 地址（例如 192.30.253.118），这一招破解的是 DNS 污染。</p>
<p>具体指向哪里，不一定，可以在本地用 ping 指令查看一下。希望你的 ping 结果不是这样的：</p>
<p>0 received, 100% packet loss</p>
<h3>有人把 Gist 当作一个写作平台</h3>
<p>这件事是结合<a href="http://roughdraft.xn--io-ic4cy78fbzq">http://roughdraft.io来做的</a>，但其实没有必要啊。Github仓库+hugo+Github Actions 就可以构建一个完美的静态博客，没有必要用结构松散的 Gist。</p>
<h4>如何看待 Github Gist 这个服务，怎样更好地利用？</h4>
<p>就是一个阉割版的 Repository，便于在线分享内容，不局限于分享代码。正常使用就可以了，过度使用就没有必要了。</p>
<h3>How to create a GitHub Gist with API?</h3>
<p>先创建 Github Token，然后在下面这个网址：</p>
<p><a href="https://docs.github.com/cn/rest/gists/gists">https://docs.github.com/cn/rest/gists/gists</a></p>
<p>找到需要的 REST API，进行 Gist 的 CURD 操作就可以了。</p>
<h2>小结</h2>
<p>当然了，Gist 本质上最大的功能，还是内嵌代码，且天然支持高亮，效果如下所示。</p>
<p><img src="./assets/image-20220906214053495.png" alt="image-20220906214053495"></p>
<p>::: tip<br>
没有用过 Gist 或不能用 Gist，感觉像吃手把肉没有韭菜花一样，有点不完美。<br>
:::</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
            <category>undefined</category>
        </item>
        <item>
            <title><![CDATA[《小程序从0到1》常见问题]]></title>
            <link>https://yishulun.com/./src/posts/2021/22.html</link>
            <guid>https://yishulun.com/./src/posts/2021/22.html</guid>
            <pubDate>Wed, 22 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>《小程序从0到1》常见问题</h1>
<blockquote>
<p>《小程序从0到1：微信全栈工程师一本通》常见问题。<br>
常见问题解答在最后面。</p>
</blockquote>
<p>一本全面而系统的介绍小程序开发技术的书籍。网店在售的共有两个版本：</p>
<ul>
<li>2018年1月出版的为旧版，在使用需要先查看<a href="http://api.rixingyike.com/">这里</a>的接口说明；</li>
<li>2018年5月印刷出版的为新版，涉及相关接口已经修改，不需要查看上面的链接。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210311142029.jpg" alt="5a30df84N4f448eca" style="zoom: 50%;" />
<h2>读者群常见问题六篇集锦</h2>
<ul>
<li><a href="/posts/2018/01.html">01 小程序从0到1：1月9日群问题集锦</a></li>
<li><a href="/posts/2018/02.html">02 小程序从0到1：1月23日群问题集锦</a></li>
<li><a href="/posts/2018/03.html">03 小程序从0到1：1月25日群问题集锦</a></li>
<li><a href="/posts/2018/04.html">04 小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结</a></li>
<li><a href="/posts/2018/05.html">05 小程序从0到1：MXML基础语法与错误信息</a></li>
<li><a href="/posts/2020/01.html">01 小程序从0到1：豆瓣接口替代网址可以在线访问了</a></li>
</ul>
<p>（20221222更新）</p>
<h2>源码下载及旧版说明</h2>
<p>所有示例源码链接:<br>
<a href="https://pan.baidu.com/s/1wvegfTp5BLY7Mz-qeqFxwA">https://pan.baidu.com/s/1wvegfTp5BLY7Mz-qeqFxwA</a> 密码: y5pg</p>
<p>微信小程序从0到1练习链接:<br>
<a href="https://pan.baidu.com/s/1bp3uIFd">https://pan.baidu.com/s/1bp3uIFd</a> 密码: k7yy</p>
<p>上面链接下载的是全部源码。如果回复单个关键字，下载单个示例源吗.例如「豆豆电影2.1」，注意中间无空格。</p>
<pre><code>回复「豆豆电影2.4」返回举例：
链接: https://pan.baidu.com/s/1BaQAUMUmUwvSMP7x2FVW4A 密码: amge
</code></pre>
<p>【注意】所有《小程序从0到1》第一版读者请注意查看这个地址（仅限旧版，新版本无此问题）：</p>
<p><a href="http://api.rixingyike.com/">http://api.rixingyike.com/</a></p>
<p>如何判断手上的是不是旧版？可以查看封皮内出版信息，2018年1月第一版第一次印刷为旧版。</p>
<h2>读者评价</h2>
<p>来自Comunion的Scorpio说道：</p>
<blockquote>
<p>写得很棒，看完了就搞了个小程序外包</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210311210321.png" alt="image-20210311210319762" style="zoom: 67%;" />
<p>看来我的书对有些人来说一点也不难，很好入门，也很实用。</p>
<h2>购买方式</h2>
<ul>
<li><a href="https://item.jd.com/12257013.html">京东第二版购书链接</a></li>
</ul>
<p>购买图书后，欢迎进读者群。有任何技术问题，可以在群内交流讨论。</p>
<h2>新常见问题⭐️</h2>
<p><strong>1.如果进读者交流群？</strong></p>
<p>加作者v9830131，回复【读者】进修仙群。</p>
<p><strong>1.为什么我的后端程序跑不起来？</strong></p>
<p>要注意查看自己手里的书是不是第二版本。由于历史原因，第一版本采用的在线豆瓣接口有访问限制、不稳定。在第二版本中作者修改了接口，这个问题已经不存在了。</p>
<p>如果手里的是旧版本怎么办？可以前往京东购买新版本，或者查看这个链接：<a href="http://api.rixingyike.com/">http://api.rixingyike.com/</a>，按照说明自行修改即可。</p>
<blockquote>
<p>注意：在某拼夕夕平台，某宝平台，或某QQ群允斥的都是自行私印的盗版，并且是旧版本的盗版。盗版商只注重利益，不注重更新版本，读者购买时须谨慎。抵制盗版，从你我做起。</p>
</blockquote>
<p><strong>2. 有人私信问我搭建科学上网服务的软件</strong></p>
<p>有人私信问我搭建科学上网服务的软件，在这里：<br>
<a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md">https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md</a></p>
<p><strong>3. 老师，PC端预览正常，手机端就不显示。这是什么原因呢</strong></p>
<p>这种多半是资源加载失败了。可以开手机调试模式，看错误是什么。另外看一下微信开发者工具，项目设置，是不是设置了不校验域名。</p>
<p><strong>4. 有es6的文章吗？</strong></p>
<p>网上很多相关的教程，可以看一下这个：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p>
<p><strong>5. 需要什么样的基础吗？</strong></p>
<p>开始可以学一下以下前端基础内容——</p>
<p>第一步学一下HTML：<br>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p>
<p>第二步可以学习一下CSS3样式语言：<br>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a></p>
<p>第三步学习一下JS：<br>
<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[《微信小程序全栈开发实战》常见问题]]></title>
            <link>https://yishulun.com/./src/posts/2021/23.html</link>
            <guid>https://yishulun.com/./src/posts/2021/23.html</guid>
            <pubDate>Wed, 22 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>《微信小程序全栈开发实战》常见问题</h1>
<blockquote>
<p>《微信小程序全栈开发实战》常见问题。<br>
常见问题解答在最后面。</p>
</blockquote>
<p>这是我在极客时间上架的视频专栏课，目前已经全部录制完成了，共179节，48+小时时长。这门课虽然名字冠以小程序，但其实是一门全栈开发的课，不仅全面介绍了小程序技术，还介绍了后端Node.js技术。读者对象适合为编程初学者，或想转行做前端开发的同学。</p>
<h2>课程评价</h2>
<p>来自读者岁月如初的评论：</p>
<blockquote>
<p>视频一打开，就被老师那种学者般磁性的声音吸引。以前做过简单的小程序开发，通过老师第一节课程的讲解，感觉不错，希望通过购买本套课程提高小程序开发能力。加油！</p>
</blockquote>
<blockquote>
<p>回复：今天评论一打开，就让你清新脱俗的言语所折报。以前做过一些在线课程，但录制这么大规模的网课却是首次，经验不足，还请多多包涵。希望你通过本课程的学习，成功开发出一款让自己日夜躺赚的小程序产品，加油，少年~</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210330110836image-20210330110830372.png" alt="image-20210330110830372" style="zoom:67%;" />
<p>来自极客时间官方小编的评价：</p>
<blockquote>
<p>其实，我之前也看过不少小程序教程，讲解的都是平台组件、API 等前端内容，并不涉及后端，学完后，还是没办法独立完成项目。</p>
<p>李艺老师不仅讲解了最佳实践和解决方法，还会结合电商小程序实践，贯穿前后端所有相关技术，带你由浅入深地掌握必备基础知识，了解具体业务逻辑功能的实现方式，让你在编写其它小程序项目时，也能举一反三，游刃有余。</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210311143855.png" alt="image-20210303183511288" style="zoom:25%;" />
<p>来自学员Forest的评价：</p>
<blockquote>
<p>#你最感谢的一本编程书或教程是什么？<br>
首先感谢李艺老师，深入浅出，循序渐进，收获颇丰，课程不是简单的讲解小程序的功能，而是将知识点与实际开发运用的一个过程，课程不仅讲了小程序，还讲解到了node, MySQL, nginx,  云开发，微信公众号开发等等，也是我目前接触到的最全的一门小程序课程。</p>
</blockquote>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210311144028.png" alt="image-20210303183445619" style="zoom:25%;" />
<p>来自学员小司的评价：</p>
<blockquote>
<p>#你最感谢的一本编程书或教程是什么？<br>
首先感谢李艺老师，十分感谢~<br>
先不谈老师讲课内容全面、细致，就从课后的耐心解答每一位读者的问题疑惑，就不是一般老师能确确实实做得到的，那一股股认真用心的劲，让我太爱这位老师了。这门课由浅入深，质量对我来说那是杠杠的，更何况所有在开发中遇到的工具、服务，老师已全部提供给我们了。课程不像网络上教程那样单单讲解小程序的功能，而是将每个知识块与实战紧密结合，外加拓展，涉及的很广，甚至还讲解到了云数据库，MySQL，Node.js，Golang，Vue，云开发等各种知识点。<br>
总之，老师会尽自己一切能力帮助到每一位读者，这一点很难得的，希望我们每一位好好珍惜~<br>
最后，再次感谢李艺老师，谢谢~<br>
期待你的加入，我们一起进军微信小程序全栈开发！</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210313103910.png" alt="image-20210313103908412"></p>
<p>来自极客时间老读者swordman在最后一节课撰写的评价：</p>
<blockquote>
<p>从2020年6月，学习到2021年1月，8个月的时间，让我从一名Android原生应用开发者，转变成小程序应用开发者。非常感谢老师，是老师的一步步引导，让我跨过了新的语言，新的IDE，声明式UI这三个技术关卡。“知行合一”的理念，也让我收益颇丰。<br>
3月份，我自己的小程序产品已经开始试用了，可以说没有这门课程，我的小程序产品不可能快速从0到1，进入试用阶段。<br>
感谢老师对课程的辛勤付出，也感谢极客时间，提供了那么好的一个学习平台。（我是极客时间的老粉丝，2017年在上海QCon，见证了极客时间的诞生。）</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210311144252.png" alt="image-20210309191256574"></p>
<h2>购买方式</h2>
<p>购买链接：<a href="http://gk.link/a/10AdC">http://gk.link/a/10AdC</a></p>
<h2>常见问题⭐️</h2>
<p><strong>1. Golang版本的代码有吗？看评论说有，我没找到</strong></p>
<p>179节课内没有Go语言版本的后端代码。后续如果持续更新完善，考虑添加Go语言代码，毕竟Go语言也是作者钟爱和一贯使用的语言。</p>
<p><strong>2. 有没有课件？</strong></p>
<p>有。</p>
<p>不止一个读者问到极客时间视频专栏的演示文稿，我整理了出来，都在这里了：<br>
链接：<a href="https://pan.baidu.com/s/1mJq_NVstuPpNRi7PDawjkg">https://pan.baidu.com/s/1mJq_NVstuPpNRi7PDawjkg</a><br>
提取码：liyi</p>
<p>这是Mac上的keynote文件，如果在Windows上查看，可以从这个网站转化：<br>
<a href="https://zhuanhuan.supfree.net/hao.asp?f=key&amp;t=pdf">https://zhuanhuan.supfree.net/hao.asp?f=key&amp;t=pdf</a></p>
<p><strong>3. 听朋友说，他完课拿到了作者新手签名的书？</strong></p>
<p>是的。截至写条Q/A时，赠书活动仍在进行。完课，并在极客时间部落晒出结课证书，写几句评名，凑够100字，就有很大机会免费得到作者亲笔签名的赠书。目前仅一位读者获得，加油。</p>
<p>详细信息可以从这里查看：<a href="https://mp.weixin.qq.com/s/AT9ZGknXA3AyFM4f-Hc29w">https://mp.weixin.qq.com/s/AT9ZGknXA3AyFM4f-Hc29w</a>。</p>
<p><strong>4.如何进读者群？</strong></p>
<p>加作者v9830131，回复【读者】进修仙群。</p>
<p><strong>5. 一位读者问到关于开通直播的问题</strong></p>
<p>有读者问到：</p>
<blockquote>
<p>老师，有问题想请教下，现在申请直播服务的域名都需要有公安部备案的吗，我的毕业设计是做个直播的小程序，现在只有icp备案的域名，没有进行公安部备案，想问下有啥方法可以解决吗?</p>
</blockquote>
<img src="https://gitee.com/rxyk/my-images/raw/master/2021/20210311123419.png" alt="image-20210311123417402" style="zoom: 50%;" />
<p>此提问，这位读者并不是购买了腾讯云的云直播组件。在云直播组件中，有相关直播域名的要求。</p>
<blockquote>
<p><a href="https://cloud.tencent.com/document/product/1078/42916">https://cloud.tencent.com/document/product/1078/42916</a><br>
小程序·云直播插件</p>
</blockquote>
<p>这个云直播组件，虽然不需要自己开发，但是仍然需要开发者有非个人资质。</p>
<p>这位读者尝试的是七牛云。七牛云云直播不需要企业资质，个人也可以申请开通，但需要个人提供同时具有ICP备案和公安备案的域名。关于公安备案，具体要求在下面：</p>
<blockquote>
<p><a href="https://developer.qiniu.com/af/kb/3987/how-to-make-website-and-inquires-the-police-put-on-record-information">https://developer.qiniu.com/af/kb/3987/how-to-make-website-and-inquires-the-police-put-on-record-information</a></p>
</blockquote>
<p>我看了这个链接，公安部图案人个就可以做，不需要企业资质，所以麻烦一下，还是可以申请的。最麻烦的是，它要求企业资质，开发者想申请都没有资格。</p>
<p>这位读者是想完成毕设。最后我给出的建议是：</p>
<blockquote>
<p>如果你只是为了完成毕设，实现直播与播放功能，没有必要开这个七牛云。用我极客时间的小程序课程里的live pusher、live player，及相关企业帐号就可以实现了。</p>
</blockquote>
<p><strong>6. 老师，能添加开发者资质吗？</strong></p>
<p>可以的，==在视频课程的第四章任一节课程下面留言==，写清楚要添加开发者和自己的微信号就可以了。我看到了就会为你添加。</p>
<p>注意微信号要写正确，要确认已经打开隐私设置，能被搜索到。有些读者草草提供一个微信号，根本搜索不到。</p>
<p>有一次，一位读者提到了这样一个号：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210316082801.png" alt="image-20210316082759842" style="zoom:33%;" />
<p>怎么也搜索不到。我就去问他，“你确认你提供的号自己能搜索到吗？”</p>
<p>“可以，最前面的字母是大写的i”</p>
<p>好吧，下次我尽量复制。</p>
<p>有另外一位读者，我到现在还记得他的微信号是“JavaScript0101”，毫无异义，简单易记。祝我以后收到的都是这样的微信号。</p>
<p>在添加以后，你的微信就具有开发者权限了，就可以直接使用源码进行测试了。AppID在源码中的项目文件中有，在导入项目时会自动呈现。</p>
<p><strong>7. 老师能不能把下拉刷新和上拉加载组合在一起讲一讲？</strong></p>
<p>好想法，下次输出放一起。</p>
<p><strong>8. 老师，wxs脚本里面console.log输出事件源为什么是[object object]，怎么正确查看对象?</strong></p>
<p>WXS很不完善，用的时候一定要小心，它的能力远远弱于js，目前。如果发现与预想不一致的情况，就查看一下官方的<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/">WXS文档</a>。</p>
<p>补充一点，关于console.log输出显示[object object]的问题，js输出有时候也有这个问题，这和对象的toString实现有关。可以这样变换一下：</p>
<p>console.log(JSON.stringify(...))</p>
<p><strong>9. 老师不知道你了不了解微信支付的账单是如何分类的？比如我扫码骑共享单车微信为啥知道把这个费用归为交通？</strong></p>
<p>如果商家不提供信息，按理说微信是不知道如何给帐单分类的。我查了一下统一下单接口中的body字段，微信对此字段的内容有所规定，见下图，这可能是它赖以自动分类的依据。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210414104444f689b2f44004853b2177426b97f19b0.png" alt=""></p>
<p><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_2">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_2</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Gitbook简易上手教程]]></title>
            <link>https://yishulun.com/./src/posts/2021/19.html</link>
            <guid>https://yishulun.com/./src/posts/2021/19.html</guid>
            <pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Gitbook简易上手教程</h1>
<p>Gitbok是一个本地写书工具，基于md语法，使用简单，易于上手。</p>
<h2>1.1 如何使用gitbook</h2>
<h3>安装使用说明</h3>
<p>安装：</p>
<p>npm install -g gitbook-cli --force</p>
<p>初始化目录：</p>
<p>mkdir gitbook &amp;&amp; cd gitbook<br>
gitbook init</p>
<p>开始编辑目录：</p>
<p>vim <code>summary.md</code></p>
<pre><code># Summary

* [前言](README.md)
* [第一章](1/README.md)
    * [1.1，基本语法](1/基本语法.md)
* [第二章](2/README.md)
</code></pre>
<h3>重建目录</h3>
<p>添加相应手段后，执行<code>book sm</code>，即可自动生成相关章节。当然也可以手动添加章节文件。</p>
<h3>发布静态文件</h3>
<p>gitbook build . ../../static/books/$dir</p>
<p><a href="http://xn--build-bi1hv64hwefdy4ch4ak11l.sh">执行目录下的build.sh</a></p>
<h3>输出PDF</h3>
<p>输出为PDF文件，需要先安装gitbook pdf</p>
<p>$ npm install gitbook-pdf -g</p>
<p>然后，用下面的命令就可以生成PDF文件了。</p>
<p>$ gitbook pdf {book_name}</p>
<p>如果，你已经在编写的gitbook当前目录，也可以使用相对路径。</p>
<p>$ gitbook pdf .</p>
<p>然后，你就会发现，你的目录中多了一个名为book.pdf的文件。</p>
<h2>1.2 解决Installing GitBook的错误</h2>
<blockquote>
<p>我是在win10 64位系统上遇到的这个问题。</p>
</blockquote>
<p>使用如下指令安装gitook：</p>
<pre><code>sudo npm install -g gitbook-cli
</code></pre>
<p>可能会出现一个错误：</p>
<pre><code>$ gitbook serve .
Installing GitBook 3.2.3
C:\Users\LIYI\AppData\Roaming\npm\node_modules\gitbook-cli\node_modules\npm\node_modules\graceful-fs\polyfills.js:287
      if (cb) cb.apply(this, arguments)
                 ^
TypeError: cb.apply is not a function
    at C:\Users\LIYI\AppData\Roaming\npm\node_modules\gitbook-cli\node_modules\npm\node_modules\graceful-fs\polyfills.js:287:18
    at FSReqCallback.oncomplete (fs.js:184:5)
</code></pre>
<p>这个过程可能会很长，你可能需要先干别的事，过一段时间回来看，必现报错了。</p>
<p>我的node版本号是v14.15.5：</p>
<pre><code>$ node -v
v14.15.5
</code></pre>
<p>有人说是由于版本太高造成的错误，降低版本就可以了。</p>
<h3>使用nvm降低node版本</h3>
<p>nvm与n的区别是，n是一个node模块，nvm是node之外的脚本。</p>
<p>下载与安装nvm：</p>
<pre><code>https://github.com/coreybutler/nvm-windows/releases
</code></pre>
<p><code>nvm -v</code>有输出，代表安装成功了。</p>
<p>nvm常用指令：</p>
<pre><code>nvm install 10.22   // 选择安装node 版本
nvm use 14.15       // 切换使用的node版本  
nvm list            // 查看已安装的 node 版本
nvm uninstall 6.2.0 // 卸载对应的版本
</code></pre>
<h4>解决nvm安装失败问题</h4>
<p>听说10.22好使，使用nvm install 10.22时，出现一个错误：</p>
<pre><code>Could not retrieve https://nodejs.org/dist/latest/SHASUMS256.txt.
</code></pre>
<p>这是由墙造成的，是下载源的问题。去nvm的安装目录：</p>
<p>C:\Users\LIYI\AppData\Roaming\nvm</p>
<p>找到一个settings.txt文件，添加最后两行：</p>
<pre><code>root: C:\Users\LIYI\AppData\Roaming\nvm
path: C:\Program Files\nodejs
node_mirror:npm.taobao.org/mirrors/node/
npm_mirror:npm.taobao.org/mirrors/npm/
</code></pre>
<p>配置好以后，重新安装nvm install 10.22就好使了。</p>
<p>安装好以后就是使用use指令切换：</p>
<pre><code>$ nvm use 10.22.0
Now using node v10.22.0 (64-bit)
</code></pre>
<p>注意，这个切换必须在管理员模式下完成。还有，node版本的切换可能会对其它程序造成负面影响。</p>
<h3>重新安装gitbook</h3>
<p>可以使用node -v查看降低后的版本。现在可以重装gitbook了：</p>
<pre><code>npm install -g gitbook-cli --force
npm install -g gitbook --force
</code></pre>
<p>切换到普通指令模式下，再执行serve指令就可以了：</p>
<pre><code>$ gitbook serve .
Installing GitBook 3.2.3
gitbook@3.2.3 C:\Users\LIYI\AppData\Local\Temp\tmp-19328QAP4WZytuKh5\node_modules\gitbook
...
</code></pre>
<h2>1.3 如何自动生成目录</h2>
<p>先全局安装一个模块：</p>
<p>npm install -g gitbook-summary</p>
<p>然后在图书目录下执行：</p>
<p>book sm -i _book</p>
<p>-i参数用于忽略目录。_book是gitbook自动生成的输出目录，它是应该被忽略的。</p>
<p>如果有多个目录需要忽略，可以这样设置参数：</p>
<p>book sm -i [_book,node_modules, styles]</p>
<p>如果书籍目录下有book.json文件，就是配置文件在起作用了：</p>
<pre><code>{
  &quot;ignores&quot;: [&quot;_book&quot;,&quot;styles&quot;,&quot;node_modules&quot;],
  ...
</code></pre>
<p>配置文件优先级更高。</p>
<h2>1.4 Gitbook能不能自定义样式?</h2>
<p>通过books.json自定义样式：</p>
<pre><code>{
  &quot;styles&quot;: {
    &quot;website&quot;: &quot;styles/website.css&quot;
  },
  ...
}
</code></pre>
<p>style code in styles/website.css:</p>
<pre><code>.copyright{
  color: white;
}
</code></pre>
<p>如果样式未起作用，要注意检查样式语法，还有在.bookignore文件中，不能将styles目录忽略。</p>
<h2>1.5 安装常用插件</h2>
<p>在book.json中可以配置插件。</p>
<p>GitBook 默认自带5个插件：</p>
<ul>
<li>highlight： 代码高亮</li>
<li>search： 导航栏查询功能，据说默认不支持中文</li>
<li>sharing：右上角分享功能</li>
<li>font-settings：字体设置，最上方的&quot;A&quot;符号</li>
<li>livereload：为GitBook实时重新加载</li>
</ul>
<p>如果要替换默认插件，需要在book.json中将默认插件使用“-”号“减”去。</p>
<p>这是我用到的插件及插件配置：</p>
<pre><code class="language-json">{
  ...
    &quot;plugins&quot;: [
    &quot;auto-scroll-table&quot;,
    &quot;sidebar-style&quot;,
    &quot;click-reveal&quot;,
    &quot;-lunr&quot;,
    &quot;-search&quot;,
    &quot;search-pro&quot;,
    &quot;back-to-top-button&quot;,
    &quot;insert-logo-link&quot;,
    &quot;chapter-fold&quot;,
    &quot;code&quot;,
    &quot;advanced-emoji&quot;,
    &quot;emphasize&quot;,
    &quot;splitter&quot;,
    &quot;expandable-chapters-small&quot;,
    &quot;page-toc-button&quot;,
    &quot;klipse&quot;,
    &quot;donate&quot;,
    &quot;alerts&quot;
  ],
  &quot;pluginsConfig&quot;: {
    &quot;sidebar-style&quot;: {
      &quot;title&quot;: &quot;艺术论&quot;,
      &quot;author&quot;: &quot;LIYI&quot;
    },
    &quot;donate&quot;: {
      &quot;wechat&quot;: &quot;images/wxpaycode.jpg&quot;,
      &quot;alipay&quot;: &quot;images/alipaycode.jpg&quot;,
      &quot;title&quot;: &quot;&quot;,
      &quot;button&quot;: &quot;打赏&quot;,
      &quot;alipayText&quot;: &quot;支付宝打赏&quot;,
      &quot;wechatText&quot;: &quot;微信打赏&quot;
    },
    &quot;page-toc-button&quot;: {
      &quot;maxTocDepth&quot;: 2,
      &quot;minTocSize&quot;: 2
    },
    &quot;insert-logo-link&quot;: {
      &quot;src&quot;: &quot;https://www.yishulun.com/avatar.png&quot;,
      &quot;url&quot;: &quot;https://www.yishulun.com&quot;,
      &quot;style&quot;: &quot;background: none; max-height: 50px; border-radius: 50%;&quot;
    }
  }
}
</code></pre>
<h3>back-to-top-button 回到顶部按钮</h3>
<pre><code>{
    &quot;plugins&quot;: [
         &quot;back-to-top-button&quot;
    ]
}
</code></pre>
<h3>code 代码添加行号&amp;复制按钮</h3>
<pre><code>{
    &quot;plugins&quot; : [ &quot;code&quot; ]
}
</code></pre>
<p>如果想去掉复制按钮，可配置</p>
<pre><code>&quot;pluginsConfig&quot;: {
      &quot;code&quot;: {
        &quot;copyButtons&quot;: false
      }
}
</code></pre>
<h3>insert-logo-link 插入logo和链接</h3>
<pre><code>{
    &quot;plugins&quot;: [ &quot;insert-logo-link&quot; ]
    &quot;pluginsConfig&quot;: {
      &quot;insert-logo&quot;: {
        &quot;src&quot;: &quot;https://yishulun.com&quot;,
        &quot;url&quot;: &quot;avator.jpg&quot;
      }
    }
}
</code></pre>
<p>如果插入的图片过大，样式不匹配，可以在styles/website.css中通过样式控制。</p>
<h3>search-pro 高级搜索</h3>
<p>在使用此插件之前，需要将默认的search和lunr 插件去掉；在搜索结果中，关键字会高亮；自带的 search 插件，关键字不会高亮</p>
<pre><code>{
    &quot;plugins&quot;: [
          &quot;-lunr&quot;, 
          &quot;-search&quot;, 
          &quot;search-pro&quot;
    ]
}
</code></pre>
<h3>emphasize 为文字加上底色</h3>
<pre><code>{
    &quot;plugins&quot;: [
        &quot;emphasize&quot;
    ]
}
</code></pre>
<p>然后在markdown / asciidoc内容中，使用以下内容突出显示一些文本：</p>
<pre><code>This text is {% em %}highlighted !{% endem %}
This text is {% em %}highlighted with **markdown**!{% endem %}
This text is {% em type=&quot;green&quot; %}highlighted in green!{% endem %}
This text is {% em type=&quot;red&quot; %}highlighted in red!{% endem %}
This text is {% em color=&quot;#ff0000&quot; %}highlighted with a custom color!{% endem %}
</code></pre>
<p>效果：</p>
<p>:::<br>
This text is {% em %}highlighted !{% endem %}<br>
This text is {% em %}highlighted with <strong>markdown</strong>!{% endem %}<br>
This text is {% em type=&quot;green&quot; %}highlighted in green!{% endem %}<br>
This text is {% em type=&quot;red&quot; %}highlighted in red!{% endem %}<br>
This text is {% em color=&quot;#ff0000&quot; %}highlighted with a custom color!{% endem %}<br>
:::</p>
<h3>splitter 侧边栏宽度可调节</h3>
<pre><code>{
    &quot;plugins&quot;: [
        &quot;splitter&quot;
    ]
}
</code></pre>
<h3>page-toc-button 悬浮目录</h3>
<pre><code>{
    &quot;plugins&quot; : [ &quot;page-toc-button&quot; ]
}
</code></pre>
<p>可选配置项：</p>
<pre><code>&quot;pluginsConfig&quot;: {
        &quot;page-toc-button&quot;: {
            &quot;maxTocDepth&quot;: 2,
            &quot;minTocSize&quot;: 2
       }
}
</code></pre>
<p>maxTocDept 标题的最大深度（2 = h1 + h2 + h3）。不支持值&gt; 2。 默认2<br>
minTocSize 显示toc按钮的最小toc条目数。 默认 2</p>
<h3>打赏按钮 reward</h3>
<p>这是国人铭哥开发的插件，配置：</p>
<pre><code>&quot;pluginsConfig&quot;: ['
    &quot;reward&quot;: {
        &quot;wechat&quot;: &quot;http://unclealan.cn/usr/themes/seventeen/dist/images/weixin.JPG&quot;,
        &quot;alipay&quot;: &quot;http://unclealan.cn/usr/themes/seventeen/dist/images/alipay.JPG&quot;,
        &quot;button&quot;: &quot;打赏&quot;,
        &quot;alipayText&quot;: &quot;支付宝&quot;,
        &quot;wechatText&quot;: &quot;微信&quot;
    },
]
</code></pre>
<h3>klipse 嵌入类似IDE的功能</h3>
<p>Klipse配置:</p>
<pre><code>{
    &quot;plugins&quot;: [&quot;klipse&quot;]
}
</code></pre>
<p>用法，在 markdown 中：</p>
<pre><code class="language-python">print [x + 1 for x in range(10)]
</code></pre>
<p>js:</p>
<pre><code>1+2
</code></pre>
<h3>auto-scroll-table 表格滚动条</h3>
<pre><code>{
  &quot;plugins&quot;: [&quot;auto-scroll-table&quot;]
}
</code></pre>
<p>默认不够宽也是没有滚动条的。</p>
<h3>click-reveal 点击显示</h3>
<p>默认隐藏，点击可显示。</p>
<pre><code>{
    &quot;plugins&quot;: [
        &quot;click-reveal&quot;
    ]
}
</code></pre>
<p>使用方式，markdown中。</p>
<p>代码：</p>
<pre><code>{% reveal %}
要被隐藏的内容
{% endreveal %}
</code></pre>
<p>效果：</p>
<p>:::<br>
{% reveal %}<br>
要被隐藏的内容<br>
{% endreveal %}<br>
:::</p>
<p>默认显示的文字是 Click to show , 使用text自定义显示文字。代码：</p>
<pre><code>{% reveal text=&quot;点击显示&quot; %}
要被隐藏的内容
{% endreveal %}
</code></pre>
<p>效果：</p>
<p>:::<br>
{% reveal text=&quot;点击显示&quot; %}<br>
要被隐藏的内容<br>
{% endreveal %}<br>
:::</p>
<p>支持html语法：</p>
<pre><code>&lt;div class=&quot;click_reveal&quot;&gt;
    &lt;span&gt; 点击显示html &lt;/span&gt;
    &lt;div&gt;&lt;pre&gt;&lt;code&gt;隐藏的文字&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>效果：</p>
<p>:::</p>
<div class="click_reveal">
    <span> 点击显示html </span>
    <div><pre><code>隐藏的文字</code></pre></div>
</div>
:::
<h3>使用npm安装单个插件</h3>
<p>如果觉得使用gitbook install安装有点慢，可以单个下载、安装插件，例如：</p>
<pre><code>npm i gitbook-plugin-insert-logo-link
</code></pre>
<h2>1.6 如何上传图片</h2>
<p>上传图片是在typora中，间接使用Picgo上传到图床的。</p>
<p>推荐使用Picgo core，而非Picgo App。后者需要在本地启动一个web server，相当于往本地一个图片上传接口提交。显然Picgo core通过进程直接调用，效果更好。</p>
<p>推荐Picgo core配置：</p>
<pre><code class="language-json">{
  &quot;picBed&quot;: {
    &quot;current&quot;: &quot;githubPlus&quot;,
    &quot;githubPlus&quot;: {
      &quot;branch&quot;: &quot;master&quot;,
      &quot;customUrl&quot;: &quot;https://cdn.jsdelivr.net/gh/rixingyike/images&quot;,
      &quot;origin&quot;: &quot;github&quot;,
      &quot;path&quot;: &quot;2021&quot;,
      &quot;repo&quot;: &quot;rixingyike/images&quot;,
      &quot;token&quot;: &quot;在github上获取&quot;
    },
    &quot;uploader&quot;: &quot;githubPlus&quot;,
    &quot;transformer&quot;: &quot;path&quot;
  },
  &quot;settings&quot;: {
    &quot;showUpdateTip&quot;: false,
    &quot;rename&quot;: false,
    &quot;autoRename&quot;: false,
    &quot;uploadNotification&quot;: true
  },
  &quot;picgoPlugins&quot;: {
    &quot;picgo-plugin-github-plus&quot;: true,
    &quot;picgo-plugin-super-prefix&quot;: true,
    &quot;picgo-plugin-compress&quot;: true,
    &quot;picgo-plugin-gitee&quot;: false,
    &quot;picgo-plugin-gitee-uploader&quot;: false
  },
  &quot;picgo-plugin-super-prefix&quot;: {
    &quot;prefixFormat&quot;: &quot;YYYYMMDDHHmmss&quot;
  },
  &quot;picgo-plugin-github-plus&quot;: {
    &quot;lastSync&quot;: &quot;2021-03-28 02:27:30&quot;
  },
  &quot;picgo-plugin-compress&quot;: {
    &quot;compress&quot;: &quot;imagemin&quot;,
    &quot;key&quot;: null,
    &quot;nameType&quot;: &quot;none&quot;
  }
}
</code></pre>
<p>对该配置的说明：</p>
<ul>
<li>jsdelivr是用于cdn加速的，加速图片被用户快速访问到。</li>
<li>&quot;picgo-plugin-super-prefix&quot;这个插件是用于上传前重命名文件的，因为重名文件不允许上传，会报一个“sha不支持”的错误。使用这个插件，须确保默认配置&quot;autoRename&quot;为false。</li>
<li>上传使用&quot;picgo-plugin-github-plus&quot;插件，该插件在上传上优先默认上传功能及其它插件。它同时支持上传github、gitee两个图床。注意，当启用它时，需要将&quot;picgo-plugin-gitee&quot;和&quot;picgo-plugin-gitee-uploader&quot;都置为false。</li>
</ul>
<h2>1.7 在vscode中定义markodwn代码版本</h2>
<p>有些内容是重复的，可以借助snippets功能快捷创建。共有两个配置需要完成。</p>
<p>现在假设我们需要一个与hugo对应的snippet，首先需要选择文件-&gt;用户片断，新建一个markdown.json文件：</p>
<pre><code>{
  &quot;new hugo post header&quot;: {
    &quot;prefix&quot;: &quot;hugo&quot;,
    &quot;body&quot;: [
      &quot;---&quot;,
      &quot;title: $TM_FILENAME_BASE&quot;,
      &quot;sidebar: false
date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;,
      &quot;---&quot;
    ]
  }
}
</code></pre>
<p>因为vscode默认没有这个模板，不像其它c、cpp片断，单是完成这一步好不好使。还需要在用户的settings.json文件中添加：</p>
<pre><code>&quot;[markdown]&quot;: {
    &quot;editor.formatOnSave&quot;: true,
    &quot;editor.renderWhitespace&quot;: &quot;all&quot;,
    &quot;editor.quickSuggestions&quot;: {
        &quot;other&quot;: true,
        &quot;comments&quot;: true,
        &quot;strings&quot;: true
    },
    &quot;editor.acceptSuggestionOnEnter&quot;: &quot;on&quot;
}
</code></pre>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[幽默逻辑学浅窥]]></title>
            <link>https://yishulun.com/./src/posts/2021/20.html</link>
            <guid>https://yishulun.com/./src/posts/2021/20.html</guid>
            <pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>幽默逻辑学浅窥</h1>
<blockquote>
<p>这是一篇不完备的笔记，后续还在继续研究它。</p>
</blockquote>
<h2>什么是幽默？</h2>
<p>幽默是一个外来词，最早见于民国时期1924年林语堂先生关于英文“Humour”一词的翻译，这个词的音标是[ˈhjuːmə(r)]，幽默属于按音直译。但后来林语堂又给了“幽默”这两个中文字一个合理的解释：“凡善于幽默的人，其诙谐必愈幽隐，而善于鉴赏幽默的人，其欣赏尤在内心静默的领会，大有不可与外人道之滋味”。</p>
<p>在作者看来，这一段半文言半白话文字描述的是人对幽默的感觉，就像荒诞、讽刺、滑稽等感受一样，它是人对这一艺术形式作用于人时感受的描述，并不算是幽默本身。</p>
<p>那么，什么是幽默？</p>
<p>方成在《谈幽默与讽刺》中说：“只可意会，不易言传”。</p>
<p>幽默真的难于言传吗？</p>
<p>未必。作者认为，幽默是一种被覆盖在人的形式逻辑之下的，<strong>一种可以自涵盖矛盾并能自圆其说的艺术存在</strong>。幽默所涵盖的事物不一定是真实存在的，但一定是符合人的形式逻辑规律的。用一句话概括，<strong>幽默是人利用人的形式逻辑缺陷而制造的一种艺术之美</strong>。</p>
<p>那么，幽默有什么有什么作用呢？</p>
<p>幽默可以让我们的言行传播的更远，幽默可以使人的心情舒展、缓解压力，幽默可以化解沟通中的尴尬，幽默可以利于学习。。。一句话，幽默的好处很多，这不言而喻。</p>
<p>那么，幽默能力是天生的吗？</p>
<p>虽然聪明的人更能制造幽默，更能给别人一种幽默的印象，但人制造幽默的能力并不是天生的，幽默的产生是有规律可循的。这本书旨在分析幽默产生的规律，总结制造幽默的技巧，以期在工作、学习中对读者有所裨益。</p>
<p>英国讽刺作家斯威夫特说：</p>
<p>“何为幽默，这绝非那批逻辑贩子所能描述。唯有天性在此发挥作用，训练、书本、技艺都无济于事。”</p>
<p>其实不是这样的，幽默的规律可以洞悉，幽默的技巧也可以通过练习获得。</p>
<p>（2021年1月28日）</p>
<h2>什么是形式逻辑?</h2>
<p>逻辑学是研究思维形式及规律的科学。和相对论一样，逻辑学也有狭义和广义之分，狭义逻辑学单指形式逻辑，是我们在写作和言语中普通使用的逻辑；广义逻辑学除了形式逻辑之外，还包括数理逻辑、辩证逻辑等。接下来我们要研究的只是狭义的形式逻辑，并且只注重它在幽默产生中是如何被人类利用的。</p>
<p>形式逻辑的思维活动主要包括：判断、推理、概念、论证等。</p>
<h3>直接判断和条件判断</h3>
<p>直接判断是在任何条件下成立，条件判断是在一定条件下成立。</p>
<p>先看判断，判断的一种公式定义是：S是P，看一个例子：</p>
<blockquote>
<p>有人作者给编辑部寄了一份书稿，并在信中说：“编辑先生，作者首先应该注重的是内容，只有油漆工才注重外表。如果你认为我的字迹很潦草的话，那么请你随便找一个人帮助誊写好了”。编辑看完回信说：“作者先生，编辑首先注意的是外表，然后才有可能体会内容。如果你认为外表美观的稿件难以书写，那么请你随便寄来空稿纸来，我们将请随便什么人在上面书写。”</p>
</blockquote>
<p>“作者首先应该注重的是内容”与“编辑首先注意的是外表”，都是S是P的句式，这是判断。判断用下定义的方式，描述一个事物是什么样子。这是无条件的判断句式，还是这个示例，接下来再看一下什么是有条件的判断句式。有条件判断的公式定义是：如果P，那么Q。</p>
<p>“如果你认为我的字迹很潦草的话，那么请你随便找一个人帮助誊写好了”与“如果你认为外表美观的稿件难以书写，那么请你随便寄来空稿纸来，我们将请随便什么人在上面书写”，这两句都是“如果P，那么Q”的条件复句句式，都属于条件判断逻辑。而这一段话本身，包括这一句话，却是推理逻辑。关于什么是推理逻辑，下一小节会讲。</p>
<h3>三段式推理</h3>
<p>什么是推理逻辑，看一个示例：</p>
<blockquote>
<p>作家狄更斯一次在河边钓鱼，一个陌生人走过来说：“怎么，你在钓鱼？”狄更斯说：“是的，今天真倒霉，一条也没有钓到。昨天我可是钓了15条嘞。”你知道我是干什么的吗？”陌生人说，“我是专门管理这条河的河管，这条河是禁止钓鱼的。”说着河管拿出发票本，开始给狄更斯开罚单。“你知道我是干什么人吗？”狄更斯不慌不忙地说，河管被问得摸不着头脑。狄更斯对他说：“我是一名作家，你不能罚我的款，因为虚构是我的职业。”</p>
</blockquote>
<p>这个示例可能是人虚构的，但没关系，幽默与真实无关。在这个示例中，包含了推理逻辑。推理逻辑的三段式公式定义为：</p>
<pre><code>所有M是P，
所有S是M，
那么，所有S也是P。
</code></pre>
<p>具体看一下这个示例，河管认为：</p>
<blockquote>
<p>凡是在这条河上钓鱼都是要被罚款的，</p>
<p>你在这条河上钓鱼，</p>
<p>所以你也要被罚款。</p>
</blockquote>
<p>这个描述符合上面的三段式定义。再看一下狄更斯是怎么想的：</p>
<blockquote>
<p>虚构是一个作家的职业，</p>
<p>我是一名作家，我说钓了15条鱼是虚构的，</p>
<p>所以你不能发我款。</p>
</blockquote>
<p>狄更斯所想也符合推理逻辑。</p>
<p>从这两个示例也给我们另一个启发，言语中的形式逻辑不一定要与语法合拍。在狄更斯钓鱼的示例中，推理逻辑是两个人的想法，这两个想法是通过他们的话传达给我们的，是我们基于共同的语言文化理解的，并不是他们直接表达的。</p>
<p>形式逻辑虽然有形式二字，但主要还在逻辑。</p>
<h3>概念</h3>
<p>概念与判断、推理一样，都是形式逻辑的基本思维形式，而概念是最基本的，没有概念，判断与推理都无法展开。概念是反映对象特有属性或本质特征的思维形式。任何概念都包括两个方面：内涵与外延，<strong>内涵是概念中对象的基本特征或特有属性</strong>，而外延是从另一个角度描述的，<strong>外延反映的是概念的适用范围，是具有概念描述的本质特征的对象</strong>。</p>
<p>举个例子，例如三角形的概念“在二维平面上由三条互不平行又不重合的直线构成的图形”，“三条直线互不平行又不重合”就是它的内涵，而“直角三角形、钝角三角形、锐角三角形”是符合内涵定义的对象，是概念外延中的一部分。</p>
<p>概念是客观世界在人的精神世界的反映，语言是我们用于表达概念的符号。有时候偷换概念可以产生幽默效果，看一个示例：</p>
<blockquote>
<p>庙里有一个老和尚独自抚养个婴儿长大，从小让他诵读佛经，不让他沾染半点红尘。小和尚长到了十八岁，不谙俗事。一天，老和尚带他下山，路上看到一只老虎。小和尚问：“这是什么？”老和尚说：“这是女人”。小和尚说：“女人这么可怕！”回来的路上又遇到一个妙龄女郎，小和尚目不转睛地盯着女郎看。老和尚说：“这是老虎，要吃人的，快走！”小和尚回到庙中不久就病了，茶饭不思。老和尚关心地问道：“徒儿，你哪里不舒服？”小和尚说：“师傅，我想老虎！”</p>
</blockquote>
<p>在这个示例中，老和尚把“老虎”与“女人”的概念对调了，对调的只是符号，老虎和女人在现实世界中却是客观存在的，他们的本质特征并不会因为符号改变而改变。现在回想一下，幽默是什么，<strong>是一种可以自涵盖矛盾并能自圆其说的艺术存在，是人利用人的形式逻辑缺陷而制造的一种艺术之美</strong>。偷换概念将两个符号对换，以达到形式逻辑下自涵盖矛盾并能自圆其说，这就是可以复用与练习的技巧。</p>
<h3>论证</h3>
<p>论证就是用已知为真的判断去判断另一个判断是否成立。例如反证法的公式是：</p>
<pre><code>如果非P，那么Q，
现在有非Q成立，
那么，非非P也成立。
</code></pre>
<p>举个反证法的例子：</p>
<blockquote>
<p>“你又不是我肚里的蛔虫，你怎么知道我想什么？”</p>
</blockquote>
<p>一般形容一个人了解另一个人，会说是他肚里的蛔虫。上面这句话用反问的手法，反驳对方了解自己。</p>
<h3>形式逻辑的基本规律</h3>
<p>同一律、矛盾律、充足律、排中律是四个基本的形式思维规律。利用这些规律可以达到自涵盖矛盾并能自圆其说。</p>
<p>以上，了解了形式思维中的主要活动及基本规律，还不能制造幽默。一方面具体的思维活动还需要细究，另一方面与语言相关的语法、修辞、认知语用等内容还需要了解。上面本文中提到的幽默示例，仅是为了说明逻辑概念，不涉及技巧。</p>
<p>欢迎提问。</p>
<p>（2021年1月29日）</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[关于近期微信小程序登陆鉴权机制修改的小说明]]></title>
            <link>https://yishulun.com/./src/posts/2021/10.html</link>
            <guid>https://yishulun.com/./src/posts/2021/10.html</guid>
            <pubDate>Wed, 21 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>关于近期微信小程序登陆鉴权机制修改的小说明</h1>
<p>最近微信小程序的登录鉴权机制又修改了，这是历史上第三次变动了，这次变动添加了新接口wx.getUserProfile，可以在用户任意单击事件后获取用户信息，并且每次都有弹窗提示。原open-type等于getUserInfo的button单击获取准备废弃了。</p>
<p><strong>有啥直接影响？</strong></p>
<p>1，如果你的代码原来是仅靠getUserInfo获取用户信息的，没有通过后端解密，对不起，代码不能正常工作了<br>
2，如果是通过后端解密的，没有关系，通过getUserInfo button先拉取加密信息，再到后端解密这种方式仍然有效</p>
<p>为了解释这个问题，我专门录制了一个不专业的视频。</p>
<p>此外，由于小程序项目工程的复杂性，这种复杂性有时候让我自己看以前的源码都会产生迷惑，为了避免读者产生这种困扰，我在下面视频中，还讲了如何使用充电平台的课程源码，及需要注意的事项。</p>
<p>由于视频是临时录制，就不上传视频号或其它网站了，感兴趣可以直接下载：</p>
<blockquote>
<p>关于微信登陆机制修改与源码使用的说明.mp4<br>
链接：<a href="https://pan.baidu.com/s/1vkYMM-GK6Fh1_DkCAhD_6Q">https://pan.baidu.com/s/1vkYMM-GK6Fh1_DkCAhD_6Q</a><br>
提取码：liyi<br>
复制这段内容后打开百度网盘手机App，操作更方便哦</p>
</blockquote>
<p>2021年4月21日</p>
<ul>
<li>视频中提到的相关课程及错误信息截图：</li>
</ul>
<p>课程链接：<a href="https://time.geekbang.org/course/detail/100052401-289862">https://time.geekbang.org/course/detail/100052401-289862</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/2021042121003420210421202300image-20210421202258167.png" alt="image-20210421202258167"></p>
<ul>
<li>
<p>登录接口调整官方说明：<a href="https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801?highLine=login">https://developers.weixin.qq.com/community/develop/doc/000cacfa20ce88df04cb468bc52801?highLine=login</a></p>
</li>
<li>
<p>新接口getUserProfile地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html</a></p>
</li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Go更了解程序员]]></title>
            <link>https://yishulun.com/./src/posts/2021/17.html</link>
            <guid>https://yishulun.com/./src/posts/2021/17.html</guid>
            <pubDate>Sun, 18 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Go更了解程序员</h1>
<p>程序员喜欢Go语言，是因为Go简单、易于上手、高效吗？不，是因为Go更了解程序员，它知道程序员喜欢什么，不喜欢什么。程序员口中的简单、易于上手，高效，那是对它的赞美。实际上如果你不是程序员，从零入门Go编程仍然是不太容易的。</p>
<p>而且更有可能出现的一种情况是，因为Go语言的极致简洁，反而让初学者觉得这太难了；而真正对编程感兴趣的人，会一下子喜欢上它，觉得太棒了。Go是一门语言，也是一面镜子，你适不适合做程序员，学习一下Go就知道了。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[typora软件也是可以定制的]]></title>
            <link>https://yishulun.com/./src/posts/2021/18.html</link>
            <guid>https://yishulun.com/./src/posts/2021/18.html</guid>
            <pubDate>Fri, 16 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>typora软件也是可以定制的</h1>
<p>最近一年的写作我基本都在使用typora软件，这个软件搞平台，干净、高效，我非常喜欢它。如果说缺点，它唯一的缺点就是不支持定制。</p>
<p>但是今天发现了一个扩展：</p>
<p><a href="https://github.com/hahaha28/typora-extensions">https://github.com/hahaha28/typora-extensions</a></p>
<p>以及使用npm安装的asar工具，及使用它的指令：</p>
<pre><code>安装asar
cnpm install -g asar

用 asar pack 打包
asar pack your-app app.asar

用 asar extract 反编译/解压
asar extract app.asar ./myapp
</code></pre>
<p>新世界仿佛被打开了，原来typora也是一个基于electron开发的软件，在使用它的时候完全感受不出来。我使用typora的时候，一直觉得它是原生软件。但是的样式支持定制，并且样式包也是前端html &amp; css文件，从这点我也应该想到，甚至这个有可能也是基于electron开发的，至少它是混合开发的。</p>
<pre><code>那么typora是开源软件吗？
很遗憾，虽然typora软件在github上有主页，但是它本身并不是一个开源软件。
</code></pre>
<p>虽然typora不开源，但是通过上面的方面，我们可以扩展它的UI，还可以插入代码，通过这种方式基本也可以达到扩展的目的。</p>
<blockquote>
<p>20221221更新：软件不身不开源，通用hack的方式尝试修改它，这个体验并不好。</p>
</blockquote>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[简单的逻辑学读书笔记]]></title>
            <link>https://yishulun.com/./src/posts/2021/34.html</link>
            <guid>https://yishulun.com/./src/posts/2021/34.html</guid>
            <pubDate>Thu, 15 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>《简单的逻辑学》读书笔记</h1>
<p>这本只有 150 页的小书，享誉世界，你读了之后可能觉得它不是那么的名副其实。但最好不要这样想，它毕竟只有150页，字数很少，语言又要通俗化，所以读了之后感觉有点不解渴，可能是正常现象。还有，如果你觉得它不过尔尔，可能你的逻辑能力确实不错，而这本书讲述的道理你大多都懂，同时它所鞭挞的非逻辑思维的恶习你却没有。</p>
<p>我在知乎上看到有人说，译者把书名译错了，不应该叫「简单的逻辑学」。其实这可能是一种意译，外加一点市场考量。</p>
<p>这本书主要分为五部分：</p>
<ul>
<li>学习逻辑学前的准备，主要先透露一些概念</li>
<li>逻辑学的基本原理，这里主要讲了狭义逻辑学中的四个规律：同一律、矛盾律、排中律和充足理由律（因果律）</li>
<li>逻辑思维的语言，这个就像数学里的公式，讲逻辑思维的行话怎么讲</li>
<li>非逻辑思维的根源，这主要从各个方面讲非逻辑思维问题存在的根源</li>
<li>非逻辑思维的主要形式，主要讲上一部分的具体表现形式</li>
</ul>
<p>第一部分是准备，因为有一些概念读者可能不了解，所以作者提前作了一些铺垫，但有一些铺垫并没有做足，我们在阅读中可以发现，后来有些概念并非属于常识，在第一部分中没有讲；第二部分就直接讲逻辑学的基本规律了；第三部分讲这些规律如何运用，就是逻辑学是语言学，所以主要是讲逻辑思维的语言如何表达；第四部分和第五部分，是对非逻辑思维的批判，在作者看来它们可能是有罪的，但在我看来，它们却是产生艺术之美的养料。</p>
<p>这本书篇幅很小，并且书边还留有许多印刷空白。正如作者在前言中所讲，它并不是作为教科书来写的，而是作为一本茶余饭后的散文小书来写的。因此，这本书阅读起来并不困难。</p>
<h2>狭义逻辑学的四辆马车</h2>
<p>但也因此，这本讲逻辑的书，整体看起来结构并不是十分富有逻辑。为什么这样讲，提一个点，有人读了以后问，排中律和同一律为什么是两个独立的律，它俩不是一样的吗？</p>
<p>这涉及概念空间的分布。就像我们给二维空间划定象限，它有四个象限。充足理由律、矛盾律、同一律和排中律，这四个基本规律，只有充足理由律（又叫因果律）是真正的逻辑规律，而其它三个规律都在尝试给概念划定界线，都是讲如何区别概念的规律，都在为因果律服务。并且这个区分，像二维平面的象限分布一样，是均衡的。下面我们看一下。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210415122351image-20210415122344890.png" alt="image-20210415122344890" style="zoom: 67%;" />
<p><strong>首先，同一律。<strong>它是区别</strong>一个概念与另一个概念</strong>的，它是将事物在概念上从大千世界中摘出来的一个规律。</p>
<p><strong>其次，排中律。<strong>事物的</strong>发展都是分不同阶段的，每个阶段有不同的状态</strong>，在同一律将事物在概念上从大千世界中摘出来以后，剩下的就是这个事物的许多状态了，一个事物不可能同时处于两个状态，排中律是区分事物处于哪个状态的。（此处莫拿量子力学反驳，量力子学人类还没有完完全全搞明白）</p>
<p><strong>最后，矛盾律。<strong>事情的发展不仅有多个阶段，有多个状态，并且在</strong>每个状态下，还有多个方面</strong>。矛盾律说，在某个时刻，在某一方面，对事物的描述不能是矛盾的，必须是一致的。即使在一个状态中，事情普通是具有多面性的，矛盾是普遍存在的。矛盾律是将事物从多个方面中区别开来的规律。</p>
<p>所以你看，从先众多中分享，再从多个状态中分享，最从从多个方面中分享，这三个规律干的都是同一件事，就是界定概念。界定概念，是为<strong>因果律</strong>，也就是<strong>充足理由率</strong>服务的。</p>
<h2>第一部分 逻辑思维的认知准备</h2>
<p>这一部分主要讲逻辑思维的认知准备，逻辑思维范围内的常识。</p>
<h3><strong>观念</strong></h3>
<p>1.3节有这么一句：</p>
<blockquote>
<p>正确观念忠实地反映了对象的客观秩序，错误观念是对现实世界的扭曲表达。</p>
</blockquote>
<p>这里用正确与错误不太贴切，用真假与虚假更为贴切：</p>
<blockquote>
<p>真实观念忠实地反映了对象的客观秩序，虚拟观念是对现实世界的扭曲表达。</p>
</blockquote>
<p>凡涉及到正确与错误，必然要有一个评判对错的标准，这是标准是因主体而异的。而真实和虚假，就仅涉及到精确度了。老老实实地客观反映，就是真实的；故意撒谎或认知不清，就是虚假的。</p>
<p>但人类本身可以感知世界的能力也是有限的，所以所谓真假，也是在当前条件下的一个精确度问题。</p>
<h3><strong>事物</strong></h3>
<p>1.2小节，有这一句：</p>
<blockquote>
<p>&quot;事实的客观实在有两种基本形式：事物和事件。&quot;</p>
</blockquote>
<p>事即是事，物即是物，在英文中有Thing这个单词，既有事情，又有东西的意思，所以这个地方翻译为「实物和事件」更为妥当，简单点讲就是「事物」。事实上在后面的文字中，作者多处以事物指代事情和实物。</p>
<h3><strong>有效沟通</strong></h3>
<p>1.7节说，有效沟通有这几点需要注意：</p>
<ol>
<li>不要想当然地认为听众知道你没有表达出来的意思</li>
<li>把句子讲完，使用完整的陈述句</li>
<li>不要把主观事实当成客观事实</li>
<li>了解听众</li>
</ol>
<p>这几点好像找不出内在的联系，完全是松散的。</p>
<p>还可以加上后面两节补充的要点：</p>
<ol>
<li>不要使用模糊和有歧义的语言</li>
<li>直接表达，不使用闪避式语言，例如一个不直陈目的的词汇「终极文案」</li>
</ol>
<p>事实上，后面两个经常被利用，用于创造幽默的艺术效果。</p>
<h3><strong>语言</strong></h3>
<p>1.5节说：</p>
<blockquote>
<p>人类认识有3部分组成：1，客观存在的事物；2，事物在大脑中的反映；3，人类创造的语言。</p>
</blockquote>
<p>1.6节中说：</p>
<blockquote>
<p>语言要忠实地表达客观事物，这是我们沟通的坚实基础。</p>
</blockquote>
<p>这里有一个延伸问题：语言、观念是怎么产生的？</p>
<p>并不一定是先有观念，也一一定是先有语言，它们应该像鸡与蛋一样，是协作进化的。有了语言，可以促进观念的形成，可以促进人类的学习；有了观念，语言才能有所指，才能在意识中有所附着。</p>
<p>那么在婴儿时期，观念与语言谁先产生呢？应该是观念。像牛头马面这样的观念，在现实世界中并不存在，只存在于语言和观念中，在第一个创造它的人有脑海中，一定先有了这个观念，继而发明了这个词汇。其它字词也是这样，像日、月、星、辰等，是先有了观念，再创造了表达它们的语言和文字。</p>
<p>这里又有一个延伸问题：既然人类有语言的历史有100万年，有文字的历史才1万年，那么在产生文字之前，人类，尤其是使用象形文字语言的民族，例如华夏民族，是怎么交流的呢？</p>
<h3>真相</h3>
<p>1.10节说：</p>
<blockquote>
<p>真相有两类：一类为本体真相，一类为逻辑真相。</p>
</blockquote>
<p>所谓逻辑真相，就是在现实世界中找不到影子，但是从逻辑上人类认为正确的事物。这也就是说，逻辑真相只存在于人的脑海中，它属于主观事实。</p>
<p>有人可能会说，逻辑真相只是还没有找到客观存在的对象，而主观事实却是不存在。</p>
<p>不对，找不到和不能找到，都是人类的判断，现在找不到，并不代表以后找不到，这里没有本质的区别。拿牛头马面来说，现在没有牛头马面，认为它只是主观事实，但如果以后真有牛头马面的动物出现了呢？</p>
<h3>主观事实</h3>
<p>1.4节中说，我们的大脑中有一个猫的观念，语言中有一个「猫」的词汇，现实中有一个猫的实体。猫是客观事实。</p>
<p>而「牛头马面」只存在于我们的脑海中，在现实中并不存在，所以它只是一个主观事实。</p>
<p>所以，在这里，在逻辑学中，主观事实与客观事实都被承认为事实。事实上，由于人类感知大官的受限，我们接触到的客观事实也是一定程度上的主观映射，并不存在真正的100%的「客观事实」，本质上主观事实和客观事实都是一样的。</p>
<p>主观事实与客观事实的区别在于，前者在现实中没有对应的对象，后者有。</p>
<p>第二部分 逻辑思维的基本规律<br>
第三部分 逻辑思维使用的语言<br>
第四部分 非逻辑思维的根源<br>
第五部分 非逻辑思维的主要形式</p>
<p>（这就些）</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[伟大的人都是在用生命吟唱]]></title>
            <link>https://yishulun.com/./src/posts/2021/13.html</link>
            <guid>https://yishulun.com/./src/posts/2021/13.html</guid>
            <pubDate>Wed, 14 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>伟大的人都是在用生命吟唱</h1>
<p>昨天听完张爱玲传就有这个感觉，今天听完杜甫传，感觉更强烈了。</p>
<p>不知道是所有伟大的人都在用生命在吟唱，还是所有生命都非常伟大，只是我们不了解；如果深入了解，每个生命都可敬可叹，而在历史长河中，只有少数幸运的人，才得以星光璀璨。</p>
<p>可能不是这样的。</p>
<p>或许每个人在历史长河中，都像那河床上的鹅卵石，虽然每个人都可能最终被磨圆了，但大部分人都是普普通通的，只有极个别的人才纯粹剔透，算得上玉石佳品。</p>
<p>杜甫就是这样的一个人。像杜甫、李白这样的人，起初他们在世时，其实并不耀眼，仅是被所经之地的少数人知晓。杜甫被尊为诗圣，李白被尊为诗仙，这是他们亡故以后的事。</p>
<p>杜甫在世时，半世漂泊流离，仿佛苦难是他源源不断创作的灵感，不可或缺；如果让今天的人来选择，给你身后诗圣的名号，请你享受当下穷困潦倒之苦，恐怕没人愿意。</p>
<p>杜甫晚年生活艰难，搞些草药在街上售卖，这一年在江南遇到了李龟年，李龟年和他一样，也在街上讨生活。于是就有了杜甫那一篇名作《江南逢李龟年》：</p>
<blockquote>
<p>岐王宅里寻常见，崔九堂前几度闻。<br/><br>
正是江南好风景，落花时节又逢君。</p>
</blockquote>
<p>以前都是在王公贵族府里才能见到的，这么一个才华横溢的人（李龟年），如今却沦落到了街头卖艺的地步。瞧这江南的风景，是多好啊，多年以后，在这样的落花时节，又见到多年老友，不知道以后还有没有时间再见。</p>
<p>这一年是公元770年，同年此后不久杜甫就去世了。这首诗语句平淡无奇，但却饱含辛酸，尤其是最后两句，有「欲说还休，却道天凉好个秋」的意味。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210414151041d63a48fcb43262878a7aa0fa8800b18.jpg" style="zoom:33%;" />
<p>我听了这本书以后，感叹很多，但又不知道从哪里写起。或许只能发一些「像杜甫、李白这样的人，他们一生就是在生命吟唱」这样的感慨吧。</p>
<p>兹涂诗一首，以纪念之：</p>
<p><strong>听《杜甫传》有感</strong></p>
<blockquote>
<p>一生飘泊苦，万世奉为神。<br/><br>
都说人传艺，谁云艺立人?</p>
</blockquote>
<p>在信手涂这首小诗时，我突然发现，或许不是杜甫用生命创造了千年传颂的诗文艺术，而是诗文的艺术之美，撑住了杜甫支离破碎的一生。</p>
<p>所以，艺术是帮助人化解苦难和悲痛的。</p>
<p>2021年4月14日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[关于如何选题终于找到了答案]]></title>
            <link>https://yishulun.com/./src/posts/2021/09.html</link>
            <guid>https://yishulun.com/./src/posts/2021/09.html</guid>
            <pubDate>Tue, 13 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>关于如何选题终于找到了答案</h1>
<p>一直以来有这样一个疑惑：</p>
<p>究竟我们应该从自己的目标出发选题，还是应该从大众需要的角度出发选题？换言之，我们应该坚持自己，还是追逐当下热点？</p>
<p>今天突然想表白了。这两个方向并不是矛盾的，我们应该从价值的洼地出发做选择。这两个方向，它们只是一个问题的两个方面，当我们从价值洼地出发做选择时，矛盾便不存在了。</p>
<p>什么是价值洼地，如何理解？假设我们的作品创作出来了，与当下社会人文的现状，有多大的差距，这个洼地就有多深。有时候这个问题还可以表述为，选择最难的事，或者选择大众误解最深的事，或者选择社会中最应该被纠正的事，等等，这些都些从价值洼地选择的另一种角度的描述。</p>
<p>那么，我们为什么要从价值洼地做选择呢？因为从这个地方选择，最经济，单位精力能够创造的艺术美最大。</p>
<p>从哲学上讲，人活着的意义就是「走着瞧」，就是不断创造「自己」，「自己」是不断被创造出来的。创造艺术美，给别人带来欢乐和治愈，这本身就是功德。</p>
<p>像《吐槽大会》的脱口秀学员，还有被贬黄州的苏轼，他们都是在以不同方式，创造不同形式的艺术之美。如果人是由上帝创造出来的，上帝是存在的话，那么上帝已经给人设定了最佳的奖励方式。这个方式就是，人无论是感受艺术美，还是创造艺术美，人都会获得愉悦。</p>
<p>2021年4月13日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[你的顾客需要一个好故事]]></title>
            <link>https://yishulun.com/./src/posts/2021/12.html</link>
            <guid>https://yishulun.com/./src/posts/2021/12.html</guid>
            <pubDate>Tue, 13 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>你的顾客需要一个好故事</h1>
<p>事实上并非只有商家的顾客才需要这样一个好故事，包括我自己，手艺人，发电员的读者，也需要一个好故事。这个故事不是常规意义上的故事，事实上它是一个让读者成为主角，充满艺术之美的故事。</p>
<p>如何创造这样的一个好故事呢？有七个关键因素，书中作者称之为SB-7，这是一个很特别，但在中文环境确实又很容易记住的简称。</p>
<p>SB-7:</p>
<ol>
<li>一个主角</li>
<li>遇到一个麻烦</li>
<li>出现一个向导</li>
<li>向导手里有一个方案</li>
<li>召唤主角，开始行动吧</li>
<li>避免主角失败</li>
<li>麻烦得到解决，获得成功</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210413131937314ab4b3a16a82aec6946252689a85f.jpg" style="zoom: 50%;" />]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[《张爱玲传》值得一读]]></title>
            <link>https://yishulun.com/./src/posts/2021/16.html</link>
            <guid>https://yishulun.com/./src/posts/2021/16.html</guid>
            <pubDate>Tue, 13 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>《张爱玲传》值得一读</h1>
<p>在听这本书之前，我一直对张爱玲有误解。</p>
<p>我一直以为张爱玲是一位成长在深闺中、多愁善感的大小姐，笔下作品多男女情爱之事。听了以后，我觉得张爱玲是一个英雄，一个灵魂纯粹的英雄，一个众多男子都未能及她的人生战士。</p>
<p>张在4岁的时候，她妈妈就离开了她，她与继母生活中一起。17岁有一天她去看望生母，归家后继母怪她出门未告，打了她一巴掌。张觉得很委屈，与继母撕打，被父亲看到，张父抓住她的头发，往墙上撞，后又将她关在屋里，不准出来，即使张生病了也不给她看医生。</p>
<p>张细心研究家里的岗哨，终于在半年后，找准换岗间隙，扶着墙逃了出来。</p>
<p>这个经历，肯定对张的影响非常非常大。个人感觉，她性格中既敏感又自卑的部分，与这段家庭经历不无关系。后来她到美国后，与秃顶老头赖雅恋爱结婚，他们婚后不久，赖雅就中风了，从此赖雅成为张爱玲中老年岁月中十几年的压力和累赘。</p>
<p>张肯定值得更好的伴侣，但她从来没有挑剔别人，甚至以为自己可以挑剔别人，在爱情这件事上，她毫不世俗。包括她与胡兰成的恋情也是，她甚至从来不觉得胡配不上她，她只是惧怕。有一次，她和胡在街上散步时，胡说：“你身材这么高”，敏感的她，一下捕捉到了胡的自卑，她一下子与胡坠入了爱河。</p>
<p>她内心太自卑了，当她感觉到这段感悟有一丝安全时，她封闭的城门却打开了。后来在美国，她与秃顶老头赖雅估计也是相同的遭遇。或许赖雅也在她面前表现出了自卑。</p>
<p>很奇怪，一个不缺少自卑的人，却极易沦陷于他人的自卑。</p>
<p>这是关于张的爱情，另外还有一个关于张的谋生，听了之后也很感触。一个人无论多么富有才华，如果生不逢世，时间、究竟不对，即使有名气，也会受穷受挫。</p>
<p>张在上海成名以后，后来到了美国，那时候她已经是一位在中国香港、台湾富有名气的作家了，但她当时为了生活，还不得不挤在贫民窟里，不得不申请作家村的援助。</p>
<p>早年她拒绝过为港星写剧本，后来在这种宭迫的生活下，也不得不接受剧本撰写的邀约。这里至少说明两点：</p>
<ol>
<li>张不擅长经营自己</li>
<li>张在创作上非常有自己的主张，她有一些自己坚持的东西</li>
</ol>
<p>还有值得一提的是，张纠结20年，生前都未曾出版的小说《小团圆》：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/2021041318441720210413184417.png" style="zoom: 67%;" />
<p>是她对爱情美满的一种企图自圆。她喜欢美，她想让自己的爱情美满一些，希望从中找寻出一些意义，但是直至故去，都未能如愿。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/2021041318471669de29b9da6c70713238e276739497f.jpg" style="zoom: 33%;" />
<p>2021年4月13日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[夜晚跳广场舞归来有感]]></title>
            <link>https://yishulun.com/./src/posts/2021/15.html</link>
            <guid>https://yishulun.com/./src/posts/2021/15.html</guid>
            <pubDate>Fri, 09 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>夜晚跳广场舞归来有感</h1>
<blockquote>
<p>狗来人避让，车走路通行。<br>
广场舞喧天，孑然背手归。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/2021041415413920210414154139.png" alt=""></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[关于找不到wx-components文件的说明]]></title>
            <link>https://yishulun.com/./src/posts/2021/11.html</link>
            <guid>https://yishulun.com/./src/posts/2021/11.html</guid>
            <pubDate>Tue, 06 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>关于找不到wx-components文件的说明</h1>
<p>这是在充电平台上小程序课程下的一个读者问题：</p>
<blockquote>
<p>老师，关于在特殊情况下需要修改微信自带组件和weui组件样式，现在课程上的方法无法找到对应得样式了。</p>
</blockquote>
<p>这个问题似曾相识啊</p>
<p>我在我的windows PC上试了一下，通过搜索wx-components文件名称，确实找不到默认的样式文件了。</p>
<p>可能更新微信开发者工具后，被官方限制了，毕竟这只是一个hack方法。</p>
<p>文件找不到，样式也被修改了吗？于是旧老办法，修改progress组件的样式：</p>
<pre><code>.progress-box{
  width: 80%;
  margin:50px 20px;
}
.wx-progress-inner-bar {
  border-radius: 5px;
}
</code></pre>
<p>运行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/2021040617442220210406174421.png" alt=""></p>
<p>哼，只是文件被藏起来了。毕竟重构样式名称可能涉及范围太大，所以官方并没有这样做。</p>
<p>本地搜索不到wx-components.css，没关系。网上有：<a href="https://gist.github.com/imoldman/b0f3332cb5713000e8fdef14b97080ab%E3%80%82%E4%BB%8E%E6%B2%A1%E6%9C%89%E6%9B%B4%E6%96%B0%E7%9A%84%E6%97%A7%E6%9C%BA%E5%99%A8%E4%B8%8A%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E3%80%82Mac%E6%B2%A1%E6%9C%89%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%9B%B4%E6%96%B0%E5%90%8E%E4%B9%9F%E6%89%BE%E4%B8%8D%E5%88%B0%E4%BA%86%E3%80%82">https://gist.github.com/imoldman/b0f3332cb5713000e8fdef14b97080ab。从没有更新的旧机器上也可以找到。Mac没有测试，可能更新后也找不到了。</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[薇娅的成长之路]]></title>
            <link>https://yishulun.com/./src/posts/2021/14.html</link>
            <guid>https://yishulun.com/./src/posts/2021/14.html</guid>
            <pubDate>Thu, 01 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>薇娅的成长之路</h1>
<p>以下文字受启发于《薇娅：人生是用来改变的》。我是通过攀登读书了解这本书的。</p>
<p>原来我也以为薇娅是在直播界横空出世的，其实不是的。早年她在动物园做站版模特卖换季服装，当时的经历就锻造了今天的好口才、快反应及持久工作的能力，当时她是在拥挤的店里要站一天连续工作，并且在冬天里只穿很少的春夏衣服。</p>
<p>她对市场很敏感。当她看到一个女孩到她店里试完衣服不买，而是到淘宝上下单的时候，她就萌生了开网店的想法。</p>
<p>她很有韧性。放弃线下成功的服装店，杀入线上网店，因为不懂运营，经营效果不好。但却一直没有放弃。<br>
她还有不错的延迟满足感。淘宝直播刚起步的时候，小二找到她，想让她直播，当时只是能挂店铺链接，还不能直接卖货，并且直播没有直接的报酬，她也答应了。</p>
<p>薇娅身材保持的好，拍照片好看，做网店的时候就帮助其它店铺拍照片，做过淘女郎。这也是后来淘宝小二找她直播的原因。还有，她开始开的网店，就是因为一她拍的照片太美，而上了双11的推荐频道，从而带来了流量。包括刚步入社会时，她可以在店里做站版模特，在2002年上半天班就可以拿到1800块钱，这与她的天生丽质也是分不开的。这是她天生的资源。</p>
<p>薇娅的成功，是整合了个人资质，个人喜受，个人努力和社会需要的一种必然。在快速发展的今天，每个人都有机会，但并不是每个人都能抓住机会。</p>
<p>访谈中攀登又提到，子有四绝：勿意、勿必、勿固、勿我。这一点在薇娅身上也得到了体现。优秀的人总是相似的，总是有相似的优秀品质，子四绝便是。</p>
<p>这个访谈中还提到一个古老的话题，我是谁？</p>
<p>这个哲学问题，貌似已经有答案了，就是「走着瞧」。我们最终是谁，完全是我们自己活出来的，人生活着的意义就在于不断创造新的自己。</p>
<p>这个访谈中还提到另一本书《混乱》，书中有箴言：「无论命运将你抛到任何地方，只需要就地展开，做自己力所能及的事情」。这是一种「随地生长」的精神，这个精神在单身家庭成长的薇娅身上也有强烈的体现。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[插入广告的正确姿势]]></title>
            <link>https://yishulun.com/./src/posts/2021/2.html</link>
            <guid>https://yishulun.com/./src/posts/2021/2.html</guid>
            <pubDate>Wed, 31 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>插入广告的正确姿势</h1>
<p>突然发现，原来在某乎这样插入广告就可以。某乎的这个广告过滤机制，应该是机器操纵的，它知道人一般会怎么样去插入广告。最好的公众号的插入方式，都可以统一都改成这样的方式，单独放一个链接，在上面放上引语。不要直接写「关注公众号」这样的字词。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210331123513image-20210331123507005.png" alt="image-20210331123507005" style="zoom:33%;" />]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[关于录制视频直人更多出镜的想法]]></title>
            <link>https://yishulun.com/./src/posts/2021/4.html</link>
            <guid>https://yishulun.com/./src/posts/2021/4.html</guid>
            <pubDate>Wed, 31 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>关于录制视频直人更多出镜的想法</h1>
<p>视频录制应该真人出镜，并且应该争取在大多数情况下都是真人正面全景出镜。个别的时间点，我们需要展示具体的文字或图片的时候，可以在视频剪辑的时候插入画中画。</p>
<p>必须的时候，可能需要购买一个高清摄像头，放在电视机上面，并且把它作为主要的视频录制设备。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[生活如何艺术化与视频录制]]></title>
            <link>https://yishulun.com/./src/posts/2021/5.html</link>
            <guid>https://yishulun.com/./src/posts/2021/5.html</guid>
            <pubDate>Wed, 31 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>生活如何艺术化与视频录制</h1>
<p>在视频号上看到这个视频，突然有了想法，主要是两点：</p>
<ol>
<li>个人视频要露脸、露人，展示自己，在这个视频中，即使是展示编曲过程，小作者也是出镜的</li>
<li>关于艺术生活化，其实艺术可以渗透到生活中的每个角落，并不一定非要以目前的演唱会、博物馆这样的形式存在</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210331131239image-20210331131237755.png" alt="image-20210331131237755" style="zoom:33%;" />
<p>视频号无法提供二维码，也没有链接，感兴趣可以搜索一下。b站也有。这种艺术形式，可以形成高低差，有很大的传播效应。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[忽然想起一个第一人称写作技巧]]></title>
            <link>https://yishulun.com/./src/posts/2021/6.html</link>
            <guid>https://yishulun.com/./src/posts/2021/6.html</guid>
            <pubDate>Tue, 30 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>忽然想起一个第一人称写作技巧</h1>
<p>为了说明问题，先引用一段余秋雨《文化苦旅》《阳关雪》中的几段话：</p>
<blockquote>
<p>一走出小小的县城，便是沙漠。除了茫茫一片雪白，什么也没有，连一个皱折也找不到。在别地赶路，总要每一段为自己找一个目标，盯着一棵树，赶过去，然后再盯着一块石头，赶过去。在这里，睁疼了眼也看不见一个目标，哪怕是一片枯叶，一个黑点。于是，只好抬起头来看天。从未见过这样完整的天，一点儿也没有被吞食，边沿全是挺展展的，紧扎扎地把大地罩了个严实。有这样的地，天才叫天。有这样的天，地才叫地。在这样的天地中独个儿行走，侏儒也变成了巨人。在这样的天地中独个儿行走，巨人也变成了侏儒。</p>
<p>天竟晴了，风也停了，阳光很好。没想到沙漠中的雪化得这样快，才片刻，地上已见斑斑沙底，却不见湿痕。</p>
<p>天边渐渐飘出几缕烟迹，并不动，却在加深，疑惑半晌，才发现，那是刚刚化雪的山脊。</p>
<p>地上的凹凸已成了一种令人惊骇的铺陈，只可能有一种理解：那全是远年的坟堆。</p>
</blockquote>
<p>在技巧上有两点值得说一下，一句是“在这样的天地中独个儿行走，侏儒也变成了巨人。在这样的天地中独个儿行走，巨人也变成了侏儒”，这种对比式排句很有意思。</p>
<p>但它还不是高级的技巧。下面这句“<strong>天边渐渐飘出几缕烟迹，并不动，却在加深，疑惑半晌，才发现，那是刚刚化雪的山脊</strong>”，这里用了第一人称，直接写了作者的主观感受，“天边渐渐飘出几缕烟迹”，烟迹就是作者的主观观受。作者知道这其实不是烟迹，但作者在用第一人称视角，在向我们再现他当时的感受。</p>
<p>在写技术类书籍时，有时候实战项目进行到某一阶段的时候，难免会出一些问题。虽然我们知道问题是怎么回事，但是最好当时不要说破，而是像余老师一样，只写当时的感受，让读者感同身受。最后再揭露答案。</p>
<p>与时俱进，用发展的眼光，用行走的视角写科普文字，写教育文学。感谢余老师，激发我的创作灵感。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[巴黎是如何成为时尚之都的]]></title>
            <link>https://yishulun.com/./src/posts/2021/1.html</link>
            <guid>https://yishulun.com/./src/posts/2021/1.html</guid>
            <pubDate>Mon, 29 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>巴黎是如何成为时尚之都的</h1>
<p>巴黎，用100年的时间，由一个街上满是泥泞，没人愿意走路，一个夜间有野狼出没的城市，变成了今天的世界时尚之都。</p>
<p>时髦，这个词的含义在法国的字典里就是外国人来到巴黎学习怎么穿衣服。这个定义太过分了。</p>
<p>这个巨变是怎么产生的呢？每年很多人去巴黎旅游的，如果只是在百货商场打个卡，在博物馆打个卡，而不了解巴黎这座城市成长历史的话，根本就不会知道林荫大道、孚日广场、塞纳河老桥？圣路易岛，还有五苏老马车的魅力。</p>
<p>这个转变，在我看来在于两个字：连接。打造公共场所，让人与人之间的连接更加频繁；推倒城市的城墙，和人际之间看不见的城墙，让人与人之间的链接没有阻碍。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[关于价值的判定]]></title>
            <link>https://yishulun.com/./src/posts/2021/3.html</link>
            <guid>https://yishulun.com/./src/posts/2021/3.html</guid>
            <pubDate>Sun, 28 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>关于价值的判定</h1>
<p>我们是如何判定一件事的价值的呢？靠知识与逻辑经验？靠经验？还是靠直觉？如果没有经验，又不具备相关的知识，一般我们是很难判定一件事的价值的。所以一般人很难突破自己，主要是因为不具备价值界定与判断的能力。试想一下，如果将时光倒回10年，你会做什么事？<br>
有人说，我会在北京回龙观买房。但是当时，你可能也知道这个房源信息，当时没有行动，主要原因在于你当时无法界定这件事的价值。<br>
有的人靠直觉，即使他没有相关经验，也无法从知识与逻辑上证明某件事能成，但是就坚定不移地做了。有时候这种直觉又被称为商业嗅觉。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[提问的艺术]]></title>
            <link>https://yishulun.com/./src/posts/2021/30.html</link>
            <guid>https://yishulun.com/./src/posts/2021/30.html</guid>
            <pubDate>Fri, 26 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>提问的艺术</h1>
<p>这篇内容主要写给初学者，高手或老手可以略过了。</p>
<p>初学者有两个问题很显著：</p>
<ol>
<li>不会提问</li>
<li>不会搜索</li>
</ol>
<h2><strong>先说搜索</strong></h2>
<p>搜索一定要选择谷歌，不要用其它的搜索引擎。如果所在地区访问不了谷歌，可以安装谷歌浏览器，然后安装一个名称为「谷歌访问助手」的插件。搜索一下，网上有。</p>
<p>有了工具以后，具体查询的时候要注意用合适的关键词。基本原则是将我们自己问题中的关键字拿出来，输入进去，如果结果不理想，可以稍微变换一下关键字。选择关键字，主要靠经验，用的多了自然就准确了。</p>
<h2><strong>再说提问</strong></h2>
<p>这比搜索更重要。</p>
<p>很多新人不会提问。最近有一位读者在微信上私信问我问题，他上来只发了一句话：</p>
<blockquote>
<p>老师请教个问题</p>
</blockquote>
<p>然后就发了一个截图，截图中也没有错误信息，其它什么内容都没了。这件事给我造成了很大阴影，本来我就不喜欢微信这样断断续续的聊天，我觉得这种沟通方式很浪费时间。</p>
<p>关于提问的艺术，有个老外写了一篇「提问圣经」，国人翻译了中文版，见这里：<a href="https://learnku.com/docs/guide/smart-questions/2032%E3%80%82">https://learnku.com/docs/guide/smart-questions/2032。</a></p>
<p>这篇内容写的很好，但内容很多，我提炼一下，有以下几点特别值得注意：</p>
<ol>
<li>在提问之前，先尝试谷歌一下。除了谷歌，还可以尝试翻一下软件的FAQ文档或issue列表。</li>
<li>好问题本来就具有价值，所以要尽力提出有<strong>价值的问题</strong>。什么是无价值问题？那些通过搜索引擎查一查就能得到的答案，就是无价值或低价值问题。</li>
<li>如果是代码问题，在请教别人之前，一定要准备一个「最小测试样例」，并且要告诉别人怎么运行你的代码。这一点很重要，特别当问题是bug相关的时候。你想要别人帮你找出bug，就要把代码共享出来。如果是微信小程序，最好的方式是提供代码链接。其它技术或语言，可以提供github仓库链接。</li>
<li>在描述问题时，要尽量把问题和问题存在的基础描述清楚。写明白期望是什么，现象是什么。如果是调用了接口，怀疑调用代码有问题，一定要把接口文档或说明附上。总之，要保证用于解决问题的信息是对称的，因为别人不是你，不可能知道你脑袋里有什么。</li>
<li>基本的社交礼貌要具备。人与人都是平等的，不需要低三下四，但也绝不能认为理所当然。别人没有义务一定帮你，有可能是不了解，有可能是没有时间，都有可能。但要有自尊，不能因为别人不理你就情绪失控。</li>
</ol>
<p>原文有这么一句话对我印象深刻：</p>
<blockquote>
<p>我们回答问题的风格是为了适应那些真正对此有兴趣并愿意主动参与与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得到的最好的事情上不再那么犀利。</p>
</blockquote>
<p>有这种态度的人，是真正的程序员。他们就像穿山甲，因为要穿山，所以练就了一副硬壳，没有了这副装备就什么也不是了。</p>
<p>2021年3月15日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[如何做好一场技术演讲学习笔记]]></title>
            <link>https://yishulun.com/./src/posts/2021/29.html</link>
            <guid>https://yishulun.com/./src/posts/2021/29.html</guid>
            <pubDate>Thu, 25 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>如何做好一场技术演讲学习笔记</h1>
<h2>| 演讲之前需要做好哪些准备？现场由听众提需求吧</h2>
<p><strong>Stay hungry, Stay foolish！</strong></p>
<p>没有想到，流传已久的乔布斯斯坦福毕业演讲，却是他精心准备至少好几天的结果，尽管他当时已经是一位富有现场演讲经验的老手了。</p>
<p>这篇充电平台创立之初发布的小专栏，确实非常非常有价值。题目虽然是《如何做好一篇技术演讲》，但是却也适用于写作等其它需要做内容输出的地方。</p>
<p>概括来讲，这篇内容主要讲了三部分：</p>
<ol>
<li>精心准备内容；</li>
<li>做刻意练习，精益求精；</li>
<li>调整好心理状态。</li>
</ol>
<p>在第一部分，作者还拿研发的工程环节与演讲做了类比，在公司研发软件，软件上线之前会有需求评审、研发、提测、回归测试等多个环节，演讲也是如此，如果把最终演讲比作软件上线，那上线之前是有许多事要做的。这个类比很形象，程序员看了马上就会心领神会，会心一笑。</p>
<p>但是针对技术演讲，我还想做一点适用于自己的修改，关于第一部分，我设想的理想环节是这样的：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210314204207.png" alt="image-20210314204206247" style="zoom:67%;" />
<ol>
<li>我是谁。自我介绍，我是谁，简单有礼貌。</li>
<li>讲什么。今天准备分享什么？它与前后节分享，有什么逻辑关系？特别是与上一节的分享有什么关系？</li>
<li>是什么。现场做一个软件演示，让听众直接感受到软件的运行效果。</li>
<li>啥原理。开始启发听众，它是怎么工作的，它的工作机制是怎么样的，它背后的工作原理是什么样子的，以此引导听众思考，激发听众的好奇心。</li>
<li>讲代码。打开代码，细致讲解代码是如何编写的，是如何工作的，解释给程序员听。</li>
<li>撸代码。既然了解了工作原理，接下来我们就开始做一个小实验吧。现场提出一个小需求，现场写代码，演示如何完成，最后展示劳动成果。当然了，如果这个需求是由现场听众提出来的，效果会更好。</li>
<li>咋运行。告诉听众，如果他拿了这套代码，如何在本地运行起来，有哪些需要注意的。</li>
<li>有啥用。和读者畅谈一下，这个软件的作用和意义是什么，未来它能干什么事情，我们对它还能做什么修改？</li>
<li>做总结。对今天的主题再做一个回顾，总结一下本次演讲的核心价值。如果有可能，对下期的内容做一个预告。</li>
</ol>
<p>你觉得怎么样？对我提出的<strong>现场由听众提需求，现场编码展示</strong>这个设计，是不是觉得很刺激，很fashion？只要能完成这个环节，我相信每个程序员听众都会抑制不了马上躬身编码的冲动的。</p>
<h2>| 怎样有效避免演讲前的紧张情绪？演讲四要素和一核三言</h2>
<p>先分享一个我自己的真实的小故事。我在充电平台录课，最初几次每次来了以后，我都不上楼，不进录音棚，都是先在楼下徘徊近一个小时再上去。干嘛呢？就是备稿，我要把那个逐字稿，一个字一个字的反复默诵，反复推敲和修改，直到我完全对它们轻车熟路。而在此之前，我已经在出租车上默诵了近一个小时了。即便如此，我对自己的录课表现仍然不满意，我觉得还是能看出很多紧张情绪，还有很多可以改进的地方。但对我这个一向不爱说话的人来讲，已经是很大的进步了。</p>
<p>这一篇是继《如何做好一场技术演讲》第一篇之后的，一个关于克服演讲前紧张情绪的一个内容小分支。</p>
<p>概括一下，主要讲了两方面内容：一、对演讲建立客观认知，二、客观地对待演讲四要素。做好对这两部分内容的了解，再加一点点刻意练习，就可以克服紧张心理了。</p>
<h3>1，对演讲建立客观认知</h3>
<p>这里有两个小分支必须明确。</p>
<h4>1.1，紧张是人源自基因的天性</h4>
<p>许多演讲大佬也会紧张，比如乔布斯在参加斯坦福毕业演讲之前，前几天仍在紧张地备稿，为此甚至肠胃因紧张翻江倒海。还有英国伟大的首相丘吉尔，在演讲前，还在车里自言自语地备稿。</p>
<p>了解这些伟大人物他们也会紧张，他们成名以后也仍然会积极的备稿，对降低我们的紧张情绪，在认知上是十分有效的。如果不经过刻意练习，我们大多数人的演讲水平都是差不多的。</p>
<h4>1.2，演讲前三分钟很关键</h4>
<p>如果能够平稳的度过正式演讲的前三分钟，接下来我们基本就不会紧张了。紧张不但是一种情绪，它也会伴随着我们体内血液流动加快、呼吸急促等在内许多生命特征并发出来。</p>
<p>克服了最初的三分钟，之后就平稳了。在开始的这三分钟，我们可以用一个风趣幽默的自我介绍，加一段背得滚瓜烂熟的课程介绍，再加一点其它内容，将这三分钟「对付」过去。</p>
<h3>2、客观的对待演讲四要素</h3>
<p>演讲四要素包括：听众、内容、道具和演讲者自己。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210314204440.png" alt="image-20210314204439176" style="zoom:33%;" />
<h4>2.1，先说听众</h4>
<p>技术演讲，如果三分钟不能吸引听众的兴趣，可能听众马上就要拿起手机翻看朋友圈了。在线下脱口秀现场，一个脱口秀演员，如果30秒不能让观众发笑，可能大家都要吹口哨了。</p>
<p>要充分了解我们的群众是谁，他们普遍有什么需求？如果我们的听众是聋哑人，那么我们用声音演讲还合适吗，想来我们更应该用手语。</p>
<p>想想看如果我们面对的是刚入学的大学生，或者我们面对的是一帮企事业领导，我们的演讲会怎么样，不同的听众对象都会影响我们演讲的内容以及所用的口吻。</p>
<p>简单对听众做一些了解，就可以让我们现场更加胸有成竹。如果我们的听众都是小学生，我们又有什么好紧张的呢？</p>
<h4>2.2，再说内容</h4>
<p>内容很重要，有三点值得注意。</p>
<h5>2.2.1，一核三点</h5>
<p>听众在听完我们的演讲以后，<strong>我们希望他用怎样的一句话，向别人介绍我们这场演讲呢？</strong></p>
<p>这句话就是我们本次演讲的核心价值。核心价值是我们克服心理紧张的底气。</p>
<p>有了这个核心以后，我们再拓展出三个问题：</p>
<p>第1个，它的原理是什么？为什么可以做到这样？</p>
<p>第2个，它在我们生产生活中，有什么用处和作用？这一点可以明确听众如何省时省钱的价值，可以促进他们给我们打好评。</p>
<p>第3点，我们是怎么做到的？如果听众也想使用，他们应该怎么做？</p>
<p>将这三个点，还有一句话核心讲清楚，相信演讲就已经成功了一大半了。这就是<strong>一核三点</strong>。</p>
<h5>2.2.2，PPT 记住要多图少字</h5>
<p>PPT切忌堆砌很多文字，要多图少字，一图胜千言。</p>
<h4>2.3，道具</h4>
<p>包括PPT在内，舞台、提词器这些都可以算作道具。</p>
<h4>2.4，最后说一下演讲者</h4>
<p>最重要的一条，就是要多做正式演讲前的练习，<strong>不要让正式演讲成为第一次</strong>。</p>
<p>其次，在练习上要注重仪式感。例如用手机录音，然后回放，找出自己在语言上的弱点。还可以架起摄像机，正式给自己录一下，看看自己的表现。这些仪式感可以让我们提起精神，更加有现场感，排练效果更好。</p>
<p><strong>如果我们不将正式演讲作为第一次，那么我们还可能会讲很多次</strong>；反过来，如果是第一次的话，那么它可能就是最后一次。</p>
<p>以下是原内容的目录，供参考：</p>
<p>一、紧张情绪并不可怕</p>
<p>二、演讲之前要知己知彼</p>
<p>三、演讲内容要有价值</p>
<p>四、适可而止，不可贪多</p>
<p>五、PPT 只是配角</p>
<p>六、别让正式演讲是你的第一次</p>
<p>七、把握好最初的五分钟</p>
<h2>| 如何在演讲中讲个好故事？</h2>
<p>这篇内容的标题将我迷惑了，标题说“如何讲个好故事”，但其实它并不是单纯讲「如何讲故事」的，没有那么简单，这篇内容整体上讲了如何做好一场故事性的技术演讲。</p>
<p>先说一个讲故事的故事吧。</p>
<h3>白岩松的搞疫故事</h3>
<p>我们都知道白岩松是央视著名主持人，有一次他在湖畔大学讲课，分享的主题就是<strong>如何讲好一个故事</strong>，他的故事是这样讲的：</p>
<blockquote>
<p>疫情期间，我们是全国最早统计新冠死亡率的。</p>
<p>通过对比死亡数据我们发现，武汉的死亡率比整个湖北省要高，整个湖北省又比全中国高。为什么会这样呢？</p>
<p>为此我们采访了杭州的李兰娟院士，她说：“在武汉，是一群病人等着一个医生；而在武汉以外，是一群医生扑向一个病人”。我们听到这个答案以后，非常振奋，对抗疫这件事情一下子变得有信心了。为什么呢？因为如果说死亡率只和医护人员的多寡有关系的话，那我们只需要加派人手就可以了。</p>
<p>于是后来的事情大家都清楚了，咱们国家增派了4万名医护人员支援武汉。到5月份，武汉抗疫已经取得了决定性胜利，武汉的水上花园都全面开放给游客了。而与此同时，西方某些国家虽然一直号称群体免疫，不限自由，但其实一直都没有真正得到过「水上花园」这样的自由。</p>
</blockquote>
<p>好吧，现在白岩松讲故事的这个故事讲完了，在他这个故事当中有哪几部分呢，我们看一下：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210326115329.png" style="zoom:50%;" />
<ul>
<li>
<p>第一部分，抛出问题。只有一句话，这句话就是“我们是全国最先统计新冠死亡率的”，这句话要勾起听众的好奇心。</p>
</li>
<li>
<p>第二部分，分析问题。媒体人通过现象看本质，提炼出事实，发现从武汉到湖北，再到全国，死亡率是依次降低的。这个分析要有理有据，要进一步抓住读者的好奇心。</p>
</li>
<li>
<p>第三部分，给出方案。这部分借助权威人士李兰娟院士的回答，给出前面疑问的答案，并且从逻辑上给出合理降低死亡率的方案。</p>
</li>
<li>
<p>第四部分，亮出结果。用赋比兴的修辞手法，陈述事实，对比中外，激发观众的爱国情感。</p>
</li>
</ul>
<p>这四个部分，可能你已经发现了，就是上面的四个小段落，它们就像三段悬索桥的四个桥堆儿一样，是一个挨着一个。所以你看，记不住故事的结构没有关系，只要记住了白岩松的这个抗疫故事，然后照葫芦画瓢填内容就可以了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210326115108.png" alt="image-20210315120306512"></p>
<h3>“切西瓜式”等技巧</h3>
<p>对于怎么讲故事，在这篇内容中作者也有讲。但是绝不仅仅是只讲了这一点。</p>
<p>现场的灯光，舞台，大屏幕，和舞台边缘的提词器，还有我们的PPT，这些都可以算作是道具。</p>
<p>在演讲过程中，演讲者很忌讳回头看背后的大屏幕。这会让听众感觉这个演讲者不自信。其实可以看舞台下方的小屏幕，大屏幕看不看是无所谓的。</p>
<p>还有演讲的PPT要简洁、大方、风格一致，但是也要避免由此造成的呆滞，最好要有一点点跳跃，一点点装饰动画。</p>
<p>文中还提到了演讲者的仪表和姿势。穿着最好是牛仔裤+体恤，这是标准的乔布斯式，大家对这个形象其实已经很认可了。</p>
<p>还有就是手势。手掌与地面垂直，做切西瓜状，这是最简单的，也是最适合绝大多数人的演讲手势。伟人一般用的，是一种从内向外横扫一切的手势，这不符合一般演讲者的身份。德拉克洛瓦名作《自由引导人民》里面的自由女神，右手高高举起旗帜，这种姿势也不可取。还有攥紧拳头，从下往上捶击，这是工人罢工的姿势，也不足取。相比之下，只有经典的切西瓜式最合适，谦逊内敛，落落大方，适用性也最强。</p>
<p>还有开头那一句话对我印象也很深刻：“<strong>不管演讲今天多么重要，未来只会变得更加重要</strong>”。所以我们要学习做演讲，特别是学习如何用讲故事的方式做好一场演讲。</p>
<h2>| 如何把你的观点深深地刻在别人的脑海中？</h2>
<p>读了这篇文章我才知道，把话讲清楚、表达清晰，只是方便我们更容易被理解，但并不能让我们的观点深深的印在听众脑海中，除了理解之外，起决定性作用的还有细节。</p>
<h3>神经元是人类思考的物质基础</h3>
<p>白岩松在一次关于如何讲故事的演讲中，讲过讲故事就是要<strong>见人见细节</strong>。见人，就是要露脸，方便我们共情，因为大家都是人类嘛。见细节，是方便我们将未知的东西，与已知的东西建立直链接，特别是与具象的东西产生连接，而且是链接的越多越好。</p>
<p>我们人类的大脑，是由一个一个的神经元组成的，神经元之间靠树突连接。一个人他的神经元多，并不代表他一定聪明；相反，起决定性作用的，在于神经元之间的树突连接是不是很多。</p>
<p>我们每个人来到这个世界上的时候，大脑都是一片空白的。现实世界中的具象，会首先进入我们的大脑，然后我们通过生活实践，在这个具象的基础之上，又建立了抽象的概念系统。</p>
<p><strong>具象是抽象的根基</strong>。任何抽象的东西，其实都很难直接被我们大多数人记住。而那些能够与具体的事物联系、与生活相联系的内容，反而可以很快被我们记住。这就是白岩松说的讲故事要见细节。</p>
<p>还有在网文小说创作中，讲究三个字<strong>代入感</strong>。什么样的文字才容易产生代入感呢？就是要见人见细节，文字要让人能产生情感共鸣，同时有足够的细节描述，可以让人从抽象的文字中，联想到现实的生活场景中去。</p>
<h3>画面与故事的定义是什么呢？</h3>
<p>在这篇文字中，作者有这样一个定义。</p>
<blockquote>
<p>“凡是能让人在脑海中产生画面感的话语或文字就是故事。”</p>
</blockquote>
<p>这个定义我觉得有失偏颇。凡是能让人在脑海中产生画面感的话语或文字，应该是画面，而不是故事。故事是需要有情节的，情节是需要有起伏的，故事应该是由一个个画面组成的。</p>
<p>前面一篇中我们提到如何讲好一个故事，一共有三大段四个墩点：</p>
<ul>
<li>提出问题</li>
<li>分析问题</li>
<li>解决问题</li>
<li>亮出结果。</li>
</ul>
<p>这是对于技术性演讲而言，如果换成是写网文小说，更准确的表达应该是：</p>
<ul>
<li>给主角创造麻烦</li>
<li>继而麻烦让主角不得不行动</li>
<li>紧接着主角开始分析麻烦，继而尝试解决</li>
<li>最后是解决麻烦</li>
</ul>
<h3>怎么才能写出故事画面感</h3>
<p>前面提到，只有具象化的东西，才更容易让人记住。在这篇文章中，作者就向我们展示了哪些是有画面性的东西。这一点很重要，我原来就忽视了这一点。我原来以为的那些「具象」内容，其实对读者来说读起来很痛苦。引用文中的原例：</p>
<blockquote>
<p>“从前有座山，山上有个庙……”是故事画面，“让用户脸上带着微笑离开”是故事画面。</p>
<p>而“自然环境中的宗教聚集地”不是故事画面，“一流的用户服务”不是故事画面，“吸烟有害健康”也不是故事画面。</p>
</blockquote>
<p>对比一下前后，这些例子它们有什么区别呢？前面的例子，它不容易让听众想象出画面，它们都是抽象的，要么是概念，要么是判断，要么是推理。而后面的例子，都比较容易让人想到一个具体的物体或者是动作。</p>
<h3>面向听众演讲</h3>
<p>在这里面还有一点，就是能不能联想到具象的物体，跟听众也是有关系的。所以我们的演讲一定要考虑我们的听众是谁。这个要素很重要。</p>
<p>例如在技术性演讲中，我们要讲给谁听，这很重要。有时候我们习以为常的认为，那些HTTP网络请求协议，那些基本的「变量」、「函数」这些概念，在听众脑海中已是常识。但其实不是这样的，只是对于程序员来讲，如果他只是一个初学者，他还没有这些基本概念，他不知道你在说什么。他甚至可能以为，写代码就像写小说一样，想一想，代码就可以自动运行了。</p>
<p>这一点最近我深有体会，我觉得这是在技术性演讲中特别需要注意的。我们讲的常识，其实都是有一个空间范围和时间范围的。在哪个群体中，在哪个时代讲， 听众的常识都是不一样的。</p>
<h3>刻意增加幽默</h3>
<p>除了让内容具象化，还有一个很高级的技巧可以帮助我们让读者接受我们的观点，它就是幽默。这篇文字的评论区有一位读者贴了一个经典案例：</p>
<blockquote>
<p>9月4日晚，无业游民张某，约网友刘某到自己的出租屋喝酒。期间，刘某感叹有钱人太多，张某随即表示“不如出去弄点钱”，刘某随即响应。解放路的监视探头显示，9月5号凌晨5时16分许，他们的早餐摊支起来了。</p>
</blockquote>
<p>这个例子里面是有反转的，最后一句里面藏着一个小幽默。这样的段子，可以让我们的演讲氛围更加轻松，让我们的观点更容易被读者所接受。但是还是不能被观众轻易的记住，如果想让我们的观点深深的印在听众脑海中，还是要想办法将我们讲的内容，与读者的生活，与具体的事物尽量联系起来。</p>
<p>这里面就有一个矛盾。我们讲的内容读者都知道，读者会认为没有意思；如果完全不知道，又会让他觉得索然无味，很难理解与记住。所以，我们需要将那些听众不知道的、不了解的、未知的东西，与他们已知的东西拼命的联系起来，特别是与他们已知的具象的东西连接起来，这样才可以深深的印在他们的脑海里。</p>
<h2>| 演讲中的肢体语言管理和声音控制有哪些门道？</h2>
<p>这篇内容洋洋洒洒，妙趣横生，特别是前半部分。但是读了以后，感觉没有什么用，还是不知道怎么操作。因为内容没有刻意与具象的事物联系在一起，估计过不了多久我们也就全部忘掉了。</p>
<p>关于手势，对于大多数人来讲，最简单的还是切西瓜式。这也符合文章所讲的激情面和真实面，基本符合。</p>
<p>关于声调，这个就很难把握了。一场好的演讲，绝不是演讲者本人的独角戏，肯定是演讲者和听众共同完成的，就像演讲者带着听众一起跳舞一样。</p>
<p>好的演讲者懂得与他的听众保持「交流」，脱口秀演员管这个叫做节奏。具体怎么把握这个节奏，我也不知道，我唯一想到的就是多练习，并且是现场练习，在现场演讲时要注意和观众进行「交流」。</p>
<p>神枪手是拿子弹喂出来的，相信演讲高手也是通过一场一场的演讲历练起来的。</p>
<h2>| 8 个技巧，帮你做一场漂亮的技术大会演讲</h2>
<p>读了这篇文章受益匪浅，干货很多，我最大的感受是三个字：工程化。</p>
<p>所谓工程化，就是让整个演讲变成像程序一样，像可控的代码一样执行；使每个环节，都有可以遵循的公式，应用这些公式，甚至即使是机器人，也可以代替我们完成任务。关于工程化的具体想法，稍后在总结中细说。</p>
<h3>开场公式</h3>
<p>作者的这个开场就很好：</p>
<blockquote>
<p>大家好，我是来自 58 到家的架构师沈剑（这一句点名了演讲的公司、职位和姓名）。<br>
我在百度、58 同城有过多年的架构工作经验（这一句就是吹吹牛，增强信服力）。<br>
接下来我会和大家介绍 58 到家订单中心的架构演进细节（这个就是内容介绍了）。</p>
</blockquote>
<p>一共分为三部分，大约100个字。根据这个内容，我们可以抽离出这样一个开场公式：</p>
<blockquote>
<p>大家好，我是来自<em>某某公司</em>的<em>某职业岗位</em>某某。<br>
我在<em>某某公司</em>、<em>某某单位</em>做过多年<em>某某项</em>工作，有多年相关工作经验，曾获得过<em>什么奖项</em>。<br>
接下来我和大家探讨<em>一个什么主题</em>。</p>
</blockquote>
<p>只要按照这个公式，把空填好了，背熟了，开场时最紧张的第一个1分钟，就可以轻松得迈过去了。</p>
<h3>如何组织内容</h3>
<p>这个话题已在前面多篇内容已经涉及到了，概括起来公式就是：</p>
<ul>
<li>提出问题</li>
<li>分析问题</li>
<li>解决问题</li>
<li>提炼总结</li>
</ul>
<p>这是讲故事的内容结构，对应这篇内容中的“问题缘起 - 方案 - 优化方案 - 总结”，结构是类似的，只是叫法不一样。另外参考网文小说的写法，在“提出-分析-解决”这个环节，可以多次循环，让演讲略有波折。</p>
<h3>如何组织PPT内容</h3>
<p>我写PPT属于小学水平，一直用写书的思维去写PPT，其实这是不对的。</p>
<p>PPT是画面，我们更应该用画画的思维去创造它。幻灯片呈现给听众的是一张画，不要期望听众看这张幻灯片就能明白我们讲什么。PPT只是配角，演讲者才是主角。看PPT就明白了，还要我们演讲者干什么呢？</p>
<p>文章中作者举的对比例子就很好，概括一下有以下规律可循：</p>
<ol>
<li>不要用1234这样的横向列表，要用没有数字的、有图标的纵向列表</li>
<li>不要用单一的白色背景，要用其它颜色，在一个页面上要争取用多个色块</li>
<li>多使用简洁的图标，少使用文字</li>
</ol>
<p>不要想让听众通过幻灯片上的文字就明白我们的逻辑。事实上看起来有没有逻辑貌似不重要，整体看起来高端大气上档次才重要，毕竟PPT只是一个道具嘛。</p>
<p>附优秀的PPT示例：</p>
<img src="./assets/d9e4c0b07b9be56089c38d3965156907.png" alt="img" style="zoom:25%;" />
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210314155130.png" alt="img" style="zoom:25%;" />
<p>不好的示例是这样的：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210314155204.png" alt="img" style="zoom: 50%;" />
<p>以前我就经常写这样的PPT。有图、有列表，看似很清晰很完备，其实很糟糕。</p>
<h3>如何把握好演讲时间</h3>
<p>或者说如何把握好演讲的节奏。读完以后我的想法是这样的：</p>
<ul>
<li>根据演讲时长准备内容，每张PPT控制在5分钟，一个45分钟的演讲，我们只需要准备不超过10页的PPT就可以了。</li>
<li>将每张PPT里的料点，提炼成一个段子或一个对比句子，演讲时只要保证这个段子没有忘记就成功一半了。</li>
<li>其它内容，幻灯片之间的衔接，段子之间的跳跃，根据现场情况临时发挥，适当加一些“水”话进去。</li>
</ul>
<p>如果时间紧张了，就把水分挤一挤；如果前面讲快了，后面就适当多放些水。</p>
<h3>收尾的公式</h3>
<p>通常一个演讲最终只有10%听众是记住的。在最后时刻，把自己的<strong>一核三点</strong>重审一下，这里为了效果好，我觉得有三点需要注意：</p>
<ol>
<li>总结尽量用段子包装一下</li>
<li>尽量与生活的具象事物联系起来，像<strong>切西瓜式</strong>这个描述，就是一个很成功的抽象与具象的联系</li>
<li>最好有一些或一个「专有名词」，这些名词是只有听了前面的演讲才能明白的，这个地方的例子还可以举「切西瓜式」</li>
</ol>
<h3>问答环节的公式</h3>
<p>这个环节作者分享的三个话术都十分实用，也是应对三种情况的公式。</p>
<p><strong>1. 遇到挑战者</strong></p>
<p>我们可以说：“今天分享的只是我们自己的实践，解决方案有很多，相信在不同场景、不同需求下会各有优缺点吧~”，然后回答下一位的问题。</p>
<p><strong>2. 不能100% Get到提问者的点</strong></p>
<p>这个时候我们可以说：“这位朋友要问的是不是这样一个问题呢…”，然后转向这个问题的现场分析与解答。</p>
<p><strong>3. 遇到一个不能回答或难于问答的问题</strong></p>
<p>原因可能有很多，但有些问题就是不方便在公众场合回答。</p>
<p>这个时候我们可以说：”这是个好问题，但很难用一两话讲清楚，感兴趣的话我们线下交流。”</p>
<p>总结一下，上面这三个话术都是在打太极。社会人，公众场合还是以和为贵。许多时候听众提问，除了想交流、想得到解答，有时候就是想有一个表达的机会，你机会给他了，基本他30%的需求就已经被满足了。如果提问者还会得到一些小礼品，那么50%的满意度已经有了。</p>
<p>以上吧，就是我读了这篇文章的想法。总体来讲，如果把演讲当作一个可控的工程，让每个环节都有范式可依，有章可循，这样演讲效果和演讲时间基本都是可控的了。几乎所有的公开演讲都有时间限制的，如果因时间控制得不好而仓促结束，这比某个环节讲的不好还要糟糕，毕竟完成比完美更重要嘛。</p>
<p>接下来我谈一谈我学了这个课程的总体感受。</p>
<h2>总结：将技术演讲工程化</h2>
<p>从演讲效果上讲，演讲从低到高有好几个层次：</p>
<ol>
<li>
<p>讲清楚了，这个时候逻辑是清晰的</p>
</li>
<li>
<p>观众听明白了，并且感觉受益了，听众觉得有价值</p>
</li>
<li>
<p>现场效果好，观众不时发出笑声或鼓掌，效果好，就像乔布斯发布第一代iPhone那样</p>
</li>
</ol>
<p>要达到第三个层次是很难的，大部分人第一个层次都很难做到，大多数人都很难有条理地将事情请明白。但讲明白，还不代表对听众有价值。在第三个阶段，就不只是讲清楚和有价值这么简单了，是要在总体逻辑连贯的前提下，增加幽默效果。就像天上的星座，以猎户座为例，猎户座各个星星之间本来就是没有连线的，是我们人类在想象中给它画上了这些线。在第三阶段，我们要特意擦掉那些使逻辑看起来更清晰的线，使演讲效果更加简洁，更具幽默感。</p>
<p>具体而言，我读了这个课程以后，有如下收获：</p>
<ol>
<li>将演讲工程化，可以最大程度地保证演讲效果和控制好演讲时间。包括开场公式、问答环节公式、收尾公式等。</li>
<li>一场好的演讲绝不是演讲者在独舞，好的演讲者要懂得和他的听众保持「交流」。神枪手都是拿子弹喂出来的，优秀的演讲家都是一场场演讲历练出来的。</li>
<li>神经元是人类思考的基础，神经元之间的连接越多，越容易记忆和理解。演讲内容如果想让听众理解和记住，就要刻意和现实生活中的具体事物联系起来。那么虚无缥缈的概念，在听众离场的时候，就已经被忘到九宵云外了。使内容具象化，充满画面感，才有可能刻到听众脑海里。</li>
<li>故事的结构是这样的：<strong>提出问题、分析问题、解决问题和总结问题</strong>。人人都想听故事，讲故事是一般人提升演讲效果的不二法门。如果忘记了这个故事结构，没关系，就想一想白岩松讲的那个抗疫故事。</li>
<li>刻意加点幽默，能让现场效果更好。</li>
<li>演讲者手势，最简单的就是双肘90度沉于身体前方左右两侧，手掌与舞台垂直，做切西瓜状。「切西瓜式」，看人家这个名称起的多好，一下子就记住了，因为它是具象化的。</li>
<li>演讲者的穿着，牛仔裤+黑色T恤。</li>
<li>PPT，<strong>一图胜千言</strong>。要花些心思，将逻辑清晰的横向列表，变成<strong>一下看不懂</strong>的竖向列表。删除多余的文字，多添加一些图标、背景色块和箭头。<strong>演讲用的幻灯片是作为一张画呈现的，并不是作为一页书呈现的</strong>。</li>
<li>紧张是人类公开演讲都有的情绪，是天生的，唯有多多刻意练习，录音练习、架摄像机练习、找朋友当面练习等等都可以。</li>
<li>正确和理智地对待演讲四要素：<strong>演讲者本人、内容、道具和听众</strong>。内容要随听众而变化，道具要为演讲服务。PPT也是演讲者的道具之一。在内容上<strong>一核三点</strong>很重要，想明白听众可能会怎么向别人介绍我们这场演讲，为什么会这样，有什么用途，听众如何做到。</li>
</ol>
<p>以上就是所有内容了，不知道你学习了之后有什么感受，欢迎分享讨论。如果你想要本文的PDF版本，可以在#公众号：艺述论 回复数字「101」下载。我们下期再见。</p>
<p>2021年3月26日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[充电平台小程序实战专栏导读]]></title>
            <link>https://yishulun.com/./src/posts/2021/31.html</link>
            <guid>https://yishulun.com/./src/posts/2021/31.html</guid>
            <pubDate>Thu, 25 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>充电平台小程序实战专栏导读</h1>
<h2>| 课程介绍</h2>
<p>初学者为什么要学习微信小程序？</p>
<p>录课结束三个月后，我再回头看这节课，感受只有四个字：“录的真好！”</p>
<p>对于不知道自己应不应该学、合不合适学小程序这门技术的读者来讲，只要看了这个视频就有答案了。</p>
<p>极客时间的小伙伴，若没有他们的严格把关，恐怕我只能做到60分；有他们在，把我身上的懒虫逼走了，硬是提到了80分。但就这一篇开篇词，我给90分。哈哈。</p>
<p><strong>这个视频主要讲了三点：</strong></p>
<ol>
<li>为什么要学习微信小程序开发？</li>
<li>学习微信小程序有哪些难点？</li>
<li>如何学习这门小程序课程？</li>
</ol>
<p><strong>个人应该做什么样的需求</strong></p>
<p>对于第一个问题，也有三点：</p>
<ol>
<li>从用户体验的角度考虑：小程序顺应了时代需要</li>
<li>从商户运营的角度考虑：你需要小程序</li>
<li>从开发的角度讲：小程序走到了技术前沿</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210325162549.png" alt="image-20210325162547699" style="zoom:33%;" />
<p>前天我看到腾讯正式发布了2020年财报，提到小程序的交易额增长了一倍。小程序虽然已经4岁了，但市场才刚刚开始，现在正是入局的时机。前天我还在知乎上看到有人分享一个视频，依靠小程序流量主月赚2000米。</p>
<p>那么，现在入局的话，对于个人开发者，独立开发者应该做哪些应用呢？</p>
<p>其实这个答案在这个课程视频里就有，可能很少有人注意到了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210325162904.png" alt="image-20210325162902821"></p>
<p>有人可能会问，为什么不做低频高明长？费流量。</p>
<p>那为什么不做高频低时长？这个领域一般是巨头、大厂在做，竞争大，例如美图秀秀等。个人开发者就不要往这个领域挤了，个人在体验上是很难做过巨头的。现在不像张小龙单枪匹马写Foxmail的时代。</p>
<p>做那些有市场需要，但需求少，巨头不屑于做的小应用。因为网民一般都有路径依赖，你把一个小功能做好了，下次他还会想到你。从小程序的定位来讲，这是当初张小龙想让小程序履行的职能。扫码即用，用完即走。</p>
<p><strong>学习小程序有什么难点？</strong></p>
<p>再看第二个问题，有什么难点，其实在我看来，<strong>没有什么难点，只有麻烦点</strong>。你想使用微信支持，难道还要注册一个公司吗？你想使用小程序直播，难道还要先搞定一个在线音视频营业许可证吗？</p>
<p>有人说，用公司的。公司不让用，或者没有公司怎么办？</p>
<p>不用担心，我在课程里面都给你准备好了，直接用我的学习。</p>
<p>还有小微商户支付，我也准备好了。它能让你直接用个人银行卡收钱，这个太爽了，这是多少独立开发者一起梦寐以求的事。这些我都给你准备好了。</p>
<p>就此三项，如果个人去折腾，花精力不说，花的钱也是这个课程单价￥199可以cover的。</p>
<p><strong>还有最后一个问题，怎么学？</strong></p>
<p>PBL，在一个项目里面，学习所有的知识点。坚持知行合一，眼到心到手到。剩下的就交给时间。</p>
<p>我觉得，对新人来讲，看这个视频学习小程序，远比看书要容易多了。而之前有一个人在群里说，他看完我的《小程序从0到1》立马就接了一个外包。学完这门课程，依然可以，至少做一个可以独立赚米的，不依靠任何公司的小程序应用，是没有问题的。</p>
<h2>| 内容综述</h2>
<p>这节课主要介绍了整门课程的内容规划。主要分三部分：第1部分讲原理和框架；第2部分讲组件和接口；第3部分是本门课程的主体部分，也就是全栈实战部分。</p>
<p>由于时间关系，在这个规划里面，有两个点“查看我的历史订单”和“查看物流状态”，这两个点并没有实现。但是他们所依赖的增删改查这些基本技能，其实在课程里面已经有了。后续，我会考虑把这个项目继续完善，争取给读者提供一个商业环境可用的源码版本。</p>
<p>这节课还提到了微信小程序的双线程运行机制，底层的evaluateJavaScript，这个函数像一个很窄小的水管，连接着左右两个大水箱，它确实是小程序性能的瓶颈。但是这一块，我感觉微信团队，他们也在想办法解决，wxs就是证明。我觉得未来这一块，<strong>如果这个问题解决了，小程序可能真的会取代 App</strong>。</p>
<p>还有一点，就是在课程规划的时候，当时没有提到<strong>云开发</strong>和<strong>小微商户</strong>。但其实在实际的课程里面，我们特意加了这两项。特别是最后一项，它对于个人开发者来讲，确实是一个营收利器。<strong>小微商户可以帮助个人直接将钱收到个人银行卡，并且还是合法的。</strong></p>
<h2>| 小程序的特点及开发能力</h2>
<p>什么是微信小程序？</p>
<p>如果用一句话概括，它是介于App和微页面之间、开发成本比App低、页面体验比微页面好，有4亿+海量用户基础的这样一门技术。微页面能做的，它都能做；App能做的，它95%都能做，有一些小程序能做的，App却做不了，例如在微信群内获取群id等。与平台紧密相关的平台能力，是小程序的长项。</p>
<p>该视频还介绍小程序与公众号之间的异同，还有小程序的发布流程等，大致了解一下就可以了。在目前来说，微信已经放弃原来的企业服务号，改由小程序肩负起提供企业服务的责任了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210325181026.png" alt="image-20210325181024653"></p>
<p>现在公众号是企业进行品牌宣传的窗口，视频号是企业在短视频时代攫取流量红利的手段，小程序才是企业为用户提供服务的场地。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[左耳听风专栏学习笔记]]></title>
            <link>https://yishulun.com/./src/posts/2021/32.html</link>
            <guid>https://yishulun.com/./src/posts/2021/32.html</guid>
            <pubDate>Thu, 25 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>左耳听风专栏学习笔记</h1>
<blockquote>
<p>这是我在充电平台学习<a href="http://gk.link/a/10pr7">《左耳听风》</a>专栏的笔记，仅是部分。</p>
</blockquote>
<h2>开篇词 | 洞悉技术的本质，享受科技的乐趣</h2>
<p>分享文章，不仅仅是为了宣传，更多是为了与他人讨论，激发更深入的深入思考。学习别人的知识，如果有真正的思考，那么可能有三个阶段：</p>
<p><strong>在第1个阶段</strong>，我们读了以后，有了自己的想法，大胆分享出来，然后遭到了批判，别人可能说我们目光狭隘，狂妄无知。</p>
<p><strong>在第2个阶段</strong>，我们预感到可能会有人批评我们，而刻意在用词上柔和了一点点，这在一定程序上是一种「懦弱」的表现。</p>
<p><strong>在第3个阶段</strong>，我们明知可能会招来非议，却仍然大胆地表达自己的想法。这是勇，是儒家三宝里的「勇者无惧」。</p>
<p>如果有思考，肯定就是要表达出来的；如果没有思考，那就另当别论了。反过来思考一下，有些东西线上是不适合讲的，所以有时候真正的交流还在线下，这也是为什么有时候明明可以在线交流，却一定还要举办线下活动的原因了。</p>
<h2>| 程序员如何用技术变现（上）</h2>
<p>这篇文章我最大的心得是，<strong>优秀人才都普遍具有三个特征</strong>，稍后我们看具体是哪三个特征。</p>
<p>我感觉这个专栏作者的经历真是非常富有传奇色彩。1997年，5个Web页面1万块钱，一个页面就是2000块钱。现在基本上一个页面也是2000块钱，只不过要带上「动态」二字。</p>
<p>作者因为不会网页设计和开发，放弃了这1万块钱的外快，后来他开始自学网页开发，并且自学以后还在网上分享，分享他设计网页的一些技巧，例如「抽屉菜单如何设计」等。这个菜单设计，在当时就属于有一些难度的高级技巧了。</p>
<p>因为在网上做了这些分享，而被电脑报的编辑看到，从而成为电脑报的特约撰稿人，从此专栏作者开始赚稿费了。</p>
<p>后来机缘巧合发现了一个牛x的性能优化工具，叫Purify。因为觉得好，开始读Purify的英文文档，进行全面细致的深入研究，并且还在网上分享研究心得。由此被一家需要使用Purify的公司看到，开始进入企业内训领域。一天税后收入5000块钱。这是20年前的企业内训价格了，在今天来看的话，至少两万起了。</p>
<p>再后来因为继续钻研高精尖技术，继续坚持分享，开始被公司邀请进入内部解决疑难杂症问题。两天时间，报价1万块钱，人家给了10万。感觉作者当时很客气，他是按企业内训价格给报的价，但是人家是按节约的成本给付的报酬。一个技术难点被憋住了，公司投入好几个人进去，花了几天甚至几周时间，企业的沉没成本已经很大了。10万块钱，可能只是被节约下来的一小部分。</p>
<p>作者后来又有一次深入公司解决疑难杂症的机会，两天时间，700行代码，企业给了20万。这个也是应当给的，可能这一次节约的沉没成本更多了吧。</p>
<p>从作者的这些经历看下来，会不会有人觉得他的的运气好？</p>
<p>我觉得在这个快速发展的时代，每个人其实都是有机会的，我觉得不是作者的运气好，是他具有一般人不具备的品质。接下来容我归纳一下这些品质，不妨你也对比一下，看自己有没有。</p>
<p><strong>勤奋好学</strong></p>
<p>第1点，就是勤奋好学，并且是主动学习，这一点基本上就把80%的人给比下去了。很多人学习都是被动的，甚至很有可能他从事的那个职业，也不是他自己喜欢的，只是为了拿一份薪资而已，所以根本也谈不上主动热爱。</p>
<p><strong>善于思考与总结</strong></p>
<p>第2点，就是作者很善于思考和总结，并且还善于把总结出来的理论，继续应用在实践当中。在作者上面这几件事情里面，其实前后都是有因果联系的。如果没有<strong>电脑报</strong>约稿，可能就没有后来的Purify分享，没有Purify分享，可能就没有后来的企业内训，没有继续高精尖问题的<strong>钻研</strong>，可能就没有后来解决<strong>疑难杂症</strong>问题的机会。这里面是有内在联系的，善于思考，善于总结，善于在实践中调整，这一点基本上把90%的人都比下去了。</p>
<p>举一个例子，作者刚开始时还研究<strong>如何实现抽屉式菜单</strong>，但是后来他就不研究这个了，为啥呢，因为研究的人多了，研究明白了，没意思了，太简单了，这个已经不属于高精尖技术了，后来他就注重研究那些有难度的、有挑战性的技术。这个也不一定就是出于等着某一天有公司请他去做企业内训，或者解决某些疑难杂症问题这个目的去学习的。</p>
<p>江湖上有很多武功，你要选哪一种呢？比如说独孤九剑和辟邪剑谱，比如说降龙十八掌和葵花宝典。武功是有正有邪的，所以在这个里面，我们看到，作者修练的都是正派功夫。那么所谓邪门歪道的武功是什么呀？比如说破解用户名、密码，研究一些黑客技术等。这些东西不要去研究，这些东西研究了也无处分享，不分享别人怎么知道你会。</p>
<p>我曾经因为工作需要，研究过验证码的破解，首次破解成功率达到95%以上，二次成功率几乎100%。我还分享过如何破解，后来有一天被一个北美的哥们看到了，他联系我。我把帖子删掉了。</p>
<p><strong>三、富有分享精神</strong></p>
<p>第3点，就是作者不惮于将自己的研究成果无私地分享出去，非常富有分享精神。很多人是不会分享，还有一些人是不愿意分享，从这点来看，作者又把99的人比下去了。</p>
<p>以上就是我读了以后，我认为一个优秀人才一般都具备的三个基本品质。所以，我觉得也不用羡慕别人运气好，要先看自己是否具备这些品质，是否付出了长年累月的努力。</p>
<p>前天在知乎上有一个人和我评论互动。他说他27岁了，比较迷茫，问现在学编程还来得及吗，学了以后能做一名程序员吗？</p>
<p>我就鼓励他大步前进，如果对编程感兴趣，现在入行就是最好的时机。然后他又觉得，如果现在开始学很多基础知识，像计算机基础，网络基础，数据结构，算法，数据库等等，等学完了基本到30岁了，到时候还有公司要吗？</p>
<p>这时候我就给他一个建议，我说你可以先学会一门实用的技术，让自己有被企业利用的价值，先找一份工作，然后你在工作当中再充电，再夯实基础。</p>
<p>然后他又犹豫说，那到35岁是不是又要被公司给淘汰了？</p>
<p>我接着跟他讲，技术学到了是任何人都「淘汰」不了的，不要觉得技术只有卖给公司才有价值。当然了，这跟学什么技术也有关系，所以我现在主张程序员入门，可以先从应用型技术学起，从能独立赚钱的技术学起，比如说微信小程序。微信小程序已经覆盖了4亿人，市场是非常大的。</p>
<h2>| 程序员如何用技术变现（下）</h2>
<p>这一篇文章听下来感觉实操性并不强。总的来说，怎么样才可以用技术变现呢？就是首先要先让自己变得值钱。那怎么样才能变得值钱呢？就是要做到别人做不了的事情。</p>
<p>做到别人做不到的事情，感觉这个挺难的。但其实如果我们划定一个范围的话，这件事情好像也没有那么难。我们不需要做到第一名。</p>
<p>就像开餐馆一样，这个世界上有很多餐馆，各大菜系都有。每个餐馆的价格、服务、以及做菜的水平都是参差不齐的。但是那些做得差的餐馆，他们依然也活了下来。有的是靠低价，比如农村大集市里的山东拉面哥；有的是靠地段，比如说北京东单的簋街；有的是靠服务，比如说海底捞。他们活下来的方式都不一样。</p>
<p>那与程序员这个手艺人行业对比一下，我觉得道理也是一样的。我们没有必要非要在某一方面做到顶级。只要我们能给周围的人，给一部分人提供价值，我们就能挣到钱了。</p>
<p>有时候信息是不对称的，要么他们不知道，要么就是他们着急要。就像一个饥饿的人，他就想马上吃一碗面，而我们恰好就开了一家还凑合的面馆。</p>
<p>技术变现这件事情，我之前还听过别人的演讲。大致总结一下，有一个核心的点很重要，就是我们要努力提高我们收入里面的被动收入，而减少一次性收入。</p>
<p>举个例子，比如说像软件外包，这个事情就很不划算，因为你投入一份时间，你就赚一份钱。相对来讲，你做一个模板小程序，然后你给很多人用，重复销售，那这个相对就高级了一些。</p>
<p>还有企业培训也是，你设计了一套课程，你可以重复给很多企业讲。但如果只是与一个企业的业务紧密结合进行培训，那基本上这个就是为他们量身定制的，不可能再二次销售了。这种情况下相应的内训价格就要高一些，至少要比一般的报价高两到三倍吧。</p>
<h2>| Equifax信息泄露始末</h2>
<p>这是2017年发生在美国的一次非常著名的征信公司信息泄露事件，波及多个国家的1.43亿用户，影响非常恶劣。事故的直接原因是运维人员没有及时更新补丁，没有及时修复一个旧版的Apache Struts漏铜，致使黑客有机可乘。</p>
<p>Apache Struts是著名的开源软件，所以你看，不一定是开源软件就一定更加安全。前几天还听到一个报告，说是大概50%（具体数字记不清了，大概比这个还要高一些）以上的开源软件都存在安全问题。</p>
<p>软件安全问题不容忽视，这里确实应该提高认识。</p>
<h2>| 从Equifax信息泄露看数据安全</h2>
<p>这篇文章听下来我的体会是：<strong>给敏感信息加一个保险箱，给箱子上一把锁，并且钥匙还要定期更换。</strong></p>
<p>箱子的钥匙，也就是密钥，由一个部门或子公司保管，箱子则由另一个部门和子公司保管。</p>
<p>需要从箱子里面取东西的时候，由箱子自身向外提供一个小水龙头，同时还要进行流量监控，发现流量大了立马停止输出并拉响警报。另外，提供数据的时候，还要先对口令，也就是密钥。这个密钥要定期更换，并且密钥不能体现出某种社会工程学上易于猜透的公式特征。</p>
<p>箱子给数据使用者返回的信息要进行脱敏，打马赛克，例如银行卡只返回后4位数字，前面都是星号。</p>
<p>在登录入口多加一些防范，例如限制登陆IP，强制使用安全证书，强制使用复杂的密码，强制定期更换密码。强制使用复杂的密码和定期更换密码，这个规则可能会让员工反感。可以使用带自动生物验证的电脑，将这一步骤简化。<strong>让人觉得简单，就容易让安全措施落实。</strong></p>
<p>再总结一下核心要点：<strong>在内部建立子系统，对内部也要加以防范。对内提供的数据接口，对内部调用也要加以限制和监测</strong>。</p>
<p>安全漏洞不是一劳永逸的，它是随着软件的发展而不断进化和生长的，它非常具有服务特性。可以说安全服务是一个消耗品，就像家里的卫生纸一样。我觉得在这个方面，以后国内市场的需求会越来越大的，甚至我觉得都可以专门有这样的一项to B的生意。至少专门有这样的一个专栏课，肯是是很有价值的。</p>
<p>我查了一下，在充电平台上确实有一个这样的安全专栏，叫做《<strong>安全攻防技能30讲</strong>》，我已入手，也把这个课程推荐给你：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210329095750image-20210329095748724.png" alt="image-20210329095748724" style="zoom: 50%;" />
<h2>| 何为技术领导力？&amp; 06 | 如何才能拥有技术领导力？</h2>
<p><strong>先看第05篇</strong></p>
<p>一看到领导二字，貌似这和组织关系有关系了，其实不是的，这里讲的技术领导力，是指工程师<strong>主动发现问题，并推动问题解决的能力</strong>。</p>
<p>当然，我这么解释有点偏面，这是对人而言，对一个企业，甚至一个城市、一个国家，也可以谈论其技术领导力。在这里，起决定性作用的是工程师，并且这里的工程师，可不是一般的工程师，它应该被描述为「国家的希望」，甚至「人类的福祉」。我们看一下这里的工程师，他需要做哪些事情：</p>
<ol>
<li><strong>发现问题</strong>。发现生产生活中存在的矛盾或痛点。</li>
<li><strong>提出问题</strong>。只是发现问题还不可以，因为有的人虽然发现了，但是他觉得这件事与他无关，事不关己则高高挂起，这不是真正的有领导力的工程师。</li>
<li><strong>分析问题</strong>。不仅是分析问题，还要调查并给出一个或几个解决方案。</li>
<li><strong>解决问题</strong>。有了方案以后，方案并不一定可以落地，资源永远都是紧缺的，不然的话它可能就不是一个真正的问题了。这个时候，需要工程师主动、有韧性地、坚持不懈地推动方案落地，直到问题完美解决。</li>
</ol>
<p>所以你看，这里的工程师哪里是招聘网站上提到的工程师啊，他是一身身兼数职，既是产品经理，又是项目经理，可能还是一个QA，当然最本质的，他是一位可以写代码、可以让技术方案落地的程序员。在这里，工程师不等于程序员，工程师大于程序员。</p>
<p>昨天我还刚看到一篇文章，说清末名臣左宗棠发现新疆「伯克」制度日益腐败，民族分化问题日益严重，于是他五次向朝廷上书，要求新疆建省，立乌鲁木齐为省都。这件事情肯定是有阻挠的，在当时那个腐败的年代，在一个摇摇欲坠的朝廷里面，他肯定知道做件事的难度。但是为了做成这件事，左大人是坚持不懈啊，不断寻找有利时机，前后五次上奏，最终在他去世前一年，终于把这件事办成了。如果没有当年左大人办的这件事，恐怕今年新疆的棉花不会收成这么好。</p>
<p>我们对比一下左大人和工程师，按这篇文章作者的标准，<strong>一位有领导力的工程师就是一个会写代码、懂技术的左大人</strong>。所以你看，这里的工程师规格是非常高的。</p>
<p>那么进一步思考一下，这样的工程师他主要做什么事情呢？</p>
<p>我们知道创新的事情有两类：</p>
<ul>
<li>一类是从0到1的事，这件事之前从来没有人做过，突然有一个人做了，这就是从0到1的事，例如瓦特发明蒸汽机、莱特兄弟发明飞机、爱因斯坦发现相对论、牛顿发明微积分等等，这些都是从0到1的事情。</li>
<li>另一类是从1到1万的事，这一类里面的事已经有人做了，大家都看到这件事的价值了，但是还有不少问题和可优化的空间，现在需要将它不断完善，不断地进行深入改造，使它更加易用、成本更低、效果更高。在这方面例子也有很多，例如汽车、飞机、高铁、电子计算机等等都是这方面的例子。</li>
</ul>
<p>这两类事情按说工程师都可以做，但第二类需要的工程师更多。文中所言的工程师，主要也是做第二类事情。</p>
<p><strong>接下来看06篇有关的内容</strong></p>
<p>作为一名技术领域的工程师，那么如何提升个人的技术领导力呢？除了高标准要求自己，坚持终生学习，坚持做正确的事以外，很重要的一条，就是打好技术基础。在这方面作者还给出了一些具体的建议，一共是八条：</p>
<ol>
<li>
<p>学习基础的编程语言，例如C，推荐阅读《C语言程序设计（第二版）》</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210329103856image-20210329103855231.png" alt="image-20210329103855231"  />
</li>
<li>
<p>学习普遍的编程范式，例如面向对象编程、函数式编程、经典的23个设计模式，这些都是编程前辈总结的思想精华。推荐阅读《设计模式-可复用面向对象软件的基础》</p>
</li>
<li>
<p>学习算法和数据结构</p>
</li>
<li>
<p>学习计算机原理，推荐阅读《深入理解计算机系统》</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210329103938image-20210329103935750.png" alt="image-20210329103935750" style="zoom: 15%;" />
</li>
<li>
<p>学习操作系统原理</p>
</li>
<li>
<p>学习网络通信原理</p>
</li>
<li>
<p>学习数据库原理</p>
</li>
<li>
<p>学习分布式架构原理</p>
</li>
</ol>
<p>学完这些，基本上二三年时光都过去了。但是并不是学完就结束了，学习它们只是一个开始，这些内容需要用一生的时间去不断锤炼。</p>
<p>在学习资料的获取上，作者提到，一定要从源头学起，用好英文。学习者采用的学习方式，与学习者的水平也是紧密相关的，概括一下大致有三个层次：</p>
<ol>
<li>第一个层次，只使用中文搜索引擎，只阅读中文书籍或文档。达到这个层次说实话已经很不错了，因为大多数程序员是不读书的，连这个都达不到。</li>
<li>第二个层次，使用谷歌搜索英文资料，阅读外文书籍和原始的英文技术文档。</li>
<li>第三个层次，翻遍这世界上的角落，都找不到问题的答案了，跑到官方Git仓库上看issue列表，和原作者直接交流。甚至原作者都没有答案，你在这个技术上跑到了世界的最前尚，你动手写代码，解决了这个问题，然后再把解决方案分享给其它人。</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210329213949image-20210329213943242.png" alt="image-20210329213943242" style="zoom:67%;" />
<p>以上就是我读了这两篇内容之后的感受，做一名工程师不容易，做一名有技术领导力的工程师更不容易。学好上面这些基础内容，或许才真的可以达到「代码改变世界」的境界。</p>
<h2>| 推荐阅读：每个程序员都该知道的知识</h2>
<p>这篇干货文章没有语音，只有文字。在这篇文章里面，作者推荐了一本电子书，叫《C++软件性能优化》，176页，全英文，我不知道有多少人会看。</p>
<p>另外，还有一个关于Github开源代码bug 的研究报告 。这个报告很有意思，总结一下有这样几个点值得注意：</p>
<p><strong>第1点</strong>。Bug产生率与软件所在的领域无关，但却和编程语言是相关的。语言设计的不好，就容易出Bug。函数式编程语言的Bug，比一般过程式编程语言要少。对于这个结果，我的第一感觉是，并不一定函数式编程语言它更具优势，可能是它被用的少。但其实不是这样的，更有可能的一种解释是，函数式编程它是一种线性思维，它不是发散的，它没有提供给程序员更多犯错的可能。</p>
<p><strong>第2点</strong>。静态编译的语言，比动态编译的语言Bug要少；强类型的语言，比弱类型语言Bug要少。</p>
<p>什么是静态编译的语言？像C、C ++，Golang，这都是静态编译的语言。反过来像PHP，JS，Ruby，这些都是解析执行的，属于动态语音。</p>
<p>什么是强类型？像Golang、C、C++，这些都是强类型。JS 中一个变量可以随意地改变类型，它是弱类型。</p>
<p>这个规律很好理解，弱类型语言是动态编译的，确实比较容易出Bug。反过来，如果是静态编译、强类型，有很多Bug在编译过程中就被开发者干掉了，因为不干掉的话就编译不过去嘛。</p>
<p>这两个弱点JS都具备，正因为如此，微软搞了一个TypeScript，简称TS 。但是很奇怪，通过这个报告我们可以看到，TS的Bug比JS还要高。按理说TS因为时间不长，比较新，语法更先进，它的Bug应该更少，但其实不是。</p>
<p>所以还是那句话，语言它只是一个工具，语言本身它没有什么绝对的好坏，关键还是使用工具的人。TS它其实只是在JS表面上放了一些语法糖，做了一些人为的限制，来规避一些可能容易发生的错误，但本质上它编译以后还是JS。</p>
<p><strong>第3点</strong>。在这个报告里面，我们可以看到像一些传统的语言，C和C++的Bug 率是很高的，而Go语言相对是比较低的。鉴于Go语言它也是互联网时代的C语言，它在分布式系统中很有优势，所以它仍然是目前被建议学习的首款后端语言。</p>
<p>在评论区有读者提了一个很好的一个问题，这个问题很有辩证性，他是这样问的：</p>
<p><strong>对于初学者，学习是应该从上到下学习，还是从下到上学习？</strong></p>
<p>从上到下学习，就是说先从应用型技术学起，先做项目，在做项目的过程当中再去深入学习。这个是我一直主张的PBL学习思想。从下向上学习，它是指我们先把计算机的一些基础知识，网络基础，算法，数据结构，数据库，分布式技术等等这些底层的东西，先学好，打好根基，完了再去学应用层技术。</p>
<p>这是一个好问题，但其实对于不同的人来讲，它可能没有标准答案。我的建议，还是要从上向下学。你先学一门技术，甚至靠这门技术先找到一个工作，然后你在工作当中，再去注意夯实基础。我反对先完全从基础学习，特别对那些不是计算机专业的初学者来讲，因为当你离开学校以后，可能社会不会给你这个学习时间的。</p>
<h2>| Go语言，Docker和新技术</h2>
<p>如何提前判断一个技术能否引领未来的潮流呢？主要看4点：</p>
<ul>
<li>第1点，它解决了生产生活中的什么问题？</li>
<li>第2点，它有没有一个大型商业公司在背后推动。</li>
<li>第3点，它上手是否足够简单？</li>
<li>第4点，它的开发是否足够方便？效率是否足够高？社区是否足够完善？文档是否足够丰富？</li>
</ul>
<p>目前来看，Docker 和Golang 都是符合这个标准的新技术，现在学习还为时不晚。还有Paas也值得了解。有些读者可能不知道Paas的含义，它是Platform as a service的缩写，平台及服务，像谷歌的Google App Engine就是最早的Paas服务之一。</p>
<h2>| 答疑解惑：渴望、热情和选择</h2>
<p>公司总是加班，没有时间学习怎么办？我也想分享，如何才能长时间数年如一日的坚持？对于年轻人来讲，如何规划自己的人生道路。</p>
<p>这篇内容，作者主要回答了上面这三个问题。这三个问题是每个程序员都会遇到和思考的。我读了以后，深有体会，下面我说一下自己的感触。</p>
<p>对于公司总是加班，没有时间学习，这个要想想老祖先孟子说过的一句话：<strong>行有不得，反求诸己</strong>。作者的回答就很好，你有时间刷短视频，有时间打游戏，但是没有时间学习，为啥？因为学习是一个痛苦的事，是一个反人性的事，而打游戏是一件让你快乐的事情。</p>
<p>在学习这件事情上，要求我们主动鞭策自己，主动找碎片时间，常年坚持，积少成多，知识来源于点滴积累。另外还有一点，如果你真的到了一个经常加班以至于学不到新东西的程度，索性不如辞职。这个公司它已经不能让你成长了，无论是公司内成长，还是自修式成长，都不能让你成长了，那么你就选择果断地离开。离开也是一种成长，这条建议特别适合20~30岁的年轻人。</p>
<p>再看第2个问题，如何常年如一日坚持写作。人类会说话有100万年的历史，但是有文字会写作，只有1万年的历史。写作这个事情，确实是有难度的，它可能并不适合所有人，有的人天生就能写，但是有的人就不行。有的人一旦坐下来写作，他的大脑就短路了，脑子一片空白。但是这样的人，一般他善于交谈，一旦他和别人开始聊天，他的思维就连贯了，他的各种想法开始层出不穷。所以我觉得，写作这个事情也不必强求，如果你不擅长写，你可以尝试其他方式，比如说录短视频。运营一个视频号目前也是机会，找到适合自己的方式就好。</p>
<p>另外还有写书，这件事情有的人觉得写书在中国因为版税低，收入很低，远远不如做其他的事，像企业内训、软件外包来钱快。我想说的是，像企业内训和软件外包，这些事它就像沙滩上的城堡，海浪一来，随着岁月的冲刷，到年老的时候什么都没有了。</p>
<p>但是你写的书，当你年老的时候还能陪伴着你，这是一种岁月的回忆。另外，写书的收获不在于书内，而在于书外。还有就是，目前咱们国家正在处在科技腾飞的起飞阶段，这个时候需要有人做知识的布道者，做知识市场的开拓人，这既是荣誉也是机会。</p>
<p>再说最后一个问题，如何规划自己的人生。在这个问题上我觉得作者给的建议，都十分有用，20 ~ 30岁就是要拼命让自己成长，尝试各种可能性，说的更直白一点，不要长期在一个岗位上做重复的事情，一旦你感觉自己没有成长了，马上换岗。当然我不是鼓励跳槽，除了跳槽以外，你还可以选择内部创业或转岗，如果公司内部不给你机会，那你就到外面去寻找机会。30 ~ 40岁，正是干事业的时候，如果此时你的激情还没有完全被社会磨灭的话，你可以选择创业，选择一个适合自己的方向，去做一件自己真正喜欢的事情。</p>
<p>现代人的平均寿命已经提高了，原来我们讲一个人最年富力强的青春年华是在20 ~ 40岁，现在我觉得可以延长到50岁。30 ~ 50岁，一个人都随时可以开始创业，为社会创造价值。如果你觉得晚了，可以想一想褚橙。</p>
<p>至于具体从事什么样的职业，这个问题，我觉得很多时候，其实主要是看两点：一个是自己的性格，一个是运气。本质上我们做的很多选择其实都源于自己的性格。但我觉得这里有两点，可以分享一下：</p>
<p><strong>第1点</strong>，无论在任何情况下，哪怕你在一个竞争多么激烈的城市，一个内卷多么严重的公司，你始终都要坚持做一个不伤害他人的人，任何时候都不要做亏心事。这是第1点，因为不值得。可以不行善，但也不要作恶。</p>
<p><strong>第2点</strong>，要坚持自己的初心，有时候要有一点点情怀。有的人可能会说，那如果照你这样说的做的话，我可能就没有饭吃了。这个社会还不至于，整个社会的风气在慢慢变化，尤其在大都市。有时候这样做，反而可以找到志同道合的人，反而有一些不一样的机会。</p>
<h2>| 如何成为一个大家愿意追随的Leader？</h2>
<p>分享一个小故事吧，大概10年之前，有一年公司颁发最佳员工奖。当时大领导找到我，说你和你的属下都应该得奖，但是今年总公司只给了一个名额。我说如果只有一个名额，那么就把这个名额让给我的好兄弟吧。而我甚至从来没有把这件事情告诉过获奖人，我觉得这是他应该得的，也是我当时作为一名Leader应该做的。但是这并不是说，我就是一位合格的Leader，我还有许多需要学习的地方。</p>
<p>这篇文章讲如何做一名大家都愿意追随的 Leader，注意，这里的定语是大家都愿意追随，但是这样的Leader并不是谁想追随就能追随的，因为太稀少了。100个人里面没有一位，1000人里面也没有一位，1万人里面才可能出一位。</p>
<p>文章里有大量的篇幅对比了Boss和 Leader的区别。简言之， Leader是用自己的技术领导力，用个人魅力去带领团队，做事情的时候总是说「<strong>跟我上</strong>」，有肉吃和大家一起分享。甚至为了兄弟多得一些利益，愿意把自己的让出来。而Boss主要是用行政命令和制度，用组织关系，以机械的方式驱赶团队，「给我上」。一旦项目进展不顺利了，就要有人背锅，领导是永远没有错的。</p>
<p>两者在对待离职员工这件事情上会有本质的区别。 Boss的态度是，不准走，走就扣你工资，走就通过行内朋友打压你，让你找不到工作。而Leader则是帮助你，主动推荐公司给你，衷心祝你有更好的发展。即使你错了，也要帮助你提升认知。</p>
<p>一个由Leader带领的团队，是以项目为单位进行组织的。而Boss带领的团队，一般都是以工种进行划分的。如果你所在的公司有明确的前端后端分工，有专门的产品经理、QA，那么恭喜你，你的领导可能只是一个Boss，他不太可能是你可以真心追随的Leader。</p>
<p>尽管真正的 Leader这么少，但让人值得高兴的是，并不是只有在组织关系上的 Leader，你才可以追随。事实上你在社区里发现的，你都可以追随。你可以读他的书，学他的课，可以和他一起维护他开创的开源项目。追随的方式有很多种。</p>
<p>==（好，以上是前10篇的笔记，大约8800字）==</p>
<h2>| 程序中的错误处理：错误返回码和异常捕捉 &amp; 12 | 异步编程以及我的最佳实践⭐️</h2>
<p>这两篇关于错误如何处理的文章，干货特别特别多。它是帮助我们正确处理错误的终极方法论。包括各种常见语言，常遇错误，都谈到了。</p>
<p>软件不可能没有错误，当出现错误的时候，我们应该思考两个问题：</p>
<p>第一，这个错误是在哪里产生的？<br>
第二，这个错误最终要由谁来买单？由谁来消化？</p>
<p>我们依次看一下软件中三类常见的错误。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210331140429image-20210331140422862.png" alt="image-20210331140422862" style="zoom: 67%;" />
<p><strong>第1类</strong>，关统底层基础设施产生的错误，比如远程服务器通讯失败，内存耗尽，网络资源无法拉取等等这些错误。它们最终要由运维人员来买单，所以对这些错误的处理，我们要 Catch，同时监控，然后发短信或语音警报。</p>
<p><strong>第2类</strong>，中间件模块代码中的错误。这类错误有可能是调用底层代码产生的，也有可能是接受了来自上面业务层不合理的输入触发的。这些错误最终是要由开发者来消化，所以这些错误我们要Catch，并且要暴露出来。哪里出错了，具体错误信息是什么，然后都要报告给开发者。这些错误都要在开发阶段解决，所以越早暴露越好。</p>
<p>业务错误，一般公司要靠测试用例和QA把他们全部覆盖住。同时还需要程序员写上足够的Unit Test代码，自动化测试跑一跑，保证代码的健壮性。模块代码要有Swagger 文档，上层消费代码调用的地方需要考虑到所有错误，在文档中要有体现。</p>
<p><strong>第3类</strong>，发生在业务代码处。有可能是调用底层代码或者是模块代码产生的，也有可能是来源于用户错误的输入。对于前者，要把它们全部Catch 住，并在开发阶段消化掉；对于后者，要把信息通过界面反馈给用户，建议用户做出适当合理的调整。</p>
<p>对程序错误的处理，从处理与不处理来讲，又可以分为两种：</p>
<ul>
<li>
<p><strong>一种情况</strong>，是把错误抓住，再向上抛出去，本身不处理。这种情况一般发生在中间件模块层，当应用代码调用出错的时候。还有就是发生在业务代码层，由用户输入不当导致的错误，这种错误还给用户，让用户自己来消化。</p>
</li>
<li>
<p><strong>另外一种情况</strong>，是抓住错误以后自己消化掉，并且做相关的错误日志记录。这种错误一般属于运维错误，不是开发阶段能够解决的，一般在开发阶段也暴露不出来。</p>
</li>
</ul>
<p>当涉及到异步代码的时候，JS里面的<strong>异步转同步</strong>编程是最理想的一种方式。结合async / await语法可以让代码非常简洁。但是在这里，我不喜欢使用try-catch，至少不在明面上使用。我们至少可以在一层代码里面，例如在中间件模块层或者是业务代码层，专门有一个地方统一封装一下try-catch ，这样其他地方就不需要再写类似的catch代码了。</p>
<p>举一个最常见的场景，在业务层请求后端接口，这个地方，我们可以直接将try-catch和相关的 then 捕捉，都封装到一个requst 方法里面，并且这个方法还包含 n 次网络错误重试。这样我们在调用接口的时候，只需要使用await同步调用这个request方法就可以了。举一个代码伪例看一下：</p>
<pre><code class="language-js">let res = await http.request(url,data)// 内含网络不佳、服务器打盹等情况下自动3次重试机制
if (res &amp;&amp; res.errMsg === ‘ok‘) {
  ...
}else {
  ...
}
</code></pre>
<h2>| 魔数 0x5f3759df</h2>
<p>这篇内容虽然是选读，但非常值得一读。之所以作为选读，我觉得不是因为不重要，而是因为它确实有点难。普通文章可以2倍速快过，这篇文章可能对于大多数读者，即使全神贯注，第一遍也只是能了解个大概，很难明其细理。</p>
<p>既然这么难，为什么还值得阅读呢？因为它充分体现了程序员的一种孜孜不倦的探索精神。文章里说的这个魔数，它很神奇，是杜甫诗中那种「造化钟神秀」的神奇。这个魔数就像人类是如何进化出来的一样，它是<strong>理性+直觉</strong>的智慧结晶，是一代一代程序员大神接力完成的一个小壮举。</p>
<p>接下来我们就一起感受一下这个魔数吧。原作者已经很讲的很好，但有些读者仍然觉得没有看懂，我结合自己的学习体会，努力让内容再变得更加容易理解一些。</p>
<p>这个魔数是在下面代码第9行用到的：</p>
<pre><code class="language-c">float Q_rsqrt( float number ) {
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y  = number;
    i  = * ( long * ) &amp;y; // evil floating point bit level hacking
    i  = 0x5f3759df - ( i &gt;&gt; 1 );  // what the fuck? 
    y  = * ( float * ) &amp;i;
    y  = y * ( threehalfs - ( x2 * y * y ) );  // 1st iteration 
    // 2nd iteration, this can be removed
    // y  = y * ( threehalfs - ( x2 * y * y ) ); 

    return y;
}
</code></pre>
<p>我们先不要先这个代码，即使是程序员，第一眼也很难直接看懂。首先，我们想一个问题，就是计算机是如何表示小数的？</p>
<p>整数很好表示，十进制转二进制就可以了。例如10，不断除以2，将余数从左向右排列，例如10转成二进制是1010：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210402180107image-20210402180105134.png" alt="image-20210402180105134" style="zoom:50%;" />
<p>但是小数怎么表示呢？要知道计算机里只有0和1，没有小数。我们举个例子，例如0.2这个小数，如何用二进制表达？</p>
<table>
<thead>
<tr>
<th>二进制</th>
<th>分式</th>
<th>十进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.01</td>
<td>1*2^-2^</td>
<td>0.25</td>
</tr>
<tr>
<td>0.010</td>
<td>2*2^-3^</td>
<td>0.25</td>
</tr>
<tr>
<td>0.0011</td>
<td>3*2^-4^</td>
<td>0.1875</td>
</tr>
<tr>
<td>0.00110</td>
<td>6*2^-5^</td>
<td>0.1875</td>
</tr>
<tr>
<td>0.001101</td>
<td>13*2^-6^</td>
<td>0.203125</td>
</tr>
<tr>
<td>0.00110011</td>
<td>51*2^-8^</td>
<td>0.19921875</td>
</tr>
</tbody>
</table>
<p>（表格转绘于<a href="https://zhuanlan.zhihu.com/p/37524827">知乎答案</a>）</p>
<p>在这张图里，中间那一列，星号前的数字，是小数点后面的十进制值，星号后面是2的n次幂，小数点后面有几位，n就等于几。我们看到，第5行数字还大于0.2，第6行数字就少于0.2了，并且第5行只是比第5行二进制在尾部少了一个0.00000001。</p>
<p>我们发现，有些数字计算机无法精准表达，只能近似。明白了这一点，对于我们理解一个老生常谈的问题「浮点数0.1+0.2为什么不等于0.3」很有帮助。</p>
<p>有的读者可能会想，既然整数能用二进制表示，小数应该也能用二进制表示，为什么不能直接将小数用二进制表达成一个「整数部分+小数部分」这样的形式呢？</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403094451image-20210403094450055.png" alt="image-20210403094450055" style="zoom:150%;" />
<p>答案肯定是可以的。在上个世纪80年代，在小数形式没有被IEEE754浮点标准统一之前，确实存在很多表示小数的形式，其中之一就是<strong>定点数</strong>。如上图所示，78.375这个小数主要就由两部分组成，绿色区域是1001110，是十进制的78，红色区域是0.01100000000000000000000(20个零)，是十进制的0.375。这就是定点数的表示方法。</p>
<p>定点数的表示方法结构清晰、简单。</p>
<p>与定点数相对的是浮点数，目前应用最广泛使用的浮点数标准是IEEE754。一般教科书上32位浮点数的公式是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403173459image-20210403173457541.png" alt="image-20210403173457541"></p>
<p>其中E是指数区的数字，M代表的是尾数区的一个比值大小。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403172112image-20210403172105901.png" alt="image-20210403172105901"></p>
<p>（图片转自<a href="https://fabiensanglard.net/floating_point_visually_explained/index.html">https://fabiensanglard.net</a>）</p>
<p>这个公式是怎么来的呢？为什么定点数这么清晰，但是最后复杂的浮点数却统一了天下呢？接下来我们看一下这个浮点数公式是怎么推导出来的，以及它有什么优点。</p>
<p>基于前面对定点数的了解，想一想0.2那个数字，我们不难想象，在二进制中，对于任何一个小数，都存在一个n，使其介于 2^n^ 与2^n+1^之间。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210402183919image-20210402183917560.png" alt="image-20210402183917560"></p>
<p>其中n可以是正数，例如2^1^（2） &lt; 3.14 &lt;2^2^（4）；也可以是负数，例如2^-3^（0.125） &lt; 0.2 &lt;2^-2^（0.25）。这也很好理解，假设2^n^有10个二进制位，那么2^n+1^刚好就有11位，在它俩之间，由于后面子位的变化，肯定还能容纳一些数字，于是它俩就构成了一个两端是整数的闭区间[2^n^ ，2^n+1^]。</p>
<p>那么，我们能不能这样，对于任何一个小数，我们能不能先确定它所在的<strong>闭区间的下限</strong>，以其作为起始值，然后再加上一个不大于<strong>2^n+1^-2^n^</strong> 的偏移量，这样不就可以表示一个小数了吗？</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403174448image-20210403174446637.png" alt="image-20210403174446637"></p>
<p>（图片转自<a href="https://fabiensanglard.net/floating_point_visually_explained/index.html">https://fabiensanglard.net</a>）</p>
<p>这是一个使用窗口和偏移量解释浮点数的例子。我们以3.14举例，它的闭区间是[2^1^ ，2^2^]，闭区间下限是2^1^，即2，二进制表达是10。由有在IEEE754浮点数标准中，E区为了同时可以表示正负指数，故意作了偏移，E-127等于指数，指数是1，所以E等于128，二进制是10000000（七个零）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403175518image-20210403175516227.png" alt="image-20210403175516227"></p>
<p>（图片转自<a href="https://fabiensanglard.net/floating_point_visually_explained/index.html">https://fabiensanglard.net</a>）</p>
<p>那么尾部区数字应该是多少呢？</p>
<p>尾数区等于(3.14 - 2)/(4 − 2)*2^23^，等于4781507，二进制表示就是10010001111010111000011。相当于把尾数区分成2^23^个段，然后将3.14在闭区间[2^1^ ，2^2^]所在的位置，映射到这个尾数区域中来。</p>
<p>最终如上图所示，这正是3.14使用IEEE754标准表示的二进制形式。</p>
<p>现在我们尝试做一件事情，从这个示例中，归纳出浮点数的公式。为了表示方便，我们先将表示正负的符号位略去：</p>
<p>X = 闭区间窗口左边界 + 窗口偏移量 = 2^n^ + M / 2^23^ * (2^n+1^-2^n^)</p>
<p>其中M是偏移量。因为二进制比较特殊，2^n+1^-2^n^其实就于2^n^ * 2 - 2^n^，等于2^n^。所以：</p>
<p>X = 2^n^ + M / 2^23^ * 2^n^</p>
<p>组合一下，并且将n由E-7替换掉，再加上符号位，就变成了：</p>
<p>X = (-1)^S^ * (1+M/2^23^) * 2^n^</p>
<p>对于上述公式，忽略一些常数，可以简化为：</p>
<p>X = (1+m)∗2^e^</p>
<p>对于整数，不需要偏移量，32位的整数公式可以这样写：</p>
<p>X = E∗2^23^ + M</p>
<p>那么接下来我们看一下，浮点数有什么优点呢？</p>
<p>浮点数虽然复杂，但是相同的二进制位数，它比定点数表示的范围更大，精度更高，因为它应用的范围最终也最广。当然了开始的时候程序员可能也没有想这么远，定点数可能是浮点数产生的土壤，正是因为看到了定点数的不足，然后才在此基础上才发明了浮点数。</p>
<p>解释了这么多，刚刚在解释魔数上走完了第一步。接下来就是关于平方根倒数据公式的推导，首先看一下正宗的平方根倒数公式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403204231image-20210403204229490.png" alt="image-20210403204229490"></p>
<p>平方根基本都理解。什么叫倒数？标准定义是，一个数与其乘积为1的数。也就是将一个数作为分母，1作为分子，这样形成的数就是原数的倒数。表现在指数上，就是在指数的绝对值上加上负数。平方根表现在指数上，是2的倒数。同理，如果是立方根，就是3的倒数。</p>
<p>接下来，我们将公式两边取以2为底的对数，于是公式变成了这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403205038image-20210403204842047.png" alt="image-20210403204842047"></p>
<p>什么是对数？</p>
<p>一般人对幂运算比较清楚，但是对对数可能不了解。像2^n^这是幂运算，所谓对数是求幂的逆运算。如果有a^x^ =N，那么数x就是以a为底，N的对数。</p>
<p>取对数一般用数学符号log表示，以2为底取y的对数，就是log~2~(y)。对x^-1/2^以2为底取对数，就是log~2~(x^-1/2^)。</p>
<p>参照对数的基本运算规则，我们看一下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403210123image-20210403210122126.png" alt="image-20210403210122126"></p>
<p>log~2~(x^-1/2^)也等于-1/2 * log~2~(x)，应用的是第4条规则。</p>
<p>接下来就要用到前面提到的浮点数公式了，因为x是小数，我们将简化的浮点公式（X = (1+m)∗2^e^）带入上面的公式，于是得到：</p>
<p>log~2~( (1+m~y~)∗2^ey^) = - 1/2 * log~2~( (1+m~x~)∗2^ex^)</p>
<p>再运用一下上面提到的第2条和第6条对数运算规则，于是就变成了：</p>
<p>log~2~(1+m~y~) + e~y~ = -1/2 * (log~2~ (1+m~x~) + e~x~)</p>
<p>到这里，在逻辑上数学公式能做的事基本做完了，接下来要到发挥想象力的时候了。由于m~y~和m~x~都是M与2^23^的比值，它是一个在区间(0,1)之间的值。这样一来，我们可以将对数曲线函数，得以近似转换为一个直线函数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403211457image-20210403211241641.png" alt="image-20210403211241641"></p>
<p>这一步是关键，因为我们本来要计算的就是近似值，就是为了牺牲一定的准确度，而换取高效率。不得不佩服第一次想到这个办法的程序员，他一定相当的聪明，不仅长于逻辑推理，还富有想象力。</p>
<p>再往下就没有什么需要多加解释的啦，原文中就写的很明白，基本上就是代入前面已经推导好的浮点公式和整数公式，最后终于将平方根倒数公式推导成为了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403211717image-20210403211716119.png" alt="image-20210403211716119"></p>
<p>其中I~x~是一个整数，R是一个常量。</p>
<p>接下来，又到了程序员秀工程智商的地方了，这个R是啥？R就是这篇文章标题中提到的魔数。那这个魔数是怎么算出来的呢？</p>
<p>可能就是基于大量历史数据，归纳出来的一个估值。正常情况下，我们可以用平方根倒数公式，用正常的、效率低的方式，算出应该的得数，然后将得数代入上面的这个精简的公式，将I~y~替掉，算出R的值。</p>
<p>由于我们前面将对数曲线函数，转换成为了直线函数，这中间是有误差的，所以就多次代入，暴力求解，最终得到一个使测试数据误差最小的R常量。然后再把这个常量用到程序代码中。</p>
<p>优化这个常量R，是一个从1到1万的活，是一个工程的话。前面我们提到的曲线转直线，以及将浮点公式带入，是一个从0到1的创举。</p>
<p>故事讲到这里，刚进行到了第二步，接下来还有进一步的工程优化。</p>
<p>由于前面我们在计算过程中取了近似值，误差肯定是有的。接下来又有一位聪明的工程师想出了使用牛顿迭代法，近一步将误差缩小。我们看看他是怎么做的。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403213124image-20210403213122916.png" alt="image-20210403213122916" style="zoom:50%;" />
<p>所谓<strong>牛顿迭代法</strong>，是在曲线上不断做切线，取切线与坐标轴的交点，例如x~1~，再于曲线上x=x~1~的点继续做切线，不断向方程解逼近的一种近似求解的方法。这种方法非常像创业，在创业中只要能找到像牛顿迭代法这样的抓手，一步一步逼近，效率就会越来越高，成功也会越来越近。</p>
<p>牛顿迭代法依据其定义，还有一个通用公式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403213641image-20210403213639456.png" alt="image-20210403213639456"></p>
<p>在这里f’(x~n~)是f(x~n~)的<strong>导函数</strong>，这又是一个概念。</p>
<p>什么导函数？导函数是怎么来的？网上有人做了一个简单的推导：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403213731image-20210403213728962.png" alt="image-20210403213728962" style="zoom: 25%;" />
<p>（图片转自<a href="https://www.zhihu.com/question/61401053/answer/187375676">知乎</a>）</p>
<p>所以，对于f(y)=y^-2^−x这个函数，因为x此时相当于是常数，直接被略去了，所以它的导函数，按上面推导出来的公式，是f‘(y)=-2 * y^-2-1^。那进一步变换一下，就成了f’(y)=-2y^-3^。</p>
<p>然后将函数，与导函数，代入上面牛顿迭代法的通用公式，于是就得到了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210403215702image-20210403215700412.png" alt="image-20210403215700412"></p>
<p>这一步没有别的目的，就是用牛顿迭代法，使我们前面近似求出的平方根倒数更加精准一点。原文中有明确讲解的，我都不再讲了。强烈建议感兴趣的读者阅读一下原文。</p>
<p>好了，这个关于魔数的故事讲完了。我不知道你是什么感觉，我的感觉是这样的，它非常像我们人类的进化。今天我们看自身，我们觉得人类与猿猴已经相去甚远，但是在我们进化的过程当中，也有可能充斥着一些魔数。这些魔法它们怎么产生的？无非就是在资源不充足、算力不够的情况下，个别富有想象力的天才猿猴突发奇想，走出了一条不同寻常之路。之后又有人在他从0到1的基础之上，继续迭代完善，以至于后来人类都看不到来时路的模样了。</p>
<h2>| 推荐阅读：机器学习101</h2>
<p>这篇文章推荐了大量的关于机器学习和深度学习的课程以及资料，好多都是免费的。全部学完这些内容，基本上整个夏天都要过去了。</p>
<p>我个人比较倾向于学一些实用型的技术，就是怎么样在工程层面，加一些已经可以直接应用的人工智能功能，到应用中去。我感觉关于TensorFlow的那9节课就不错，每节只有10分钟。</p>
<h2>| 时间管理：同扭曲时间的事儿抗争 &amp; 16 | 如何利用好自己的时间？</h2>
<p>这两篇文章是关于如何管理时间的，这是每个人都应该学习的内容。</p>
<p>在学习时间管理之前，首先要了解一下，人作为一种智慧动物，与时间有关的规律有哪些；其次，要懂得管理自己的周遭环境和人际关系；最后，要学会管理自己的目标和行为。</p>
<p><strong>1，认识规律</strong></p>
<p>有一本书叫《蜥蜴脑法则》，这本书提到在我们每个人体内，在理智的大脑之下，都有一个原始的蜥蜴脑存在。这个蜥蜴脑总想贪图享乐，好逸恶劳。当我们工作了一段时间以后，它会说，“休息一下吧“。一个自律的过程，就是不断与这个蜥蜴脑作斗争的过程。可以说，自律如逆水行舟，不进则退。</p>
<p>还有充足的睡眠，与富有营养的食物，这些都为自律提供了良好的物质基础。据有关研究发现，当人处于饥饿状态的时候，血液中的血糖过低，这时候自控力会大大降低。所以如果要保持良好的自律习惯，保持良好的作息，按时吃饭，不暴饮暴食也很重要。</p>
<p>在时间管理领域还有一个「<strong>二十英里法则</strong>」。有这样一个故事，美国西海岸圣地亚哥距离某地目录有3000英里，有一个心理学家发现，能够坚持徒步到达目的地的人，不是走的最快的，也不是因环境变化而聪明应对的，相反只有那些不管什么天气，每天只走20英里的人，才能最终到达目的地。这个典故告诉我们，时间是我们的朋友，只有坚持不懈的人，才能获得时间上的复利。</p>
<p>人很容易受环境影响。在一个干净的餐厅，例如KFC，如果服务员不停地打扫，这种情况下就餐的人也不好意思随地丢垃圾，甚至还会主动将餐盘收走。再举一个例子，在图书馆，大家都安静看书，你也不会好意思大声喧哗。如果环境能给人及时反馈，或者人能预知到这种反馈，这时候人的言行就会受到环境的约束。我们可以利用这一点，达到养成某些习惯的目的。</p>
<p>还有一个<strong>承诺一致</strong>原则。如果我们在某个场合公开说了什么话，就倾向于兑现这个承诺。</p>
<p>以上，就是在人的身上，与时间管理有关的规律，这些规律都是客观的。利用好这些规律，才能把时间管理这件事做好。</p>
<p>接下来我们看环境。</p>
<p><strong>2，管理环境</strong></p>
<p>环境分为现实的物质环境，和虚拟的人际关系。</p>
<p>为了让每天的工作都卓有成效。我们可以设个闹钟，定点起床，专门准备一间书房或一个角落。工作的地方远离沙发、床铺和电视，摆上闹钟，纸、笔等学习和工作用具，这样的环境利于帮助我们进入工作状态。</p>
<p>如果你在某个公开场合，立了一个Flag，让大家看到了。有许多同行人，那么同行人可以监督你或鼓励你。例如最近充电平台上架的<strong>学习排行榜</strong>功能，就是在学习活动中融入了游戏元素。</p>
<p>这两篇文章里面，提到了外企和国企的氛围差异。在15年前就是这个样子，不要企望短期内这个风气可以改变。在国内企业，厂子里确实有一些人是不好好工作的，是混水摸鱼的，正是这些人的行为，形成了普遍的一种领导对员工的认知，以为只要不管理，只要监管松一些，下属就会偷懒。</p>
<p>事实上，还有一些有理想有追求的人，即使公司放假了，要求员工休息，他都在奔跑。如果没有智慧的领导，以一种大众的偏见，用一刀切的制度，管理所有下属，那么势必会打扰甚至伤害这些积极工作的人。有时候他们还会觉得，如果制度不能一视同仁，会让人不服。为了让庸人服气，不惜伤害真正用心的人。不能因人而管理，是没有智慧或懒惰的体现。</p>
<p>这种职场状态是普通的，抱怨是没有用的，唯一有效的应对方式就是了解，然后变被动为主动，主动管理自己和领导、和周围同事及下属的关系。</p>
<p>一个有效的办法，就是让自己的工作时间表透明，多争取一些信任。</p>
<p>在这两篇文章中，作者给出了三个说「不」的话术，这三个话术我觉得每个职场人在上班前都应该知道。当被要求加班，或压缩工时的时候，可以这样说：我可以加班加点按时完成任务，但是不能保证质量，如果有了bug，概不负责，并且上线后我需要1个月的时间消化不良代码。一听有bug，对方多半都不同意，这时候还可以说：我可以保质保量地完成，但是做不了这么多需求，有些需求必须砍掉。一听砍需求，对方可能也不会同意，这时候就可以说：我还可以保质保量地完成所有需求，但是时间必须延长二周。</p>
<p>你看，「诡」吧，我读到这里的时候，我都觉得做程序员太难了。当然了，上面这个话术是理想情况，有时候你应用了这个话术，也并必能得到自己想要的。起决定性作用的，往往还是文化。</p>
<p>接下来再说一下开会、会谈和通电话。这三者本质上是一样的。如果我们没有目的，这三个活动都可能失控，会浪费我们不少时间。</p>
<p>关于开会，作者说的已经非常好了。开会之前就要准备好<strong>议题</strong>，12345，还有每个<strong>议题的方案</strong>，123。开会是为了同步和确认，同步所有人的认知，立个Flag；确认所有人的责任，和关键的时间节点。大多数人开会没有效率，都是因为本来应该在会下完成的议题断定和方案筛选，都拿到了会上进行。有些产品经理将开会当成工作，但开会不是程序员的工作，所以没有几个程序员是喜欢开会的。</p>
<p>会谈和通电话是一样的，你想和对方聊什么，想交换什么单见，最好像购物一样列一个清单。当清单完成的时候，就可以中止这项活动了。</p>
<p><strong>3，管理自己</strong></p>
<p>如果说认识规律，和管理环境都是容易的，那么接下来对自己的管理却不那么容易了。管理自己主要是管理自己的目标，包括任务的优先级，还有管理好时间投资的方向。</p>
<p>一个人无论多么聪明，有两项能力不一定拥有：一是<strong>认清人生目标</strong>，二是<strong>断定路径价值</strong>。这两项对一个人的影响非常大，也和时间管理有关系，甚至需要半生甚至一生去学习。</p>
<p>我们相信每个人来到这个世界上，都有他独特的价值，大多数人普普通通，不是因为资质平平，只是因为选择太多；相反有些残疾人，资质弱于常人的人，反而取得了常人没有取得的成就，这是因为很多时候他们没有选择。他们不需要学习如何认清目标，以及如何选择路径，因为命运往往只抛给了他们一根稻草。</p>
<p>一个人觉得自己无所不能的时候，其实是什么也做不成的，只能做成一些小事，做不能大事；只有当一个人认识到他这也不能做，那也不能做的时候，他才有可能认清自己的人生目标。目标选定以后，接下来就是路径价值的判断。</p>
<p>通向罗马的路有千万条，但是当你的位置和罗马的位置确定以后，只有一条路是最近的。如何判定是哪条路呢？很多人都没有这个能力，特别是当做某件事没有经验时，我们很难判断接下来应该怎么做。当遇到困难的时候，我们应该坚持，在一个地方深耕呢？还是要学会变通，不要在一颗树上吊死呢？因人而异，而时而异，没有标准答案。这项<strong>路径价值判断</strong>的能力，只能独自练习。</p>
<p>在有了这两项能力以后，剩下的事情就好办了。制定一个需要经年累月才能完成的大目标，制度年度计划，季计划，月计划，为每周制定计划。每天早上起来刷牙的时候，可以想一下今天要做什么；每天晚上刷牙的时候，可以想一想今天做了什么，有什么事做的好，有什么事做得不好。这是目标管理。</p>
<p>在目标管理领域有一套SMART方法，是被广为接受的一个目标制定方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/2021040415210920210120111311.png" alt=""></p>
<ol>
<li>S代表明确。如果一个目标，连机器都能判定是否完成，那么它一定是明确的。</li>
<li>M代表工作量可衡量。如果连机器都能自动判定工作量完成了多少，那么M的标准就达到了。</li>
<li>A代表目标有没有可能达到。在判断一个目标有没有可能实现时，不能凭主观臆断，一般从三个方面判断：1）这件事别人有没有完成过；2）这件事以前咱们有没有人完成过，这是指经验；3）如果前两项判断都不成立，那么从逻辑上分析，这件事有没有可能完成。</li>
<li>R代表相关性。就是完成这件事，对完成大目标有什么增益价值。</li>
<li>T代表时限性。做任何计划都要有一个最终时间点。</li>
</ol>
<p>使用SMART方法，将大目标拆分为一个一个可执行的小目标后，接下来就是做事情的方法。最经济的方法，是<strong>把每一个事情都当成一项工程</strong>来做。所谓工程，每个节点都追求时间可控。</p>
<p>举个例子，一个婴儿的孕育需要十个月的时间，在这十个月里，无论营养是否充足，时间一到，都会分娩。这就是工程管理的艺术，在每个时间点，确定要做某个特定的事情，在单位时间段内，争取把任务完成得最好；如果没有100%完成，也不要影响下一个时间段工程的开始。这就是<strong>工程思维</strong>。要管理自己的时间，必须有这个思维。</p>
<p>有了以上能力和管理方法，剩下的就是关于时间的算术题了。</p>
<p>例如，花时间学基础知识，啃原始文档。建立全面的目标技术知识结构，在遇到问题的时候，知道要向哪里寻找答案。这是投资一次，避免多次浪费的时间投资。</p>
<p>例如，做一些软件自动化配置，或使用自动化工具。机器能干的活，就不要让人干。</p>
<p>例如，花钱节省时间。在信息的获取上，直接购买专栏，而不是到处搜索零散的内容。直接购买付费软件，而不是忍受盗版。付费软件可以自动更新，与时俱进使用最新功能，还没有广告。还有，花钱购买更高配置的电脑，让工作更高效。有时候付费就是节约。</p>
<p>这一点我做的就很不好，我凡事都想节约，在更新设备这件事上，我一直都是能用则用。拿我在充电平台录课这件事来说，由于我自己的电脑是8年前的旧款，不是高清屏，分辨率不够，所以每次录制都是借用充电公司的电脑，但如此一来，每次都要来回拷贝文件。如果我舍得花这一万块钱，就不用忍受179次的浪费了。</p>
<p>再如，关于目标的优先级，先完成优先级高的事情。那么哪些事情优先级高呢？这个主要看SMART中R，看与总目标的相关性。应该把精力最好的时段，留给最重要的任务；而一些非紧要任务，非困难任务，可以采用<strong>双工模式</strong>。</p>
<p>所谓<strong>双工模式</strong>是这样的，在工作的时候，主要在电脑上，用双手和眼睛工作，这时候耳朵是空闲的，所以一般情况下可以选择听书。听樊登读书，或听充电平台。这个时候听书是一种需要，而不是一种任务了。时间长了，如果工作的时候不听，还会觉得不习惯；而工作开始的时候，同时启动听书，也更容易进入工作状态。这种模式开始我也不习惯，但久了就离不开了。它可以让我们在一份时间内完成两份事情，这相当于我们每天比别人多出一倍的工作和学习时间。</p>
<p>除了双工模式，还有一种写作技巧，我觉得也很好，就是双写作模式。用手机和电脑同时打开一份共享文档（我一般使用石墨文档），在手机上用讯飞语音输入，在电脑上用五笔修改一些错字，以及处理一些表格、图片等信息。这种方式可以极大提高写作效率。使用这种方式的时候，一定要记得开启手机免锁屏，以及设置输入法最大时间的免跳转。</p>
<p>后来我发现PC版本的讯飞还有一种跨屏语音输入的能力，可以将手机用作PC语音识别的话筒，效率也不错；还有，现在PC版本的语音识别本身准确率也很高，可以直接在电脑上作语音输入。</p>
<pre><code>// 下面这首诗识别率就很高
床前明月光，疑是地上霜。
举头望明月，低头思故乡。
</code></pre>
<p>遗憾的是，讯飞一直不支持五笔输入，我使用讯飞语音识别的时候，还必须在它和一个五笔输入法之间做频繁切换，这一点很不爽。工具是不断变化的，相信以后会有更好的工具。</p>
<p>以上就是我学习这篇文章以后所有的感悟了，很多内容都是想到了，但是不一定能做到。关于时间管理，确实是一项值得我们不断修炼的技能。</p>
<p>==（第二段到这里结束）==</p>
<h2>| 故障处理最佳实践：应对故障 &amp; 18 | 故障处理最佳实践：故障改进⭐️</h2>
<p>《黄帝内经》中说：“上工治未病，不治已病”。这句话用在运维实践中也很实用，就是我们要努力去避免线上故障的发生，而不是在故障发生以后手忙脚乱地处理。</p>
<p><strong>自动化的运维工具</strong></p>
<p>我们需要根据用户功能，创建一张全站点的资源地图。在这张地图中，每个节点都必须有一个相对完善的运维工具，这个工具可以帮助我们检测这个节点有没有问题，帮助我们定位问题，以及有问题了怎么处理。是降低处理，还是回滚代码，还是紧急更新，都需要在这个运维工具中有自动化的支持。</p>
<p>有了这个工具还不够，我们还需要适当的采用一些灰度更新，和平时期的故障演练，来避免线上真实故障的发生。这就是内经里讲的治未病。此外，我们还要思考，我们的系统架构是否合理？团队的工程能力是否到位？以及在故障发生后，如何复盘（Ask 5 Whys），如何对待故障责任人。</p>
<p>对于一个经常发生线上故障的公司来讲，有三样东西是非常有价值的：</p>
<ul>
<li>
<p>第一，一套全自动运维工具，并且支持分布式；</p>
</li>
<li>
<p>第二，一个合理而富有弹性扩展能力的分布式系统架构；</p>
</li>
<li>
<p>第三，一个让团队不断学习，工程能力不断提升的技术管理规范。</p>
</li>
</ul>
<p><strong>如何处理故障责任人</strong></p>
<p>在文章中，作者提到了关于如何处理故障责任人。有的公司主张采用罚的方式，罚钱或降级。这是惩罚措施，其实只适用于非创造性岗位；对于研发岗位其实是不适合的。惩罚会在文化层面上起副作用，它会让大家以后做事情畏手畏脚，不敢放手尝试。多做不如少做，少做不如不做。原理上讲所有创新都是有风险的，创新产生故障的机率都很大。你要鼓励创新，就要容忍犯错。</p>
<p>我想从另外一个层面说一下这个问题。其实每一个有追求的程序员，他都希望自己写的代码很漂亮，架构很合理，软件很稳定，这是他的技术追求，是人性中向上的一面。所以我的想法是，对于线上故障，我们应该更多的去挖掘人性中积极向上的一面，而不应该去处理导致故障的直接负责人。说实话发生一次线上故障，给直接责任人定责很容易，但故障背后可能是一个工程问题，是一个团队管理问题，甚至是一个公司文化问题。这时候你怎么好意思只处理直接负责人呢，对吧。</p>
<p>最好的方式还是惩前毖后，治病防病。分享一个在公司中亲身经历的见闻，有一次团队组织大家学习一个技术，而这个技术让某个后端兄弟主讲。这个兄弟新来不久，为啥让他分享呢？后来才知道，由于他对这项技术使用不当，导致了线上一次故障，所以公司安排他主动学习并做会议分享。</p>
<h2>| 答疑解惑：我们应该能够识别的表象和本质</h2>
<p>这篇文章是教我们如何进行深度思考的，如何透过表象看清问题的本质。</p>
<p>首先第一点，如何看待兴趣？一般常识告诉我们，兴趣是最好的老师。但是兴趣这个东西，如果说长期坚持，不能给我们带来正反馈和成就感的话，那么我们可能很难坚持下去，这个时候兴趣可能就会变成一种压力了，那这种现象其实在家长给孩子报兴趣这件事情上就可以很好的体现出来。</p>
<p>关于这一点，我其实有那么一点不是很一样的看法。我自己有一个很小的兴趣爱好，已经陆续坚持十几年了，就是吹管弦乐，我喜欢吹笛子、箫这些乐器。但是我在音乐上天赋真的又非常差，我都难认准确识别音高，每次练习，我都是练得完全没有兴趣，然后就不练了。过了一段时间，工作累了，又拿起来吹一下。我从这件事里得到的正反馈和成就感非常少，但是也从来没有放弃过，我一直视其为我的灵魂爱好。</p>
<p>在上一篇里面，我们聊到了<strong>认定人生目标</strong>，还有<strong>判定路径价值</strong>。这两点能力其实对每个人来讲，都非常难。有的人可能一生都找不到一个明确的目标，就是觉得好像对什么东西都感兴趣，又好像对什么东西都不感兴趣一样，很难找到某一个兴趣点持续坚持下去，很难找到一个能够持续收获成就感的目标。我觉得这也是很正常的，因为大多数人就是做不到。</p>
<p>另外还有一点，就是关于学习，我们一向以为在工作中学习得更快。其实这个问题的本质，在于我们在工作中，有实际要解决的问题，有更为紧迫的时间，当然还可能有高手可以切磋。在实践中学习，在任何时候效率都是最高的，无论是在什么样的一个场景中，是在工作中，还是在开源软件的开发中，还是在一个PBL教学实例中。</p>
<p>现在开源社区发展的很好，加入开源软件的贡献者队伍，同样可以学到很多东西。门槛更低，要求更少，很多开源大神也非常nice。这两年开源软件发展得很不错，有些国外的孵化器投资国内一些云原生公司的要求之一，就是看软件是否完全开源。</p>
<p>文章中还提到了什么技术是未来的趋势。有一种观点说，看未来社会中的痛点在哪里，痛点在哪里趋势就在哪里。还有一种观点说，看大企业和国家把资源投向哪里。很多时候这两者是重合的，那些大企业他们也特别注重解决未来的社会痛点，这是企业赖以长久生存的基础嘛。比如说人工智能，像谷歌、Facebook这些大厂都在大力度投入。咱们国家更是将人工智能的世界领先，列为了2035年的科技目标之一。</p>
<p>说到人工智能，现在的人工智能一直都是弱人工智能，有多少人工，才有多少智能。未来如果这一块有所冲突了，可以将类似于人类意识的某种东西，通过量子纠缠或其它形式，注入到计算机的CPU当中，那个时候上面的很多行业都会发生翻天覆地的变化。这个基础技术的创新，就是在一个很大的范围上，在科技杠杆的支点上，发挥了巨大了的作用。这样的技术就是牛x的技术，但是对于我们大多数程序员来讲，是触碰不到的。我们能触碰到的，反而是视频号、小程序这样的技术机会。这些技术虽然含金量不高，但却影响了几亿人，甚至以后还会影响十亿人。</p>
<p>不知道你读了是什么感觉，总结一下就是四个字：深度思考，从动力因、目标因、质料因和形式因各种因果关系中，找出动力因，这是因果关系里面的主要方面。</p>
<h2>| Git协同工作流，你该怎么选？</h2>
<p>什么叫工作流？Git工作流什么意思？这来源于英文翻译，英文叫Git workflow，翻译成中文就是Git工作流。从workflow这个单词的字面来理解，它是一个让工作流畅、不发生阻滞的一个规范。再说得直白一点，就是git仓库的使用规范，告诉我们在开发中应该如何使用git仓库。</p>
<p><strong>git工作流</strong></p>
<p>如何使用git仓库，看git操作文档不就可以了吗？我们看一张图，看完这张图就明白了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405104058image-20210405104051925.png" alt="image-20210405104051925"></p>
<p>（图片转自专栏原文）</p>
<p>这个图里的规范，被称为GitFlow，最早是由一个老外文森特·德里森（Vincent·Driessen）在2010年发明的。它是一个方法论，它将一个git仓库强制分为两个主要分支，一个是master或main线上分支，另一个是developer研发分支。</p>
<p>当线上有bug时，新增一个hotfix分支，bug解决后同时将这个临时分支的代码，同步至两个主要分支内。这一点也很好理解，如果只同步到了线上分支，或忘记往开发分支同步了，那么下次版本上线老bug又出现了。工程管理问题就出现了。</p>
<p>常规的开发，分小组（或个人）进行，每组一个feature分支，本地开发完了，往developer分支合并，在测试环境测试。测试环境没有问题，将所有待发布的功能点对齐，创建一个临时release分支，部署到预发环境。预发环境测试没有问题，再推到线上。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405105708image-20210405105706216.png" alt="image-20210405105706216" style="zoom: 67%;" />
<p>现在明白了吧，因为在研发过程中，我们需要不同的软件环境，每个环境要对应不同的仓库代码，而我们的开发又不能停止，还需要实现CI/CD，也就是持续集成（Continuous Integration）与持续发布（Continuous Delivery），这个时候Git协作工作流规范就应运而生了。</p>
<p>那有人可能会问，为什么要搞多个环境呢？这不是为了控制版本更新的风险吗，线上有百万用户正在使用产品呢，发版如果有问题，影响了用户怎么办？事实上在中国确实到今天都有许多公司小团队，是不使用Git工作流的，版本更新都是直接从程序员的开发机怼到线上去，这时候什么测试用例覆盖率、上预发、回归测试都是浮云。</p>
<p>用过一段时间的GitFlow你会发现它有可能，虽然很严谨，但是有点麻烦，不适合小步快跑。于是后来就有了改进版的Github Flow，</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405111729image-20210405111230244.png" alt="image-20210405111230244"></p>
<p>（图片转自<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">阮一峰博客</a>）</p>
<p>在这个规范中，两个主分支变成了一个，只有一个Master或main分支。当线上有bug或开发新功能时，从主分支拉出一个补丁分支，开发完成后，向主分支发起PR，也就是Pull Request。处理PR的过程，就是一个讨论、决策和优化的过程，最后没有问题，就把补丁合并到主分支上，同时临时的补丁分支被删除。</p>
<p>虽然这个协作规范简化了，但是在企业团队中它也有问题，它影响团队的持续交付。企业要求发版不能影响开发，不能因为有一个小组要发版，其它小组都要被阻塞。于是更一步改进的Gitlab Flow。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405112057image-20210405112055833.png" alt="image-20210405112055833" style="zoom:67%;" />
<p>（图片转自<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">阮一峰博客</a>）</p>
<p>这个规范在Github Flowr基础上，增加了两个分支，一个是pre-pro分支，用预发测试，另一个是pro分支，用于线上生产。Gitlab规范是前面两种规范在企业开发中妥协的结果。事实上仍然有人使用GitFlow规范，因为它足够严谨；Github Flow也有许多人使用，Github 开源网站本身用的就是这个协议。</p>
<p>Gitlab Flow规范除了企业版本，还有一个开源版本：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405112510image-20210405112509117.png" alt="image-20210405112509117" style="zoom: 67%;" />
<p>（图片转自<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">阮一峰博客</a>）</p>
<p>这个版本适合开源软件的研发，它将每个稳定的发行版都固定为一个分支。</p>
<p><strong>git使用技巧</strong></p>
<p>在使用Gitlab Flow或Github Flow时，有一些git技巧是必须要掌握的。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405114025image-20210405114023413.png" alt="image-20210405114023413" style="zoom: 67%;" />
<pre><code class="language-bash">git clone git@gitee.com:rxyk/git-test.git --depth=1
</code></pre>
<p>git clone将远程仓库代码拉取本地。depth参数用于控制拉取层次，在拉取一些历史悠久的老仓库时很有用。</p>
<pre><code class="language-bash">git add .
git stash
// output: Saved working directory and index state WIP on master: 040d83b Initial commit
</code></pre>
<p>当我们在本地写代码的时候，如果线上有个问题必须马上处理一下，而本地的代码还没有写完，还不能提交，这时候应该怎么办呢？git stash指令可以帮助我们将本地的修改，暂时藏匿至一个看不见的区域。</p>
<pre><code class="language-bash">git checkout -b hotfix-0404
...
git add . // 添加所有新增或修改文件
git commit -m '...' // 指定提交消息，描述本次修改
git push origin hotfix-0404 // 推送
git pull origin master --rebase // 
// output: CONFLICT (add/add): Merge conflict in c.txt
</code></pre>
<p>在处理线上问题时，我们需要先迁出一个临时分支，例如叫hotfix-0404。</p>
<p>在合并代码之前，最好先在临时分支里使用rebase指令，尝试合一下主干代码。在合并代码时，如果别人提交过代码，这时候是可能出现冲突的：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405122630image-20210405122628337.png" alt="image-20210405122628337" style="zoom: 67%;" />
<p>我们需要手动编辑冲突，将所有冲突fix掉，然后继续执行指令：</p>
<pre><code class="language-bash">git add c.txt // 还可能有其它文件
git rebase --continue // 最后修改提交消息
git push origin hotfix-0404 // 推送
</code></pre>
<p>rebase操作也可以用于在小组内同步代码。时不时同步一下代码，可以避免代码积攒太多不好处理。如果你对项目做了不小的重构修改，最好也及时通知其它组员更新。</p>
<p>分支代码处理完以后，接下来到主分支，开始合并分支代码：</p>
<pre><code class="language-bash">git checkout master
git pull origin master --rebase
git merge hotfix-0404 --no-ff
</code></pre>
<p>在合并分支的时候，仍然有可能出现冲突。这时候也需要手动编辑所有冲突，完成后再执行：</p>
<pre><code class="language-bash">git add c.txt // or others
git merge --continue // 
git push origin master
</code></pre>
<p>在这个地方，使用merge指令的时候使用了一个参数<code>--no-ff</code>。如下图所示，使用这个参数的好处，在于主分支提交历史更加清爽，这有利于线上代码的回滚。</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210405135949image-20210405135942552.png" alt="image-20210405135942552" style="zoom: 80%;" />
<p>经过这一番折腾，线上bug终于解决了。接下来我们可以继续编写我们本地暂存的代码了：</p>
<pre><code class="language-bash">git stash pop
</code></pre>
<p>使用stash指令将代码取出来继续编辑。有时候我们一不小心写错了分支，也可以使用stash指令将新增的代码暂存起来，然后新增一个分支，再将暂时的代码恢复在新分支上，这样也是可以的。</p>
<p>以上就是我关于这篇文章所有的学习心得了。git操作是一个程序员的基础技能，git指令可以干很多事情，指令用得好，胜过IDE工具。</p>
<p>（暂时就这些）</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Stay hungry, Stay foolish]]></title>
            <link>https://yishulun.com/./src/posts/2021/33.html</link>
            <guid>https://yishulun.com/./src/posts/2021/33.html</guid>
            <pubDate>Wed, 17 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Stay hungry, Stay foolish</h1>
<p>这仅仅是一个谦虚的态度吗？不是的；或仅仅是一句伟大而著名的格言吗？更加不是的。它是一句充满智慧的话，它可以指导我们不断超越自己。</p>
<p>给大家分享一个我自己的小故事，就发生在昨天，我被这个现实世界一只看不见的手，狠狠的教育了一巴掌。我突然意识到，原来我一直都不会做事情。具体怎么被教育的，我就不说了，反正每个人一生总会有那么几个时刻，感觉自己内裤被现实他老人家扒掉了。</p>
<p>我相信很多人和我一样，你们觉得自己会写代码、会写文章、会做PPT、会录短视频，等等，这些就是会做事情吗？不是的，这些仅仅表示我们做为一个螺丝钉，在这个社会上是有使用价值的；但是我们无法在“做事情”的前面加上“独立”二字。也就是说，我们只是现实社会中一个“零件”，而并非“大脑”。</p>
<p>昨天我就被这样的一件事情给教育了。原来我有一些观念，这些观念主要来自一些媒体或书本。但其实它们不是真的（或者说不是100%真的），但我却以为它们是真的，并且一直指导我这样去实践，但现实却一直没有给我的努力颁发奖项。连勤劳奖都没有，现实他老人家从来不颁发这个奖。</p>
<p>其实现实早已经给我打了分，“No，Baby，这是不对的”。而我还一直认为“这就是对的，只是因为我的努力还不够”。这就是固执，有时候固执和坚韧没有区别。内省一定要注意这一点，如果现实一直说No，我们就要反思是不是自己错了。</p>
<p>所以有时候，我们最大的囚笼，禁锢我们思想，和阻碍我们前进的，是我们脑海中的，那些自以为已知的观念和知识。</p>
<p>所以读到现在你明白我的意思了吧？为什么我说“Stay hungry，Stay foolish”这句话非常智慧。如果我们不当自己是傻子，那么现实就会把我们当傻子，那样我们才成了真傻子。</p>
<p>只有我们自己是foolish状态的时候，我们才有可能发现自己被自己禁锢了，我们才有可能不断突破昨天的自己。这是内省复盘最大的作用。</p>
<p>这应该是我几年来最大的一个感悟了。Stay hungry，Stay foolish！信仰它，不是因为它来自某位名人，而仅仅是因为它内含乾坤。并且这种智慧不是说出来的，而是需要靠悟靠实践，不断积累的。悟到，只是一个起点，它是一生的修行。</p>
<p>苏格拉底说，未经省察的人生没有意义，陷我们于无知的，恰是我们的已知。与君共勉。</p>
<p>最后提一句，没有人知道我为啥放这个计算器画面在这里，只有我自己知道。还有，以前我就发现在部落写长文字键盘会上下跳跃，很不舒服。今天就发现了一个小技巧可以解决这个问题，就是在下面多打几行空白。</p>
<p>幸好我是搞技术的，我知道这个方法只是歪打正着。这就像我们的人生，有时候我们得到了一点现实他老人家奖励的糖果，就以为我们活到了人生的真谛，其实不是的。可能只是凑巧他老人家心情高兴而已，我们千万不要将这些偶然所得奉为圭臬，而成为我们前进道路上的脚镣。</p>
<p>包括以上所有文字以及“Stay hungry，Stay foolish”，都应作如是观。</p>
<p>2021年3月17日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[在生产中寻找艺术痛点]]></title>
            <link>https://yishulun.com/./src/posts/2021/8.html</link>
            <guid>https://yishulun.com/./src/posts/2021/8.html</guid>
            <pubDate>Mon, 01 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>在生产中寻找艺术痛点</h1>
<p>文艺要从生产中来，而不能凭空捏造。</p>
<p>这个想法是在听樊登读书时产生的（当时樊登在讲《论语》），但这个想法与其没有关系。我在想，像脱口秀大会、吐槽大会这样的综艺节目，它们的笑点其实都来源于生活。它们有多好笑，就说明这个世界有多荒唐。</p>
<p>所以，文艺创作，包括技术科普，从哪里寻找传播的点呢，必须从生活中、从生产中。但是这个寻找又不能因为要寻找而失了本心，还必须有一个”本心“的坚持。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[如何管理好时间]]></title>
            <link>https://yishulun.com/./src/posts/2021/24.html</link>
            <guid>https://yishulun.com/./src/posts/2021/24.html</guid>
            <pubDate>Wed, 20 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>如何管理好时间</h1>
<p>首先亮出我的观点：意志力不是坚持做事的因，而是我们拥有良好自控力之后的一种体现。只有把自己当作一个对象作管理的时候，才可能真正管理好时间。</p>
<!-- more -->
<p>在你工作的时候，尤其是做自由工作、无人监督的时候，你是不是时常拖延？有时候还戏称自己有严重的拖延症？仿佛这么自嘲一下，病状就会消失，心里压力就会减少似的。</p>
<p>当松弛了一段时间，看到某一段励志视频，或某篇鸡汤文，或想到某段往事，或见到某个人听了什么励志演讲之后，又热血沸腾、干劲十足了。但过不了三五天，又开始自嘲自怨自艾了。周而复始，三天打鱼两天晒网，间歇性踌躇满志，经常性歇火重整。尤其在家办公的能人志士，对此体会可能更为强烈。</p>
<p>而我们如果在公司做事，身处一个集中式办公环境中，周围有同事兄弟，效率反而比一个人在家办公效率要高，尽管有时候这工作可能并不是我们真正想做的，而只是一份糊口的差事而已，效率也比一个人独立行事高，这又是为什么呢？</p>
<p>上述症状我基本都有，也因此感到苦恼。我查阅了一下相关的书籍、文章和评论，发现这是一个普遍性问题，并且是成功人士区别于普通人的一个很重要的指标。</p>
<p>那些历史上有成就的人，成就一番事业，或开辟新天地的人，或者发现新理论的科学巨擘，无一不是意志力坚持的人、自律的人。但是经过研究发现，这些人拥有超出常人的自制力，并非是他们成功的“因”，而是他们行动中体现的“果”。他们并非因拥有那样的自制力而获得成功，而是他们身上有一些其它的东西，这些东西在驱使他们操持前进，而“自律、自制力强”仅是在他们身上表现出来一个外象。</p>
<p>这篇文章就是想和你探讨一下，那些驱动成功人士持续努力的内因是什么。</p>
<p>自律，本质上是管理自己的每天24小时时间。而要管理好自己，就必须把自己当作一个对象来管理，管理之前还要先分析这个对象的运行特征和规律。甚至要把人当作动物那样去对待，因为人本质上人是一种高级智慧动物。只是比普通动物更智慧罢了，但某些方面仍然摆脱不了动物基因的控制。在人的身上有98%的基因和黑猩猩是相同的，只有2%的基因是不同的。按照唯物主义的观点，基因决定生物的生命特征和生活特点，只有2%的差异，人何德何能，能相去黑猩猩多远呢？</p>
<h2>一、了解人这个时间管理对象的客观规律</h2>
<p>接下来我们历数一下，在人的身上有哪些特征和规律是和自律相关的，哪些会影响我们管理时间。</p>
<h3>1.1，蜥蜴脑</h3>
<p>《蜥蜴脑法则》这本书提到，在我们每个人体内，在理智的大脑之下，都有一个原始的蜥蜴脑存在。这个蜥蜴脑总想贪图享乐，好逸恶劳。当我们工作了一段时间以后，它会说，“休息一下吧，已经工作很长时间了，总该休息一下啦”。</p>
<p>人的自制力在长期自律行动中加强的过程，就是不断和自己的这个蜥蜴脑作斗争的过程。但战胜这个原始的蜥蜴脑，靠的并不是口号，和坚定的意志（在开始的时候人是还没有坚定意志的），靠的是智慧，具体技巧后面会讲到。</p>
<h3>1.2，睡眠与食物</h3>
<p>人需要吃饭睡眠，这是由人的基因决定的，谁也改变不了。</p>
<p>人本身并不能像小草大树一样通过光合作用生产养分给养自身。人除了需要定期进食以外，还需要充足的睡眠。据有关研究发现，当人处于饥饿状态下，血液中的血糖过低，自控力会大大降低。</p>
<p>有人减肥喜欢节食，但往往节食又容易失败。减肥需要一定的意志力控制，但节食后血糖降低，自控力下降。饿得头晕眼花的时候，这时候蜥蜴脑就出来了，“工作这么辛苦，学习这么累，该吃就吃点吧”。结果节省减肥，反而更容易暴饮暴食。</p>
<h3>1.3，二十英里法则</h3>
<p>这个法则是著名的心理学家吉姆 · 柯林斯提出的。美国西海岸圣地亚哥距离某地3000英里。柯林斯发现，徒步前往该地的游客有三种人：</p>
<ol>
<li>
<p>第一类人在天气好、路况佳的时候就全速行军，天气差的时候就躲进帐篷里睡觉、抱怨。</p>
</li>
<li>
<p>第二类人不太会受天气、环境以及周围人的影响，无论什么天气都能出发。但他们没有常性，开始的时候每天能前进40~50英里，后期就慢慢懈怠了下来。</p>
</li>
<li>
<p>第三人是不管什么天气，环境路况如何，别人怎么样，每天雷打不动行进20英里，并且只行进20英里。</p>
</li>
</ol>
<p>那么问题来了，哪类人会最先到达终点呢？柯林斯说，答案是第三类人。这就是二十英里法则。走的最远的，并不是走的最快的。意志在量使用之后人会觉得意志疲劳，只有那些不靠意志力行进的人，才能坚持更久。如果行路做事就像每日三餐一样，平淡而自然，还需要什么意志力控制呢？</p>
<h3>1.4，人在环境下的自然条件反射</h3>
<p>很少有人会在肯德基、麦当劳，或星巴克这样的窗几明净的地方吐痰，为什么呢？即使一个不那么爱干净的人，到了这样的环境，也自然而然会抑制自己吐痰的冲动。</p>
<p>还有，一个性格不怎么沉静的人，到了图书馆，大家都在看书，他是不好意思大声喧哗的。而在闹哄哄的公交或地铁上，人却可以肆无忌惮地大声打电话或聊天。这又是为什么？</p>
<p>那些餐厅的服务员，为什么在一天里总是不停里扫地、拖地、收餐盘？</p>
<p>还有，同时在公司上过班并尝试过自由职业的人，可能都会明白，在家里是无法办公的。在家里办公，效率总是很低；而在公司里，在一个集中式的办公环境里，虽然有很多杂事打扰，但效率在多数情况下对大多数人来讲，反而更高，为什么？</p>
<p>这一切都缘于这小节的标题。人既是社会关系的总和，也是特定环境下的综合生命体。就像变色龙会随着环境改变体色一样，人虽然不会变色，但心里状态会随着环境发生变化。在这里主要有两个方面的考查因素：</p>
<ol>
<li>环境反馈</li>
<li>承诺一致原则</li>
</ol>
<p>先说第一点，<strong>环境反馈</strong>。如果环境能给人及时反馈，或者人能预知到这种及时反馈，这时候人的言行就会受到影响，蜥蜴脑就到得到一定的抑制。举个例子，还拿在星巴克吐痰来说，周围都是人，大家都显得彬彬有礼、很有教养，如果你豪爽地在地上吐了一口，大家将怎么看你？不了解的读者，可以前往星巴克实践一下。</p>
<p>有鸡汤总是说，人活着不要太在意他人的目光。但很多时候，城市文明的自觉就是靠这种“在意”、“要面子”维持的。</p>
<p>再说第二点，<strong>承诺一致原则</strong>。人总是希望自己在别人眼里是一个一言九鼎、说数算数的人。当一个人向别人公开做出承诺的时候，他就倾向于让言行与承诺保持一致。承诺的形式是多种多样的，举几个例子：</p>
<ul>
<li>罗辑思维的罗胖发愿做20年的《时间的朋友》演讲，还有每天录一段60秒的语音，这是公开承诺。</li>
<li>你在公司，当你和HR签订人事合同的时候，也是在做出承诺。承诺自己会按时上下班，会努力遵守公司规章制度，会尽力把工作做好。而如果你做不好这些，你心里很明白，公司会给你“扣奖金、批评、甚至炒鱿鱼”等等类似的负面反馈。</li>
<li>你在某次电梯间和同事聊天时，表达了对同事迟到的不屑；你在某次团队例会或年会上，夸口说过自己从来不请病例，常年都不迟到，而当你某次真正要迟到正全力往公司赶时，你的内心是非常紧张的。当时旁边没有人监督你，甚至公司也没有严格的打卡制度，或许没有人会知道你迟到了，但你内心还是会莫名的紧张。但如果你是在家办公，你自己规定了每天9点开始工作，但往往过了9点半，你都不会感到有一丝不安。</li>
</ul>
<p>大概就以上四点吧，这四点特征规律适用于所有人，不论是凡夫俗人，还是旷世伟人，都受这些客观规律的支配。接下来我们探讨一下，如果基于对这些规律的认知，做好时间的管理。</p>
<h2>二、分享两个与时间管理、意志力相关的TED视频</h2>
<p>在抛出正式的技巧之前，为了增加说服力，再分享两个TED视频。这两个视频都是与时间管理，与自控力相关的。</p>
<h3>2.1，第一个视频：如何掌控自己的时间？</h3>
<p><img src="https://gitee.com/rxyk/my-images/raw/master/2020/20210120110953.png" alt="image-20210120104709357"></p>
<blockquote>
<p>视频链接见：<a href="https://video.zhihu.com/video/1045382423000481792?autoplay=false&amp;useMSE=">https://video.zhihu.com/video/1045382423000481792?autoplay=false&amp;useMSE=</a></p>
</blockquote>
<p>这条视频给我带来两点启示：</p>
<ol>
<li>第一点，人必要要做自己真正想做的事。这条原则并不是因为逻辑上人应该这样做，而是没有办法，人只有在做自己内心真正想做的事情时，内心才不会抵触，才能持续不断地迸发热情。换句话说，只有在做自己真心想做的事情时，那个蜥蜴脑才不会时不时的出来捣乱，才有可能被压制。否则，人就会觉得浪费时间。</li>
</ol>
<p>多数人很多时候都不是在做自己喜欢的事，都是在做父母想让做的事，在做领导让做的事，在做为了生存、为了赚取生活资料而不得不做的事。80%的打工人，都是在做着自己并不喜欢的工作，一个突出的表现就是，一到下班时间他们就归心似箭了。家才是他们真正想一起呆着的地方，而公司就像牢笼一样。这也是聪明或者说狡诈的HRP，为什么要在牢笼里营造家的氛围的原因。</p>
<ol start="2">
<li>第二点，人要面对未来做展望。我们在某个时间点想取得什么成就，想遇见什么事情，想成为别人心目中什么样的人，要做这样的未来展望。每当我们懈怠的时候，但凡这样一想，动力立马又恢复了。</li>
</ol>
<h3>2.2，第二条视频：成功的要诀是意志力</h3>
<p><img src="https://gitee.com/rxyk/my-images/raw/master/2020/20210120105755.png" alt="image-20210120105755068"></p>
<blockquote>
<p>视频链接见：<a href="https://www.zhihu.com/question/27484486/answer/530051653">https://www.zhihu.com/question/27484486/answer/530051653</a></p>
</blockquote>
<p>这条视频也给我两点启示：</p>
<ol>
<li>
<p>第一点，人的成功主要不取决于智商，甚至也不取决于情商。大多数差异源于人的意志力不同。那些有大成就的人，都具有非凡的专注力，他们可以数小时、甚至一整天坚持做某件事，而感觉不到饥饿。他们可以数年如一日坚持向某个目标迈进，并持续保持初心和热情。</p>
</li>
<li>
<p>第二点，人的意志力并不是一成不变的。或许由于基因差异，不同孩子天生的专注力有所不同。但由于家庭环境、学校环境、社会环境、成长经历的不同，意志力在后天培养中也会有很大、甚至决定性的改变。</p>
<p>这是成长型思维，就是说，人的成功很大一部分取决于专注力。而专注力这种东西，不是口号喊出来的，更不是喝鸡汤喝出来的，而是通过行动，长期培养出来的。</p>
</li>
</ol>
<p>现在答案基本已经很明确了，成功不是高智商、高情商人的专利，如我等天资愚钝的人，通过持续不断的，有意识的，对意志力的培养，并通过意志力长期坚持做好自己内心真正想做的事，和时间做朋友，也是可能获得成功的。</p>
<h2>三、管理时间的具体技巧</h2>
<p>接下来我们就谈一下具体的培养意志力、管理时间方面的实用技巧。这些技巧并非我的发明创造，它们来源于我看的书、文章和评论，我只是做一个总结。</p>
<h3>3.1，使用SMART原则</h3>
<p><img src="https://gitee.com/rxyk/my-images/raw/master/2020/20210120111311.png" alt="image-20210120111311242"></p>
<blockquote>
<p>图引自第一链接</p>
</blockquote>
<p>当我们展望未来，在三秒钟就确立了一个伟大目录后，这个时候的目标往往都是无法执行的。盲目地执行一个看起来很遥远的目标，开始时可能斗志高扬，过了两三天可能就沦为了蜥蜴脑的奴隶了。这就是“失败的人常立志”。</p>
<p>解决这样的困境，在于将大目标成功地拆分为小目标。一个公司好的领导，最重要的能力就是拆分任务的能力，将一个大任务拆分为一个个可以执行的小任务。任务拆分的好，项目已经成功了一半。</p>
<p>如何拆分目标？这方面前人已经总结出来了实用的技巧，就是SMART。</p>
<ul>
<li>
<p>S是Specific[spəˈsɪfɪk]，代表明确。目标是不是明确的，可以直接想一下这个目标机器能不能判定是否完成。如果机器都能判定，那目标才是明确的。举个例子，客服部门要“提高客户满意率，让客户对我们的工作达到基本满意”，这个目标就不明确。但如果修改为“提高客户满意率，让定单投诉率降到0.1%及以下”，这个目标机器就能判定，就是明确的目标了。</p>
</li>
<li>
<p>M是Measurable[ˈmeʒərəbl]，代表可测量。这就是在实现目录的过程中，我们的工作量能不能被客观地统计和计算，而不是凭主观臆断工作完成的怎么样了。举个例子，还是上面的“提高客户满意率，让定单投诉率降到0.1%及以下”，这个目标就是可测量的。系统数据库里有定单总数，有时间，有投诉次数，一算就知道是多少了。</p>
</li>
<li>
<p>A是Attainable[əˈteɪnəbl]，代表可达到。这一点的判定有点难度，一般我们基于三点去判定。一，我们做的这件事别人有没有做成过；二，我们执行这个任务的人有没有相关经验；三，如果前两条都不具备，就要从逻辑上分析，拿出像“第一颗原子弹发射弹舱在被压扁的情况下还能不能成功引爆的具体计算数据“出来。用事实和数据说话，是判断的基本原则，而不是基于我们主观判断。</p>
</li>
<li>
<p>R是Relevant[ˈreləvənt]，代表相关性。这是在对目录做价值判断，假如这个目标完成了，对我们的目标有几分加成。一个显而易见的基本原则是，我们要优先完成那些对总目标加成最大的目标。</p>
</li>
<li>
<p>T是Time-bound[taɪm baʊnd]，代表时限性。在什么时间内完成，以什么样的频率去做某件事。这个要求对目标制定的重要性也是显而易见的，子任务不能容忍无休止地执行下去。即使做到了符合SMART原则的拆分，任务也不一定总是能执行完成的。在某个子目标完成不了的情况下，我们还可以根据经验及时调整方案或实现路径，因此时限是必不可少的。</p>
</li>
</ul>
<p>很多项目经理在划定任务时，喜欢让工程师自己说出任务的deadline时间。这种做法其实是不太负责任的。工程师如果比较自信或自负，会给出一个相对乐观的时间，但多数情况下都会延时；工程师如果恰恰相反，缺少一点点英雄主义，就想着上班怎么摸鱼，给出的时间又相对宽松许多，这时候项目经理如果准了，就是对公司、对项目的不负责任。</p>
<p>一个较为合理的估时办法，是依据历史经验评估，依据同等能力的人的经验评估。做同样一件事，譬如写一篇2000字以上的公众号推文，昨天用了多久，历史上平均用了多久，这个时间可以参考。如果执行人没有做过，是第一次做，就参考同岗位，或同行业其它人的平均时间制定。万不可拍脑袋。在执行了几次以后，时间还可以根据依据情况调整，时间并不是一成不变的。</p>
<h3>3.2，做自己内心真正想做的事</h3>
<p>一个人能做自己真正内心想做的事，这是一种莫大的幸福。并不是每个人都有能力选择自己的人生道路。大多数人从跨进小学学校门槛的那一刻，就开始了人生长跑。一年一年学习，高考，毕业找工作，结婚生子，为子女操心工作，操办子女婚姻大事等等，大多数人都在“想做”和“该做”的事情中间纠结。</p>
<p>但就像第一条TED视频给我们的启示一样，我们只有做自己真正想做的事情时，我们只有先过上我们想过的生活，我们才真的不会觉得在浪费时间。</p>
<h3>3.3，将要做的事情项目化，立Flag，按部就班完成</h3>
<p>又到了年底了，很多人开始写年终总结，以及立新一年的Flag了。立Flag就是公开承诺，它和我们在公司里签订合同一样，对我们的自控力都会起到加持作用。但立了flag总是实现不了，又会极大伤害我们的自控力自信，狂喜的只有蜥蜴脑小人。</p>
<p>一种比较合理的做法是这样的，将要做的事情，当成项目去做，制定计划，并公开承诺。举个例子，譬如我去极客时间录课，基本上是每周录一次，每次录5节。这样坚持了半年时间，终于录完了179节课。我们自己做事情，尤其是自由职业者，也可以这样规划。给自己立一个项目，譬如录腾讯课堂的网课，要录多少期，大纲是什么先制定出来，然后每次录课的时候，就是一个纯粹执行的过程了。</p>
<p>再举个例子，写网文小说也是一样的道理。先把大纲码出来，根据大纲再把情节脉路码出来。最后就是根据情节，每天坚持填满4000字或8000字就可以了。当然了，码大纲也不是一件容易的事情，闷在屋里瞎想一般也想不出来，具体也有技巧和办法，这里就不展开了。</p>
<p>做自由职业，尤其要和读者一同成长。有一种说法是这样的，<strong>并不是我们从逻辑上应该和读者一起成长，而是我们必须这样做、只能这样做</strong>。因为只有这样做，我们才能及时得到读者的反馈，才能更长久地坚持下去。譬如罗胖每天60秒语音这个项目，他如果先坚持自己录30年，等30年后再将音频放出来，这个事多半就完成不了。而录完一节，就放出来一节，读者马上就能看到就能评论，罗胖马上就能得到反馈，这样才能走得更远。</p>
<h3>3.4，搞一些形式，记录自己的汗水</h3>
<p><img src="https://yishulun.com/post-images/1611125365876.png" alt=""></p>
<blockquote>
<p>图引自第一链接</p>
</blockquote>
<p>这样的一个绿色马赛克截图，可能不是程序员就不理解。这是仓库代码提交统计图。绿色越多、越深，代表作者越勤奋。当我们看到这样的统计图时，大多数情况都想发一下朋友圈。多数时候我都喜欢给这样的朋友圈消息点赞，因为我明白朋友此时希望得到反馈，而我的点赞，只是举手之劳，就可能让他坚持下去。我知道，凡是经常发朋友圈秀某项内容的人，多半并不是因为TA拥有，而恰恰是因为TA想继续坚持。</p>
<p>这里还有一些小技巧，譬如在自媒体创作方面，如果写了原创文章，可以在篇首挂上“本文乃本号第xxx篇原创”。如果写的是某个系列的文章，可以挂上“本文系某系列第几篇内容”，等等这些都是一些创建形式价值的小技巧。</p>
<p>软件的设计者应多考虑一些创作者这方面的心理诉求，特别是当软件想让用户做的事是和学习、工作一样是反人性的时候。</p>
<h3>3.5，展望未来，在周五下午做下周计划</h3>
<p>第一条TED视频给了我们一个具体的制定计划的建议，周五下午做下周计划。或许我们应该在年、月、周这样的时间末尾，做下一段时间的未来展望，想一想在接下来的这段时间里，我们想得到什么，不想失去什么，这样我们的目标和计划自然就出来了。按照从年、到月、到周这样的次序展望，有利于我们将大目标划分为切实可行的小目标。</p>
<h3>3.6，在特定的环境下培养良好的作息习惯</h3>
<p>如果是在家办公，最好有一个自己的书房。每天早上9点钟，准时给自己沏一杯茶，或冲一杯咖啡，开始一个上午的工作。中午也要像公司那样按时吃饭。低血糖并不利于自控力的保持。还有作息，按时睡觉，保证充足睡眠也至关重要。</p>
<p>对于不坐班的人，坚持早睡早起是一项挑战，这和上班的人周未早起是一样困难的。这方面我没有查到好办法。但如果总体上事情进展比较顺利，自控力得到增加，晚睡随着时间推进也是可以克服的。人一天的时间只有那么多，早晨很早就开始工作，白天不安排过多时间休息，加上项目进展顺利，意志力加强，晚上自然就能早睡。多数人晚睡不是因为娱乐，而是因为焦虑，就好像今天睡下去，明天就不会醒来一样。</p>
<h3>3.7，备好自己的激励之物</h3>
<p>人是一种高级动物，受基因的控制和支配，蜥蜴脑又好逸恶劳，但我们还有另外一个理智的上层精神脑，会受到美好的有希望的事物的鼓励。我们可以准备一些专门激励自己的内容，放在我们经常可以看到的地方，可以是一句话、一张图、一张照片，还是一个视频，一个电影。</p>
<p>当你懈怠的时候，当你因为懈怠又悔恨自己不自律的时候，不妨看一看这些内容。越王勾贱，正是三年卧薪尝胆，使用这招不断激励自己，最终复仇打败了吴国。</p>
<p><img src="https://yishulun.com/post-images/1611125210962.jpeg" alt=""></p>
<blockquote>
<p>TVP IPLUSO</p>
</blockquote>
<p>每个人经历不同，所以可以激励自己的事物也是不同的。这事情，可以是别人送的一支钢笔，或者只是一句话，一段回忆。例如，对我来讲，我每天写字就用TVP组织送的钢笔，那是一支群友戏言将来签百万合同的专用钢笔。每当看见它，我就想起绝不能辜负年华时光，一定要有所作为。</p>
<p><img src="https://gitee.com/rxyk/my-images/raw/master/2020/20210120143655.png" alt=""></p>
<blockquote>
<p>腾讯QQ音乐出道链接：<a href="https://y.qq.com/n/yqq/mv/v/s00359gyycg.html">https://y.qq.com/n/yqq/mv/v/s00359gyycg.html</a></p>
</blockquote>
<p>还有《未来可见》歌曲也是，歌词写的很好，写出了技术人的心声。反思诸己，要努力对得住这份承定和荣耀。</p>
<p>还有我填写的诗词《声声慢·记 LeaTech 全球 CTO 领导力峰会暨 TVP 二周年庆典》，“待东风与便，再造辉煌”。如果不努力，怎么创造辉煌？</p>
<p>回想我高中化学老师有一天在我的作业本里夹了一个纸条：“你有清晰的逻辑和聪明的头脑，你缺乏的是持之以恒的坚持”。我永远都忘不了这位老师了。他给我的鼓励，犹如黑夜海上的灯塔，驱散了一个学生心中的自卑。在我工作后当了老师，我从来也不吝啬抓住一切时机，给予学生真诚的赞美。</p>
<p>在格式上，小视频、电影也可以。印度有一个神片叫《三傻大闹宝莱坞》，我每次重看都倍受鼓舞。还有王霙主演的《井冈山》，每次重看都被革命先烈实事求是的精神再次感染。</p>
<p>不仅正向的事物可以激励，反向的也可以，每个人都可以准备一些，放在自己经常可以看得见的地方。不仅在意志消沉的时候看，在平时就要保持它们不离开自己的视线，防患于未然。</p>
<h3>3.8，劳逸结合</h3>
<p>列宁说，不会休息的人就不会工作。长时间使用自制力，精神会疲劳，下一次再遇到同样的事情时，蜥蜴脑就会促使自己向容易的方向决策。保持充足的睡眠、全面的营养，有助于保持旺盛的精力和稳定的自控力。一线大厂互联网公司都喜欢把员工食堂搞得有声有色，这是因为食物成本现在变得相对低廉了，人力成本反而是最高的。保证员工的营养，总体上是有助于员工产出的。</p>
<p>最后和你分享一下我看到的一段话，有人说一个努力和成功的人是这个样子：</p>
<p><strong>他们在集中心智工作和学习的时候，几乎可以忽略全世界，全身心投入。更可怕的是，只要需要，他们可以一天十几个小时持续如此，经年累月，从不懈怠。他们经过长期的言行实践，在他们身上体现出一般人没有的高贵品质，专注。</strong></p>
<p>欢迎留言。实践是检验真理的唯一标准，欢迎就以上时间管理技巧讨论。</p>
<p>2021年1月20日</p>
<p><strong>参考链接</strong></p>
<ul>
<li><a href="https://www.zhihu.com/question/27484486/answer/530051653">https://www.zhihu.com/question/27484486/answer/530051653</a></li>
<li><a href="https://jingyan.baidu.com/article/5552ef47b2ee7a518efbc958.html">https://jingyan.baidu.com/article/5552ef47b2ee7a518efbc958.html</a></li>
<li><a href="https://www.zhihu.com/question/27484486/answer/941818438">https://www.zhihu.com/question/27484486/answer/941818438</a></li>
<li><a href="https://www.zhihu.com/question/27484486/answer/530871841">https://www.zhihu.com/question/27484486/answer/530871841</a></li>
</ul>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[如何使用开源协议？]]></title>
            <link>https://yishulun.com/./src/posts/2021/25.html</link>
            <guid>https://yishulun.com/./src/posts/2021/25.html</guid>
            <pubDate>Sun, 17 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>如何使用开源协议？</h1>
<p>今天群内发生了一件事，某大厂工程师使用了一个开源软件，但是并没有遵守开源协议。开源项目的开发者找上门来了，工程师解释说，因为只使用了一部分，系统中还有其它代码，所以没有公开声明。</p>
<!-- more -->
<p>我查了一下，在知乎上有人暴露过另外一则类似的事情。也是使用者没有公开声明，开发者找上门来，大厂负责人死不认帐，两人在IM软件上互喷。就是两人扯皮的时候，工程师还在加班修改变量，擦除抄袭证据。因为无法确认真假，就不在这里附链接了，感兴趣可以前往知乎搜索。</p>
<p>在中国程序员真是悲哀！写个收费软件吧，没有人付钱。写开源软件吧，别人抄袭你。就是大厂该有的雅量和气度有时候也没有，用了开源软件，不仅不公开致谢，还不认账。大概是因为利益出发点不同吧，同是程序员，厂外厂内竟是两种不同态度。</p>
<h2>开源协议</h2>
<p>接下来我们看看，当我们使用开源软件时，如何做一名有雅量和气度的人。全世界的开源协议大概有100多种，但常见和常用的并不多。使用哪种协议，看这张图就明白了：</p>
<p><img src="https://yishulun.com/post-images/1610984500543.jpeg" alt=""></p>
<p>图：引自 <a href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p>
<p>说明：</p>
<ul>
<li>在上图中，闭源指不再公开源码，变成使用者自己的软件。</li>
<li>在每一个修改过的文件，旋转版权说明。这指的是Apache协议，它要求“<strong>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明</strong>”，具体做法一般就是在页面头部注释中包含。</li>
<li>关于对源码的修改之处，提供说明文档，一般做法是，拿一个专门的文件对源代码修改的时间和方式作统一描述。</li>
</ul>
<p>使用别人的开源软件时，我们先看一下它用的是什么协议。如果是MIT协议就好办了。<strong>最宽松的协议就是MIT协议</strong>，这种协议对使用者几乎没有任何限制，使用时只要保留版权声明和许可声明就可以了。</p>
<p>当开源自己的软件时，我一般选择的就是MIT协议。对于遵守规则的人，他自会遵守；对于不愿意遵守的人，即使是采用Mozilla许可证或GPL许可证，仍然是限制不了他的。</p>
<h2>CC协议</h2>
<p>开源协议是针对源码的，如果是文章，需要考虑使用创作共用协议（Creative Commons ），一般也称CC协议。</p>
<p>CC协议比较简单，主要有四项限制：</p>
<ul>
<li>1.署名（BY）：作品上必须附有原作者和出处</li>
<li>2.非商业性使用（NC）：不能用于商业目的</li>
<li>3.禁止演绎（ND）：不能修改，或二次创作</li>
<li>4.相同方式共享（SA）：使用同样的 CC 协议</li>
</ul>
<p>例如，本文版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享3.0许可证</a>），这样就可以了。至于别人遵守不遵守，先抱着别人不遵守的打算去创作。</p>
<p>2021年1月18日</p>
<p>图片转自阮一峰的博客，见：<a href="https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[在极客时间录课的总结]]></title>
            <link>https://yishulun.com/./src/posts/2021/26.html</link>
            <guid>https://yishulun.com/./src/posts/2021/26.html</guid>
            <pubDate>Fri, 15 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>在极客时间录课的总结</h1>
<h2>（一）</h2>
<p>昨天晚上忙了2个小时，不对，确切地讲，是今天凌晨忙活了2个小时，终于将《微信小程序全栈开发实战》所有已发布的源码链接，都在评论区发布了。今天早上起来，我看到大约165条评论被纳为精选。</p>
<p>现在读者看到的源码链接，是这样的：</p>
<p><img src="https://static001.geekbang.org/infoq/90/90337b66449c315b07267902d4313cba.png" alt=""></p>
<!-- more -->
<p>每节课下面都有一个源码下载链接，如果想了解某节课对应的源码，直接从这个精选留言下载就可以了。</p>
<h3>自己制定的计划自己买单</h3>
<p>昨天从零点到凌晨1点半，我干到了97课，评了93节，我是从171课倒数往前评的。有点困，就想去睡觉，刚和衣躺下，一想不对。现在这个点正是程序员们学习的时候，想我20多岁的时候，不都是这个时间点披星戴月写代码吗？倘若有人此时学习，因为我未及时置评放链接而抓耳挠腮，我罪过不是大了。</p>
<p>于是我又爬起来，从凌晨1点半干到2点半，终于将所有课程的源码链接都评上去了。这样一来，每节课读者只要看一眼评论区第一条置顶的评论，就知道这节课对应的阶段是哪个，不必再去仓库里费心查找了。</p>
<h3>在源码管理上的经验总结</h3>
<p>如果你问我为什么对这件事这么上心，是因为源码没有贴上去吗？</p>
<p>不是。源码都在仓库里。因为我第一次录课，经验不足，在源码管理这件事上几番周折，走了不少弯路。</p>
<img src="https://static001.geekbang.org/infoq/63/63e3d1faab3c9f56fcf403b7d0c04287.png" style="zoom:50%;" />
<p>最早的时候在第2章，我用git.weixin.qq.com管理源码，这是微信团队整的git仓库。使用它每次下载源码都要扫码登录。就是下载一个源码，你让我登录干啥？github、gitee什么时候干过这事啊？</p>
<img src="https://static001.geekbang.org/infoq/93/93db6a03ac7a489baedc0782ad3bb0e2.png" style="zoom: 50%;" />
<p>体验很不友好。很快，第2章没录完，就就把源码切到了gitee上。开始了章节号码+标签说明+课程名称的时代。</p>
<img src="https://static001.geekbang.org/infoq/7f/7f60567d31edfc03312d09cfeb39b8af.png" style="zoom: 50%;" />
<p>这个时期录了十几课，后来考虑到在已发布课程的目录上，有3.1、4.2这样的章节编号，于是到了第3章，标签说明与课程说明我犯懒就去掉了。我心想，既然每节课都有编号，那直接读者带着课程编号找源码就好了。</p>
<p>但是事情不久就发生了变化，因为读者感觉3.1、4.2这样的章节编号混乱等原因，课程上只保留了一个从1开始开始统一编号和名称，不再有章节编号了。</p>
<img src="https://static001.geekbang.org/infoq/67/6787716a9e40b490a41e9d59bbf50284.png" style="zoom:33%;" />
<p>而我后知后觉意识到这个问题的时候，源码标签当时已经变成了这个样子：</p>
<p><img src="https://static001.geekbang.org/infoq/86/86d65d9714d3ba9a90aeb4282c22e5d3.png" alt=""></p>
<p>标签上什么都没有了，除了课程章节编号。这个章节编号在课程目录上还是不显示的。在这种情况下，读者怎么查找课程对应的源码呢？</p>
<p>所以，看到这个问题后我就睡不着觉了。有人可能会说，把源码标签修改一下，加上那个从1开始的序号数字不就可以了吗？</p>
<p>但是标签打上去就是历史了，是不能修改的。这也是使用标签的限制。还有人可能会质疑，为什么要让章节编号去掉呢？这个可以保留，但同时统一编号数字也应该保留，可能这样更好一点。但平台有平台统一的规范，所有课程只能用一个软件架构，不可能为某节课做定制功能的。所以这条路也是不通的。</p>
<p><img src="https://static001.geekbang.org/infoq/3d/3db871d88afc5a2910be1311576dc2bd.png" alt=""></p>
<p>再到后期，为了读者查找源码方便，也为我自己查找方便，我重新又严格要求自己，在打源码标签时，将对应的课程名称也打了上去。有了这个名称，即使章节编号对不上，依赖名称也能对上。</p>
<p>昨天晚上我自己过课，就是把课程自己听一遍，看看有没有问题，有什么需要改进的。能改进的点还是挺多的，最大的一点，我总觉得自己该减肥了。大脸把整个视频都盖上了，感觉学员看了都可能觉得我累。还有最重要的一点，就是源码。</p>
<p>我尝试做为一个读者，下载某节课对应的源码，从源码仓库链接点进去，切到tags标签下，150多个标签真让人眼光缭乱。基于上面我们已经聊到的原因，想依赖一个从1开始的10、30这样的统一数字编号，和一个课程标题名称，想从源码堆里翻出它的源码，真的不容易。</p>
<p>因为标签命名规则不统一，因为有的课程有源码标签、有的还没有，因为有的有标题描述、有的还没有，等等，想找一个源码真不容易。想到这里，所以我才睡不着了，即使已经很累了，1点半了又爬来了，把所有源码链接都评上去了。现在读者看到的源码链接，是这样的：</p>
<img src="https://static001.geekbang.org/infoq/90/90337b66449c315b07267902d4313cba.png" style="zoom: 67%;" />
<p>每节课下面都有一个源码下载链接，如果想了解某节课对应的源码，直接从这个精选留言下载就可以了。</p>
<h3>学习是一个不断自我否定的过程</h3>
<p>有人可能会讲，为什么每节课都要有一个源码链接呢？</p>
<p>这源于我自己的坚持。我觉得咱们人的学习，认识过程都是螺旋上升的，是像绕山公路一样盘旋而上的，并不是像电梯一样直入云霄的。基于这个认识，我认为在一个阶段，对应每节课，都应该有它的阶段性源码。</p>
<p>在《微信小程序全栈开发实战》这个课程里面，有明显的好几个地方是这样的：前面课程里面在讲另一个主题时，将一部分代码实现的并不完善，是有缺陷的，这个缺陷是在后面课程里面发现并完善起来的。我很高兴看到很多读者，纷纷在留言时留言，说某课某代码有问题，这说明他思考了，在真正的学习。</p>
<p>学习的过程，就是一个不断推翻旧认知、建立新认识的过程，这肯定是一个螺旋上升的过程，是一个包括了自我否定的过程。基于这一点考虑，所以课程里面的源码，一定要与课程对应，是阶段性的阶段。</p>
<p>并且我也鼓励读者在学习者，看当课对应的阶段源码，而不是git仓库里的最终源码。而当我发现，读者在学习时，不能很快找到阶段源码时，我就很着急了。</p>
<h3>一体化的Electron学习环境</h3>
<p>上面讲的是我在录课过程中，在源码管理方面犯的错误，接下来我想分享一下，如果我重头开始录课，我会如何管理源码。</p>
<p>可以使用分支，分支名称对应着从1开始的课程编号，在分支的仓库描述里面，直接放上课程名称。这样读者在学习的时候，基本只要用一个git指令就可以了：</p>
<p><code>git checkout $num</code></p>
<p>学习哪一课，就check哪一课的源码。这样多简单。</p>
<p>这样还有一个附加好处，分支是可以修改的，分支名称、分支描述都是可以修改的。即使课程编号有变化，也有补救的措施。不像源码标签，打了以后就不好修改了。打源码标签这种方式，适合大佬，非常有经验的大佬，十拿十稳的那种；像我等，适用使用分支。</p>
<p>此外，我还有一个“大胆”的想法。因为小程序与web都是在可以直接在页面上展示运行结果的，我们看一下微信的官方文档就知道了，我们可以将课程与源码，在网站上直接做一个对应，也就是说，我学到某课的时候，比如第100课，旁边自动就出来第100课的源码，并且直接就可以在线预览效果。如果读者愿意，还可以直接启动微信开发者工具，在本地进行修改。</p>
<p>怎么实现这个功能呢？做一个Electron客户端软件，既可以展示web页面，又能呼起本地软件，还跨平台，上面提供的功能大体都是可以实现的。这是一个立体的、一体化的学习环境。</p>
<p>唯一美中不足的是，Electron的编译简直就是一个噩梦，不然我真想业务找点时间写写这个软件。</p>
<p>欢迎留言。</p>
<p>（2021年01月15）</p>
<p>后记：</p>
<blockquote>
<p>昨天只算小忙。我有一次周未录课，因为那一周特别忙，白天一直给学生上课，根本没时间备课，周五晚上备课到第二天早上5点多，简单吃个早点，就打车去录音棚了。<br>
不是我不想休息，也不是我贪财，是责任，答应的事，对读者做出的承诺，就要尽力做。<br>
人都说老一辈人傻，有的人堵枪眼，有的人身体被火烧着了都一声不吭，有的人不怕疼用身体顶着炸药包炸桥梁。他们根本不是傻，是因为他们心里有信念，那信念像磐石一样不可动摇，为了维护信念，甚至不惜损害自己的健康，甚至牺牲生命。<br>
我当然没有达到这种高度，但是如果我在那个年代，我很有可能就是那样的人。<br>
包括疫情期间去武汉逆风支援的医生也是，我不是医生，我是医生我也会那样做。从这些年我干过的傻事来看，我肯定有这种傻劲。</p>
</blockquote>
<h2>（二）</h2>
<p>竭尽所能，这既不是一句口号，更不是感动自己的鸡汤。所有努力都必须是真实的，脚踏实地的努力，因为结局不会陪我们演戏。</p>
<p>昨天我听樊登讲《准备》，特别有感触。很少见樊老师将某本书讲了45分钟以上，这本书讲了78分钟。在讲解视频开始的时候，樊老师介绍说，美国教育工作者黛安娜·塔文纳的这本书有国内人大附中校长等校内教育大伽的推荐，听了之后，果然名符其实，非常值得推荐。这本书的内容很丰富，在此仅列举与本文有关的两点：</p>
<ul>
<li>竭尽所能</li>
<li>PBL</li>
</ul>
<h3>竭尽所能</h3>
<p>先说第一点，竭尽所能。塔文纳说：</p>
<p>竭尽所能不仅是一句口号，它是我们的文化，是我们做事的一种思维方式和行为准则，是驱动我们前进的力量。我们要始终坚信，总有办法打开一扇锁着的门。</p>
<p>因为她坚持不放弃任何一个孩子，有一次她为了让一个孩子回学校上学，拿到一把改锥跑到孩子家里要撬锁，“总有办法打开一扇锁着的门”就是从里来的。塔文纳自己童年非常不幸，有几次都差点被动辍学，她有这个坚定的信念，与她的童年不幸遭遇是分不开的。</p>
<p>竭尽所能是一种执念，是一种内心坚信必然如此的源动力。我在极客时间录课，是从每日一课开始的，当时小楠是我的责任编辑，负责和我对接。自从开始和小楠合作后，我发现我的内心就一直在受打击。为什么？</p>
<p>因为我的稿件递交上去，不行，打回来修改；修改了又递交上去，还不行，又打回来修改。前后我记得我和小楠在电话里沟通过数次，每次都至少有半个小时以上。做为一个出版过计算机图书，有十几年博客写作经验的作者，我感到的并不是生气，而是惭愧，因为每次修改的理由都很充分。</p>
<p>虽然一件事情站在不同角度，得出的结果是同的，甚至有可能是截然相反的评价。但在稿件修改和视频录制这件事上，我是新手，并且编辑代表的不是她个人，她代表是极客时间整个团队，她给我的建议是经过N多编辑实践之后得出的智慧。有些事我们不懂并不可怕，但如果我们不知道自己不懂更不怕。我们要感谢指出我们不足的人。所以，在改稿这件事上，我从来没有任何怨言。每次来活了，我都是挤出时间，尽快完成，马上完成，马上反馈。</p>
<p>我们今天有微信、邮箱等各种及时沟通工具，相比邮局时代，效率不知道快了多少倍。如果编辑和作者通过信封反馈与改稿，可能半年甚至一年才能完成这个过程。</p>
<p>我到现在还清楚地记得，在每日一课录制结束时，小楠送我下楼问我的一句话，她说：“老师，你的一丝不苟真的让人佩服！”</p>
<p>听到这样的肯定我有点不好意思。由于自己经验缺乏，让对方付出了更多的工作时间和精力，怎么好意思再得到赞美。我说：“我觉得做什么事情，要么不做，要做就要竭尽所能，把事情做好！”</p>
<p>其实小楠不知道，在录课这件事上我特别害怕失败，因为我失败过一次。大概在2018年，我受某个机构邀请，去一个录音棚录课。当时这个机构为了录这个课，租了一天的场地，花了不少钱。当时我没有经验，我以为我到了录音棚，打开电脑自然就能录好。结果那次我搞砸了。真真正正的搞砸了。录制这个事情，就像即兴演讲一样，真的是要准备的。</p>
<p>在极客时间录制《微信小程序全栈开发实战》的时候，计划是每周更新五节，因为开录后我的时间一直都很紧张，白天要在学校讲课，晚上还要备课，只能周末去叶青北园大厦录制。有一次周五晚上我记得很清楚，按计划第二天周六要录制了，我一点还没有备课呢！</p>
<p>怎么办？</p>
<p>所以那天晚上一宿没睡，第二天早上5点的时候把稿子发给了主编。因为我的拖延，编辑只有两个小时的审查、修改时间。</p>
<p>这就是竭尽所能，不做就不做，要做就做好。所以当我听樊登老师讲到塔文纳竭尽所能要让每个学生都考上大学时，我特别有感触。那是她的执念。</p>
<h3>什么是PBL？</h3>
<p>再说第二点，PBL。什么是PBL，它是Project-based learning的简写。这个词我也是听《准备》学来的。我原来没有听这本书之前，我写过一篇文章叫《关于知行合一的人工案例实践技术学习理论》，当时我还不知道PBL，如果我知道的话，我就不会大言不惭地涂这篇文章了。原来我想到的内容，这个世界上早有人想过并付诸实践了。读书很重要，这也是领读人的价值所在。</p>
<p>我在罗胖2020-2021跨年演讲中，听到了北京九渡河小学的案例。这个小学很成功，这个小学的学生不上课，上学就是学习磨豆腐、剪纸、制灯笼，这些都是一个个与身边生活结合紧密的实际项目。以磨豆腐为例，学生不仅要拜村里农民伯伯为师把豆腐学会，还要自己写宣传文案，把豆腐卖到村子里。老师则是负责把小学里的知识点，掰开了揉碎了，放在项目里。</p>
<p>九渡河小学的案例，与塔文纳的PBL理念大概是一个意思。</p>
<p>去年年底我去东北一汽大众企业做过短期的企业内训，既讲师，又带学员做项目。短短5天，学员既学习了新语言新技能，又将项目落地了。我回来以后，我自己都惊诧自己居然坚持下来了。有两点困难：一，我事先没有任何准备，现场了解需求现场开发，一边开发一边给学员讲解；二，学员是零基础或完全接近于零基础的，我不但要讲明白，而且更重要的时刻还要考虑学员是不是听明白了。压力特别大。</p>
<p>但是这种培训形式我特别认可，它是一种「软件定制+课程培训」的模式，既培训了学员，学以致用；又开发了项目，后续需求学员自己就可以维护了。我特别推崇这种模式。我觉得这就是PBL理念在程序员编程领域的具体实践。如果你这个需求，欢迎与我联系。</p>
<h3>致良知</h3>
<p>最后我想和你再聊一聊「致良知」。这个词语出自二个半完人之一王阳明。之前我对这个词语的理解有些偏差，我觉得良知指的是一种东西，是一种观念，或一种智慧。其实不是的，今天我听完《王阳明大传》三卷，我觉得这个词指的是一种状态，是人处于一种「良知」的状态，而「致良知」就是达到这样一种状态。这是什么状态呢？什么是「良知」状态呢？</p>
<p>其实这种状态每个人都有，或每个人都曾经有过。王阳明龙场悟道，有一天晚上突然从石头上跳起来，说「圣人处此，更有何道」。禅宗六祖慧能在悟道时说「何期自性，本自具足」。这两句话是一个意思，都指内心达到了一种「良知」的状态。而这种状态每个人生来都是具有的，只因后来我们因为欲望、因为执念蒙蔽了双眼，迷失了。而参悟，是消除世俗迷障的过程。</p>
<p>那么我们为什么要说致良知呢？这和本文有什么关系呢？</p>
<p>我们未致良知的时候，是为欲世迷眼、为执念迷路；而当我们致了良知的时候，我们便是竭尽所能。竭尽所能既是致良知的一种附加状态，也可以帮助我们致良知。良知这种状态，不是一旦致过就永远不变的；确实是需要「时时勤拂拭，勿使惹尘埃」的。</p>
<p>欢迎留言讨论。</p>
<p>（2021年02月09日）</p>
<h2>（三）</h2>
<p>曾几何时我也认为，课程录完了就万事大吉了，直到有一天我自己把课程看完了，看到最终的结课数字，我明白了：课程虽然录完了，服务才刚刚开始。</p>
<p>由于课程时长比一般课程要长，一般课程都是20~30个小时，这个《微信小程序全栈开发实战》竟然有48个小时。一个人不喝不吃不睡，也要两天两夜才能看完。再加上每个人有各自的工作、学习生活，学习时间并不是固定且充裕的，因此课程学习跨度长，往往学完后面的，前面的又忘掉了。</p>
<p>还有一点，就是由于我录课经验不足，我并未能将技术内容讲得像我预想的那样，具有脱口秀式的有趣特征（事实上谦虚地说，应该是一点没有），因此学习完这48个小时的内容，并不是一件轻松的事。再加上我们知道，人都是有惰性的，如果没有人督促，读者很难自律完成课程。</p>
<p>基于以上考虑，我决定在读者中发起一项活动。即日起，凡是完成课程，并主动在部落中晒出完课证书的读者，由我审核，赠送一本js零基础入门教材。图书封面是这样的：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210316143815.png" alt="img" style="zoom:50%;" />
<p>这本书是完全面向零基础读者，适合新手学习。如果对这本书不感兴趣，可以商量换另一个我的《小程序从0到1：微信全栈开发工程师一本通》。</p>
<p>很多读者都没有完课，都没有见过结课证书，给大家看一下，结课证书是这样的：</p>
<img src="https://cdn.jsdelivr.net/gh/rixingyike/images/202120210316143630.png" alt="img" style="zoom:33%;" />
<p>活动要求是，需要你将自己的结课证书分享到极客时间的部落中，并艾特我知道。这一期活动数量有限，只有10本，先到先</p>
<p>发起这个活动，并不是单纯想促销，而是想帮助读者朋友们克服惰性，尽快结课。我甚至鼓励学习有进展的读者，在完全每一章，甚至每一课都可以在部落中分享一下自己进展；如果不好意思让别人看到，可以写在笔记里，私发给我其它任何一个朋友。</p>
<p>课程录完了，标志着服务刚刚开始。为了使读者们明确能得到具体什么样的服务内容，我将服务简单列举一下：</p>
<ol>
<li>所有购课学员，都可以<strong>免费使用我在课程中使用的企业开发者帐号</strong>。我们知道，只有企业开发者帐号，才可以体验Webview、Live直播、微信支付等这些功能。申请方法是私信我，告诉我微信，由我手动为你开通。注意每个帐号同时只能添加50个开发者帐号，所以前面申请的学员会优先被移除，拿到帐号要尽快学习。</li>
<li>所有购课学员，都可以<strong>免费使用我在课程中使用的小微商户帐号</strong>。申请一个小微商户并不像申请一个可以支付的企业帐号那样代价高，但也需要大约100块钱，这个价格已经比大部分读者的课单价都高了。小微商户申请略为麻烦，需要时间等等，如果仅是体验，不需要这么复杂，在课程源码中就可以看到我的小微商户帐号及密钥，可以直接测试使用。</li>
<li>可以随时在<strong>课程下方评论区提问互动</strong>。提问内容不限于本课课程中讲到的内容，但凡读者在学习过程中遇到的问题，有疑惑，都可以提问。有的读者腼腆一点，怕别人看到自己的提问，除了提问区提问，还可以与我联系，换一种相对私密的方式，都可以。</li>
<li>我准备做<strong>课程直播答疑</strong>。在一个固定的时间，例如晚上8~9点，每天拿出一个小时，读者在写代码的过程中，遇到什么调试不通的bug，都可以将代码上传到github上，将问题描述清楚，提交给我。所有读者将按照先后顺序，排队在直播间中解答。解答一个读者问题的时候，其它人也可以观看学习。我要挑战的是，读者遇到任何问题，我都能当场找出问题所在，并将之解决。当然我知道这个有难度，如果当时解决不了，下播后我研究一下，第二天再给出答案。具体在哪个平台直播，我还没有想好。可能在知乎。如果极客官方可以，我会优先选择极客时间。如果你有听直播的意见，请告诉我，等人数多了，我就着手开始。</li>
</ol>
<p>最后总结一下吧，线上技术网课培训，在我看来同线下是一样的，同样都是服务。区别在于，线下培训动辄学费就是3~5万起，而线上只需129元，线上价格更划算。有时间官方有活动做促销，最低可以降到19.9块钱。对我自己来讲，给每个线上学员像线下那样一对一辅导，这是不现实的；但我可以做到论坛区问答互动，及集中时间式单线程直播答疑。</p>
<p>我听闻国外SC课程的大学讲师，他们每周都有固定的线上、线下交流时间对外开放，在这些时间段学员可以找他们提问任何问题。我觉得这种模式非常好，有意在效仿他们；还有，我从塔文纳的《准备》这本书中学到PBL这个教育理念，我觉得它是最好的技能学习形式，编程语言包括在内。</p>
<p>单从收益来讲，这个课程并不值得我投入这么大的精力，提供上述四项服务，尤其是最后一项。但从我的志趣来讲，我希望将PBL这个理念在编程教育中发扬光大，同时也需要不断在实践中挑战自己用“有趣而不失严谨”的态度及方式传播技术内容，从这个意义上讲，我和我的读者都在修行，我的收获亦是满满。</p>
<p>最后声明一下，以上服务内容（除了提问区问答互动），特别是直播，并非官方承诺，有任何问题请联系我，客服小姐姐是不管这些事的。</p>
<p>欢迎留言讨论。</p>
<p>（2021年2月14日）</p>
<h2>（四）</h2>
<p>「持之以恒」看起来只是一句口号，因为我们都明白，做任何事情如果可以持之以恒的话，都可以成功。</p>
<p>难就难在一般人都难以持之以恒，而我们大多数人又都是普通人。不能坚持的原因，不一定就是意志和信念不坚定，可能还有客观上的原因，例如有本职工作要忙，遇到问题被卡住了很痛苦、无法继续等。</p>
<p>据教育心理学研究，我们人类在学习过程中，有两个困难：</p>
<ol>
<li>遇到困难无人解答、无法前进，这是外在的客观困难</li>
<li>不能得到及时反馈、热情难以为继，这里内在的主观困难</li>
</ol>
<h3>学习遇到困难怎么办？</h3>
<p>先说第一个问题，遇到困难了怎么办？问同学、问老师，讨论+请教就可以把困难拿下。因为这样的困难往往并不是真正的困难，有时候只是自己观念认知不到，眼睛被蒙蔽了，才没有看到解决方法。</p>
<p>具体到《<a href="https://time.geekbang.org/course/intro/100052401">微信小程序全栈开发实战</a>》这门课程，可以在课程的留言区问我；也可以把问题留下来，在我直播的代码直接把代码链接发给我，我在你的代码基础上查找问题，尝试将之解决。</p>
<p>为什么要提供第二种方法呢？因为有些问题就是工程实践性比较强的，读者难以描述，解答者也难以领会，代码最直接；此外，采用直播的方式，即惠及更多读者，又锻炼作者本人。</p>
<p>现场查找 Bug，解决疑难，这对作者来说是一个挑战，我想试一试。</p>
<h3>学习产生惰性是一种正常现象</h3>
<p>再说第二个问题，不能得到及时反馈怎么办。</p>
<p>现代教育心理学认为，学习是一个客观的过程，并不单纯是一个主观行为；教育工作者应该把学生产生惰性心理，看作是一种正常现象，而不应该简单归因于学生懒惰、不上进、意志不坚定等主观因素。</p>
<p>学习本来就是一件反人性的事情，如果不能得到及时反馈，学习者很容易迷失方向、丧失学习动力。所有编程初学者基本都有这样的困惑，下面是最近又接到的一位读者的提问，大意是这样的：</p>
<blockquote>
<p>学员没接触过编程，之前做的是编程以外的其它工作（与互联网或电脑有关，但不涉及编程），目前因工作需要，准备学习一下编程，学之前需要准备学习哪些内容呢？</p>
</blockquote>
<p>我的回答是：不要准备，在实践中学习，有问题就问。</p>
<p>从线下学校课堂的实践总结来看，从一门有及时反馈的、简单的、系统化的、相对独立的技术入门学习编程，会坚持得更久，更容易成功。这样的技术以前是 Flash，现在是微信小程序。</p>
<p>有人会说，对于新手来说，像计算机基础、数据结构、算法、设计模式等等，这些都需要准备。其实都可以先不准备。如果将这些东西都准备好了再去学习，学习的热情先被浇灭了。特别像算法这样的大部头，它的作用对新手来讲，要么扼杀学习热情，要么将学员推进培训机构。</p>
<p>这门《<a href="https://time.geekbang.org/course/intro/100052401">微信小程序全栈开发实战</a>》课程，因为当初定位在中级偏上程序员，所以对初级读者会有一些难度。但只要坚持把每节课作者敲过的代码都敲一遍，学过 179 节课，一定会大有收获。有时候有点困难，反而达成后更有成就感。</p>
<p>这门课最大的缺点就是我录的时间太长了，整整 48 小时，179 节课，比一般其它课程多了一倍。课程节数太多，需要长期坚持学习，这对学习者是一个挑战。如何坚持？就是上面我提到的，有问题就问+坚持在反馈中实践。</p>
<h3>具体反馈指什么呢？</h3>
<p>最后补充一下，上面提到的反馈指什么？</p>
<p>指我们能够看到的、听到的现实表象，例如在终端里敲一下指令，成功了，写一段新功能的代码，编译通过了等等，这些都是正向反馈。还有，同学学习遇到困难，找你请教或讨论，你帮他解决了，这种输出式巩固所学的副产品——来自同学的感谢，也是正向反馈。</p>
<p>编程大多数时间都是一个人做事情，微信小程序这门技术本身是相对独立的、语法简单的，更重要的是它还是个前端技术，它有丰富的表现力，一个按钮、一个图像、一段文本，这些都能给读者带来最直观的感受。而我们人类的大脑就需要这样接地气的反馈。如果学习一门语言，只能在终端里看到文本结果，有时候还只是黑白的，这会大大降低学员对反馈的满足感。</p>
<p>欢迎留言提问。</p>
<p>（2021年2月23日）</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[开课吧三次直播资料下载]]></title>
            <link>https://yishulun.com/./src/posts/2021/28.html</link>
            <guid>https://yishulun.com/./src/posts/2021/28.html</guid>
            <pubDate>Fri, 08 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>开课吧三次直播资料下载</h1>
<p>所有课件请在公众号「艺述论」回复数字100下载。三次直播的源码在课件里有，为方便读者，也列在下面：</p>
<ol>
<li><a href="https://github.com/rixingyike/wechat-operation-assistant">https://github.com/rixingyike/wechat-operation-assistant</a></li>
</ol>
<p>「2月23日」一个使用小微商户+微信聊天机器人构建的可付费私域运营助手</p>
<ol start="2">
<li><a href="https://github.com/rixingyike/cloud-markdown-editor">https://github.com/rixingyike/cloud-markdown-editor</a></li>
</ol>
<p>「3月6日」Markdown云编辑器主要实现的是一个以Markdown格式写作，保存在云端，同时在多个平台发布的功能。</p>
<ol start="3">
<li><a href="https://github.com/rixingyike/chrome-extension-assistant">https://github.com/rixingyike/chrome-extension-assistant</a></li>
</ol>
<p>「3月13日」一个浏览器插件助理</p>
<p>第二、三场直播的回放，请在开课吧官网-&gt;公开课-&gt;前端页面下，分别找3月6日和3月13日的链接。第一场关于私域运营机器人的直播，与官方确认，答案是这样的：</p>
<p>第一场直播是开课吧门徒计划的预热课，只有报了该计划的同学才能观看。并且门徒计划在网站上没有公开链接，它是一个社群式项目。目前如果想加入，可以咨询自己的销售顾问。</p>
<p>2021年3月16日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[关于信念]]></title>
            <link>https://yishulun.com/./src/posts/2021/27.html</link>
            <guid>https://yishulun.com/./src/posts/2021/27.html</guid>
            <pubDate>Thu, 07 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>关于信念</h1>
<blockquote>
<p>“疯狂”那是别人的看法，在疯狂的人的眼里，只有“相信”</p>
</blockquote>
<p>以下内容是一觉醒来，早上不到五点钟爬起来写的。我一直觉得，人有时候在黑夜睡梦中思考的内容，比在白天正经的思考，更清醒、更有价值，接下来要说的便是。</p>
<!-- more -->
<p>程序，什么是程序？计算机按照一定指令和顺序，执行预先安排好的脚本，这就是程序。有人说电脑程序难，但程序是这个世界上最方便人类做培训的内容之一。为什么？</p>
<p>因为只要执行环境一致、输入条件一致，执行结果永远都是一样的。电脑就是一个傻瓜，人要它干什么它就干什么。</p>
<p>其它任何活动都不如程序这般诚实，艺术？艺术更不可能，同一个人、同一篇内容，两次创作，结果就不一样。小学我就听老师说过，天下第一行书《兰亭序》是王羲之在喝醉后写的，第二天酒醒后再写，已经写不出来了。</p>
<p>所以，程序是最方便做培训的内容，甚至没有之一。</p>
<p>在培训的时候，无论是录播还是直播，我们只要预先把环境准备好，把示例备好，演示的时候将代码拷贝进来执行，一般都不会有什么问题。就像预先挖好沟渠，将水引到渠里流淌一样，这是一个自然而然、水到渠成的过程。</p>
<p>在培训中，针对每节课要培训的主旨不同，还可以有针对性地安排不同的示例，将枝节略去，只保留关键内容，以此避免影响学员理解、避免他们建立主要的目标概念。</p>
<p>现在，我们换个角度，把我们人类自己当作程序中的代码，重新思考一下人类本身。</p>
<p>宇宙这么大，要么是我们目前观察手段不行，要么是被限制了，像鱼被限制在鱼缸里一样被限制了，不然的话，人类不太可能是唯一的智慧生命体。不然，人类在茫茫宇宙中就太孤独了。</p>
<p>爱因斯坦是一个决定论者，前天读他的传记，书中说他坚持人说什么话、做什么事其实都是由某种东西决定的，人在一定程度上是基因与所处环境的“奴隶”，言行并不是100%自由的。</p>
<p>如果将人的行为，与计算机世界程序的行为类比一下，不难想象，人类可能只是更高级文明编写的程序代码而已。</p>
<p>在我们的世界中，自然科学的火山喷发、地震、疫情疾病，还有社会学中的农民起义、战争、邦国外交等等，都是在一定“规律”支配之下的必然结果。</p>
<p>诚然，火山喷发的时候，岩浆在每个具体瞬间，有向左流淌或向右流淌的“自由”，但是它受重力影响及周围环境所限，必然向低洼处流淌，却是它不可更改的“宿命”。</p>
<p>如果一切皆有定数，那么是什么东西，在程序的必然之下，影响那些变化的内容的呢？</p>
<p>是信念，应该是信念。</p>
<p>马云当年创业，说他要创建一家存在102年的企业。阿里销售铁军放出去跑业务，一次次被厂家拒绝，被人放狗咬，没有关系，因为员工相信，阿里的企业服务费1万/年，绝对可以卖出去，厂家不卖，是他不识货；那些骂阿里是骗子的人，只是因为一叶障目，没有看到20年后的网商盛况。</p>
<p>这张图可能很多人都看过了。在阿里创业初期，马云在向“十八罗汉”做演讲。从马云的姿势和听众的眼神中，我们都不难想象，这个团队有着相同的信念。阿里的这个信念，是马云先生创建并给予团队的。</p>
<p>一时相信为信心，一直相信为信念。在团队中，维护信念的力量是意志。但因为人会思考，社会文明越进步，人越会思考，所以有时候我们在建立团队信念的时候，必须要使用思想来武装，要用科学的思想来武装。从武装这个意义上讲，2000多年前的《易经》和今天的《相对论》没有区别。</p>
<p>古之今来凡成大事者，信念都是必不可少的因素。当人多的时候，想把大多数人都团结起来，建立同一个信念，思想又是必不可少的。</p>
<p>宣传思想的方式有很多种，演讲是，办报纸杂志也是。蒋委员长40岁当选国民党中央委员，在此之前26岁就在日本创办了《军声杂志》。教员就更不用说了，26岁在湖南创办了《湘江评论》，后又有五卷遗世。</p>
<p>蒋委员长统辖国民党没有思想，他的思想便是国父孙中山的三民主义。但他有意志，他数十年坚持写日记，这中间的意志便可见一斑。若不是坚信自己能成熟一番千秋伟业，谁能数十年如一日坚持做一件事情。</p>
<p>教员是既有思想，又有意志。教员的意志在神州大地从来没有动摇过，在996和年轻人猝死风行的年代，“今日欢呼孙大圣，只缘妖雾又重来”。</p>
<p>思想有没有可能是错的？</p>
<p>有可能。限于当时环境和认知条件，团队在一定时期的思想可能是不完善的，甚至是错误的。但这没有关系，只要当时能够以此建立和维持团队的信念，就足够了。所谓思想，就是让大多数相信可以干好某件事的逻辑。思想不怕错误、不怕不完善，思想是可以进化的，但是信念不容缺失。</p>
<p>乔布斯当年在重返苹果时，花了1亿巨资做了一个广告，就是上面这个“Think different”。</p>
<p>这个广告既不卖产品，也不夸耀自己，乔布斯在干什么？疯了？</p>
<p>他在重建苹果团队的信念。“只有那些疯狂到认为自己可以改变世界的人，才真的可以改变世界”，这句话太著名，我们必须引用一下它的英文原文：</p>
<p>“the people who are crazy enough to think they can change the world are the ones who do.”</p>
<p>俄国十月革命的领导人列宁，他也是既有强大意志，又有完备思想的人。他的思想继承和发扬自马克思主义。他的意志，当他在拉兹里夫湖边一边当割草工人一边写作的时候就已经显现无遗了。</p>
<p>还有马克思，他数十年如一日研究、撰写《资本论》，大英博物馆的地面都被他磨出一道凹进的脚印，那是大地向他的意志臣服的谦逊。</p>
<p>所以，综上所述，如果有什么东西，是在程序的必然之下，是影响变化的关键因素，那么这个因素应该是信念。</p>
<p>信念是真的相信，不是阿谀奉承，也不是虛情假意，更不是机关敲诈。只有内心真正相信自己可以成事的人，才真的可以成事；只有真正团结起来，相信一定能够干成某件事的团队，他们才真的可以干成。</p>
<p>如果人类之上真有更高一等的文明，他们在编写我们的时候，或许早已将“信念”注入到了程序当中。那些拥有强大信念的人，那些拥有坚定团队信念的团队，山川亦为之动容，魔鬼亦为之改道。</p>
<p>或更有甚者，那些历史上降临世间创建丰功伟绩的人，只因来的时候携带了强大的信念，这种信念有时候被传记作家称之为扭曲现实的强大磁场。这种夸张的描述，我在《毛泽东传》和《乔布斯传》中都曾看到。</p>
<p>只有那些疯狂到认为自己可以改变世界的人，才真的可以改变世界。“疯狂”那是别人的看法，在疯狂的人的眼里，只有“相信”。</p>
<p>欢迎留言。</p>
<p>2021年1月7日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[声声慢·记 LeaTech 全球 CTO 领导力峰会暨 TVP 二周年庆典]]></title>
            <link>https://yishulun.com/./src/posts/2020/02.html</link>
            <guid>https://yishulun.com/./src/posts/2020/02.html</guid>
            <pubDate>Thu, 10 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>声声慢·记 LeaTech 全球 CTO 领导力峰会暨 TVP 二周年庆典</h1>
<blockquote>
<p>声声慢·记 LeaTech 全球 CTO 领导力峰会暨 TVP 二周年庆典</p>
</blockquote>
<blockquote>
<p>12月4日、5日前往深圳参加了一个技术活动，5日晚上喝了点酒，第二天早上填了这首词。深圳有一种小吃叫三及第汤很不错，老板说汤里面清新的绿叶子是枸杞叶。还有，深圳人说普通话，问你要不要加肠，其实是问你要不要加汤。</p>
</blockquote>
<!-- more -->
<p>深圳滨海，东海朗廷，节气大雪行将。</p>
<p>大伽千里云聚，把盏共襄。</p>
<p>圆桌讨论犹记，有趣哉，不越篱墙。</p>
<p>带团队，无招胜有式，平展影响。</p>
<p>以技术创企业，连元素，协同驱动成长。</p>
<p>更有求败绝艺，计算车厢。</p>
<p>喜看他人日上，挥挥手，心莫忧伤。</p>
<p>立风口，待东风与便，再造辉煌。</p>
<p>2020年12月10日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[小程序从0到1：豆瓣接口替代网址可以在线访问了]]></title>
            <link>https://yishulun.com/./src/posts/2020/01.html</link>
            <guid>https://yishulun.com/./src/posts/2020/01.html</guid>
            <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>小程序从0到1：豆瓣接口替代网址可以在线访问了</h1>
<p>《小程序从0到1》这本书即将再版印刷了，趁此机会，作者必将豆瓣服务器地址从示例中拿去，原因大家都清楚。前几日，为了方便读者朋友在本地学习与测试，作者用 Go 语言写了一个替代小工具，如下文章所述：</p>
<p><a href="http://mp.weixin.qq.com/s/-6UYVXvTwxlz5poybBFHUg">还一个技术债：豆瓣接口代替小工具</a></p>
<p>现在，这个小工具也不需要了。为了进一步方便读者，作者已经将该程序部署在了作者的服务器上。购买服务器可是花了不少银子。</p>
<p>使用方法：</p>
<pre><code class="language-bash">将小程序源码中的 https://api.douban.com/v2 替换为 https://api.rixingyike.com/doubanapiv2
</code></pre>
<p>具体的新旧接口对应关系为：</p>
<pre><code class="language-bash">// https://api.douban.com/v2/movie/coming_soon?start=0&amp;count=3
// https://api.rixingyike.com/doubanapiv2/movie/coming_soon?start=0&amp;count=3

// https://api.douban.com/v2/movie/search?q=${this.data.searchWords}&amp;start=${start}&amp;count=${this.data.size}
// https://api.rixingyike.com/doubanapiv2/movie/search?q=和平&amp;start=0&amp;count=10

// https://api.douban.com/v2/movie/${this.data.type}?start=${start}&amp;count= ${this.data.size}
// https://api.rixingyike.com/doubanapiv2/movie/in_theaters?start=0&amp;count=10

// https://api.douban.com/v2/movie/subject/${options.id}
// https://api.rixingyike.com/doubanapiv2/movie/subject/3267549

// https://api.douban.com/v2/movie/bang/${board.key}?start=0&amp;count=10
// https://api.rixingyike.com/doubanapiv2/movie/top250?start=0&amp;count=10
</code></pre>
<p>2020年1月1日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[清平乐·贺TVP周年]]></title>
            <link>https://yishulun.com/./src/posts/2019/01.html</link>
            <guid>https://yishulun.com/./src/posts/2019/01.html</guid>
            <pubDate>Sun, 22 Dec 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>清平乐·贺TVP周年</h1>
<blockquote>
<p>这是在腾讯云TVP一周年时填写的一首词。</p>
</blockquote>
<p><strong>清平乐·贺TVP周年</strong></p>
<p>腾讯云加，聚八方好汉。如战神般自由勇敢，不畏险阻艰难。</p>
<p>勇攀科技巅峰，谱写战绩云风。今日长剑在手，何惧四海青龙？</p>
<p><code>注：剑者，腾讯云也。青龙，上古四大神兽之首。</code></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[小程序从0到1：MXML基础语法与错误信息]]></title>
            <link>https://yishulun.com/./src/posts/2018/05.html</link>
            <guid>https://yishulun.com/./src/posts/2018/05.html</guid>
            <pubDate>Fri, 26 Jan 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>小程序从0到1：MXML基础语法与错误信息</h1>
<h2>1、理解标签与属性</h2>
<p>在MXML标签中，尖括号都是成对出现的。像这样：</p>
<pre><code>&lt;..&gt;...
</code></pre>
<p>尖括号中间是标签名，例如swiper、swiper-item、image等，这些都是标签名。</p>
<p>每个标签默认都有一些属性，属性名与属性值以符号“=”连接，属性值用双引号引住。如下所示：</p>
<p>​    <img src="./assets/22027.png" alt="0"></p>
<p>还有，属性与属性之间，要有空格。属性值开始处不需要空格。</p>
<p>​    <img src="./assets/22001.png" alt="0"></p>
<p>如上所示，属性名“wx:key”、“style”之前缺少空格。属性&quot;style&quot;的值，开始处并不需要空格。</p>
<h2>2、仔细阅读错误信息</h2>
<p>如果MXML有错误，微信开发者工具会弹出错误信息，要仔细阅读错误发生在第几行、第几个字符、错误信息是什么。例如：</p>
<p>​    <img src="./assets/21993.jpeg" alt="0"></p>
<p>该错误信息讲，第3行第9个字符，出现了一个不应该出现的“&lt;”字符。</p>
<p>依照错误信息，去代码检查错误，才能做到按图索骥，事半功倍。</p>
<h2>3、注意单词拼写</h2>
<p>如下所示，只因“swiper-item”错拼为“swiper-itrm”，程序编不过。</p>
<p>​    <img src="./assets/22009.png" alt="0"></p>
<p>拼写单词一定要细心，错一个字符都编译不过。英语基础不好的读者，尤其要注意这点。在小程序中，用作标签名的单词，都是真实的有意义的单词，如果不认识，不妨查一下词典，将拼写识断清楚。</p>
<h2>4，基础库版本需要更改吗？</h2>
<p>有读者问这样的问题，编写书上的demo，需要指定基础库的版本吗？</p>
<p>​    <img src="./assets/22020.jpeg" alt="0"></p>
<p>答案是不需要。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[小程序从0到1：1月25日群问题集锦]]></title>
            <link>https://yishulun.com/./src/posts/2018/03.html</link>
            <guid>https://yishulun.com/./src/posts/2018/03.html</guid>
            <pubDate>Thu, 25 Jan 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>小程序从0到1：1月25日群问题集锦</h1>
<h2><strong>1，大家都是在第三方平台上做的小程序吗？</strong></h2>
<p>据作者观察，大家好像还是用微信开发者工具最多。</p>
<h2><strong>2，有没有朋友遇到过，for循环节点显示不出来的情况？</strong></h2>
<p>​    <img src="./assets/22288.jpeg" alt="0" style="zoom:50%;" /></p>
<p>这种情况，可以在Wxml面板中查看button节点有没有生成，如果有，再查看样式的设置是否正确。关于Wxml面板，如下所示。需要注意的是，在小游戏版本的微信开发者工具中，是没有Wxml面板的，虽然它们的名字一样。</p>
<p>​    <img src="./assets/22291.png" alt="0" style="zoom:33%;" /></p>
<h2><strong>3，一个帐号可以弄几个小程序啊？</strong></h2>
<p>企业、政府、媒体、其他组织主体可以注册50个小程序，个体户和个人类型主体可注册5个小程序。</p>
<h2><strong>4，这个是在什么地方设置呢？</strong></h2>
<p>​    <img src="./assets/22314.jpeg" alt="0" style="zoom:50%;" /></p>
<p>在项目“详情”中</p>
<img src="./assets/22317.png" alt="0" style="zoom: 33%;" />
<p>反选“不检验安全域名”：</p>
<p>​    <img src="./assets/22319.png" alt="0" style="zoom:50%;" /></p>
<p>拟增加进快速创建项目，或第一次调用接口一节中。</p>
<h2><strong>5，第7.1.4节，命令行工具是指？</strong></h2>
<p>​    <img src="./assets/22328.jpeg" alt="0" style="zoom: 33%;" /></p>
<p>在win上指命令行窗口（cmd），在mac和linux上指终端窗口。如果安装了git bash，在win上直接使用git bash就可以了。</p>
<h2><strong>6，建议群主搞个go和类库安装的详细说明，小白太多？</strong></h2>
<p>书第7.1.1节，即是“安装Golang语言包”。Go语言类库的安装，十分简单，一条指令：</p>
<pre><code>go get xx
</code></pre>
<p>后面跟类库的git网址，一般是github的项目主页地址。</p>
<h2><strong>7，我从内嵌的H5页面跳转回小程序页面，怎么跳转？</strong></h2>
<p>可以考虑 wx.miniProgram.navigateBack 接口。详见：</p>
<p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/web-view.html">https://mp.weixin.qq.com/debug/wxadoc/dev/component/web-view.html</a></p>
<h2><strong>8，服务器空间需要买多大的？</strong></h2>
<p>如果选择了ubuntu系统，服务器主机默认一般有20G系统盘，足够了，程序基本不占空间。涉及的图像、视频的存储，建议用存储云；数据存储使用关系数据库，例如mysql。</p>
<h2><strong>9，关于js“js not defined”错误？</strong></h2>
<p>​    <img src="./assets/22346.jpeg" alt="0" style="zoom:33%;" /></p>
<p>这种错误一般是没有找到对应的文件，例如sim.js/index.js。请在资源管理器中查看一下文件是否存在，还有引入的路径有没有写错。</p>
<h2><strong>10，请问这种框是什么组件？电影选座页面</strong></h2>
<p>​    <img src="./assets/22353.jpeg" alt="0" style="zoom: 25%;" /></p>
<p>这种功能复杂的页面，都是自定义实现的。小程序自带的组件，大多数都极简单，像DataPicker已经算是复杂的组件了。</p>
<h2><strong>11，AppID不够用了</strong></h2>
<p>现在练习前后端，要输入小程序 的Appid，一个手机号只能注册5个小程序，那我现在练习这个是不是就占了一个？每练习一个就占一个名额？</p>
<p>重复使用一个就可以了。</p>
<h2><strong>12，请问老师第7章的服务器可以直接放在我的腾讯云服务器上运行，然后我通过服务器的ip地址访问吗？</strong></h2>
<p>完全可以，作者授权所有读者免费使用。上线后，可以通过IP访问。</p>
<h2><strong>13，笑林百家的图书存储，如果不用七牛空间怎么弄？</strong></h2>
<p>​    <img src="./assets/22362.jpeg" alt="0" style="zoom:50%;" /></p>
<p>可以尝试自己写一个直接存于硬盘，或者用腾讯的云存储。但这样的话，和上面的配置就没有任何关系了，它仅适用于qiniu的云存储。</p>
<p>话又说回来，为啥不用呢？许式伟还没有给我广告费，推荐读者用它，仅是因它免费易用。</p>
<h2><strong>14，控制台在那里？</strong></h2>
<p>微信开发者工具的console面板。同学，请注意看书，不要开小差。</p>
<h2><strong>15，浏览器访问接口没有正常输出？</strong></h2>
<p>​    <img src="https://note.youdao.com/yws/public/resource/b4464d346a4b64288ac091aa86b09291/xmlnote/4CBA46764F36457190BDDB3815A40247/22371" alt="0" style="zoom:50%;" /></p>
<p>这里的地址，不用加s，使用http即可。另外，在启动debug.sh脚本后，出现如下的阻塞状态，这是正常的。</p>
<p>​    <img src="./assets/22376.jpeg" alt="0"></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结]]></title>
            <link>https://yishulun.com/./src/posts/2018/04.html</link>
            <guid>https://yishulun.com/./src/posts/2018/04.html</guid>
            <pubDate>Thu, 25 Jan 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>小程序从0到1：第一次在windows机器上使用sim.go需要注意的问题总结</h1>
<p>在win系统上安装gcc分两种情况，一种系统是win10，另一种是win7。如果是后者，请跳到子目录7查看。</p>
<p>作者在写书的过程中，所有demo均是基于mac系统构建。使用mac电脑学习的读者，不存在以下问题，可以略过了。</p>
<p>因为windows系统默认不安装gcc，而在sim.go中使用了sqlite3类库，该类库间接使用了cgo，在编译的过程中需要gcc编译器，因此有了这篇教程。</p>
<h2><strong>1，使用git bash代替cmd</strong></h2>
<p>windows读者按照书上第96页，第7.1.2小节“安装仓库管理工具git”的说明，完成了git的安装之后，就不要再使用系统自带的终端工具cmd了，要使用git bash。在任何目录空白处，右键单击，就可以看到“Git Bash Here”的菜单。</p>
<p>使用git bash代替cmd有哪些好处呢？</p>
<p>1）首先，cd更加方面</p>
<p>如果在当前的项目目录打开git bash，会直接定位到当前目录，免去了cd的麻烦。在git bash中，/c/代表c:/，/d/代替d:/，使用习惯是类linux的。</p>
<p>2）其次，避免将sim.go误判为文件</p>
<h2><strong>2，<a href="http://golang.org/x%E7%B1%BB%E5%BA%93%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98">golang.org/x类库无法下载的问题</a></strong></h2>
<p>这是一个读者遇到的问题：</p>
<blockquote>
<p>C:\Users\Administrator&gt;go get <a href="http://github.com/rixingyike/sim.go">github.com/rixingyike/sim.go</a> package <a href="http://golang.org/x/net/context:">golang.org/x/net/context:</a> unrecognized import path &quot;<a href="http://golang.org/x/net/context">golang.org/x/net/context</a>&quot; (https fetch: Get <a href="https://golang.org/x/net/context?go-get=1:">https://golang.org/x/net/context?go-get=1:</a> dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.)</p>
</blockquote>
<p>因为被墙，国内没有办法直接下载这个Google官方的类库。解决方法：</p>
<p>1）手动下载x类库</p>
<pre><code>git clone https://github.com/rixingyike/golang.org-x
</code></pre>
<p>2）将clone下来的x目录放至$GOPATH/src/golang.org目录下</p>
<p>解决了上述问题之后，别忘记再次运行“go get <a href="http://github.com/rixingyike/sim.go%E2%80%9D">github.com/rixingyike/sim.go”</a></p>
<h2><strong>3，如何找到$GOPATH/src/golang.org目录？</strong></h2>
<p>在终端中执行：</p>
<pre><code>go env
</code></pre>
<p>查看GOPATH所在的目录</p>
<p><img src="./assets/202120210327210608.jpeg" alt="0"></p>
<p>在windows上cmd中执行go env，可能输出是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215222.png" alt="image-20210327210802847"></p>
<p>如果没有在src目录下找到golang.org目录，新建一个。</p>
<h2><strong>4，安装gin工具</strong></h2>
<p>正常情况下，启动服务端后，在浏览器访问localhost:4000/hi，会看到文本的输出。</p>
<p>这是一位读者看到的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215316.png" alt="image-20210327215315987"></p>
<p>服务尚未启动。需要检查是否在当前项目的后端目录下，执行了debug.sh脚本。</p>
<p>如果执行debug.sh脚本，终端未被阻塞，可能脚本未执行成功。此时在终端里输入：</p>
<p>gin</p>
<p>查看有没有输出。如果输出：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215449.png" alt="image-20210327215449058"></p>
<p>则说明gin尚未安装成功。如果已经按书上第96页的步骤，安装了gin工具。出现这种问题，是因为没有把GOPATH/bin目录添加进windows系统变量PATH中。在windows机器上，右键单击“计算机”，选择“属性”-&gt;“高级系统设置”-&gt;“系统变量”，在当前用户下找到PATH变量，在尾部添加目录。</p>
<p>安装并设置环境后，再次执行gin指令，如果输出：</p>
<p><img src="./assets/202120210327210607.png" alt="0"></p>
<p>说明安装成功了。</p>
<h2><strong>5，如何更新sim.go</strong></h2>
<p>go get -u <a href="http://github.com/rixingyike/sim.go">github.com/rixingyike/sim.go</a></p>
<p>使用以上脚本更新sim.go类库，如果出现了以下输出：</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215527.png" alt="image-20210327215527375"></p>
<p>不用管它，不影响继续征程。</p>
<h2><strong>6，在windows10上安装gcc</strong></h2>
<p>启动服务后，访问<a href="http://localhost:4000/hi%EF%BC%8C%E6%9C%89%E8%AF%BB%E8%80%85%E9%81%87%E5%88%B0%E8%BF%99%E6%A0%B7%E7%9A%84%E9%94%99%E8%AF%AF%EF%BC%9A">http://localhost:4000/hi，有读者遇到这样的错误：</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215605004"></p>
<p>这是因为没有安装gcc编译器。win10解决方法：</p>
<p>1）去<a href="https://cygwin.com/install.html%EF%BC%8C%E4%B8%8B%E8%BD%BDsetup-x86_64.exe">https://cygwin.com/install.html，下载setup-x86_64.exe</a></p>
<p>2，下载后，选择网络安装。等列表加载后，在顶部的搜索框里输入gcc。</p>
<p><img src="https://cdn.jsdelivr.net/gh/rixingyike/images/2021/20210327215618.png" alt="image-20210327215618869"></p>
<p>在Devel这一组下选择gcc-g++:</p>
<p><img src="./assets/21928.jpeg" alt="0"></p>
<p>往后就一路默认安装。</p>
<p>完成安装后，在终端内输入gcc，会看到有内容输出。</p>
<p>至于下载时选择哪个镜像地址：</p>
<p><img src="./assets/21931.png" alt="0"></p>
<p>一般选择前面的，下载会比较快。</p>
<p>gcc安装后，在git <a href="http://xn--bashdebug-on3o469l64vrv0gy11a.sh">bash里再次执行debug.sh</a>（sh文件在windows系统的git bash里也是认的）。输出像这个样子：</p>
<p><img src="./assets/21934.jpeg" alt="0"></p>
<p>浏览器访问<a href="http://localhost:4000/hi%EF%BC%8C%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84%EF%BC%9A">http://localhost:4000/hi，是这样的：</a></p>
<p><img src="./assets/21938.png" alt="0"></p>
<p>作者用win10作了测试，以上安装gcc的流程可以跑通。</p>
<h2><strong>7，在win7系统上安装gcc</strong></h2>
<p><img src="./assets/21945.png" alt="0"></p>
<p>如果是win7 32位系统，按照上面的方法安装，可能会出现以下问题：</p>
<p><img src="./assets/21943.png" alt="0"></p>
<p>这是一位读者遇到的问题，作者也是第一次遇到。为了解决该问题，作者请读者在电脑上安装了远程工具teamviewer：<a href="https://www.teamviewer.com/zhCN/">https://www.teamviewer.com/zhCN/</a></p>
<p>作者在这位读者的电脑上进行远程操作。解决方法是：</p>
<p>1）首先，将系统变量里的cygwin去掉</p>
<p>2）然后，如果是win7 32位系统，去这里<a href="https://sourceforge.net/projects/mingw/%EF%BC%8C%E4%B8%8B%E8%BD%BDMinimalist">https://sourceforge.net/projects/mingw/，下载Minimalist</a> GNU for Windows，并安装之；如果是win7 64系统，去这里<a href="https://sourceforge.net/projects/mingw-w64%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E5%B9%B6%E5%AE%89%E8%A3%85%E3%80%82">https://sourceforge.net/projects/mingw-w64，下载最新版本并安装。</a></p>
<p>3）安装以后，仍然是类似的方法，选择gcc-g++package安装</p>
<p><img src="./assets/21958.png" alt="0"></p>
<p>安装方法是选择后，再选择菜单里的apply change。选择后如下所示：</p>
<p><img src="./assets/21962.png" alt="0"></p>
<p>在终端里输入gcc --version，正常的输出：</p>
<p><img src="./assets/21965.png" alt="0"></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[小程序从0到1：1月23日群问题集锦]]></title>
            <link>https://yishulun.com/./src/posts/2018/02.html</link>
            <guid>https://yishulun.com/./src/posts/2018/02.html</guid>
            <pubDate>Tue, 23 Jan 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>小程序从0到1：1月23日群问题集锦</h1>
<h2><strong>1，打发下无聊时间，制作一个简单的小游戏，不难吧？</strong></h2>
<p>a)如果没有js基础的话，不行的，我在知乎Live课（<a href="https://www.zhihu.com/lives/930123989723004928/">如何从零开发一款「微信小游戏」</a>）里面贴了一个js基础教程的链接（<a href="http://www.shouce.ren/api/view/a/827%EF%BC%89%EF%BC%8C%E9%82%A3%E4%B8%AA%E8%B5%B7%E7%A0%81%E8%A6%81%E7%9C%8B%E4%B8%80%E4%B8%8B%E3%80%82">http://www.shouce.ren/api/view/a/827），那个起码要看一下。</a></p>
<p>b)还有在我的书《小程序从0到1》里面，第15章是关于js的入门，也建议看一下。</p>
<p>c)这两个都看了以后呢，你把我在Live课（<a href="https://www.zhihu.com/lives/930123989723004928/">如何从零开发一款「微信小游戏」</a>）里面发的那个demo，仔细研究一下，在本机上跑一跑。</p>
<h2><strong>2，微信的第三方平台是个什么样的存在？</strong></h2>
<p>公众平台第三方平台是为了让公众号或小程序运营者，在面向垂直行业需求时，可以一键授权给第三方平台（并且可以同时授权给多家第三方），通过第三方平台来完成业务，开放给所有通过开发者资质认证后的开发者使用。</p>
<p>从业务特征上来说，第三方平台必须如图所示：</p>
<p>​    <img src="./assets/22187.png" alt="0" style="zoom:50%;" /></p>
<h2><strong>3，这一段是做什么用的？服务端为什么要连接其它网址？</strong></h2>
<p>​    <img src="./assets/22191.jpeg" alt="0" style="zoom:50%;" /></p>
<p>在这里，git clone是为了从github上下载服务器端示例源码，方便在此源码的基础之上修改。</p>
<h2><strong>4，第2.9.5节说在”项目“，上单击”上传“按钮，没有上传按钮啊？</strong></h2>
<p>看下图的右边：</p>
<p>​    <img src="./assets/22198.png" alt="0" style="zoom:50%;" /></p>
<p>新旧版本的微信开发者工具在布局上存在一些差异。</p>
<h2><strong>5，第3章 计算皮相  ，这是一个计算器，为什么叫计算皮相？皮相是什么东西？</strong></h2>
<p>随便起的。</p>
<h2><strong>6，用sim.go可以给自己的数据库写类似豆瓣的API吗，我觉得最难的就是如何把数据库部署到API上？</strong></h2>
<p>第8章就讲到了从Sqlite3数据中取数据，并从分页接口取出。</p>
<h2><strong>7，豆瓣API不能调用了怎么办？</strong></h2>
<p>豆瓣API的网址</p>
<p><a href="https://developers.douban.com/wiki/?title=movie_v2#top250">https://developers.douban.com/wiki/?title=movie_v2#top250</a></p>
<p>豆豆电影中主要用到的接口有——</p>
<p>豆瓣电影详情接口：</p>
<p><a href="http://api.douban.com/v2/movie/subject/1764796">http://api.douban.com/v2/movie/subject/1764796</a></p>
<p>榜单：</p>
<p><a href="http://api.douban.com/v2/movie/in_theaters">http://api.douban.com/v2/movie/in_theaters</a></p>
<p><a href="http://api.douban.com/v2/movie/coming_soon">http://api.douban.com/v2/movie/coming_soon</a></p>
<p><a href="http://api.douban.com/v2/movie/top250">http://api.douban.com/v2/movie/top250</a></p>
<p>以上接口作者亲测，都还可用。不存在豆瓣倒闭或封杀小程序调用的情况。毕竟我们很渺小。</p>
<p>如果单一IP调用过多，可能被关小黑屋一天。有网友做了nginx代理，提供了代理接口，可以一看：</p>
<p><a href="https://github.com/zce/weapp-demo/blob/master/README.md">https://github.com/zce/weapp-demo/blob/master/README.md</a></p>
<h2><strong>8，关于第7章接口调用的问题</strong></h2>
<p>有读者完成了第七章的功课，修改了第二章的index页面，item页面的api url</p>
<p>1）<a href="http://localhost:4000/movie/bang/in_theaters">http://localhost:4000/movie/bang/in_theaters</a>  有数据返回</p>
<p>2）单部电影有数据返回，页面正常</p>
<p>问题是：</p>
<p><a href="http://localhost:4000/movie/bang/coming_soon">http://localhost:4000/movie/bang/coming_soon</a></p>
<p><a href="http://localhost:4000/movie/bang/top250">http://localhost:4000/movie/bang/top250</a></p>
<p>这两个没有数据返回， index页面后两项无显示。</p>
<p>榜单接口coming_soon、top250与in_theaters是类似的。如果后者能访问，前二者也可能是正常的。可以在小程序中使用console.log()查看服务器端接口返回的数据。然后进一步排查问题出在哪里。</p>
<h2><strong>9，为什么同样的代码，pc正常，手机端 onload就加载不到数据呢？</strong></h2>
<p>​    <img src="./assets/22225.jpeg" alt="0" style="zoom: 25%;" /></p>
<p>这种情况，首先要检测一下接口地址，如果接口地址使用了localhost，在手机上是没有localhost的。可以将手机与电脑的服务器端放在同一个网段，然后使用类似于“192.168.x.x”这样的局域网IP代替localhost。</p>
<h2><strong>10，怎么查找调试域名，书上第6.1.1节的方法试了，不行啊？</strong></h2>
<p>​    <img src="./assets/22232.jpeg" alt="0"></p>
<p>通过修改image组件的src属性为错误的地址，故意让程序出错，以此查看调试域名的方法，现在行不通了。在新版本的微信开发者工具中已经屏蔽了，毕竟这本是一个非官方的方法。</p>
<h2><strong>11，小程序中，怎么合并这两个对象啊？</strong></h2>
<pre><code class="language-js">var userinfo = {avatarUrl:&quot;1&quot;,
city:&quot;2&quot;,
country:&quot;China&quot;,
gender:1,
language:&quot;zh_CN&quot;,
nickName:&quot;3&quot;,
province:&quot;4&quot;}
var openid = {openId:'5',session_key:'6'}
</code></pre>
<p>用Object.assign()合并</p>
<h2><strong>12，go get <a href="http://github.com/rixingyike/sim.go">github.com/rixingyike/sim.go</a> 一直执行不成功？</strong></h2>
<p>出现“unrecognized import path '<a href="http://golang.org/x/net/contxt">golang.org/x/net/contxt</a>'”的错误</p>
<p>​    <img src="./assets/22245.png" alt="0"></p>
<p>在这篇群公告文章（/posts/2018/04.html）中讲了。</p>
<p>​    <img src="./assets/22250.png" alt="0" style="zoom:33%;" /></p>
<p>要仔细阅读群公告文章，这里都是别人踩过的坑。</p>
<h2><strong>13，如何从一个小程序能跳到另一个小程序？</strong></h2>
<p>使用接口：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/api/navigateToMiniProgram.html">wx.navigateToMiniProgram(OBJECT)</a></p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[小程序从0到1：1月9日群问题集锦]]></title>
            <link>https://yishulun.com/./src/posts/2018/01.html</link>
            <guid>https://yishulun.com/./src/posts/2018/01.html</guid>
            <pubDate>Tue, 09 Jan 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>小程序从0到1：1月9日群问题集锦</h1>
<p>目录</p>
<p>[TOC]</p>
<h2>1，如体在群内提问？</h2>
<p>可以参考一下在stackoverflow或github上提问的方法，一次把问题讲明白，用文字说明+截图的方式。目前在学习哪一章，遇到了什么问题，把运行截图贴出来。</p>
<h2>2，读者：“我用书上的方法为什么没有找到调试域名”？</h2>
<p><img src="./assets/22072.jpeg" alt="0"></p>
<p>可能新版本不好使了，毕竟这本是一个非官方的办法。</p>
<h2>3，读者：“go env 之类没问题，但是go get sim.go类库回车没反应..”</h2>
<img src="./assets/22079.jpeg" alt="0" style="zoom: 50%;" />
<p>这不叫没反应。</p>
<p>这位读者还是没仔细读文档，get是go语言的指令，如果运行出错，它会直接提示。这种情况，可能是网络被墙了，一直在请求中。按照群公告文档1的步骤做，里面有免翻墙安装google官方类库的方法。</p>
<h2>4，能不能加作者微信？</h2>
<p>可以加微信。</p>
<h2>5，读者：“ retrieveData函数放在哪个页面呢”</h2>
<p>微信开发者工具有全局搜索功能，选择菜单“编辑”-&gt;&quot;全局搜索&quot;</p>
<h2>6，读者：“豆豆电影项目最后只能在调试环境下运行，由于审核无法通过而无法真正上线运行，是这样嘛”</h2>
<p>需要有备案过的服务器加域名。（读者@杜创）</p>
<h2>7，“请问下，这个电子书有离线版本的吗？能不能下载下来看？”</h2>
<p>找到了告诉我，我举报盗版。</p>
<h2>8，在界面上绑定的值，如果设置默认值？</h2>
<p>缺少默认值的错误表现</p>
<img src="./assets/22120.png" alt="0" style="zoom:50%;" />
<p>例如weather.today.type：</p>
<p><img src="./assets/22100.jpeg" alt="0"></p>
<h2>9，读者“这都是些什么基础的人啊，之前还有人模板字符串不知道，本来还以为可以交流的..”</h2>
<p>术道有专攻，每个人的基础不一样，要尊重每一个人，求同存异。</p>
<h2>10，读者“我完全是按照书上来的啊，检查了几遍了，为什么还有错？”</h2>
<img src="./assets/22110.jpeg" alt="0" style="zoom: 50%;" />
<p>拼写不认真，80%的错误都是由于拼写不认真。例如，这里面的Style的首字母大写了，再如absolute写成abosolute了。写程序错一个字符都不行。</p>
<h2>11，想让134横排显示怎么弄，设置什么属性？</h2>
<p><img src="./assets/22124.jpeg" alt="0"></p>
<p>查flex布局相关。</p>
<h2>12，图片为何挤到了一起？</h2>
<img src="./assets/22128.jpeg" alt="0" style="zoom:50%;" />
<p>9.2版本的iPhone plus会出现以上问题。升级iOS固件版本，解决。</p>
<h2>13，读者“style中的最后一个分号可加可不加是吗？”</h2>
<img src="./assets/22135.jpeg" alt="0" style="zoom:50%;" />
<p>对。</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[十个Flex/Air疑难杂症及解决方案简略]]></title>
            <link>https://yishulun.com/./src/posts/2010/02.html</link>
            <guid>https://yishulun.com/./src/posts/2010/02.html</guid>
            <pubDate>Tue, 01 Jun 2010 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>十个Flex/Air疑难杂症及解决方案简略</h1>
<p>最近去一家台企，对方给我出了十道“难道”：</p>
<ol>
<li>在TileList中如果選擇檔過多，會出現捲軸，當拖動捲軸時，渲染的進度條會出現花屏現象；</li>
</ol>
<p>简体：在TileList中如果选择档过多，会出现卷轴，当拖动卷轴时，渲染的进度条会出现花屏现象；電子白板中，控制權轉移；</p>
<ol start="2">
<li>
<p>简体：电子白板中，控制权转移；電子白板中，畫面同步；</p>
</li>
<li>
<p>简体：电子白板中，画面同步；電子白板中，錄影；</p>
</li>
<li>
<p>简体：电子白板中，录影；FLASH置頂問題；</p>
</li>
<li>
<p>简体：FLASH的置顶问题;聊天表情無法复制粘贴，由于聊天表情是动态文本，所以添加到textflow中的是一个sprite对象；</p>
</li>
<li>
<p>简体：聊天表情無法复制粘贴，由于聊天表情是动态文本，所以添加到textflow中的是一个sprite对象；老板模式，当系统焦点离开air程序后，无法检测到系统的key_down事件；</p>
</li>
<li>
<p>简体：老板模式，当系统焦点离开air程序后，无法检测到系统的key_down事件；Air注册表操作(登陆启动look程序)；</p>
</li>
<li>
<p>简体：Air注册表操作(登陆启动look程序)；在1.5的air运行时环境下，中文不能输入问题，因为客户端可能已经安装1.5的运行时，在网页安装中只能检测客户端是否安装了运行时，却无法检测到版本信息或者更新运行时；</p>
</li>
<li>
<p>简体：在1.5的air运行时环境下，中文不能输入问题，因为客户端可能已经安装1.5的运行时，在网页安装中只能检测客户端是否安装了运行时，却无法检测到版本信息或者更新运行时隐藏window边框后，鼠标在拖动窗口边界改变窗口大小时，不能设置系统光标样式。</p>
</li>
<li>
<p>简体：隐藏window边框后，鼠标在拖动窗口边界改变窗口大小时，不能设置系统光标样式</p>
</li>
</ol>
<blockquote>
<p>PS：一种语言在发音上有几十种不同的方言风格，在书写上竟然也有两种截然不同的风格，不止何时可以统一。</p>
</blockquote>
<p><strong>杂症病因及解决方案简略：</strong></p>
<h2>1，ITEMRENDERER的花屏问题</h2>
<p>并非TileList有这个问题，在Flex3内，DataGrid，List，Tree等控件如果使用不当，均存在这个问题;在先前的fl组件包内的TileList组件也有类似阴影。根本原因在于，使用ItemRenderer的大数据控件，其在渲染时，并不会一次创建所有数据列/行的显示对象(ItemRenderer)，它仅会创建在屏幕上可见的数据列/行，并且重复利用这些显示对象，以提交运行时效率。</p>
<p>可以做这样一种代码实验，以帮助人们理解这种机制：在一个TileList控件内，它本身有滚动条，它的ItemRenderer也使其有滚动条，在多屏数据的情况下，任意滚动一个ItemRenderer的滚动条，然后滚动TileList的滚动条到另一屏，你会发现，虽然数据已经变了，你从未滚动过这个数据，但它与你先前滚动过的那个数据具有相同的滚动位置。</p>
<p>从严格意义上讲，这并不能算是Adobe的bug，因为如果你严格按照Adobe的官方说明使用，多数情况下，是不会出现的，因此这个bug的复现也颇具难度。从Flex SDk 3.5开始，Adobe Flex团队，对所有基于ItemRenderer实现的数据控件针对开发者遇到的问题进行了改良，优化了SDK内部控件实现方法，并且添加了一个offscreenExtraRowsOrColumns属性，该属性意为非显示区域的行或列数，用于帮助开发者在特定情况下遇到的花屏问题。</p>
<p>如果遇到这个问题，如果解决(方案按优先级自上向下排列)：</p>
<h3>1) 修改策划</h3>
<p>显示大数据时，传统滚动条是一个糟糕的设计，因为人的眼晴对于大量的，重复结构的数据，很难定位上次查看的位置，多数人都是边察看边用指在屏幕上做标记。此种情况下，</p>
<ul>
<li>
<p>a)要么不使用滚动条，使用翻页，用户每次翻页后，重新取数据、向数据控件赋值，在这种情况下，DataGrid，TileList等均不会出现花屏问题，因为压根儿就不会有滚动，但在此时，使用Repeater效率更高。</p>
</li>
<li>
<p>b)要么设计一种粗粒度滚动条，如下图示意：</p>
</li>
</ul>
<p>在这种粗粒度滚动中，每一个点相关于翻页设计中的一页，用户拖动时还相当有手感，相对传统滚动条要好许多，这种设计在许多产品中都已经开始使用。</p>
<h3>2）在更新DataProvider时手动刷新控件视图</h3>
<p>每次当data有变化，均手动再次设置一次ItemRenderer，大意如下：</p>
<pre><code class="language-js">list.itemRenderer = new ClassFactory(YourItemRenderer);
</code></pre>
<p>注：在Gumbo中，如果使用Bindable绑定数据，FB在编译时已经做了代码优化。所以，多数时候，按照官方方法可以避免很多问题。</p>
<h3>3）使用offscreenExtraRowsOrColumns属性调整</h3>
<p>这是最BT的方案，让人感觉是Adobe自己用算法难已处理了，所以请用户告诉控件目前有多少数据列/行在显示区外。具体用法请参照livedoc说明。</p>
<h2>2-4，电子白板问题简略</h2>
<p>在白板开发中，控制权转移，画面同步，录影属于基本功能点。在技术技巧上，录影使用ImageSnapshot取得数据，剩下的便是系统架构师的事情。白板若要做好，方方面面必须设计好，特别是多人同时在线应用。</p>
<p>最基本的白板实现方案是基于ShareObject，但这种实现是demo级的，既浪费资源性能又低，比较合理的设计，作者认为应该是这样：</p>
<ul>
<li>
<p>1）控制权转移实则是多人数据同步，数据同步不要使用SO，当控制权变化时，由Server处理并向Client广播，如果在同一时间内白板只充许有一人控制，此时仅需向二人广播，如果其它人也需要知道当前人控权者是谁，通过另外统一的状态广播实现。</p>
</li>
<li>
<p>2）画面同步必须设计出二种机制，一种为指令绘制型，另一种为图像同步型。对于后来进入观看白板的人用户，它第一次需要向server请求当前最新的白板画面，server选择一个最可靠的client的白板数据发给新来者，或者使用p2p技术直接由client端发送。指令绘制型用于在活动用户之间更新白板数据、动作。指令需自行设计，这种设计可以轻松实现白板重绘。</p>
</li>
<li>
<p>3）录影在这里有两种实现，一种为ImageSnapshot，另一种为指令重绘型。</p>
</li>
</ul>
<h2>5，FLASH的置顶问题</h2>
<p>默认情况下，在网页中swf对象之上放置不了浮动层，解决方案是修改FlashVars属性值，把wmode修改为opaque，同时对照其它对象，排列z-index。</p>
<h2>6，聊天表情無法复制粘贴，由于聊天表情是动态文本，所以添加到TEXTFLOW中的是一个SPRITE对象</h2>
<p>这个问题没有一步到位的方案，属于架构师考虑的设计问题。自定义一种输入框，自定义一套emoticon标签，每一个表情用一个自定义标签标识，监听输入框的copy与paste事件，送入剪辑板的数据仅包含emoticon标签，而不是图像数据，在paste时进行解析、替换。</p>
<h2>7，老板模式，当系统焦点离开AIR程序后，无法检测到系统的KEY_DOWN事件</h2>
<p>系统焦点离开AIR后，即使在AIR中有KEY_DOWN事情监听也无济于事。解决方案是，rumtime升级到AIR 2.0，在AIR程序启动时，同时启动一个C++ native progress，当AIR程序最小化至系统托盘后，由C++程序负责监听系统按键，以此实现AIR程度快捷键呼出。</p>
<h2>8，AIR注册表操作(登陆启动LOOK程序)</h2>
<p>Air直接写不了，解决方案有两种方向：</p>
<ul>
<li>1）与问题7同，使用nvtive progress写注册表</li>
<li>2）不使用AIR，使用替换解决方案Flex4U</li>
</ul>
<h2>9，在1.5的AIR运行时环境下，中文不能输入问题</h2>
<p>因为客户端可能已经安装1.5的运行时，在网页安装中只能检测客户端是否安装了运行时，却无法检测到版本信息或者更新运行时</p>
<p>这里面有二个问题，第一个，对于必须要求rumtime为2.0的air程序，在编译时指定，强制用户升级。<br>
第二个，在网页中安装air，如何知道用户的air rumtime版本？</p>
<p>Adobe的air网页在线安装是通过这个swf实现的：</p>
<p><a href="http://airdownload.adobe.com/air/browserapi/air.swf">http://airdownload.adobe.com/air/browserapi/air.swf</a></p>
<p>下载，反编译后，里面使用一个叫做ProductManager的类进行客户端环境的签别，验证。一共有两个类文件：<a href="http://AIR.xn--asAIRLCEndpoint-gl3x.as">AIR.as与AIRLCEndpoint.as</a>。</p>
<p>从原理上讲，可以hack反编译之后的源码，重新编译为自已的air.swf，然后自定义bridge网页安装实现。</p>
<h2>10，隐藏WINDOW边框后，鼠标在拖动窗口边界改变窗口大小时，不能设置系统光标样式</h2>
<p>这个问题不复杂。如果不使用系统镶边，自定义光标显示对象，添加进显示列表，并添加事情监听实现缩放与拖动逻辑。在livedoc中官方曾见有示例，有兴趣的朋友可以查一查。</p>
<p>2010年6月</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[命名空间：如何控制未知方法的调用]]></title>
            <link>https://yishulun.com/./src/posts/2010/01.html</link>
            <guid>https://yishulun.com/./src/posts/2010/01.html</guid>
            <pubDate>Sat, 01 May 2010 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>命名空间：如何控制未知方法的调用</h1>
<p>命名空间对于程序员来讲，应当不会陌生，几乎每写一行代码，就要用到一止一个命名空间。AS3默认大约打开了6个命名空间。</p>
<h2>1，AS3提供的常用的7个命名空间</h2>
<p>internal,private,protected,public,static,as3，前5个命名空间作为类属性访问控制说明，在AS3中 是默认打开的。最后一个命名空间as3，默认也是被打开的，一般很少显式用到它。flash_proxy命名空间在控制动态方法调用时很有用，默认它是关 闭的。</p>
<p>internal作为默认的命名空间，当程序员未显式使用访问控制说明时，它即被默认。</p>
<h2>2，如何继承Proxy实现匿名方法调用的控制</h2>
<pre><code class="language-js">package
{
  import flash.display.Sprite;
  /**
   * @author LIYI &lt;http://yishulun.com/&gt;
   * Email: 9830131@qq.com
   */
  public class ProxyTest extends Sprite {
    public function ProxyTest() {
      super();
      var obj :MyClass = new MyClass();
      trace( obj.hello('sban') );
      // output: hello,sban
    }
  }
}
import flash.utils.Proxy;
import flash.utils.flash_proxy;

class MyClass extends Proxy {
  use namespace flash_proxy;
	override flash_proxy function callProperty(name:*, ...parameters):* {
    if ((name as QName).localName == 'hello') {
        return &quot;hello,&quot; + parameters[0];
    }
    return null;
	}
}
</code></pre>
<p>上例代码演示了如何标题问题。需要指出，如果使用FB编译，需要反选&quot;启用严格类型检查&quot;，否则编译不过。</p>
<h2>3，如何自定义与使用命名空间</h2>
<p>在单独一个文件中定义，一般位于*.core子包中：</p>
<pre><code class="language-js">package sban.as3Expert.core {
    public namespace as3internal = &quot;https://yishulun.com/as3internal/2008&quot;;
}
</code></pre>
<p>namespace是FP内部一个特殊的基元类型，它有一个URI值，如果程序员在定义时不指定，编译器将随意分配一个，尽管如此，你也不要让编译器帮你指定，因为在多数情况下你需要明确知道你定义的命名空间是什么。</p>
<p>namespace可以理解为值类型，只要URI值相同，便是相同的namespace。</p>
<p>使用自定义的namespace之前，先引入，然后使用use namespace关键字：</p>
<pre><code class="language-js">import sban.as3Expert.core.as3internal;
use namespace as3internal;
</code></pre>
<h2>4，包是什么？</h2>
<p>在AS2中，包路径并不是以package单独定义的，它位于Class Name之前，可以理解为类名称的一部分，如下：</p>
<pre><code class="language-js">class flash.display.BitmapData {}
</code></pre>
<p>在AS3中，包路径虽然以package关键字单独定义，但也可以把它理解为类名称的一部分，package与命名空间没有任何关系。AS3使用package定义包路径，与在AS2中使用class定义prototype继承机制的类对象一样，仅是语法甜头。</p>
<h2>5，命名空间的无处不在</h2>
<p>在AS3中，名字并不是唯一的标识符。在AS3中，name的含义往往包括两个部分：命名空间与名称标识。</p>
<pre><code class="language-js">public var s : String;
</code></pre>
<p>对于上面这例简短的代码，它已经包括两个命名空间，这两个命名空间含于两个QName中。QName是FP中内部名称的一种，在小标题2中，我们可以看到它。一个QName包括两个值，一个localName，是代码字面值，另一个是命名空间的uri值。</p>
<p>在上例代码中，包括一个命名空间为public、localName为s的QName，及一个命名空间为public、localName为String的QName。</p>
<p>2010年5月</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[动态语言的基石之函数闭包]]></title>
            <link>https://yishulun.com/./src/posts/2008/01.html</link>
            <guid>https://yishulun.com/./src/posts/2008/01.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>动态语言的基石之函数闭包</h1>
<p>闭包(Closure)是函数(或方法)及其执行环境的组合体，它不仅包括函数(或方法)本身，也包括函数(或方法)运行时的上下文词汇环境。闭包是所有动态语言的基石，闭包实现了函数(或方法)可以作为参数传递给函数(或方法)。</p>
<h2>1，用一个代码实验例示闭包概念</h2>
<p>在AS3中，共种三种闭包：</p>
<p>1）函数闭包(Function Closure)</p>
<p>2）方法闭包(Method Closure)</p>
<p>3）类闭包(Class Closure)</p>
<pre><code class="language-js">public class Closure extends Sprite {
  public function Closure() {
   super();
   init();
  }
	private var author :String = &quot;sban&quot;;
	private var onMouseClick2 :Function = function(e :MouseEvent) : void {
		trace(&quot;author:&quot; + author, &quot;this:&quot; + this);//author:undefined this:[object global]
	};
	private function init() :void {
		var onMouseClick1 : Function = function(e :MouseEvent) : void {
			trace(&quot;author:&quot; + author, &quot;this:&quot; + this);//author:sban this:[object global]
		};
		this.stage.addEventListener(MouseEvent.CLICK, onMouseClick2);
	}
	private function onMouseClick(e :MouseEvent) :void {
		trace(&quot;author:&quot; + author, &quot;this:&quot; + this);//author:sban this:[object Closure]
	}
}
</code></pre>
<p>在上例代码中，分别以onMouseClick，onMouseClick1，onMouseClick2为listener向stage添加click事件监听，trace结果如代码中注释。其中，onMouseClick是方法闭包，onMouseClick1与onMouseClick2是函数闭包。这里有一个问题，为什么在onMouseClick2中author的输出结果是undefined？</p>
<h3>2，三类闭包的区分</h3>
<p>在AS3中，任何一个函数(或方法)调用，至少会有一个this参数，这几乎是所有动态语言一惯的规则，不同的是，有的语言对程序员是可见的，如Python，有的则不可见，如AS3。</p>
<p><strong>1) 方法闭包</strong></p>
<p>所有类实例的方法，作为参数传递时，均是方法闭包，隐匿的第一个this参数永远是类实例本身，如上例代码中的onMouseClick便是方法闭包，所以它的this输出为[object Closure]。</p>
<p><strong>2) 函数闭包</strong></p>
<p>所有匿名方法(包括局部变量方法，类变量方法，见上)，全局方法(包括位于根包下的全局方法，位于子包下的全局方法，见下)均是函数闭包，所有函数闭包的第一个参数如果是null，将被默认替换为Global对象，所以我们看到的输出均是[object global] 。</p>
<pre><code class="language-js">package {
  import flash.events.MouseEvent;
  function onMouseClick3(e :MouseEvent) :void {
    trace(&quot;this:&quot; + this);//this:[object global]
  }
}
package sban.as3Expert {
  import flash.events.MouseEvent;
  public function onMouseClick4(e :MouseEvent) {
    trace(&quot;this:&quot; + this);//this:[object global]
  }
}
</code></pre>
<p>对于位于子包下的函数，可以这样直接使用：</p>
<pre><code class="language-js">this.stage.addEventListener(MouseEvent.CLICK, sban.as3Expert.onMouseClick4);
</code></pre>
<p><strong>3）类闭包</strong></p>
<p>这是三类闭包中最简单的一种，也是最容易区分的一种，可能也是价值最低的一种，貌似根本不应该归为闭包类别。在AS3中，所有显式对象类型转换均是类闭包，如下：</p>
<pre><code class="language-js">// if obj is Closure which type anotation is Object
var obj1 :Closure = Closure(obj);
</code></pre>
<p>Closure在这里不是操作符，也不是别的什么东西，在这里应该把它理解为一个特殊的方法。这个方法第一个参数仍然为this，第二个参数是将被作类型转换的对象，在上例代码中为obj。</p>
<h3>3，改变函数闭包的this参数的一种情况</h3>
<p>在函数闭包中，this参数(null)通常被默默置换为global对象，在某些情况下，程序员可以传递真实的this参数进去，而不是null，从而避免被替换为global对象。</p>
<p>在Array的forEach, every, map, some, filter这些API中，第一个参数为函数对象，第二个参数为第一个参数的this对象，当程序员指定第二个参数时，便可以在第一个函数内访问this上下文环境的变量，如果不指定，便不能再其内使用this。</p>
<pre><code class="language-js">public function ArrayForEachThis() {
  super();
  var arr :Array = [1,2,3];
  arr.forEach( function (item :int,index :int=-1,arr :Array = null) :void {
     trace(item, this.author)
   }
   //,this
  );
}
private var author :String = &quot;sban&quot;;
</code></pre>
<p>编码规范：在使用Array的forEach, every, map, some, filter这些API时，必须在第二个参数位传递this进去。</p>
<h3>4，为什么在onMouseClick2中author的输出是undefined？</h3>
<p>所有AS3程序员都应当知道，在AS3运行时，有一个作用域链，该作用域链自global始，在运行时变量首先从最近的链点查找，如果未找到，再向上查找，直到找到或到达global链点。</p>
<p>onMouseClick2函数的运行时作用域链为：</p>
<pre><code>onMouseClick2闭包-&gt;global
</code></pre>
<p>在这个链条内，根本不存在author变量，所以onMouseClick2的输出为undefined。</p>
<p>而onMouseClick1的作用域链为：</p>
<pre><code>onMouseClick1-&gt;init-&gt;Closure-&gt;global
</code></pre>
<p>onMouseClick的作用域链为：</p>
<pre><code>onMouseClick-&gt;Closure-&gt;global
</code></pre>
<p>这两个作用域链均包括author变量，所以onMouseClick1与onMouseClick均不会输出undefined。</p>
<p>2008年5日</p>
<blockquote>
<p>2021更新：AS3与js同属于ECMAScript语言，按理说在闭包概念上也应该是一致的。但从上文来说，AS3的闭包概念更宏大一些，貌似把类、方法、匿名函数都包括进去了。在js中，所谓闭包就是一个函数+不属于这个函数但被这个函数用到的上下文环境变量，两者绑在一起，闭合在一起，可以在程序中像一个独立的包裹一样传来传去。这篇小文是以前写AS3代码写的，关于三个闭包的分类叫法，并非我独创的，我记录当时Adobe文档或社区里也是这么分类的。俱往矣。</p>
</blockquote>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[像Ruby一样简易行码：使用Prototype扩展原生对象]]></title>
            <link>https://yishulun.com/./src/posts/2008/02.html</link>
            <guid>https://yishulun.com/./src/posts/2008/02.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>像Ruby一样简易行码：使用Prototype扩展原生对象</h1>
<p>AS3是基于ECMAScript标准的语言，Adobe团队在遵从此标准的同时，使其向Java靠拢具有Class-Base的特征，因此，AS3是一门很奇特的语言，它既像Javascript，又像Java（Java与Javascript是两门完全不同的语言）。</p>
<h2>1，Ruby的collect方法</h2>
<p>Ruiby的行码简易，让很多程序员爱不释手。</p>
<pre><code class="language-ruby">#!/usr/bin/ruby
puts [1,2,3,4,5,6].collect{|x| 10*x}
</code></pre>
<p>上例Ruby代码把数组中的每一个元素的值乘以10，然后打印结果。</p>
<pre><code class="language-js">10
20
30
40
50
</code></pre>
<h2>2，在AS3中实现collect方法</h2>
<p>那么在AS3中，我们能否以类似的方法（collect）操作数组？答案是可以的。Array本身是动态、可继承对象，我们可以继承它，自己实现collect方法；除此之外，我们还可以使用Prototype扩展Array的API。</p>
<pre><code class="language-js">Array.prototype.collect = function(f:Function) : Array {
	var r:Array = [];
	for each(var i:* in this) r.push(f(i));
	return r;
};
Array.prototype.setPropertyIsEnumerable('collect', false);
trace( [1,2,3,4,5].collect(function(i:int):int {return i*10;}) );
// output: 10,20,30,40,50
</code></pre>
<p>扩展Prototype实现collect方法，这种手段更加巧妙，但它从效率上讲，它逊于以继承的方式扩展Array。</p>
<h2>3，其它对象如何扩展</h2>
<p>因为Array是非final对象，所以除了使用扩展原型(prototype)的方法之外，我们还可以使用继承的方法扩展其本身并不支持的API。但是，在AS3中的其它基本对象，例如基元类型String、Number、int等，它们是final对象，是不可被继承的，仅能使用prototype扩展。<br>
因为Array是动态对象，所以直接在Array对象上调用collect方法，并不会引发编译报警，但对于非动态对象，如String、Number等，在调用时需转化为Object对象，例如：</p>
<pre><code class="language-js">Object(2).minutes().ago();
</code></pre>
<p>或：</p>
<pre><code class="language-js">var x:* = 2;
x.minutes().ago();
</code></pre>
<p>在AS3中，所有对象均基于Object，任何对象都具有prototype，即任何对象均可以使用原型扩展并不存在的API。</p>
<h2>4，Prototype扩展的弊端</h2>
<p>方便在企业项目开发中并不是唯一考虑的因素，效率在多数情况下比之占有更大的比重。使用Prototype扩展至少有以下三个方面的弊端：</p>
<ul>
<li>1）屏蔽了编译时强类型检查，代码错误的机率升高，项目风险增大。</li>
<li>2）某些对象不得不作额外的类型转换，虽然这种转换并无性能的损耗，但却让你多敲了几个键盘，偏离了简易行码的本宗。</li>
<li>3）基于Prototype的继承与Class-Base的继承，在AVM中是两种完全不同的实现，Adobe团队在AVM2中正是为了解决Prototype的低效，才引入了Class-Base的机制，显然这种不被官方、社区推崇的方法并不适当在企业项目中应用。</li>
</ul>
<p>扩展阅读：Modifying Core Types in ActionScript 3 Using the Prototype Object</p>
<p>2008年5月</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[AS3中的八种基元类型]]></title>
            <link>https://yishulun.com/./src/posts/2008/03.html</link>
            <guid>https://yishulun.com/./src/posts/2008/03.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>AS3中的八种基元类型</h1>
<h2>一，八种基元类型</h2>
<p>何谓基元类型？即是一门语言中最基本基本的数据类型，其它数据类型均是以此为基础定义的，并且可以作为变量注释类型或函数返回类型。在AS3中，共有八种基元类型：</p>
<p>[此有图，但已被岁月冲走]</p>
<p>1）Boolean</p>
<p>布尔类型，仅有true与false两个值。默认值为false。特殊值NaN,undefined,null,字符串空值(”),0转换为Boolean后均为false。</p>
<p>2）Number</p>
<p>默认值为NaN。Number为64位的浮点数值类型，按IEEE-754标准设计。在IEEE-754标准中，一个符号位，11个指数位，52位有效数字位。Number仅有52位有效数位，为什么可以表示最大为253的精度呢？</p>
<p>3）uint</p>
<p>默认值为0。unit表示32位的无符号整数。uint的正数范围比int大，但它在多数场合并不适合代替int。</p>
<p>4）int</p>
<p>默认值也是0。int应该是AS3中使用最广泛的数值类型。</p>
<p>5）String</p>
<p>默认值为null。C#中有一个isNullOrEmpty方法，在AS3中，字符串null与空值，转换为Boolean，均是false。</p>
<p>6）*(任意类型)</p>
<p>它有一个特殊的值，undefined。在变量类型注释或函数返回注释中，使用*表示，它可以是任意子实际类型。</p>
<p>7）Object</p>
<p>在AS3中，一切皆是Object，所有Flash Player定义的，AS3中定义的对象均继承于它。默认值为null。</p>
<p>8）void(无类型)</p>
<p>Adobe官方在《flash as3 programming》中对此类型有如下描述：</p>
<blockquote>
<p>void 数据类型仅包含一个值：undefined。</p>
</blockquote>
<p>这个描述是不恰切的，undefined作为AS3语言中一个特殊的值，是所有原本要定义却未定义的变量的默认值，而不是void类型的默认值。void作为唯一一个仅能作为函数返回类型注释的基元类型，既然表示‘无’，便应该没有任何值。</p>
<p>void仅能作为函数返回类型注释，这使它位列八种基元类型的理由不是那么充分，但除此之外，我们不知道还能把它归到哪一类别里。</p>
<h2>二，Number与int, uint的性能对比</h2>
<p>我辈非Adobe官方，仅能使用实验的方法。为了测试三个数值类型的运算性能，<a href="https://yishulun.com/">作者</a> 设计了这样一个代码实验：</p>
<pre><code class="language-js">public function IntegerTest() {
	super();

	var t1:Number = new Date().getTime();
	for (var j:int=0; j&lt;100000000; j++) {
		//
	}
	var t2:Number = new Date().getTime();
	trace(&quot;Number:&quot;, t2 - t1);//1373

	t1 = new Date().getTime();
	for (var k:int=0; k&lt;100000000; k++) {
		//
	}
	t2 = new Date().getTime();
	trace(&quot;int:&quot;, t2 - t1);//1297

	t1 = new Date().getTime();
	for (var n:uint=0; n&lt;100000000; n++) {
		//
	}
	t2 = new Date().getTime();
	trace(&quot;uint:&quot;, t2 - t1);//2624
}
</code></pre>
<p>这个代码实验，分别使用Number，int，uint进行一亿次的递增与大小判断，实验结果表明，int的效率最高，Number与之相差无几，uint的效率最低，几乎比int、Number慢两倍左右。</p>
<p>但是这个实验的结果是值得怀疑的，因为AS3的编译器有可能对三个作用类似的for作了优化。使用SWFScan扫描swf文件，反编译出来的源码为：</p>
<pre><code class="language-js">public function IntegerTest() {
	super();
	var loc0:* = getTime();
	var loc1:* = 0;
	while(loc1 &lt; 100000000)
	{
	    loc1 = loc1 + 1;
	}
	var loc2:* = getTime();
	loc0 = getTime();
	var loc3:* = 0;
	while(loc3 &lt; 100000000)
	{
	    loc3 = loc3 + 1;
	}
	loc2 = getTime();
	loc0 = getTime();
	var loc4:* = 0;
	while(loc4 &lt; 100000000)
	{
	    loc4 = loc4 + 1;
	}
	loc2 = getTime();
	return;
}
</code></pre>
<p>从反编译出来的源码看，三个for循环的代码是一样的。当然这时候，我们假定反编译工具没有问题。</p>
<p>可能我们需要改进一下这个实验：</p>
<pre><code class="language-js">var n1 :Number = 0;
var t1:Number = new Date().getTime();
for (var j:int=0; j&lt;100000000; j++)
{
	n1 = j + 1.0 * 10 - 1.0 * 10;
}
var t2:Number = new Date().getTime();
trace(n1, &quot;Number:&quot;, t2 - t1);//99999999 Number: 17889

var n2 :int = 0;
t1 = new Date().getTime();
for (var k:int=0; k&lt;100000000; k++)
{
	n2 = k + 1 * 10 - 1 * 10;
}
t2 = new Date().getTime();
trace(n2, &quot;int:&quot;, t2 - t1);//99999999 int: 19729

var n3 :uint = 0;
t1 = new Date().getTime();
for (var n:uint=0; n&lt;100000000; n++)
{
	n3 = n + 1 * 10 - 1 * 10;
}
t2 = new Date().getTime();
trace(n3, &quot;uint:&quot;, t2 - t1);//99999999 uint: 21455
</code></pre>
<p>我修改的依据是：</p>
<p>1）针对同一个问题，用不同方法或原则，实现3个并行方案</p>
<p>2）3个方案的输出结果相同</p>
<p>从实验结果来看，Number的效率最高，int随之，uint最慢。这个结果虽然基于实验，却不能令人信服。</p>
<p>推测：在AS3中，所有内部运算均是以Number进行的，这种推测可以解释上述反编译代码相同的现象。如果推测正确的话，使用不同数值类型的效率差异是由于类型转换造成的，而不是由于本身运算造成的，因运算过程中的类型转换而耗费的CPU应该远高于运算本身，如果Adobe为了避免在运算过程中的频繁类型转换而在运算式内部默认使用Number进行运算也是完全符合逻辑的。</p>
<p>在<a href="https://yishulun.com/">作者</a>之前，已经有不少前辈做过类似的数组类型效率代码实验，有兴趣的朋友可以Google一下，但他们的实验结果却不尽相同。所以，拿Number，int与uint进行效率实验是没有意义的，因为实验本身可能存在问题，或许三条起跑线并不一致，所以也无法评定最终结果。</p>
<h2>三，数值类型运用最佳实践</h2>
<p>1）在for循环中使用int类型</p>
<p>2）定义颜色变量时，使用uint</p>
<p>3）定义枚举变量时，使用uint</p>
<p>4）动态改变显示对象的x,y属性时，使用int</p>
<p>5）在进行复杂的算术运算时，各算术因子均使用Number</p>
<p>6）尽要不用使用Number用在if中作大小，等于判断</p>
<h2>四，哪些是值类型，哪些是引用类型？</h2>
<p>在AS3中，虽然所有数据类型均继承于Object，也就是说它们均具有Object拥有的属性和方法，Boolean也不例外，但是除Object以外的所有基元类型均是值类型，当软件工作者创建一个值类型变量时，并未创建一个对象，AS3在内部把它们作为值来对待，这减少了创建对象的开销，这使基元类型的使用效率更高。</p>
<p>即使显式调用值基元类型的构造函数，如new String(&quot;liyi&quot;)、new Number(123)，也并未实际创建对象。</p>
<p>所有基元类型均是值类型。Object并不一定是引用类型，近一步判定取决于它的实际数据。Array，XML，XMLList，Function，Event，Error，Class，DisplayObject等均是引用对象。</p>
<p>在AS3中，明确哪些对象是引用类型，具有十分重要的意义，当你开发十万行代码以上的项目时，便会认同我的说法。</p>
<h2>五，变量的类型并不取决于变量类型注释</h2>
<p>在AS3中，变量类型注释是给编译器用的，它并不能决定变量的真实类型。在<a href="http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&amp;file=00000092.html">这里</a>有位英雄写了这样一则评论：</p>
<pre><code class="language-js">I've been trying to make an example that displays the difference between a shallow and deep copy. So far I haven't been able to find any difference between using the slice/concat methods and the clone function provided in this section. Can someone take a look at my code and tell me what I'm doing wrong?

//-- CLONING ARRAYS --\\ 
trace(&quot;**Cloning Arrays **&quot;);
var proto:Object = true;
var original:Array = new Array();

original = [proto];
var shallow:Array = original.slice();
var deep:Array = clone(original);
trace(&quot;\tDeep copy = &quot; + deep); // output: true 
trace(&quot;\tShallow copy = &quot; + shallow); // output: true 
trace(&quot;\n***VALUE CHANGED***&quot;);

proto = false; // object value is changed 
trace(&quot;\tDeep copy = &quot; + deep); // output: true 
trace(&quot;\tShallow copy = &quot; + shallow); // output: true &lt;-- should be false ?? 

// Clone function 
import flash.utils.ByteArray;
function clone(source:Object):* // function for deep copy {
  var myBA:ByteArray = new ByteArray();
  myBA.writeObject(source);
  myBA.position = 0;
  return(myBA.readObject());
}
maybe I'm just confused as to what deep and shallow copies are any explanations would be great thanks.
</code></pre>
<p>他使用Adobe提供的ByteArray clone方法对数组进行深拷贝，当他改变proto的值为false时，却发现shallow[0]并没有改变。在这里，proto的变量注释虽为Object，但它其实并不是Object，而是Boolean，proto的真实类型取决于它真实的值，由于他以布尔值true实例化proto，所以proto论为了Boolean类型。在AS3中，Boolean并非引用类型。</p>
<p>把这位英雄的代码稍作两处改动，如下：</p>
<pre><code class="language-js">//-- CLONING ARRAYS --\\
trace(&quot;**Cloning Arrays **&quot;);
var proto: Object = [true];
var original:Array = new Array();
original = [proto];
var shallow:Array = original.slice();
var deep:Array = clone(original);

trace(&quot;\tDeep copy = &quot; + deep); // output: true
trace(&quot;\tShallow copy = &quot; + shallow); // output: true

trace(&quot;\n***VALUE CHANGED***&quot;);
proto[0] = false; // object value is changed

trace(&quot;\tDeep copy = &quot; + deep); // output: true
trace(&quot;\tShallow copy = &quot; + shallow); // output: false
</code></pre>
<p>这样由于Array是引用类型，所以输出便如期许了。</p>
<h2>六，问题</h2>
<p>1）Number仅有52位有效数位，为什么可以表示最大为253的精度呢？</p>
<p>2）值基元类型如Number，String等，既然是值，为什么又有Object的方法呢？在AVM内部是如何实现的？</p>
<p>3）为什么定义颜色值使用uint，而不使用int或Number？</p>
<p>4）为什么不能使用Number动态改变显示对象的坐标？</p>
<p>2008年5月</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[AS3中的一些基本定义，Function与Method的区别]]></title>
            <link>https://yishulun.com/./src/posts/2008/04.html</link>
            <guid>https://yishulun.com/./src/posts/2008/04.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>AS3中的一些基本定义，Function与Method的区别</h1>
<p>Adobe在官方英文文档中，并未专意对一些基本作区别说明；多数自动翻译或中文翻译，又存在翻译不当之处，古人有云，差之毫厘，缪以千里。且先试问一句，Function与Method有何区别？</p>
<p>Function与Method翻译成中文，不知如何翻译，使用英文更好。function在AS3中，是定义函数的关键字，但它定义的不一定是Function，也可能是Method。</p>
<h2>1，Method与Function的区别</h2>
<p>使用function关键字在Class内部显式定义的方法，称为Method，而除此之外使用function关键字定义的方法皆称为 Function。Function类似于js中的function方法。如此区分概念，有助于理解AS3的闭包（closure）概念。</p>
<h2>2，Property是什么</h2>
<p>在AS3中，Property不应该理解为类的属性，而应该理解为类的元素，包括变量，方法，setter/getter方法。从一个角度讲，在 AS3中，Class没有属性，平常所用的x,y,width,height等不应该称为&quot;属性&quot;，它们是setter/getter方法。这样理解，更 有助于理解trait对象。</p>
<h2>3，什么是类型注释(Type Annotation)？</h2>
<p>type annotation翻译为类型声明是不恰切的，type annotation仅是给编译器用的，代码量虽然增加了，换来的是性能的提升与代码的易读，这与注释的功能是类似的，翻译为类型注释更贴切。</p>
<pre><code>var s :String = &quot;sban&quot;;
</code></pre>
<p>在上例中，String即是类型注释，或变量类型注释。</p>
<pre><code>public function getWidth() : uint {
    //...
}
</code></pre>
<p>在上例中，uint即是类型注释，或返回类型注释。</p>
<p>2008年5月</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[E4X用法简要]]></title>
            <link>https://yishulun.com/./src/posts/2008/05.html</link>
            <guid>https://yishulun.com/./src/posts/2008/05.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>E4X用法简要</h1>
<p>E4X语法是AS3对ECMAScript标准最前卫的实现，也是目前所有高级编程语言中操作XML最为方便的方式之一。仅仅因为AS3实现了E4X，作为程序员至少也应该了解它一下，因为它是那样的简洁、优雅。</p>
<p>因为AS3实现的是ECMAScript 357 for XML标准（ECMAScript对XML的扩展标准），简称为E4X。自有E4X以来，AS2程序员应该忘掉以前惯用的XMLDocument、 XMLNode、XMLParser 和 XMLTag。在AS3中，操作XML仅需要记住两个类：XML与XMLList。</p>
<p><strong>主要概念：</strong></p>
<ol>
<li>
<p>元素(Element，或称为节点Node)：XML 文档中的单个项目，它被标识为开始标签和结束标签之间包含的内容（包括标签）。XML 元素可以包含文本数据或其它元素，也可以为空。</p>
</li>
<li>
<p>属性 (Attribute)：与元素关联的命名值，它以 attributename=&quot;value&quot; 格式写入到元<br>
素的开始标签中，而不是编写为嵌套在元素内的单独子元素。</p>
</li>
</ol>
<p>设有如下XML：</p>
<pre><code class="language-xml">var myXML:XML =
    &lt;order&gt;
        &lt;item id='1' author='sban'&gt;
            &lt;menuName&gt;burger&lt;/menuName&gt;
            &lt;price&gt;3.95&lt;/price&gt;                            
            &lt;title&gt;as3 expert&lt;/title&gt;
        &lt;/item&gt;
        &lt;item id='2'&gt;
            &lt;menuName&gt;fries&lt;/menuName&gt;
            &lt;price&gt;1.45&lt;/price&gt;
        &lt;/item&gt;
    &lt;/order&gt;;
</code></pre>
<p>下面以实例讲解几个主要的E4X操作方法：</p>
<h2>1，查找包括指定属性的元素列表</h2>
<pre><code class="language-js">var items :XMLList = myXML.item.(hasOwnProperty('@author'));
</code></pre>
<p>上例代码仅返回第一个item节点。</p>
<h2>2，查找指定属性的值为X的元素列表</h2>
<pre><code class="language-js">var items :XMLList = myXML.item.(@id == 1);
</code></pre>
<p>上例代码仅返回第一个item节点。</p>
<h2>3，在查找条件中使用并、或、四则运算</h2>
<pre><code class="language-js">var items :XMLList = myXML.item.(@id == 1 || @id == 2);
var items :XMLList = myXML.item.(@id == 1 &amp;&amp; @id == 2);
var items :XMLList = myXML.item.(@id &gt;= 1);
</code></pre>
<h2>4，查找含有指定节点名称的元素列表</h2>
<pre><code class="language-js"> var items :XMLList = myXML.item.(hasOwnProperty('title'));
</code></pre>
<h2>5，如果有命名空间，在读取元素时必须加命名空间前缀</h2>
<p>把用例XML修改为如下：</p>
<pre><code class="language-xml">var myXML:XML =
    &lt;s:order xmlns:s=&quot;https://yishulun.com/as3expert&quot;&gt;
      &lt;s:item id=&quot;1&quot; author=&quot;sban&quot;&gt;
        &lt;s:menuName&gt;burger&lt;/menuName&gt;
        &lt;s:price&gt;3.95&lt;/price&gt;
        &lt;s:title&gt;as3 expert&lt;/title&gt;
      &lt;/s:item&gt;
      &lt;s:item id=&quot;2&quot;&gt;
        &lt;s:menuName&gt;fries&lt;/menuName&gt;
        &lt;s:price&gt;1.45&lt;/price&gt;
      &lt;/s:item&gt;
    &lt;/s:order&gt;;
</code></pre>
<p>此时，问题1的答案便为：</p>
<pre><code class="language-js">var ns :Namespace = new Namespace(&quot;s&quot;, &quot;https://yishulun.com/as3expert&quot;);
var items :XMLList = myXML.ns::item.(hasOwnProperty('@author'));
</code></pre>
<p>其它操作与之类似。</p>
<h2>6，如何向XMLList中推入一个元素</h2>
<p>简单，使用加号：</p>
<pre><code class="language-xml">items += &lt;s:item id=&quot;3&quot; xmlns:s=&quot;https://yishulun.com/as3expert&quot;&gt;
    &lt;s:menuName&gt;gumbo&lt;/menuName&gt;
    &lt;s:price&gt;2.45&lt;/price&gt;
  &lt;/s:item&gt;;
</code></pre>
<h2>7，如何从XMLList中删除一个元素</h2>
<p>删除不能使用减号(why?)，须使用delete关键字：</p>
<pre><code>delete items.(@id == 1)[0];
delete不能作用于XMLList对象，操作对象必须是XML。
</code></pre>
<h2>8，如何在XMLList中指定位置插入XML</h2>
<p>先把XMLList包装为XML，然后使用XML的appendChild，prependChild，insertChildAfter，insertChildBefore方法实现。</p>
<h2>9，如何获取子子节点列表或属性列表</h2>
<pre><code class="language-js">var items :XMLList = myXML..ns::menuName;
var ids :XMLList = myXML..@id;
</code></pre>
<p>2008年5月</p>
<blockquote>
<p>2021更新：AS3原生支持的E4X语法，操作XML太方便了。现在跨系统数据交换基本都是使用json格式了，e4x这么好用的原生语法也很少使用了。</p>
</blockquote>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[Flash Player的垃圾内存回收机制：能否强制回收？]]></title>
            <link>https://yishulun.com/./src/posts/2008/06.html</link>
            <guid>https://yishulun.com/./src/posts/2008/06.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>Flash Player的垃圾内存回收机制：能否强制回收？</h1>
<p>在Adobe Flash Player 10中，AS3的内部垃圾回收机制是怎样的？程序员可以强制FP回收内存吗？答案是否定的，但有方法。</p>
<h3>1. 毛主席请猫吃辣椒的故事</h3>
<p>建国初期，国家正在对资本主义工商业进行社会主义改造，毛泽东问周恩来、刘少奇等，如何才能让猫吃辣椒？刘少奇说，把猫逮住，用筷子捅下去。周总理说，先把猫饿上三天，然后把辣椒裹在肉里给它吃。毛主席都不赞成这两种做法，毛主席说，把辣椒抹在猫屁股上，猫觉得辣自然就去会舔，而且还会因为这样做而兴奋不已。</p>
<h3>2. 强制垃圾内存回收的代码</h3>
<p>AS3程序员没有办法强制Flash Player进行垃圾回收，但有一种类似于毛主席请猫吃辣椒的方法可以使用。</p>
<p>MoonSpirit在天地会撰写过一篇关于强制垃圾回收的文章：[<a href="http://flash.9ria.com/viewthread.php?tid=234">as hack技术]垃圾回收机强制执行</a>。文中例证，使用LocalConnection连接非法地址，并捕获导常，可以强制进行垃圾回收。<a href="https://yishulun.com/">作者</a>在MoonSpirit的基础上，简单修改了一下代码，如下：</p>
<pre><code class="language-js">package {
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.Sprite;
	import flash.net.LocalConnection;

	/**
	 * @author LIYI https://yishulun.com/
	 * 修改自MoonSpirit的强制垃圾回收测试代码
	 */
	public class GarbageCollectionTest extends Sprite {
		private const SQR_AMOUNT : int = 10000; // 方块数量        
		private var _container_sp : Sprite;// 容器sprite
		private var _sqrList: Array;// 所有方块的引用

		// 强制垃圾回收使用的对象
		private var conn1 :LocalConnection;
		private var conn2 :LocalConnection;

		public function GarbageCollectionTest() {
			init( );
		}

		private function init( ) : void{
			_container_sp = new Sprite( );
			addChild(_container_sp);
			//initNoBitmapDataView( );// 峰值4111K，手动回收两次变为9K
			initBitmapDataView( );// 峰值14K，最小为14K，手动回收基本无变化
		}

		// 初始化 通过通常手段 显示
		private function initNoBitmapDataView( ) : void {
			layoutTenThousandSqr( );

			unLayoutTenThousandSqr( );
			_sqrList = null;
			removeChild(_container_sp);
			_container_sp = null;
		}

		// 初始化 通过BitmapData快照 显示
		private function initBitmapDataView( ) : void {
			layoutTenThousandSqr( );

			unLayoutTenThousandSqr( );
			_sqrList = null;
			removeChild(_container_sp);
			_container_sp = null;

			doClearance( );
		}

		private function layoutTenThousandSqr( ) : void {
			_sqrList = new Array( );
			for(var i : int = 0; i &lt; SQR_AMOUNT; i++){
				_sqrList.push(new Sprite());
				_sqrList[i].graphics.beginFill(0xff0000);
				_sqrList[i].graphics.drawRect(0,0,100,100);
				_sqrList[i].graphics.endFill();
				_container_sp.addChild(_sqrList[i]);
			}
		}

		// 不显示
		private function unLayoutTenThousandSqr( ) : void {
			for(var i : int = 0; i &lt; SQR_AMOUNT; i++){
				_container_sp.removeChild(_sqrList[i]);
				delete _sqrList[i];
			}
		}

		// 精髓，垃圾回收机强制调用
		private function doClearance( ) : void {
			trace(&quot;clear&quot;);
			try{
				conn1 = new LocalConnection();
				conn1.connect(&quot;liyi garbage collection 1&quot;);
				conn2 = new LocalConnection();
				conn2.connect(&quot;liyi garbage collection 1&quot;);
			}catch(e :*){}
			finally{
				conn1 = null;
				conn2 = null;
			}
		}
	}
}
</code></pre>
<p>然后呢，作者调用doClearance方法，这次无论是否手动回收，内存占用无变化，如下图所示，这说明doClearance方法已经强制了垃圾内存回收，它作用了！</p>
<p>[此处有图，但被岁月冲走了]</p>
<p>那么，为什么创建两次没用的LocalConnection可以强制回收内存呢？</p>
<h3>3. AS3垃圾内存回收机制</h3>
<p>在Flash Player初始化运行时，会向操作系统申请一大块内存，如果程序很小，有可能根本用不了这么多内存，但FP在开始时不考虑这些，大多数情况下，第一次申请的内存总是不够用的。第一次申请的内存大小，与操作系统、浏览器环境有关。</p>
<p>当Flash Player发现已经申请的内存不够用时，它会再向操作系统申请一大块内存。但在申请之前，请注意，FP会尝试进行垃圾内存回收。那么它是如何回收的呢？</p>
<p>Flash Player在内部使用<strong>懒惰式引用计数回收方案</strong>进行垃圾内存回收，<strong>懒惰式</strong>指：FP并不会一次把所有可以回收的对象全部回收，它一次仅会回收一部分，如果内存不够用，它会向操作系统申请，如果系统无内存了，它会再次回收，如果全部回收了仍不够用，Game Over!<strong>引用计数</strong>指：FP在内部给每个对象标记一个记号，当没有任何对象引用此对象时，它即是可以被回收的；如果一个容器内有许多相互关联的对象，当把这个容器从显示列表中移除，并且置为null后，它也是可以被回收的。</p>
<p>在小节2中，<a href="https://yishulun.com/">作者</a>问到为什么要手动单击两次“运行垃圾回收器”按钮，这是由于FP垃圾回收机制的<strong>懒惰</strong>性造成的。</p>
<p>在清楚了FP的内部垃圾回收机制之后，我们便可以回答，为什么创建两次没用的LocalConnection，并且连接并不存在的地址，故意抛出异常然后捕获，可以强制垃圾回收呢？因为，在AS3中LocalConnection是比较占用内存的对象，两次创建该类对象并尝试进行连接的内存开销大小足以请Flash Player重新向操作系统申请内存，而在申请之前，FP会尝试回收。原理即是这么简单，非独使用LocalConnection可以，其它较耗内存的对象也可以。</p>
<p>2008年5月</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
        <item>
            <title><![CDATA[AS3事件机制概述]]></title>
            <link>https://yishulun.com/./src/posts/2009/01.html</link>
            <guid>https://yishulun.com/./src/posts/2009/01.html</guid>
            <pubDate>Thu, 01 May 2008 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1>AS3事件机制概述</h1>
<p>目录<br>
[TOC]</p>
<p>事件机制是AS3的核心功能之一，没有充分掌握事件机制的方方面面，就不能算是精通AS3语言。</p>
<h2>1，AS3事件机制的主要成员</h2>
<ul>
<li>IEventDispatcher：事件派发对象接口，定义了添加、派发、移除、是否监听指定事件、是否触发指定事件接口</li>
<li>EventDispatcher：事件派发对象接口的实现者，用户无法撇开EventDispatcher而自行实现IEventDispatcher接口，无法直接继承</li>
<li>EventDispatcher时，必须把EventDispatcher作为实例变量。</li>
<li>Event：事件基类，所有事件类均基于此类实现</li>
</ul>
<h2>2，观察者模式</h2>
<p>AS3事件机制实现的是观察者模式。</p>
<p>IEventDispatcher充当了Subject角色，EventDispatcher相当于ConcreteSubject对象，Event相当于Observer，ConcreteSbserver相当于Event的子类。Attach相当于addEventListener，Detach相当于removeEventListener，Notify相当于dispatchEvent。Event没有Update。</p>
<h2>3，显示列表中事件流的三个阶段</h2>
<p>在一个事件的整个生命周期内，共分为三个阶段：</p>
<p>在捕获阶段与冒泡阶段均可能经过N个节点，在目标阶段仅可能有一个节点。</p>
<p>使用stopPropagation可阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。使用stopImmediatePropagation可阻止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。</p>
<p>显示列表中事件流三阶段与事件机制本身没有直接关系。在AS3显示列表中，为什么要有事件流，为什么不是直接到达目标对象？</p>
<h2>4，IEventDispatcher接口讲解</h2>
<p>AS3事件机制的精髓基本全在这个接口中。</p>
<pre><code class="language-js">addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void
</code></pre>
<p>使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</p>
<p>最常用的是前面二个参数。第三个参数标识该监听器是否会在捕获阶段被触发。第四个参数priority标识该同类事情监听器被调用的优化级。第五个参数标识该监听器是否易于被回收，默认为false，并且永远应该默认为false，如果监听器可以被回收，应该手动处理，而不是交给Flash Player。</p>
<p>对于监听同一类事件的监听器，priority高者优化被调用。在FP及Flex SDK中，priority最大不会超过200，因此，如果要设置top level的事件监听，此值应该设置在200以上。</p>
<p>在大型应用中，最好把各个层所要用到的priority分一下组，例如200-220分派给Core Level。</p>
<pre><code>removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void
// 从 EventDispatcher 对象中删除侦听器
</code></pre>
<p>如果在addEventListener时，useCapture为true，此时在removeEventListener时，useCapture参数应与之相同。EventDispatcher内部维护了两个listener集合，一个盛装useCapture为false的listener，另一个盛装为true的。</p>
<h2>5，Event类实例化讲解</h2>
<pre><code class="language-js">Event(type:String, bubbles:Boolean = false, cancelable:Boolean = false)
</code></pre>
<p>创建一个作为参数传递给事件侦听器的 Event 对象。</p>
<p>Event 类的方法可以在事件侦听器函数中使用以影响事件对象的行为。某些事件有关联的默认行为。例如，doubleClick 事件有关联的默认行为，此行为突出显示事件发生时鼠标指针下的词。通过调用 preventDefault() 方法，您的事件侦听器可以取消此行为。通过调用 stopPropogation() 或 stopImmediatePropogation() 方法，还可以使当前事件侦听器成为要处理事件的最后一个事件侦听器。</p>
<p>cancelable标识该事件是否可阻止与取消。一般FP定义的内部事件类型均不可以取消，如CANCEL，CLOSE，OPEN，ADDED等，一般IMG事件均可以取消，如CLOSING，EXITING等，凡是可以取消的事件，均有一个关联的可以取消的行为。开发者在自定义事件也应遵守这一规则。</p>
<p>开发者应当保证type在应用程序中是唯一的，bubbles用于标识事件在到达目标对象后是否仍向下传递。</p>
<p>Event对象在事情流结束之后，如果没有其它引用，即可被GC回收。当前Event需要二次派发时，使用clone方法复制事件。</p>
<h2>6，MouseEvent事件</h2>
<p>鼠标事件是FP内InactiveObject对象内在支持的事件，这个事情由InactiveObject实例化、派发，并且总是bubble等于true的。对于不需要鼠标事件的对象，应当把mouseChildren与mouseEnabled设为flase，以优化程序性能。</p>
<h2>7，Flash Player内部对事件的强力支持</h2>
<p>FP本身是多线程的，只不过目前未对开发者开放API。在FP内部，有一个线程专门用于处理事件，事件的处理总是在桢周期的前期进行，并且不会受到其它线程的影响。</p>
<p>FP是异步的，Event的派发与listener的执行并不是紧密衔接的，当你派发一个事件之后，不能指望监听这个Event的Listener马上执行。<br>
PureMVC放弃AS3内部支持的事情机制不用，自己用观察者模式实现了一套Command体系，是对FP中独立事件线程的非合理浪费。</p>
<h2>8，事件与代的概念</h2>
<p>在FP内部，从宏观上讲，总是派发一拔事件，处理一拔代码，然后再派发一拔事件，再处理一拔代码，如此反复，看起来事件具有代(generation)的概念。代与事件流有关，也与桢周期内的执行模式有关。</p>
<h2>9，为什么要有事件流三阶段？</h2>
<p>当用户在FP中单击时，宿主环境仅能告诉FP用户进行了单击行为以及单击的坐标，却并不能告诉FP到底单击了哪一个对象，哪一个MC，这是不可能的，因为是什么对象、有什么对象，只有FP自已知道。</p>
<p>在FP中，共有两种渲染模式，一种为保留模式，另一种为立即模式，无论是哪一种渲染模式，FP交给浏览器或操作系统的最终渲染内容总是一张张图片，FP像幻灯片放映一样向用户展示互动与动画。所以，当用户单击时，永远只是单击点，看得见的点，FP拿到这些点之后，在内部的显示列表结构上遍历，首先从上向下走，只要当前显示对象囊括了单击点，并且是透明的（下面还有显示对象），便一直往下走，直到目标对象，然后再原路一路向上走，这便是事件机制的三阶段。</p>
<p>由于显示对象可以是透明的，FP并不知道开发者设想的用户真正想单击的是不是目标对象，有可能是捕获阶段的对象，同样的对象也有可能想在冒泡阶段处理，为了提供更大的灵活性，FP在显示列表中实现了事件流的三步机制，数以千万开发者的实践证明它是非常有阶值的。</p>
<p>单击之外的其它鼠标事情与之类似。</p>
<h2>10，优化程序性能的第一准则</h2>
<p>及时移除不再需要的事情监听，是保证垃圾回收、优化程序性能的最浅显、最容易、最为开发者所忽视的行码准则之一。以下代码是通用的，在函数内部移除事件监听的方法：</p>
<p>e.currentTarget.removeEventListener(e.type, arguments.callee);</p>
<h2>11，停止冒泡事情的派发</h2>
<p>除了移除不必要的事情监听，停止冒泡事情的继续派发也是提高程序运行效率的常用方法之一。该方法多用于MouseEvent事情，代码为：</p>
<pre><code class="language-js">e.stopPropagation();
or
e.stopImmediatePropagation();
</code></pre>
<p>但是事情冒泡有时却是十分有用的，在某处阻止了事件冒泡，有可能因此另一处的监听无法触发，这种bug十分隐蔽。</p>
<p>2009年5月27日</p>
]]></content:encoded>
            <author>coderliyi@gmail.com (LIYI)</author>
        </item>
    </channel>
</rss>